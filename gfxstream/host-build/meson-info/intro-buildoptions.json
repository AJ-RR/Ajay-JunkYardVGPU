[
  {
    "name": "auto_features",
    "value": "auto",
    "section": "core",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Override value of all 'auto' features"
  },
  {
    "name": "backend",
    "value": "ninja",
    "section": "core",
    "machine": "any",
    "choices": [
      "ninja",
      "vs",
      "vs2010",
      "vs2012",
      "vs2013",
      "vs2015",
      "vs2017",
      "vs2019",
      "vs2022",
      "xcode",
      "none"
    ],
    "type": "combo",
    "description": "Backend to use"
  },
  {
    "name": "genvslite",
    "value": "vs2022",
    "section": "core",
    "machine": "any",
    "choices": [
      "vs2022"
    ],
    "type": "combo",
    "description": "Setup multiple buildtype-suffixed ninja-backend build directories, and a [builddir]_vs containing a Visual Studio meta-backend with multiple configurations that calls into them"
  },
  {
    "name": "buildtype",
    "value": "debug",
    "section": "core",
    "machine": "any",
    "choices": [
      "plain",
      "debug",
      "debugoptimized",
      "release",
      "minsize",
      "custom"
    ],
    "type": "combo",
    "description": "Build type to use"
  },
  {
    "name": "debug",
    "value": true,
    "section": "core",
    "machine": "any",
    "type": "boolean",
    "description": "Enable debug symbols and other information"
  },
  {
    "name": "default_library",
    "value": "shared",
    "section": "core",
    "machine": "any",
    "choices": [
      "shared",
      "static",
      "both"
    ],
    "type": "combo",
    "description": "Default library type"
  },
  {
    "name": "default_both_libraries",
    "value": "shared",
    "section": "core",
    "machine": "any",
    "choices": [
      "shared",
      "static",
      "auto"
    ],
    "type": "combo",
    "description": "Default library type for both_libraries"
  },
  {
    "name": "install_umask",
    "value": 18,
    "section": "core",
    "machine": "any",
    "type": "integer",
    "description": "Default umask to apply on permissions of installed files"
  },
  {
    "name": "layout",
    "value": "mirror",
    "section": "core",
    "machine": "any",
    "choices": [
      "mirror",
      "flat"
    ],
    "type": "combo",
    "description": "Build directory layout"
  },
  {
    "name": "optimization",
    "value": "0",
    "section": "core",
    "machine": "any",
    "choices": [
      "plain",
      "0",
      "g",
      "1",
      "2",
      "3",
      "s"
    ],
    "type": "combo",
    "description": "Optimization level"
  },
  {
    "name": "prefer_static",
    "value": false,
    "section": "core",
    "machine": "any",
    "type": "boolean",
    "description": "Whether to try static linking before shared linking"
  },
  {
    "name": "strip",
    "value": false,
    "section": "core",
    "machine": "any",
    "type": "boolean",
    "description": "Strip targets on install"
  },
  {
    "name": "unity",
    "value": "off",
    "section": "core",
    "machine": "any",
    "choices": [
      "on",
      "off",
      "subprojects"
    ],
    "type": "combo",
    "description": "Unity build"
  },
  {
    "name": "unity_size",
    "value": 4,
    "section": "core",
    "machine": "any",
    "type": "integer",
    "description": "Unity block size"
  },
  {
    "name": "warning_level",
    "value": "1",
    "section": "core",
    "machine": "any",
    "choices": [
      "0",
      "1",
      "2",
      "3",
      "everything"
    ],
    "type": "combo",
    "description": "Compiler warning level to use"
  },
  {
    "name": "werror",
    "value": false,
    "section": "core",
    "machine": "any",
    "type": "boolean",
    "description": "Treat warnings as errors"
  },
  {
    "name": "wrap_mode",
    "value": "default",
    "section": "core",
    "machine": "any",
    "choices": [
      "default",
      "nofallback",
      "nodownload",
      "forcefallback",
      "nopromote"
    ],
    "type": "combo",
    "description": "Wrap mode"
  },
  {
    "name": "force_fallback_for",
    "value": [],
    "section": "core",
    "machine": "any",
    "type": "array",
    "description": "Force fallback for those subprojects"
  },
  {
    "name": "vsenv",
    "value": false,
    "section": "core",
    "machine": "any",
    "type": "boolean",
    "description": "Activate Visual Studio environment"
  },
  {
    "name": "pkgconfig.relocatable",
    "value": false,
    "section": "core",
    "machine": "any",
    "type": "boolean",
    "description": "Generate pkgconfig files as relocatable"
  },
  {
    "name": "python.bytecompile",
    "value": 0,
    "section": "core",
    "machine": "any",
    "type": "integer",
    "description": "Whether to compile bytecode"
  },
  {
    "name": "python.install_env",
    "value": "prefix",
    "section": "core",
    "machine": "any",
    "choices": [
      "auto",
      "prefix",
      "system",
      "venv"
    ],
    "type": "combo",
    "description": "Which python environment to install to"
  },
  {
    "name": "python.platlibdir",
    "value": "",
    "section": "core",
    "machine": "any",
    "type": "string",
    "description": "Directory for site-specific, platform-specific files."
  },
  {
    "name": "python.purelibdir",
    "value": "",
    "section": "core",
    "machine": "any",
    "type": "string",
    "description": "Directory for site-specific, non-platform-specific files."
  },
  {
    "name": "python.allow_limited_api",
    "value": true,
    "section": "core",
    "machine": "any",
    "type": "boolean",
    "description": "Whether to allow use of the Python Limited API"
  },
  {
    "name": "pkg_config_path",
    "value": [],
    "section": "core",
    "machine": "host",
    "type": "array",
    "description": "List of additional paths for pkg-config to search"
  },
  {
    "name": "cmake_prefix_path",
    "value": [],
    "section": "core",
    "machine": "host",
    "type": "array",
    "description": "List of additional prefixes for cmake to search"
  },
  {
    "name": "backend_max_links",
    "value": 0,
    "section": "backend",
    "machine": "any",
    "type": "integer",
    "description": "Maximum number of linker processes to run or 0 for no limit"
  },
  {
    "name": "b_pie",
    "value": false,
    "section": "base",
    "machine": "any",
    "type": "boolean",
    "description": "Build executables as position independent"
  },
  {
    "name": "b_sanitize",
    "value": [],
    "section": "base",
    "machine": "any",
    "type": "array",
    "description": "Code sanitizer to use"
  },
  {
    "name": "b_colorout",
    "value": "always",
    "section": "base",
    "machine": "any",
    "choices": [
      "auto",
      "always",
      "never"
    ],
    "type": "combo",
    "description": "Use colored output"
  },
  {
    "name": "b_lto_mode",
    "value": "default",
    "section": "base",
    "machine": "any",
    "choices": [
      "default",
      "thin"
    ],
    "type": "combo",
    "description": "Select between different LTO modes."
  },
  {
    "name": "b_thinlto_cache",
    "value": false,
    "section": "base",
    "machine": "any",
    "type": "boolean",
    "description": "Use LLVM ThinLTO caching for faster incremental builds"
  },
  {
    "name": "b_asneeded",
    "value": true,
    "section": "base",
    "machine": "any",
    "type": "boolean",
    "description": "Use -Wl,--as-needed when linking"
  },
  {
    "name": "b_lto",
    "value": false,
    "section": "base",
    "machine": "any",
    "type": "boolean",
    "description": "Use link time optimization"
  },
  {
    "name": "b_thinlto_cache_dir",
    "value": "",
    "section": "base",
    "machine": "any",
    "type": "string",
    "description": "Directory to store ThinLTO cache objects"
  },
  {
    "name": "b_lto_threads",
    "value": 0,
    "section": "base",
    "machine": "any",
    "type": "integer",
    "description": "Use multiple threads for Link Time Optimization"
  },
  {
    "name": "b_staticpic",
    "value": true,
    "section": "base",
    "machine": "any",
    "type": "boolean",
    "description": "Build static libraries as position independent"
  },
  {
    "name": "b_pgo",
    "value": "off",
    "section": "base",
    "machine": "any",
    "choices": [
      "off",
      "generate",
      "use"
    ],
    "type": "combo",
    "description": "Use profile guided optimization"
  },
  {
    "name": "b_lundef",
    "value": true,
    "section": "base",
    "machine": "any",
    "type": "boolean",
    "description": "Use -Wl,--no-undefined when linking"
  },
  {
    "name": "b_pch",
    "value": true,
    "section": "base",
    "machine": "any",
    "type": "boolean",
    "description": "Use precompiled headers"
  },
  {
    "name": "b_ndebug",
    "value": "if-release",
    "section": "base",
    "machine": "any",
    "choices": [
      "true",
      "false",
      "if-release"
    ],
    "type": "combo",
    "description": "Disable asserts"
  },
  {
    "name": "b_coverage",
    "value": false,
    "section": "base",
    "machine": "any",
    "type": "boolean",
    "description": "Enable coverage tracking."
  },
  {
    "name": "c_args",
    "value": [],
    "section": "compiler",
    "machine": "host",
    "type": "array",
    "description": "Extra arguments passed to the c compiler"
  },
  {
    "name": "c_link_args",
    "value": [],
    "section": "compiler",
    "machine": "host",
    "type": "array",
    "description": "Extra arguments passed to the c linker"
  },
  {
    "name": "c_std",
    "value": "none",
    "section": "compiler",
    "machine": "host",
    "choices": [
      "none",
      "c89",
      "c99",
      "c11",
      "c17",
      "c18",
      "c2x",
      "c23",
      "c2y",
      "gnu89",
      "gnu99",
      "gnu11",
      "gnu17",
      "gnu18",
      "gnu2x",
      "gnu23",
      "gnu2y"
    ],
    "type": "combo",
    "description": "c language standard to use"
  },
  {
    "name": "cpp_args",
    "value": [],
    "section": "compiler",
    "machine": "host",
    "type": "array",
    "description": "Extra arguments passed to the cpp compiler"
  },
  {
    "name": "cpp_link_args",
    "value": [],
    "section": "compiler",
    "machine": "host",
    "type": "array",
    "description": "Extra arguments passed to the cpp linker"
  },
  {
    "name": "cpp_std",
    "value": "gnu++17",
    "section": "compiler",
    "machine": "host",
    "choices": [
      "none",
      "c++98",
      "c++03",
      "c++11",
      "c++14",
      "c++17",
      "c++1z",
      "c++2a",
      "c++20",
      "c++23",
      "c++26",
      "gnu++98",
      "gnu++03",
      "gnu++11",
      "gnu++14",
      "gnu++17",
      "gnu++1z",
      "gnu++2a",
      "gnu++20",
      "gnu++23",
      "gnu++26"
    ],
    "type": "combo",
    "description": "cpp language standard to use"
  },
  {
    "name": "cpp_eh",
    "value": "default",
    "section": "compiler",
    "machine": "host",
    "choices": [
      "none",
      "default",
      "a",
      "s",
      "sc"
    ],
    "type": "combo",
    "description": "C++ exception handling type."
  },
  {
    "name": "cpp_rtti",
    "value": true,
    "section": "compiler",
    "machine": "host",
    "type": "boolean",
    "description": "Enable RTTI"
  },
  {
    "name": "cpp_debugstl",
    "value": false,
    "section": "compiler",
    "machine": "host",
    "type": "boolean",
    "description": "STL debug mode"
  },
  {
    "name": "prefix",
    "value": "/usr/local",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Installation prefix"
  },
  {
    "name": "bindir",
    "value": "bin",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Executable directory"
  },
  {
    "name": "datadir",
    "value": "share",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Data file directory"
  },
  {
    "name": "includedir",
    "value": "/data/data/com.termux/files/usr/include",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Header file directory"
  },
  {
    "name": "infodir",
    "value": "share/info",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Info page directory"
  },
  {
    "name": "libdir",
    "value": "/data/data/com.termux/files/usr/lib",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Library directory"
  },
  {
    "name": "licensedir",
    "value": "",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Licenses directory"
  },
  {
    "name": "libexecdir",
    "value": "libexec",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Library executable directory"
  },
  {
    "name": "localedir",
    "value": "share/locale",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Locale data directory"
  },
  {
    "name": "localstatedir",
    "value": "/var/local",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Localstate data directory"
  },
  {
    "name": "mandir",
    "value": "share/man",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Manual page directory"
  },
  {
    "name": "sbindir",
    "value": "sbin",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "System executable directory"
  },
  {
    "name": "sharedstatedir",
    "value": "/var/local/lib",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Architecture-independent data directory"
  },
  {
    "name": "sysconfdir",
    "value": "etc",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Sysconf data directory"
  },
  {
    "name": "platforms",
    "value": [
      "auto"
    ],
    "section": "user",
    "machine": "any",
    "choices": [
      "auto",
      "x11",
      "wayland",
      "haiku",
      "android",
      "windows"
    ],
    "type": "array",
    "description": "window systems to support. If this is set to `auto`, all platforms applicable will be enabled."
  },
  {
    "name": "egl-native-platform",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "auto",
      "x11",
      "wayland",
      "haiku",
      "android",
      "windows",
      "surfaceless",
      "drm"
    ],
    "type": "combo",
    "description": "the window system EGL assumes for EGL_DEFAULT_DISPLAY"
  },
  {
    "name": "android-stub",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Build against android-stub"
  },
  {
    "name": "android-libbacktrace",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Use Android's libbacktrace"
  },
  {
    "name": "dri3",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "enable support for dri3"
  },
  {
    "name": "dri-drivers-path",
    "value": "",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "Location to install dri drivers. Default: $libdir/dri."
  },
  {
    "name": "dri-search-path",
    "value": "",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "Locations to search for dri drivers, passed as colon separated list. Default: dri-drivers-path."
  },
  {
    "name": "expat",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Controls the use of expat. Cannot be disabled if xmlconfig is enabled."
  },
  {
    "name": "gallium-drivers",
    "value": [],
    "section": "user",
    "machine": "any",
    "choices": [
      "auto",
      "kmsro",
      "radeonsi",
      "r300",
      "r600",
      "nouveau",
      "freedreno",
      "swrast",
      "v3d",
      "vc4",
      "etnaviv",
      "tegra",
      "i915",
      "svga",
      "virgl",
      "panfrost",
      "iris",
      "lima",
      "zink",
      "d3d12",
      "asahi",
      "crocus"
    ],
    "type": "array",
    "description": "List of gallium drivers to build. If this is set to auto all drivers applicable to the target OS/architecture will be built"
  },
  {
    "name": "gallium-extra-hud",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Enable HUD block/NIC I/O HUD status support"
  },
  {
    "name": "gallium-vdpau",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "enable gallium vdpau frontend."
  },
  {
    "name": "vdpau-libs-path",
    "value": "",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "path to put vdpau libraries. defaults to $libdir/vdpau."
  },
  {
    "name": "gallium-omx",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "auto",
      "disabled",
      "bellagio",
      "tizonia"
    ],
    "type": "combo",
    "description": "enable gallium omx frontend."
  },
  {
    "name": "omx-libs-path",
    "value": "",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "path to put omx libraries. defaults to omx-bellagio pkg-config pluginsdir."
  },
  {
    "name": "gallium-va",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "enable gallium va frontend."
  },
  {
    "name": "va-libs-path",
    "value": "",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "path to put va libraries. defaults to $libdir/dri."
  },
  {
    "name": "gallium-xa",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "enable gallium xa frontend."
  },
  {
    "name": "gallium-nine",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "build gallium \"nine\" Direct3D 9.x frontend."
  },
  {
    "name": "gallium-d3d10umd",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "build gallium D3D10 WDDM UMD frontend."
  },
  {
    "name": "gallium-opencl",
    "value": "disabled",
    "section": "user",
    "machine": "any",
    "choices": [
      "icd",
      "standalone",
      "disabled"
    ],
    "type": "combo",
    "description": "build gallium \"clover\" OpenCL frontend."
  },
  {
    "name": "gallium-rusticl",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "build gallium \"rusticl\" OpenCL frontend."
  },
  {
    "name": "gallium-windows-dll-name",
    "value": "libgallium_wgl",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "name of gallium megadriver DLL built for Windows. defaults to libgallium_wgl.dll to match DRI"
  },
  {
    "name": "opencl-spirv",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "build gallium \"clover\" OpenCL frontend with SPIR-V binary support."
  },
  {
    "name": "static-libclc",
    "value": [],
    "section": "user",
    "machine": "any",
    "choices": [
      "spirv",
      "spirv64",
      "all"
    ],
    "type": "array",
    "description": "Link libclc SPIR-V statically."
  },
  {
    "name": "opencl-external-clang-headers",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Use system Clang headers at runtime for OpenCL kernel compilation."
  },
  {
    "name": "d3d-drivers-path",
    "value": "",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "Location of D3D drivers. Default: $libdir/d3d"
  },
  {
    "name": "vulkan-drivers",
    "value": [
      "gfxstream-experimental"
    ],
    "section": "user",
    "machine": "any",
    "choices": [
      "auto",
      "amd",
      "broadcom",
      "freedreno",
      "intel",
      "intel_hasvk",
      "panfrost",
      "swrast",
      "virtio",
      "imagination-experimental",
      "microsoft-experimental",
      "nouveau-experimental",
      "gfxstream-experimental"
    ],
    "type": "array",
    "description": "List of vulkan drivers to build. If this is set to auto all drivers applicable to the target OS/architecture will be built"
  },
  {
    "name": "freedreno-kmds",
    "value": [
      "msm"
    ],
    "section": "user",
    "machine": "any",
    "choices": [
      "msm",
      "kgsl",
      "virtio"
    ],
    "type": "array",
    "description": "List of kernel-mode drivers to enable for freedreno gallium and vulkan driver"
  },
  {
    "name": "imagination-srv",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Enable Services backend for Imagination Technologies vulkan driver"
  },
  {
    "name": "shader-cache",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Build with on-disk shader cache support."
  },
  {
    "name": "shader-cache-default",
    "value": true,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "If set to false, the feature is only activated when environment variable MESA_SHADER_CACHE_DISABLE is set to false"
  },
  {
    "name": "shader-cache-max-size",
    "value": "",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "Default value for MESA_SHADER_CACHE_MAX_SIZE enviroment variable. If set, determines the maximum size of the on-disk cache of compiled shader programs, can be overriden by enviroment variable if needed. Should be set to a number optionally followed by ``K``, ``M``, or ``G`` to specify a size in kilobytes, megabytes, or gigabytes. By default, gigabytes will be assumed. And if unset, a maximum size of 1GB will be used."
  },
  {
    "name": "vulkan-icd-dir",
    "value": "",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "Location relative to prefix to put vulkan icds on install. Default: $datadir/vulkan/icd.d"
  },
  {
    "name": "moltenvk-dir",
    "value": "",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "Location of the MoltenVk SDK. Default: "
  },
  {
    "name": "vulkan-layers",
    "value": [],
    "section": "user",
    "machine": "any",
    "choices": [
      "device-select",
      "intel-nullhw",
      "overlay"
    ],
    "type": "array",
    "description": "List of vulkan layers to build"
  },
  {
    "name": "shared-glapi",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Whether to build a shared or static glapi. Defaults to disabled on Windows, enabled elsewhere"
  },
  {
    "name": "gles1",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Build support for OpenGL ES 1.x"
  },
  {
    "name": "gles2",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Build support for OpenGL ES 2.x and 3.x"
  },
  {
    "name": "opengl",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Build support for desktop OpenGL"
  },
  {
    "name": "gbm",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Build support for gbm platform"
  },
  {
    "name": "gbm-backends-path",
    "value": "",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "Locations to search for gbm backends, passed as colon separated list. Default: $libdir/gbm."
  },
  {
    "name": "glx",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "auto",
      "disabled",
      "dri",
      "xlib"
    ],
    "type": "combo",
    "description": "Build support for GLX platform"
  },
  {
    "name": "egl",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Build support for EGL platform"
  },
  {
    "name": "glvnd",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Enable GLVND support."
  },
  {
    "name": "microsoft-clc",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Build support for the Microsoft CLC to DXIL compiler"
  },
  {
    "name": "spirv-to-dxil",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Build support for the SPIR-V to DXIL library"
  },
  {
    "name": "glvnd-vendor-name",
    "value": "mesa",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "Vendor name string to use for glvnd libraries"
  },
  {
    "name": "glx-read-only-text",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Disable writable .text section on x86 (decreases performance)"
  },
  {
    "name": "llvm",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Build with LLVM support."
  },
  {
    "name": "shared-llvm",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Whether to link LLVM shared or statically."
  },
  {
    "name": "draw-use-llvm",
    "value": true,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Whether to use LLVM for the Gallium draw module, if LLVM is included."
  },
  {
    "name": "valgrind",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Build with valgrind support"
  },
  {
    "name": "libunwind",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Use libunwind for stack-traces"
  },
  {
    "name": "lmsensors",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Enable HUD lmsensors support."
  },
  {
    "name": "build-tests",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Build unit tests. Currently this will build *all* unit tests except the ACO tests, which may build more than expected."
  },
  {
    "name": "enable-glcpp-tests",
    "value": true,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Build glcpp unit tests. These are flaky on CI."
  },
  {
    "name": "build-aco-tests",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Build ACO tests. These require RADV and glslang but not an AMD GPU."
  },
  {
    "name": "install-intel-gpu-tests",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Build and install Intel unit tests which require the GPU. This option is for developers and the Intel CI system only."
  },
  {
    "name": "selinux",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Build an SELinux-aware Mesa.  This currently disables execmem support at runtime unless SELinux is configured with allow_execmem."
  },
  {
    "name": "execmem",
    "value": true,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Does nothing, left here for a while to avoid build breakages."
  },
  {
    "name": "osmesa",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Build OSmesa."
  },
  {
    "name": "tools",
    "value": [],
    "section": "user",
    "machine": "any",
    "choices": [
      "drm-shim",
      "etnaviv",
      "freedreno",
      "glsl",
      "intel",
      "intel-ui",
      "nir",
      "nouveau",
      "lima",
      "panfrost",
      "asahi",
      "imagination",
      "all",
      "dlclose-skip"
    ],
    "type": "array",
    "description": "List of tools to build. (Note: `intel-ui` selects `intel`)"
  },
  {
    "name": "power8",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Enable power8 optimizations."
  },
  {
    "name": "xlib-lease",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Enable VK_EXT_acquire_xlib_display."
  },
  {
    "name": "glx-direct",
    "value": true,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Enable direct rendering in GLX and EGL for DRI"
  },
  {
    "name": "egl-lib-suffix",
    "value": "",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "Suffix to append to EGL library name.  Default: none."
  },
  {
    "name": "gles-lib-suffix",
    "value": "",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "Suffix to append to GLES library names.  Default: none."
  },
  {
    "name": "platform-sdk-version",
    "value": 25,
    "section": "user",
    "machine": "any",
    "type": "integer",
    "description": "Android Platform SDK version. Default: Nougat version."
  },
  {
    "name": "allow-kcmp",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Allow using KCMP_FILE to compare file descriptions. auto = allowed everywhere except on Android"
  },
  {
    "name": "zstd",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Use ZSTD instead of ZLIB in some cases."
  },
  {
    "name": "zlib",
    "value": "enabled",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Use ZLIB to build driver. Default: enabled"
  },
  {
    "name": "sse2",
    "value": true,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "use msse2 flag for x86. Uses sse/sse2 instead of x87. Default: true"
  },
  {
    "name": "perfetto",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Enable performance analysis with Perfetto. Default: false"
  },
  {
    "name": "datasources",
    "value": [
      "auto"
    ],
    "section": "user",
    "machine": "any",
    "choices": [
      "auto",
      "panfrost",
      "intel",
      "freedreno"
    ],
    "type": "array",
    "description": "List of Perfetto datasources to build. If this is set to `auto`, datasources that can not be build are skipped. Default: [`auto`]"
  },
  {
    "name": "gpuvis",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Enable tracing markers for gpuvis. Default: false"
  },
  {
    "name": "custom-shader-replacement",
    "value": "",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "Enable a custom shader replacement mechanism. Note that enabling this option requires adding/generating a shader_replacement.h file that can be included (see shaderapi.c)."
  },
  {
    "name": "vmware-mks-stats",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Build gallium VMware/svga driver with mksGuestStats instrumentation."
  },
  {
    "name": "vulkan-beta",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Build vulkan drivers with BETA extensions enabled."
  },
  {
    "name": "intel-clc",
    "value": "disabled",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "system"
    ],
    "type": "combo",
    "description": "Build the intel-clc compiler (enables Vulkan Intel Ray Tracing on supported hardware)."
  },
  {
    "name": "video-codecs",
    "value": [],
    "section": "user",
    "machine": "any",
    "choices": [
      "vc1dec",
      "h264dec",
      "h264enc",
      "h265dec",
      "h265enc"
    ],
    "type": "array",
    "description": "List of patent encumbered codecs to build support for. Distros might want to consult their legal department before enabling these. This is used for all video APIs (vaapi, vdpau, vulkan). Non-patent encumbered codecs will be enabled by default."
  },
  {
    "name": "gallium-d3d12-video",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "build gallium d3d12 with video support."
  },
  {
    "name": "radv-build-id",
    "value": "",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "Override build id for shader cache keys (hex string). Can be extracted with readelf -x .note.gnu.build-id"
  },
  {
    "name": "min-windows-version",
    "value": 8,
    "section": "user",
    "machine": "any",
    "type": "integer",
    "description": "Minimum Windows version to support. Defaults to Windows 8."
  },
  {
    "name": "xmlconfig",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Build custom xmlconfig (driconf) support. If disabled, the default driconf file is hardcoded into Mesa. Requires expat."
  },
  {
    "name": "intel-xe-kmd",
    "value": "disabled",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Enable Intel Xe KMD support."
  },
  {
    "name": "nvk-legacy-uapi",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Build support for legacy kernel uAPI."
  },
  {
    "name": "vk-no-nir",
    "value": true,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Try to build Mesa Vulkan runtime without NIR"
  },
  {
    "name": "decoders",
    "value": [
      "auto"
    ],
    "section": "user",
    "machine": "any",
    "choices": [
      "gles",
      "vulkan",
      "magma",
      "composer",
      "auto"
    ],
    "type": "array",
    "description": "A list of supported decoders to build"
  },
  {
    "name": "log-level",
    "value": "error",
    "section": "user",
    "machine": "any",
    "choices": [
      "none",
      "info",
      "warn",
      "error"
    ],
    "type": "combo",
    "description": "The logging level of gfxstream"
  },
  {
    "name": "qnx_target",
    "value": "",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "QNX SDP target path"
  },
  {
    "name": "gfxstream-build",
    "value": "host",
    "section": "user",
    "machine": "any",
    "choices": [
      "both",
      "guest",
      "host"
    ],
    "type": "combo",
    "description": "Which portions of gfxstream to build"
  },
  {
    "name": "errorlogs",
    "value": true,
    "section": "test",
    "machine": "any",
    "type": "boolean",
    "description": "Whether to print the logs from failing tests"
  },
  {
    "name": "stdsplit",
    "value": true,
    "section": "test",
    "machine": "any",
    "type": "boolean",
    "description": "Split stdout and stderr in test logs"
  }
]