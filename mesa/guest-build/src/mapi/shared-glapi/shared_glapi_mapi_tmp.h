/* This file is automatically generated by mapi_abi.py.  Do not modify. */

#include "util/glheader.h"


#define _gloffset_COUNT 1641

#ifdef MAPI_TMP_DEFINES

#if defined(_WIN32) && defined(_WINDOWS_)
#error "Should not include <windows.h> here"
#endif

void GLAPIENTRY _dispatch_stub_NewList(GLuint list, GLenum mode);
void GLAPIENTRY _dispatch_stub_EndList(void);
void GLAPIENTRY _dispatch_stub_CallList(GLuint list);
void GLAPIENTRY _dispatch_stub_CallLists(GLsizei n, GLenum type, const GLvoid *lists);
void GLAPIENTRY _dispatch_stub_DeleteLists(GLuint list, GLsizei range);
GLuint GLAPIENTRY _dispatch_stub_GenLists(GLsizei range);
void GLAPIENTRY _dispatch_stub_ListBase(GLuint base);
void GLAPIENTRY _dispatch_stub_Begin(GLenum mode);
void GLAPIENTRY _dispatch_stub_Bitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
void GLAPIENTRY _dispatch_stub_Color3b(GLbyte red, GLbyte green, GLbyte blue);
void GLAPIENTRY _dispatch_stub_Color3bv(const GLbyte *v);
void GLAPIENTRY _dispatch_stub_Color3d(GLdouble red, GLdouble green, GLdouble blue);
void GLAPIENTRY _dispatch_stub_Color3dv(const GLdouble *v);
void GLAPIENTRY _dispatch_stub_Color3f(GLfloat red, GLfloat green, GLfloat blue);
void GLAPIENTRY _dispatch_stub_Color3fv(const GLfloat *v);
void GLAPIENTRY _dispatch_stub_Color3i(GLint red, GLint green, GLint blue);
void GLAPIENTRY _dispatch_stub_Color3iv(const GLint *v);
void GLAPIENTRY _dispatch_stub_Color3s(GLshort red, GLshort green, GLshort blue);
void GLAPIENTRY _dispatch_stub_Color3sv(const GLshort *v);
void GLAPIENTRY _dispatch_stub_Color3ub(GLubyte red, GLubyte green, GLubyte blue);
void GLAPIENTRY _dispatch_stub_Color3ubv(const GLubyte *v);
void GLAPIENTRY _dispatch_stub_Color3ui(GLuint red, GLuint green, GLuint blue);
void GLAPIENTRY _dispatch_stub_Color3uiv(const GLuint *v);
void GLAPIENTRY _dispatch_stub_Color3us(GLushort red, GLushort green, GLushort blue);
void GLAPIENTRY _dispatch_stub_Color3usv(const GLushort *v);
void GLAPIENTRY _dispatch_stub_Color4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
void GLAPIENTRY _dispatch_stub_Color4bv(const GLbyte *v);
void GLAPIENTRY _dispatch_stub_Color4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
void GLAPIENTRY _dispatch_stub_Color4dv(const GLdouble *v);
void GLAPIENTRY _dispatch_stub_Color4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void GLAPIENTRY _dispatch_stub_Color4fv(const GLfloat *v);
void GLAPIENTRY _dispatch_stub_Color4i(GLint red, GLint green, GLint blue, GLint alpha);
void GLAPIENTRY _dispatch_stub_Color4iv(const GLint *v);
void GLAPIENTRY _dispatch_stub_Color4s(GLshort red, GLshort green, GLshort blue, GLshort alpha);
void GLAPIENTRY _dispatch_stub_Color4sv(const GLshort *v);
void GLAPIENTRY _dispatch_stub_Color4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
void GLAPIENTRY _dispatch_stub_Color4ubv(const GLubyte *v);
void GLAPIENTRY _dispatch_stub_Color4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha);
void GLAPIENTRY _dispatch_stub_Color4uiv(const GLuint *v);
void GLAPIENTRY _dispatch_stub_Color4us(GLushort red, GLushort green, GLushort blue, GLushort alpha);
void GLAPIENTRY _dispatch_stub_Color4usv(const GLushort *v);
void GLAPIENTRY _dispatch_stub_EdgeFlag(GLboolean flag);
void GLAPIENTRY _dispatch_stub_EdgeFlagv(const GLboolean *flag);
void GLAPIENTRY _dispatch_stub_End(void);
void GLAPIENTRY _dispatch_stub_Indexd(GLdouble c);
void GLAPIENTRY _dispatch_stub_Indexdv(const GLdouble *c);
void GLAPIENTRY _dispatch_stub_Indexf(GLfloat c);
void GLAPIENTRY _dispatch_stub_Indexfv(const GLfloat *c);
void GLAPIENTRY _dispatch_stub_Indexi(GLint c);
void GLAPIENTRY _dispatch_stub_Indexiv(const GLint *c);
void GLAPIENTRY _dispatch_stub_Indexs(GLshort c);
void GLAPIENTRY _dispatch_stub_Indexsv(const GLshort *c);
void GLAPIENTRY _dispatch_stub_Normal3b(GLbyte nx, GLbyte ny, GLbyte nz);
void GLAPIENTRY _dispatch_stub_Normal3bv(const GLbyte *v);
void GLAPIENTRY _dispatch_stub_Normal3d(GLdouble nx, GLdouble ny, GLdouble nz);
void GLAPIENTRY _dispatch_stub_Normal3dv(const GLdouble *v);
void GLAPIENTRY _dispatch_stub_Normal3f(GLfloat nx, GLfloat ny, GLfloat nz);
void GLAPIENTRY _dispatch_stub_Normal3fv(const GLfloat *v);
void GLAPIENTRY _dispatch_stub_Normal3i(GLint nx, GLint ny, GLint nz);
void GLAPIENTRY _dispatch_stub_Normal3iv(const GLint *v);
void GLAPIENTRY _dispatch_stub_Normal3s(GLshort nx, GLshort ny, GLshort nz);
void GLAPIENTRY _dispatch_stub_Normal3sv(const GLshort *v);
void GLAPIENTRY _dispatch_stub_RasterPos2d(GLdouble x, GLdouble y);
void GLAPIENTRY _dispatch_stub_RasterPos2dv(const GLdouble *v);
void GLAPIENTRY _dispatch_stub_RasterPos2f(GLfloat x, GLfloat y);
void GLAPIENTRY _dispatch_stub_RasterPos2fv(const GLfloat *v);
void GLAPIENTRY _dispatch_stub_RasterPos2i(GLint x, GLint y);
void GLAPIENTRY _dispatch_stub_RasterPos2iv(const GLint *v);
void GLAPIENTRY _dispatch_stub_RasterPos2s(GLshort x, GLshort y);
void GLAPIENTRY _dispatch_stub_RasterPos2sv(const GLshort *v);
void GLAPIENTRY _dispatch_stub_RasterPos3d(GLdouble x, GLdouble y, GLdouble z);
void GLAPIENTRY _dispatch_stub_RasterPos3dv(const GLdouble *v);
void GLAPIENTRY _dispatch_stub_RasterPos3f(GLfloat x, GLfloat y, GLfloat z);
void GLAPIENTRY _dispatch_stub_RasterPos3fv(const GLfloat *v);
void GLAPIENTRY _dispatch_stub_RasterPos3i(GLint x, GLint y, GLint z);
void GLAPIENTRY _dispatch_stub_RasterPos3iv(const GLint *v);
void GLAPIENTRY _dispatch_stub_RasterPos3s(GLshort x, GLshort y, GLshort z);
void GLAPIENTRY _dispatch_stub_RasterPos3sv(const GLshort *v);
void GLAPIENTRY _dispatch_stub_RasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void GLAPIENTRY _dispatch_stub_RasterPos4dv(const GLdouble *v);
void GLAPIENTRY _dispatch_stub_RasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void GLAPIENTRY _dispatch_stub_RasterPos4fv(const GLfloat *v);
void GLAPIENTRY _dispatch_stub_RasterPos4i(GLint x, GLint y, GLint z, GLint w);
void GLAPIENTRY _dispatch_stub_RasterPos4iv(const GLint *v);
void GLAPIENTRY _dispatch_stub_RasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);
void GLAPIENTRY _dispatch_stub_RasterPos4sv(const GLshort *v);
void GLAPIENTRY _dispatch_stub_Rectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
void GLAPIENTRY _dispatch_stub_Rectdv(const GLdouble *v1, const GLdouble *v2);
void GLAPIENTRY _dispatch_stub_Rectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
void GLAPIENTRY _dispatch_stub_Rectfv(const GLfloat *v1, const GLfloat *v2);
void GLAPIENTRY _dispatch_stub_Recti(GLint x1, GLint y1, GLint x2, GLint y2);
void GLAPIENTRY _dispatch_stub_Rectiv(const GLint *v1, const GLint *v2);
void GLAPIENTRY _dispatch_stub_Rects(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
void GLAPIENTRY _dispatch_stub_Rectsv(const GLshort *v1, const GLshort *v2);
void GLAPIENTRY _dispatch_stub_TexCoord1d(GLdouble s);
void GLAPIENTRY _dispatch_stub_TexCoord1dv(const GLdouble *v);
void GLAPIENTRY _dispatch_stub_TexCoord1f(GLfloat s);
void GLAPIENTRY _dispatch_stub_TexCoord1fv(const GLfloat *v);
void GLAPIENTRY _dispatch_stub_TexCoord1i(GLint s);
void GLAPIENTRY _dispatch_stub_TexCoord1iv(const GLint *v);
void GLAPIENTRY _dispatch_stub_TexCoord1s(GLshort s);
void GLAPIENTRY _dispatch_stub_TexCoord1sv(const GLshort *v);
void GLAPIENTRY _dispatch_stub_TexCoord2d(GLdouble s, GLdouble t);
void GLAPIENTRY _dispatch_stub_TexCoord2dv(const GLdouble *v);
void GLAPIENTRY _dispatch_stub_TexCoord2f(GLfloat s, GLfloat t);
void GLAPIENTRY _dispatch_stub_TexCoord2fv(const GLfloat *v);
void GLAPIENTRY _dispatch_stub_TexCoord2i(GLint s, GLint t);
void GLAPIENTRY _dispatch_stub_TexCoord2iv(const GLint *v);
void GLAPIENTRY _dispatch_stub_TexCoord2s(GLshort s, GLshort t);
void GLAPIENTRY _dispatch_stub_TexCoord2sv(const GLshort *v);
void GLAPIENTRY _dispatch_stub_TexCoord3d(GLdouble s, GLdouble t, GLdouble r);
void GLAPIENTRY _dispatch_stub_TexCoord3dv(const GLdouble *v);
void GLAPIENTRY _dispatch_stub_TexCoord3f(GLfloat s, GLfloat t, GLfloat r);
void GLAPIENTRY _dispatch_stub_TexCoord3fv(const GLfloat *v);
void GLAPIENTRY _dispatch_stub_TexCoord3i(GLint s, GLint t, GLint r);
void GLAPIENTRY _dispatch_stub_TexCoord3iv(const GLint *v);
void GLAPIENTRY _dispatch_stub_TexCoord3s(GLshort s, GLshort t, GLshort r);
void GLAPIENTRY _dispatch_stub_TexCoord3sv(const GLshort *v);
void GLAPIENTRY _dispatch_stub_TexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void GLAPIENTRY _dispatch_stub_TexCoord4dv(const GLdouble *v);
void GLAPIENTRY _dispatch_stub_TexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void GLAPIENTRY _dispatch_stub_TexCoord4fv(const GLfloat *v);
void GLAPIENTRY _dispatch_stub_TexCoord4i(GLint s, GLint t, GLint r, GLint q);
void GLAPIENTRY _dispatch_stub_TexCoord4iv(const GLint *v);
void GLAPIENTRY _dispatch_stub_TexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q);
void GLAPIENTRY _dispatch_stub_TexCoord4sv(const GLshort *v);
void GLAPIENTRY _dispatch_stub_Vertex2d(GLdouble x, GLdouble y);
void GLAPIENTRY _dispatch_stub_Vertex2dv(const GLdouble *v);
void GLAPIENTRY _dispatch_stub_Vertex2f(GLfloat x, GLfloat y);
void GLAPIENTRY _dispatch_stub_Vertex2fv(const GLfloat *v);
void GLAPIENTRY _dispatch_stub_Vertex2i(GLint x, GLint y);
void GLAPIENTRY _dispatch_stub_Vertex2iv(const GLint *v);
void GLAPIENTRY _dispatch_stub_Vertex2s(GLshort x, GLshort y);
void GLAPIENTRY _dispatch_stub_Vertex2sv(const GLshort *v);
void GLAPIENTRY _dispatch_stub_Vertex3d(GLdouble x, GLdouble y, GLdouble z);
void GLAPIENTRY _dispatch_stub_Vertex3dv(const GLdouble *v);
void GLAPIENTRY _dispatch_stub_Vertex3f(GLfloat x, GLfloat y, GLfloat z);
void GLAPIENTRY _dispatch_stub_Vertex3fv(const GLfloat *v);
void GLAPIENTRY _dispatch_stub_Vertex3i(GLint x, GLint y, GLint z);
void GLAPIENTRY _dispatch_stub_Vertex3iv(const GLint *v);
void GLAPIENTRY _dispatch_stub_Vertex3s(GLshort x, GLshort y, GLshort z);
void GLAPIENTRY _dispatch_stub_Vertex3sv(const GLshort *v);
void GLAPIENTRY _dispatch_stub_Vertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void GLAPIENTRY _dispatch_stub_Vertex4dv(const GLdouble *v);
void GLAPIENTRY _dispatch_stub_Vertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void GLAPIENTRY _dispatch_stub_Vertex4fv(const GLfloat *v);
void GLAPIENTRY _dispatch_stub_Vertex4i(GLint x, GLint y, GLint z, GLint w);
void GLAPIENTRY _dispatch_stub_Vertex4iv(const GLint *v);
void GLAPIENTRY _dispatch_stub_Vertex4s(GLshort x, GLshort y, GLshort z, GLshort w);
void GLAPIENTRY _dispatch_stub_Vertex4sv(const GLshort *v);
void GLAPIENTRY _dispatch_stub_ClipPlane(GLenum plane, const GLdouble *equation);
void GLAPIENTRY _dispatch_stub_ColorMaterial(GLenum face, GLenum mode);
void GLAPIENTRY _dispatch_stub_CullFace(GLenum mode);
void GLAPIENTRY _dispatch_stub_Fogf(GLenum pname, GLfloat param);
void GLAPIENTRY _dispatch_stub_Fogfv(GLenum pname, const GLfloat *params);
void GLAPIENTRY _dispatch_stub_Fogi(GLenum pname, GLint param);
void GLAPIENTRY _dispatch_stub_Fogiv(GLenum pname, const GLint *params);
void GLAPIENTRY _dispatch_stub_FrontFace(GLenum mode);
void GLAPIENTRY _dispatch_stub_Hint(GLenum target, GLenum mode);
void GLAPIENTRY _dispatch_stub_Lightf(GLenum light, GLenum pname, GLfloat param);
void GLAPIENTRY _dispatch_stub_Lightfv(GLenum light, GLenum pname, const GLfloat *params);
void GLAPIENTRY _dispatch_stub_Lighti(GLenum light, GLenum pname, GLint param);
void GLAPIENTRY _dispatch_stub_Lightiv(GLenum light, GLenum pname, const GLint *params);
void GLAPIENTRY _dispatch_stub_LightModelf(GLenum pname, GLfloat param);
void GLAPIENTRY _dispatch_stub_LightModelfv(GLenum pname, const GLfloat *params);
void GLAPIENTRY _dispatch_stub_LightModeli(GLenum pname, GLint param);
void GLAPIENTRY _dispatch_stub_LightModeliv(GLenum pname, const GLint *params);
void GLAPIENTRY _dispatch_stub_LineStipple(GLint factor, GLushort pattern);
void GLAPIENTRY _dispatch_stub_LineWidth(GLfloat width);
void GLAPIENTRY _dispatch_stub_Materialf(GLenum face, GLenum pname, GLfloat param);
void GLAPIENTRY _dispatch_stub_Materialfv(GLenum face, GLenum pname, const GLfloat *params);
void GLAPIENTRY _dispatch_stub_Materiali(GLenum face, GLenum pname, GLint param);
void GLAPIENTRY _dispatch_stub_Materialiv(GLenum face, GLenum pname, const GLint *params);
void GLAPIENTRY _dispatch_stub_PointSize(GLfloat size);
void GLAPIENTRY _dispatch_stub_PolygonMode(GLenum face, GLenum mode);
void GLAPIENTRY _dispatch_stub_PolygonStipple(const GLubyte *mask);
void GLAPIENTRY _dispatch_stub_Scissor(GLint x, GLint y, GLsizei width, GLsizei height);
void GLAPIENTRY _dispatch_stub_ShadeModel(GLenum mode);
void GLAPIENTRY _dispatch_stub_TexParameterf(GLenum target, GLenum pname, GLfloat param);
void GLAPIENTRY _dispatch_stub_TexParameterfv(GLenum target, GLenum pname, const GLfloat *params);
void GLAPIENTRY _dispatch_stub_TexParameteri(GLenum target, GLenum pname, GLint param);
void GLAPIENTRY _dispatch_stub_TexParameteriv(GLenum target, GLenum pname, const GLint *params);
void GLAPIENTRY _dispatch_stub_TexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
void GLAPIENTRY _dispatch_stub_TexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
void GLAPIENTRY _dispatch_stub_TexEnvf(GLenum target, GLenum pname, GLfloat param);
void GLAPIENTRY _dispatch_stub_TexEnvfv(GLenum target, GLenum pname, const GLfloat *params);
void GLAPIENTRY _dispatch_stub_TexEnvi(GLenum target, GLenum pname, GLint param);
void GLAPIENTRY _dispatch_stub_TexEnviv(GLenum target, GLenum pname, const GLint *params);
void GLAPIENTRY _dispatch_stub_TexGend(GLenum coord, GLenum pname, GLdouble param);
void GLAPIENTRY _dispatch_stub_TexGendv(GLenum coord, GLenum pname, const GLdouble *params);
void GLAPIENTRY _dispatch_stub_TexGenf(GLenum coord, GLenum pname, GLfloat param);
void GLAPIENTRY _dispatch_stub_TexGenfv(GLenum coord, GLenum pname, const GLfloat *params);
void GLAPIENTRY _dispatch_stub_TexGeni(GLenum coord, GLenum pname, GLint param);
void GLAPIENTRY _dispatch_stub_TexGeniv(GLenum coord, GLenum pname, const GLint *params);
void GLAPIENTRY _dispatch_stub_FeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer);
void GLAPIENTRY _dispatch_stub_SelectBuffer(GLsizei size, GLuint *buffer);
GLint GLAPIENTRY _dispatch_stub_RenderMode(GLenum mode);
void GLAPIENTRY _dispatch_stub_InitNames(void);
void GLAPIENTRY _dispatch_stub_LoadName(GLuint name);
void GLAPIENTRY _dispatch_stub_PassThrough(GLfloat token);
void GLAPIENTRY _dispatch_stub_PopName(void);
void GLAPIENTRY _dispatch_stub_PushName(GLuint name);
void GLAPIENTRY _dispatch_stub_DrawBuffer(GLenum mode);
void GLAPIENTRY _dispatch_stub_Clear(GLbitfield mask);
void GLAPIENTRY _dispatch_stub_ClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void GLAPIENTRY _dispatch_stub_ClearIndex(GLfloat c);
void GLAPIENTRY _dispatch_stub_ClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
void GLAPIENTRY _dispatch_stub_ClearStencil(GLint s);
void GLAPIENTRY _dispatch_stub_ClearDepth(GLclampd depth);
void GLAPIENTRY _dispatch_stub_StencilMask(GLuint mask);
void GLAPIENTRY _dispatch_stub_ColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
void GLAPIENTRY _dispatch_stub_DepthMask(GLboolean flag);
void GLAPIENTRY _dispatch_stub_IndexMask(GLuint mask);
void GLAPIENTRY _dispatch_stub_Accum(GLenum op, GLfloat value);
void GLAPIENTRY _dispatch_stub_Disable(GLenum cap);
void GLAPIENTRY _dispatch_stub_Enable(GLenum cap);
void GLAPIENTRY _dispatch_stub_Finish(void);
void GLAPIENTRY _dispatch_stub_Flush(void);
void GLAPIENTRY _dispatch_stub_PopAttrib(void);
void GLAPIENTRY _dispatch_stub_PushAttrib(GLbitfield mask);
void GLAPIENTRY _dispatch_stub_Map1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
void GLAPIENTRY _dispatch_stub_Map1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
void GLAPIENTRY _dispatch_stub_Map2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
void GLAPIENTRY _dispatch_stub_Map2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
void GLAPIENTRY _dispatch_stub_MapGrid1d(GLint un, GLdouble u1, GLdouble u2);
void GLAPIENTRY _dispatch_stub_MapGrid1f(GLint un, GLfloat u1, GLfloat u2);
void GLAPIENTRY _dispatch_stub_MapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
void GLAPIENTRY _dispatch_stub_MapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
void GLAPIENTRY _dispatch_stub_EvalCoord1d(GLdouble u);
void GLAPIENTRY _dispatch_stub_EvalCoord1dv(const GLdouble *u);
void GLAPIENTRY _dispatch_stub_EvalCoord1f(GLfloat u);
void GLAPIENTRY _dispatch_stub_EvalCoord1fv(const GLfloat *u);
void GLAPIENTRY _dispatch_stub_EvalCoord2d(GLdouble u, GLdouble v);
void GLAPIENTRY _dispatch_stub_EvalCoord2dv(const GLdouble *u);
void GLAPIENTRY _dispatch_stub_EvalCoord2f(GLfloat u, GLfloat v);
void GLAPIENTRY _dispatch_stub_EvalCoord2fv(const GLfloat *u);
void GLAPIENTRY _dispatch_stub_EvalMesh1(GLenum mode, GLint i1, GLint i2);
void GLAPIENTRY _dispatch_stub_EvalPoint1(GLint i);
void GLAPIENTRY _dispatch_stub_EvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
void GLAPIENTRY _dispatch_stub_EvalPoint2(GLint i, GLint j);
void GLAPIENTRY _dispatch_stub_AlphaFunc(GLenum func, GLclampf ref);
void GLAPIENTRY _dispatch_stub_BlendFunc(GLenum sfactor, GLenum dfactor);
void GLAPIENTRY _dispatch_stub_LogicOp(GLenum opcode);
void GLAPIENTRY _dispatch_stub_StencilFunc(GLenum func, GLint ref, GLuint mask);
void GLAPIENTRY _dispatch_stub_StencilOp(GLenum fail, GLenum zfail, GLenum zpass);
void GLAPIENTRY _dispatch_stub_DepthFunc(GLenum func);
void GLAPIENTRY _dispatch_stub_PixelZoom(GLfloat xfactor, GLfloat yfactor);
void GLAPIENTRY _dispatch_stub_PixelTransferf(GLenum pname, GLfloat param);
void GLAPIENTRY _dispatch_stub_PixelTransferi(GLenum pname, GLint param);
void GLAPIENTRY _dispatch_stub_PixelStoref(GLenum pname, GLfloat param);
void GLAPIENTRY _dispatch_stub_PixelStorei(GLenum pname, GLint param);
void GLAPIENTRY _dispatch_stub_PixelMapfv(GLenum map, GLsizei mapsize, const GLfloat *values);
void GLAPIENTRY _dispatch_stub_PixelMapuiv(GLenum map, GLsizei mapsize, const GLuint *values);
void GLAPIENTRY _dispatch_stub_PixelMapusv(GLenum map, GLsizei mapsize, const GLushort *values);
void GLAPIENTRY _dispatch_stub_ReadBuffer(GLenum mode);
void GLAPIENTRY _dispatch_stub_CopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
void GLAPIENTRY _dispatch_stub_ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
void GLAPIENTRY _dispatch_stub_DrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
void GLAPIENTRY _dispatch_stub_GetBooleanv(GLenum pname, GLboolean *params);
void GLAPIENTRY _dispatch_stub_GetClipPlane(GLenum plane, GLdouble *equation);
void GLAPIENTRY _dispatch_stub_GetDoublev(GLenum pname, GLdouble *params);
GLenum GLAPIENTRY _dispatch_stub_GetError(void);
void GLAPIENTRY _dispatch_stub_GetFloatv(GLenum pname, GLfloat *params);
void GLAPIENTRY _dispatch_stub_GetIntegerv(GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_GetLightfv(GLenum light, GLenum pname, GLfloat *params);
void GLAPIENTRY _dispatch_stub_GetLightiv(GLenum light, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_GetMapdv(GLenum target, GLenum query, GLdouble *v);
void GLAPIENTRY _dispatch_stub_GetMapfv(GLenum target, GLenum query, GLfloat *v);
void GLAPIENTRY _dispatch_stub_GetMapiv(GLenum target, GLenum query, GLint *v);
void GLAPIENTRY _dispatch_stub_GetMaterialfv(GLenum face, GLenum pname, GLfloat *params);
void GLAPIENTRY _dispatch_stub_GetMaterialiv(GLenum face, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_GetPixelMapfv(GLenum map, GLfloat *values);
void GLAPIENTRY _dispatch_stub_GetPixelMapuiv(GLenum map, GLuint *values);
void GLAPIENTRY _dispatch_stub_GetPixelMapusv(GLenum map, GLushort *values);
void GLAPIENTRY _dispatch_stub_GetPolygonStipple(GLubyte *mask);
const GLubyte * GLAPIENTRY _dispatch_stub_GetString(GLenum name);
void GLAPIENTRY _dispatch_stub_GetTexEnvfv(GLenum target, GLenum pname, GLfloat *params);
void GLAPIENTRY _dispatch_stub_GetTexEnviv(GLenum target, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_GetTexGendv(GLenum coord, GLenum pname, GLdouble *params);
void GLAPIENTRY _dispatch_stub_GetTexGenfv(GLenum coord, GLenum pname, GLfloat *params);
void GLAPIENTRY _dispatch_stub_GetTexGeniv(GLenum coord, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_GetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
void GLAPIENTRY _dispatch_stub_GetTexParameterfv(GLenum target, GLenum pname, GLfloat *params);
void GLAPIENTRY _dispatch_stub_GetTexParameteriv(GLenum target, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_GetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params);
void GLAPIENTRY _dispatch_stub_GetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params);
GLboolean GLAPIENTRY _dispatch_stub_IsEnabled(GLenum cap);
GLboolean GLAPIENTRY _dispatch_stub_IsList(GLuint list);
void GLAPIENTRY _dispatch_stub_DepthRange(GLclampd zNear, GLclampd zFar);
void GLAPIENTRY _dispatch_stub_Frustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
void GLAPIENTRY _dispatch_stub_LoadIdentity(void);
void GLAPIENTRY _dispatch_stub_LoadMatrixf(const GLfloat *m);
void GLAPIENTRY _dispatch_stub_LoadMatrixd(const GLdouble *m);
void GLAPIENTRY _dispatch_stub_MatrixMode(GLenum mode);
void GLAPIENTRY _dispatch_stub_MultMatrixf(const GLfloat *m);
void GLAPIENTRY _dispatch_stub_MultMatrixd(const GLdouble *m);
void GLAPIENTRY _dispatch_stub_Ortho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
void GLAPIENTRY _dispatch_stub_PopMatrix(void);
void GLAPIENTRY _dispatch_stub_PushMatrix(void);
void GLAPIENTRY _dispatch_stub_Rotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
void GLAPIENTRY _dispatch_stub_Rotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
void GLAPIENTRY _dispatch_stub_Scaled(GLdouble x, GLdouble y, GLdouble z);
void GLAPIENTRY _dispatch_stub_Scalef(GLfloat x, GLfloat y, GLfloat z);
void GLAPIENTRY _dispatch_stub_Translated(GLdouble x, GLdouble y, GLdouble z);
void GLAPIENTRY _dispatch_stub_Translatef(GLfloat x, GLfloat y, GLfloat z);
void GLAPIENTRY _dispatch_stub_Viewport(GLint x, GLint y, GLsizei width, GLsizei height);
void GLAPIENTRY _dispatch_stub_ArrayElement(GLint i);
void GLAPIENTRY _dispatch_stub_BindTexture(GLenum target, GLuint texture);
void GLAPIENTRY _dispatch_stub_ColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void GLAPIENTRY _dispatch_stub_DisableClientState(GLenum array);
void GLAPIENTRY _dispatch_stub_DrawArrays(GLenum mode, GLint first, GLsizei count);
void GLAPIENTRY _dispatch_stub_DrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
void GLAPIENTRY _dispatch_stub_EdgeFlagPointer(GLsizei stride, const GLvoid *pointer);
void GLAPIENTRY _dispatch_stub_EnableClientState(GLenum array);
void GLAPIENTRY _dispatch_stub_IndexPointer(GLenum type, GLsizei stride, const GLvoid *pointer);
void GLAPIENTRY _dispatch_stub_Indexub(GLubyte c);
void GLAPIENTRY _dispatch_stub_Indexubv(const GLubyte *c);
void GLAPIENTRY _dispatch_stub_InterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer);
void GLAPIENTRY _dispatch_stub_NormalPointer(GLenum type, GLsizei stride, const GLvoid *pointer);
void GLAPIENTRY _dispatch_stub_PolygonOffset(GLfloat factor, GLfloat units);
void GLAPIENTRY _dispatch_stub_TexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void GLAPIENTRY _dispatch_stub_VertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
GLboolean GLAPIENTRY _dispatch_stub_AreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences);
void GLAPIENTRY _dispatch_stub_CopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
void GLAPIENTRY _dispatch_stub_CopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void GLAPIENTRY _dispatch_stub_CopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void GLAPIENTRY _dispatch_stub_CopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void GLAPIENTRY _dispatch_stub_DeleteTextures(GLsizei n, const GLuint *textures);
void GLAPIENTRY _dispatch_stub_GenTextures(GLsizei n, GLuint *textures);
void GLAPIENTRY _dispatch_stub_GetPointerv(GLenum pname, GLvoid **params);
GLboolean GLAPIENTRY _dispatch_stub_IsTexture(GLuint texture);
void GLAPIENTRY _dispatch_stub_PrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities);
void GLAPIENTRY _dispatch_stub_TexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
void GLAPIENTRY _dispatch_stub_TexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
void GLAPIENTRY _dispatch_stub_PopClientAttrib(void);
void GLAPIENTRY _dispatch_stub_PushClientAttrib(GLbitfield mask);
void GLAPIENTRY _dispatch_stub_BlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
void GLAPIENTRY _dispatch_stub_BlendEquation(GLenum mode);
void GLAPIENTRY _dispatch_stub_DrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
void GLAPIENTRY _dispatch_stub_TexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
void GLAPIENTRY _dispatch_stub_TexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
void GLAPIENTRY _dispatch_stub_CopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void GLAPIENTRY _dispatch_stub_ActiveTexture(GLenum texture);
void GLAPIENTRY _dispatch_stub_ClientActiveTexture(GLenum texture);
void GLAPIENTRY _dispatch_stub_MultiTexCoord1d(GLenum target, GLdouble s);
void GLAPIENTRY _dispatch_stub_MultiTexCoord1dv(GLenum target, const GLdouble *v);
void GLAPIENTRY _dispatch_stub_MultiTexCoord1fARB(GLenum target, GLfloat s);
void GLAPIENTRY _dispatch_stub_MultiTexCoord1fvARB(GLenum target, const GLfloat *v);
void GLAPIENTRY _dispatch_stub_MultiTexCoord1i(GLenum target, GLint s);
void GLAPIENTRY _dispatch_stub_MultiTexCoord1iv(GLenum target, const GLint *v);
void GLAPIENTRY _dispatch_stub_MultiTexCoord1s(GLenum target, GLshort s);
void GLAPIENTRY _dispatch_stub_MultiTexCoord1sv(GLenum target, const GLshort *v);
void GLAPIENTRY _dispatch_stub_MultiTexCoord2d(GLenum target, GLdouble s, GLdouble t);
void GLAPIENTRY _dispatch_stub_MultiTexCoord2dv(GLenum target, const GLdouble *v);
void GLAPIENTRY _dispatch_stub_MultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t);
void GLAPIENTRY _dispatch_stub_MultiTexCoord2fvARB(GLenum target, const GLfloat *v);
void GLAPIENTRY _dispatch_stub_MultiTexCoord2i(GLenum target, GLint s, GLint t);
void GLAPIENTRY _dispatch_stub_MultiTexCoord2iv(GLenum target, const GLint *v);
void GLAPIENTRY _dispatch_stub_MultiTexCoord2s(GLenum target, GLshort s, GLshort t);
void GLAPIENTRY _dispatch_stub_MultiTexCoord2sv(GLenum target, const GLshort *v);
void GLAPIENTRY _dispatch_stub_MultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r);
void GLAPIENTRY _dispatch_stub_MultiTexCoord3dv(GLenum target, const GLdouble *v);
void GLAPIENTRY _dispatch_stub_MultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r);
void GLAPIENTRY _dispatch_stub_MultiTexCoord3fvARB(GLenum target, const GLfloat *v);
void GLAPIENTRY _dispatch_stub_MultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r);
void GLAPIENTRY _dispatch_stub_MultiTexCoord3iv(GLenum target, const GLint *v);
void GLAPIENTRY _dispatch_stub_MultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r);
void GLAPIENTRY _dispatch_stub_MultiTexCoord3sv(GLenum target, const GLshort *v);
void GLAPIENTRY _dispatch_stub_MultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void GLAPIENTRY _dispatch_stub_MultiTexCoord4dv(GLenum target, const GLdouble *v);
void GLAPIENTRY _dispatch_stub_MultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void GLAPIENTRY _dispatch_stub_MultiTexCoord4fvARB(GLenum target, const GLfloat *v);
void GLAPIENTRY _dispatch_stub_MultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q);
void GLAPIENTRY _dispatch_stub_MultiTexCoord4iv(GLenum target, const GLint *v);
void GLAPIENTRY _dispatch_stub_MultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
void GLAPIENTRY _dispatch_stub_MultiTexCoord4sv(GLenum target, const GLshort *v);
void GLAPIENTRY _dispatch_stub_CompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_CompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_CompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_CompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_CompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_CompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_GetCompressedTexImage(GLenum target, GLint level, GLvoid *img);
void GLAPIENTRY _dispatch_stub_LoadTransposeMatrixd(const GLdouble *m);
void GLAPIENTRY _dispatch_stub_LoadTransposeMatrixf(const GLfloat *m);
void GLAPIENTRY _dispatch_stub_MultTransposeMatrixd(const GLdouble *m);
void GLAPIENTRY _dispatch_stub_MultTransposeMatrixf(const GLfloat *m);
void GLAPIENTRY _dispatch_stub_SampleCoverage(GLclampf value, GLboolean invert);
void GLAPIENTRY _dispatch_stub_BlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
void GLAPIENTRY _dispatch_stub_FogCoordPointer(GLenum type, GLsizei stride, const GLvoid *pointer);
void GLAPIENTRY _dispatch_stub_FogCoordd(GLdouble coord);
void GLAPIENTRY _dispatch_stub_FogCoorddv(const GLdouble *coord);
void GLAPIENTRY _dispatch_stub_MultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
void GLAPIENTRY _dispatch_stub_PointParameterf(GLenum pname, GLfloat param);
void GLAPIENTRY _dispatch_stub_PointParameterfv(GLenum pname, const GLfloat *params);
void GLAPIENTRY _dispatch_stub_PointParameteri(GLenum pname, GLint param);
void GLAPIENTRY _dispatch_stub_PointParameteriv(GLenum pname, const GLint *params);
void GLAPIENTRY _dispatch_stub_SecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue);
void GLAPIENTRY _dispatch_stub_SecondaryColor3bv(const GLbyte *v);
void GLAPIENTRY _dispatch_stub_SecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue);
void GLAPIENTRY _dispatch_stub_SecondaryColor3dv(const GLdouble *v);
void GLAPIENTRY _dispatch_stub_SecondaryColor3i(GLint red, GLint green, GLint blue);
void GLAPIENTRY _dispatch_stub_SecondaryColor3iv(const GLint *v);
void GLAPIENTRY _dispatch_stub_SecondaryColor3s(GLshort red, GLshort green, GLshort blue);
void GLAPIENTRY _dispatch_stub_SecondaryColor3sv(const GLshort *v);
void GLAPIENTRY _dispatch_stub_SecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue);
void GLAPIENTRY _dispatch_stub_SecondaryColor3ubv(const GLubyte *v);
void GLAPIENTRY _dispatch_stub_SecondaryColor3ui(GLuint red, GLuint green, GLuint blue);
void GLAPIENTRY _dispatch_stub_SecondaryColor3uiv(const GLuint *v);
void GLAPIENTRY _dispatch_stub_SecondaryColor3us(GLushort red, GLushort green, GLushort blue);
void GLAPIENTRY _dispatch_stub_SecondaryColor3usv(const GLushort *v);
void GLAPIENTRY _dispatch_stub_SecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void GLAPIENTRY _dispatch_stub_WindowPos2d(GLdouble x, GLdouble y);
void GLAPIENTRY _dispatch_stub_WindowPos2dv(const GLdouble *v);
void GLAPIENTRY _dispatch_stub_WindowPos2f(GLfloat x, GLfloat y);
void GLAPIENTRY _dispatch_stub_WindowPos2fv(const GLfloat *v);
void GLAPIENTRY _dispatch_stub_WindowPos2i(GLint x, GLint y);
void GLAPIENTRY _dispatch_stub_WindowPos2iv(const GLint *v);
void GLAPIENTRY _dispatch_stub_WindowPos2s(GLshort x, GLshort y);
void GLAPIENTRY _dispatch_stub_WindowPos2sv(const GLshort *v);
void GLAPIENTRY _dispatch_stub_WindowPos3d(GLdouble x, GLdouble y, GLdouble z);
void GLAPIENTRY _dispatch_stub_WindowPos3dv(const GLdouble *v);
void GLAPIENTRY _dispatch_stub_WindowPos3f(GLfloat x, GLfloat y, GLfloat z);
void GLAPIENTRY _dispatch_stub_WindowPos3fv(const GLfloat *v);
void GLAPIENTRY _dispatch_stub_WindowPos3i(GLint x, GLint y, GLint z);
void GLAPIENTRY _dispatch_stub_WindowPos3iv(const GLint *v);
void GLAPIENTRY _dispatch_stub_WindowPos3s(GLshort x, GLshort y, GLshort z);
void GLAPIENTRY _dispatch_stub_WindowPos3sv(const GLshort *v);
void GLAPIENTRY _dispatch_stub_BeginQuery(GLenum target, GLuint id);
void GLAPIENTRY _dispatch_stub_BindBuffer(GLenum target, GLuint buffer);
void GLAPIENTRY _dispatch_stub_BufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage);
void GLAPIENTRY _dispatch_stub_BufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_DeleteBuffers(GLsizei n, const GLuint *buffer);
void GLAPIENTRY _dispatch_stub_DeleteQueries(GLsizei n, const GLuint *ids);
void GLAPIENTRY _dispatch_stub_EndQuery(GLenum target);
void GLAPIENTRY _dispatch_stub_GenBuffers(GLsizei n, GLuint *buffer);
void GLAPIENTRY _dispatch_stub_GenQueries(GLsizei n, GLuint *ids);
void GLAPIENTRY _dispatch_stub_GetBufferParameteriv(GLenum target, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_GetBufferPointerv(GLenum target, GLenum pname, GLvoid **params);
void GLAPIENTRY _dispatch_stub_GetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data);
void GLAPIENTRY _dispatch_stub_GetQueryObjectiv(GLuint id, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_GetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params);
void GLAPIENTRY _dispatch_stub_GetQueryiv(GLenum target, GLenum pname, GLint *params);
GLboolean GLAPIENTRY _dispatch_stub_IsBuffer(GLuint buffer);
GLboolean GLAPIENTRY _dispatch_stub_IsQuery(GLuint id);
GLvoid * GLAPIENTRY _dispatch_stub_MapBuffer(GLenum target, GLenum access);
GLboolean GLAPIENTRY _dispatch_stub_UnmapBuffer(GLenum target);
void GLAPIENTRY _dispatch_stub_AttachShader(GLuint program, GLuint shader);
void GLAPIENTRY _dispatch_stub_BindAttribLocation(GLuint program, GLuint index, const GLchar *name);
void GLAPIENTRY _dispatch_stub_BlendEquationSeparate(GLenum modeRGB, GLenum modeA);
void GLAPIENTRY _dispatch_stub_CompileShader(GLuint shader);
GLuint GLAPIENTRY _dispatch_stub_CreateProgram(void);
GLuint GLAPIENTRY _dispatch_stub_CreateShader(GLenum type);
void GLAPIENTRY _dispatch_stub_DeleteProgram(GLuint program);
void GLAPIENTRY _dispatch_stub_DeleteShader(GLuint program);
void GLAPIENTRY _dispatch_stub_DetachShader(GLuint program, GLuint shader);
void GLAPIENTRY _dispatch_stub_DisableVertexAttribArray(GLuint index);
void GLAPIENTRY _dispatch_stub_DrawBuffers(GLsizei n, const GLenum *bufs);
void GLAPIENTRY _dispatch_stub_EnableVertexAttribArray(GLuint index);
void GLAPIENTRY _dispatch_stub_GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
void GLAPIENTRY _dispatch_stub_GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
void GLAPIENTRY _dispatch_stub_GetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj);
GLint GLAPIENTRY _dispatch_stub_GetAttribLocation(GLuint program, const GLchar *name);
void GLAPIENTRY _dispatch_stub_GetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
void GLAPIENTRY _dispatch_stub_GetProgramiv(GLuint program, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_GetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
void GLAPIENTRY _dispatch_stub_GetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
void GLAPIENTRY _dispatch_stub_GetShaderiv(GLuint shader, GLenum pname, GLint *params);
GLint GLAPIENTRY _dispatch_stub_GetUniformLocation(GLuint program, const GLchar *name);
void GLAPIENTRY _dispatch_stub_GetUniformfv(GLuint program, GLint location, GLfloat *params);
void GLAPIENTRY _dispatch_stub_GetUniformiv(GLuint program, GLint location, GLint *params);
void GLAPIENTRY _dispatch_stub_GetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid **pointer);
void GLAPIENTRY _dispatch_stub_GetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params);
void GLAPIENTRY _dispatch_stub_GetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params);
void GLAPIENTRY _dispatch_stub_GetVertexAttribiv(GLuint index, GLenum pname, GLint *params);
GLboolean GLAPIENTRY _dispatch_stub_IsProgram(GLuint program);
GLboolean GLAPIENTRY _dispatch_stub_IsShader(GLuint shader);
void GLAPIENTRY _dispatch_stub_LinkProgram(GLuint program);
void GLAPIENTRY _dispatch_stub_ShaderSource(GLuint shader, GLsizei count, const GLchar * const *string, const GLint *length);
void GLAPIENTRY _dispatch_stub_StencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
void GLAPIENTRY _dispatch_stub_StencilMaskSeparate(GLenum face, GLuint mask);
void GLAPIENTRY _dispatch_stub_StencilOpSeparate(GLenum face, GLenum sfail, GLenum zfail, GLenum zpass);
void GLAPIENTRY _dispatch_stub_Uniform1f(GLint location, GLfloat v0);
void GLAPIENTRY _dispatch_stub_Uniform1fv(GLint location, GLsizei count, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_Uniform1i(GLint location, GLint v0);
void GLAPIENTRY _dispatch_stub_Uniform1iv(GLint location, GLsizei count, const GLint *value);
void GLAPIENTRY _dispatch_stub_Uniform2f(GLint location, GLfloat v0, GLfloat v1);
void GLAPIENTRY _dispatch_stub_Uniform2fv(GLint location, GLsizei count, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_Uniform2i(GLint location, GLint v0, GLint v1);
void GLAPIENTRY _dispatch_stub_Uniform2iv(GLint location, GLsizei count, const GLint *value);
void GLAPIENTRY _dispatch_stub_Uniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void GLAPIENTRY _dispatch_stub_Uniform3fv(GLint location, GLsizei count, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_Uniform3i(GLint location, GLint v0, GLint v1, GLint v2);
void GLAPIENTRY _dispatch_stub_Uniform3iv(GLint location, GLsizei count, const GLint *value);
void GLAPIENTRY _dispatch_stub_Uniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void GLAPIENTRY _dispatch_stub_Uniform4fv(GLint location, GLsizei count, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_Uniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void GLAPIENTRY _dispatch_stub_Uniform4iv(GLint location, GLsizei count, const GLint *value);
void GLAPIENTRY _dispatch_stub_UniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_UniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_UniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_UseProgram(GLuint program);
void GLAPIENTRY _dispatch_stub_ValidateProgram(GLuint program);
void GLAPIENTRY _dispatch_stub_VertexAttrib1d(GLuint index, GLdouble x);
void GLAPIENTRY _dispatch_stub_VertexAttrib1dv(GLuint index, const GLdouble *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib1s(GLuint index, GLshort x);
void GLAPIENTRY _dispatch_stub_VertexAttrib1sv(GLuint index, const GLshort *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib2d(GLuint index, GLdouble x, GLdouble y);
void GLAPIENTRY _dispatch_stub_VertexAttrib2dv(GLuint index, const GLdouble *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib2s(GLuint index, GLshort x, GLshort y);
void GLAPIENTRY _dispatch_stub_VertexAttrib2sv(GLuint index, const GLshort *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
void GLAPIENTRY _dispatch_stub_VertexAttrib3dv(GLuint index, const GLdouble *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z);
void GLAPIENTRY _dispatch_stub_VertexAttrib3sv(GLuint index, const GLshort *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib4Nbv(GLuint index, const GLbyte *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib4Niv(GLuint index, const GLint *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib4Nsv(GLuint index, const GLshort *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
void GLAPIENTRY _dispatch_stub_VertexAttrib4Nubv(GLuint index, const GLubyte *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib4Nuiv(GLuint index, const GLuint *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib4Nusv(GLuint index, const GLushort *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib4bv(GLuint index, const GLbyte *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void GLAPIENTRY _dispatch_stub_VertexAttrib4dv(GLuint index, const GLdouble *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib4iv(GLuint index, const GLint *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
void GLAPIENTRY _dispatch_stub_VertexAttrib4sv(GLuint index, const GLshort *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib4ubv(GLuint index, const GLubyte *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib4uiv(GLuint index, const GLuint *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib4usv(GLuint index, const GLushort *v);
void GLAPIENTRY _dispatch_stub_VertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
void GLAPIENTRY _dispatch_stub_UniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_UniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_UniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_UniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_UniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_UniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_BeginConditionalRender(GLuint query, GLenum mode);
void GLAPIENTRY _dispatch_stub_BeginTransformFeedback(GLenum mode);
void GLAPIENTRY _dispatch_stub_BindBufferBase(GLenum target, GLuint index, GLuint buffer);
void GLAPIENTRY _dispatch_stub_BindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
void GLAPIENTRY _dispatch_stub_BindFragDataLocation(GLuint program, GLuint colorNumber, const GLchar *name);
void GLAPIENTRY _dispatch_stub_ClampColor(GLenum target, GLenum clamp);
void GLAPIENTRY _dispatch_stub_ClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
void GLAPIENTRY _dispatch_stub_ClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_ClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value);
void GLAPIENTRY _dispatch_stub_ClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value);
void GLAPIENTRY _dispatch_stub_ColorMaski(GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
void GLAPIENTRY _dispatch_stub_Disablei(GLenum target, GLuint index);
void GLAPIENTRY _dispatch_stub_Enablei(GLenum target, GLuint index);
void GLAPIENTRY _dispatch_stub_EndConditionalRender(void);
void GLAPIENTRY _dispatch_stub_EndTransformFeedback(void);
void GLAPIENTRY _dispatch_stub_GetBooleani_v(GLenum value, GLuint index, GLboolean *data);
GLint GLAPIENTRY _dispatch_stub_GetFragDataLocation(GLuint program, const GLchar *name);
void GLAPIENTRY _dispatch_stub_GetIntegeri_v(GLenum value, GLuint index, GLint *data);
const GLubyte * GLAPIENTRY _dispatch_stub_GetStringi(GLenum name, GLuint index);
void GLAPIENTRY _dispatch_stub_GetTexParameterIiv(GLenum target, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_GetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params);
void GLAPIENTRY _dispatch_stub_GetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
void GLAPIENTRY _dispatch_stub_GetUniformuiv(GLuint program, GLint location, GLuint *params);
void GLAPIENTRY _dispatch_stub_GetVertexAttribIiv(GLuint index, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_GetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params);
GLboolean GLAPIENTRY _dispatch_stub_IsEnabledi(GLenum target, GLuint index);
void GLAPIENTRY _dispatch_stub_TexParameterIiv(GLenum target, GLenum pname, const GLint *params);
void GLAPIENTRY _dispatch_stub_TexParameterIuiv(GLenum target, GLenum pname, const GLuint *params);
void GLAPIENTRY _dispatch_stub_TransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar * const *varyings, GLenum bufferMode);
void GLAPIENTRY _dispatch_stub_Uniform1ui(GLint location, GLuint x);
void GLAPIENTRY _dispatch_stub_Uniform1uiv(GLint location, GLsizei count, const GLuint *value);
void GLAPIENTRY _dispatch_stub_Uniform2ui(GLint location, GLuint x, GLuint y);
void GLAPIENTRY _dispatch_stub_Uniform2uiv(GLint location, GLsizei count, const GLuint *value);
void GLAPIENTRY _dispatch_stub_Uniform3ui(GLint location, GLuint x, GLuint y, GLuint z);
void GLAPIENTRY _dispatch_stub_Uniform3uiv(GLint location, GLsizei count, const GLuint *value);
void GLAPIENTRY _dispatch_stub_Uniform4ui(GLint location, GLuint x, GLuint y, GLuint z, GLuint w);
void GLAPIENTRY _dispatch_stub_Uniform4uiv(GLint location, GLsizei count, const GLuint *value);
void GLAPIENTRY _dispatch_stub_VertexAttribI1iv(GLuint index, const GLint *v);
void GLAPIENTRY _dispatch_stub_VertexAttribI1uiv(GLuint index, const GLuint *v);
void GLAPIENTRY _dispatch_stub_VertexAttribI4bv(GLuint index, const GLbyte *v);
void GLAPIENTRY _dispatch_stub_VertexAttribI4sv(GLuint index, const GLshort *v);
void GLAPIENTRY _dispatch_stub_VertexAttribI4ubv(GLuint index, const GLubyte *v);
void GLAPIENTRY _dispatch_stub_VertexAttribI4usv(GLuint index, const GLushort *v);
void GLAPIENTRY _dispatch_stub_VertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void GLAPIENTRY _dispatch_stub_PrimitiveRestartIndex(GLuint index);
void GLAPIENTRY _dispatch_stub_TexBuffer(GLenum target, GLenum internalFormat, GLuint buffer);
void GLAPIENTRY _dispatch_stub_FramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level);
void GLAPIENTRY _dispatch_stub_GetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params);
void GLAPIENTRY _dispatch_stub_GetInteger64i_v(GLenum cap, GLuint index, GLint64 *data);
void GLAPIENTRY _dispatch_stub_VertexAttribDivisor(GLuint index, GLuint divisor);
void GLAPIENTRY _dispatch_stub_MinSampleShading(GLfloat value);
void GLAPIENTRY _dispatch_stub_MemoryBarrierByRegion(GLbitfield barriers);
void GLAPIENTRY _dispatch_stub_BindProgramARB(GLenum target, GLuint program);
void GLAPIENTRY _dispatch_stub_DeleteProgramsARB(GLsizei n, const GLuint *programs);
void GLAPIENTRY _dispatch_stub_GenProgramsARB(GLsizei n, GLuint *programs);
void GLAPIENTRY _dispatch_stub_GetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble *params);
void GLAPIENTRY _dispatch_stub_GetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat *params);
void GLAPIENTRY _dispatch_stub_GetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble *params);
void GLAPIENTRY _dispatch_stub_GetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat *params);
void GLAPIENTRY _dispatch_stub_GetProgramStringARB(GLenum target, GLenum pname, GLvoid *string);
void GLAPIENTRY _dispatch_stub_GetProgramivARB(GLenum target, GLenum pname, GLint *params);
GLboolean GLAPIENTRY _dispatch_stub_IsProgramARB(GLuint program);
void GLAPIENTRY _dispatch_stub_ProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void GLAPIENTRY _dispatch_stub_ProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble *params);
void GLAPIENTRY _dispatch_stub_ProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void GLAPIENTRY _dispatch_stub_ProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat *params);
void GLAPIENTRY _dispatch_stub_ProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void GLAPIENTRY _dispatch_stub_ProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble *params);
void GLAPIENTRY _dispatch_stub_ProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void GLAPIENTRY _dispatch_stub_ProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat *params);
void GLAPIENTRY _dispatch_stub_ProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid *string);
void GLAPIENTRY _dispatch_stub_VertexAttrib1fARB(GLuint index, GLfloat x);
void GLAPIENTRY _dispatch_stub_VertexAttrib1fvARB(GLuint index, const GLfloat *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y);
void GLAPIENTRY _dispatch_stub_VertexAttrib2fvARB(GLuint index, const GLfloat *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z);
void GLAPIENTRY _dispatch_stub_VertexAttrib3fvARB(GLuint index, const GLfloat *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void GLAPIENTRY _dispatch_stub_VertexAttrib4fvARB(GLuint index, const GLfloat *v);
void GLAPIENTRY _dispatch_stub_AttachObjectARB(GLhandleARB containerObj, GLhandleARB obj);
GLhandleARB GLAPIENTRY _dispatch_stub_CreateProgramObjectARB(void);
GLhandleARB GLAPIENTRY _dispatch_stub_CreateShaderObjectARB(GLenum shaderType);
void GLAPIENTRY _dispatch_stub_DeleteObjectARB(GLhandleARB obj);
void GLAPIENTRY _dispatch_stub_DetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj);
void GLAPIENTRY _dispatch_stub_GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxLength, GLsizei *length, GLhandleARB *infoLog);
GLhandleARB GLAPIENTRY _dispatch_stub_GetHandleARB(GLenum pname);
void GLAPIENTRY _dispatch_stub_GetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);
void GLAPIENTRY _dispatch_stub_GetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat *params);
void GLAPIENTRY _dispatch_stub_GetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_DrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
void GLAPIENTRY _dispatch_stub_DrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instance_count);
void GLAPIENTRY _dispatch_stub_BindFramebuffer(GLenum target, GLuint framebuffer);
void GLAPIENTRY _dispatch_stub_BindRenderbuffer(GLenum target, GLuint renderbuffer);
void GLAPIENTRY _dispatch_stub_BlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
GLenum GLAPIENTRY _dispatch_stub_CheckFramebufferStatus(GLenum target);
void GLAPIENTRY _dispatch_stub_DeleteFramebuffers(GLsizei n, const GLuint *framebuffers);
void GLAPIENTRY _dispatch_stub_DeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers);
void GLAPIENTRY _dispatch_stub_FramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void GLAPIENTRY _dispatch_stub_FramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void GLAPIENTRY _dispatch_stub_FramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void GLAPIENTRY _dispatch_stub_FramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer);
void GLAPIENTRY _dispatch_stub_FramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
void GLAPIENTRY _dispatch_stub_GenFramebuffers(GLsizei n, GLuint *framebuffers);
void GLAPIENTRY _dispatch_stub_GenRenderbuffers(GLsizei n, GLuint *renderbuffers);
void GLAPIENTRY _dispatch_stub_GenerateMipmap(GLenum target);
void GLAPIENTRY _dispatch_stub_GetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_GetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params);
GLboolean GLAPIENTRY _dispatch_stub_IsFramebuffer(GLuint framebuffer);
GLboolean GLAPIENTRY _dispatch_stub_IsRenderbuffer(GLuint renderbuffer);
void GLAPIENTRY _dispatch_stub_RenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
void GLAPIENTRY _dispatch_stub_RenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
void GLAPIENTRY _dispatch_stub_FlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length);
GLvoid * GLAPIENTRY _dispatch_stub_MapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
void GLAPIENTRY _dispatch_stub_BindVertexArray(GLuint array);
void GLAPIENTRY _dispatch_stub_DeleteVertexArrays(GLsizei n, const GLuint *arrays);
void GLAPIENTRY _dispatch_stub_GenVertexArrays(GLsizei n, GLuint *arrays);
GLboolean GLAPIENTRY _dispatch_stub_IsVertexArray(GLuint array);
void GLAPIENTRY _dispatch_stub_GetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
void GLAPIENTRY _dispatch_stub_GetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_GetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
void GLAPIENTRY _dispatch_stub_GetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
GLuint GLAPIENTRY _dispatch_stub_GetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName);
void GLAPIENTRY _dispatch_stub_GetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar * const *uniformNames, GLuint *uniformIndices);
void GLAPIENTRY _dispatch_stub_UniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
void GLAPIENTRY _dispatch_stub_CopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
GLenum GLAPIENTRY _dispatch_stub_ClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
void GLAPIENTRY _dispatch_stub_DeleteSync(GLsync sync);
GLsync GLAPIENTRY _dispatch_stub_FenceSync(GLenum condition, GLbitfield flags);
void GLAPIENTRY _dispatch_stub_GetInteger64v(GLenum pname, GLint64 *params);
void GLAPIENTRY _dispatch_stub_GetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
GLboolean GLAPIENTRY _dispatch_stub_IsSync(GLsync sync);
void GLAPIENTRY _dispatch_stub_WaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
void GLAPIENTRY _dispatch_stub_DrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
void GLAPIENTRY _dispatch_stub_DrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex);
void GLAPIENTRY _dispatch_stub_DrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
void GLAPIENTRY _dispatch_stub_MultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, const GLint *basevertex);
void GLAPIENTRY _dispatch_stub_ProvokingVertex(GLenum mode);
void GLAPIENTRY _dispatch_stub_GetMultisamplefv(GLenum pname, GLuint index, GLfloat *val);
void GLAPIENTRY _dispatch_stub_SampleMaski(GLuint index, GLbitfield mask);
void GLAPIENTRY _dispatch_stub_TexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void GLAPIENTRY _dispatch_stub_TexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
void GLAPIENTRY _dispatch_stub_BlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeA);
void GLAPIENTRY _dispatch_stub_BlendEquationiARB(GLuint buf, GLenum mode);
void GLAPIENTRY _dispatch_stub_BlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcA, GLenum dstA);
void GLAPIENTRY _dispatch_stub_BlendFunciARB(GLuint buf, GLenum src, GLenum dst);
void GLAPIENTRY _dispatch_stub_BindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
GLint GLAPIENTRY _dispatch_stub_GetFragDataIndex(GLuint program, const GLchar *name);
void GLAPIENTRY _dispatch_stub_BindSampler(GLuint unit, GLuint sampler);
void GLAPIENTRY _dispatch_stub_DeleteSamplers(GLsizei count, const GLuint *samplers);
void GLAPIENTRY _dispatch_stub_GenSamplers(GLsizei count, GLuint *samplers);
void GLAPIENTRY _dispatch_stub_GetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_GetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params);
void GLAPIENTRY _dispatch_stub_GetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params);
void GLAPIENTRY _dispatch_stub_GetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params);
GLboolean GLAPIENTRY _dispatch_stub_IsSampler(GLuint sampler);
void GLAPIENTRY _dispatch_stub_SamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *params);
void GLAPIENTRY _dispatch_stub_SamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *params);
void GLAPIENTRY _dispatch_stub_SamplerParameterf(GLuint sampler, GLenum pname, GLfloat param);
void GLAPIENTRY _dispatch_stub_SamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *params);
void GLAPIENTRY _dispatch_stub_SamplerParameteri(GLuint sampler, GLenum pname, GLint param);
void GLAPIENTRY _dispatch_stub_SamplerParameteriv(GLuint sampler, GLenum pname, const GLint *params);
void GLAPIENTRY _dispatch_stub_GetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params);
void GLAPIENTRY _dispatch_stub_GetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params);
void GLAPIENTRY _dispatch_stub_QueryCounter(GLuint id, GLenum target);
void GLAPIENTRY _dispatch_stub_ColorP3ui(GLenum type, GLuint color);
void GLAPIENTRY _dispatch_stub_ColorP3uiv(GLenum type, const GLuint *color);
void GLAPIENTRY _dispatch_stub_ColorP4ui(GLenum type, GLuint color);
void GLAPIENTRY _dispatch_stub_ColorP4uiv(GLenum type, const GLuint *color);
void GLAPIENTRY _dispatch_stub_MultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords);
void GLAPIENTRY _dispatch_stub_MultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords);
void GLAPIENTRY _dispatch_stub_MultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords);
void GLAPIENTRY _dispatch_stub_MultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords);
void GLAPIENTRY _dispatch_stub_MultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords);
void GLAPIENTRY _dispatch_stub_MultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords);
void GLAPIENTRY _dispatch_stub_MultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords);
void GLAPIENTRY _dispatch_stub_MultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords);
void GLAPIENTRY _dispatch_stub_NormalP3ui(GLenum type, GLuint coords);
void GLAPIENTRY _dispatch_stub_NormalP3uiv(GLenum type, const GLuint *coords);
void GLAPIENTRY _dispatch_stub_SecondaryColorP3ui(GLenum type, GLuint color);
void GLAPIENTRY _dispatch_stub_SecondaryColorP3uiv(GLenum type, const GLuint *color);
void GLAPIENTRY _dispatch_stub_TexCoordP1ui(GLenum type, GLuint coords);
void GLAPIENTRY _dispatch_stub_TexCoordP1uiv(GLenum type, const GLuint *coords);
void GLAPIENTRY _dispatch_stub_TexCoordP2ui(GLenum type, GLuint coords);
void GLAPIENTRY _dispatch_stub_TexCoordP2uiv(GLenum type, const GLuint *coords);
void GLAPIENTRY _dispatch_stub_TexCoordP3ui(GLenum type, GLuint coords);
void GLAPIENTRY _dispatch_stub_TexCoordP3uiv(GLenum type, const GLuint *coords);
void GLAPIENTRY _dispatch_stub_TexCoordP4ui(GLenum type, GLuint coords);
void GLAPIENTRY _dispatch_stub_TexCoordP4uiv(GLenum type, const GLuint *coords);
void GLAPIENTRY _dispatch_stub_VertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void GLAPIENTRY _dispatch_stub_VertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void GLAPIENTRY _dispatch_stub_VertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void GLAPIENTRY _dispatch_stub_VertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void GLAPIENTRY _dispatch_stub_VertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void GLAPIENTRY _dispatch_stub_VertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void GLAPIENTRY _dispatch_stub_VertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
void GLAPIENTRY _dispatch_stub_VertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
void GLAPIENTRY _dispatch_stub_VertexP2ui(GLenum type, GLuint value);
void GLAPIENTRY _dispatch_stub_VertexP2uiv(GLenum type, const GLuint *value);
void GLAPIENTRY _dispatch_stub_VertexP3ui(GLenum type, GLuint value);
void GLAPIENTRY _dispatch_stub_VertexP3uiv(GLenum type, const GLuint *value);
void GLAPIENTRY _dispatch_stub_VertexP4ui(GLenum type, GLuint value);
void GLAPIENTRY _dispatch_stub_VertexP4uiv(GLenum type, const GLuint *value);
void GLAPIENTRY _dispatch_stub_DrawArraysIndirect(GLenum mode, const GLvoid *indirect);
void GLAPIENTRY _dispatch_stub_DrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect);
void GLAPIENTRY _dispatch_stub_GetUniformdv(GLuint program, GLint location, GLdouble *params);
void GLAPIENTRY _dispatch_stub_Uniform1d(GLint location, GLdouble x);
void GLAPIENTRY _dispatch_stub_Uniform1dv(GLint location, GLsizei count, const GLdouble *value);
void GLAPIENTRY _dispatch_stub_Uniform2d(GLint location, GLdouble x, GLdouble y);
void GLAPIENTRY _dispatch_stub_Uniform2dv(GLint location, GLsizei count, const GLdouble *value);
void GLAPIENTRY _dispatch_stub_Uniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z);
void GLAPIENTRY _dispatch_stub_Uniform3dv(GLint location, GLsizei count, const GLdouble *value);
void GLAPIENTRY _dispatch_stub_Uniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void GLAPIENTRY _dispatch_stub_Uniform4dv(GLint location, GLsizei count, const GLdouble *value);
void GLAPIENTRY _dispatch_stub_UniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void GLAPIENTRY _dispatch_stub_UniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void GLAPIENTRY _dispatch_stub_UniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void GLAPIENTRY _dispatch_stub_UniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void GLAPIENTRY _dispatch_stub_UniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void GLAPIENTRY _dispatch_stub_UniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void GLAPIENTRY _dispatch_stub_UniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void GLAPIENTRY _dispatch_stub_UniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void GLAPIENTRY _dispatch_stub_UniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void GLAPIENTRY _dispatch_stub_GetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
void GLAPIENTRY _dispatch_stub_GetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
void GLAPIENTRY _dispatch_stub_GetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
void GLAPIENTRY _dispatch_stub_GetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values);
GLuint GLAPIENTRY _dispatch_stub_GetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar *name);
GLint GLAPIENTRY _dispatch_stub_GetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar *name);
void GLAPIENTRY _dispatch_stub_GetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params);
void GLAPIENTRY _dispatch_stub_UniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint *indices);
void GLAPIENTRY _dispatch_stub_PatchParameterfv(GLenum pname, const GLfloat *values);
void GLAPIENTRY _dispatch_stub_PatchParameteri(GLenum pname, GLint value);
void GLAPIENTRY _dispatch_stub_BindTransformFeedback(GLenum target, GLuint id);
void GLAPIENTRY _dispatch_stub_DeleteTransformFeedbacks(GLsizei n, const GLuint *ids);
void GLAPIENTRY _dispatch_stub_DrawTransformFeedback(GLenum mode, GLuint id);
void GLAPIENTRY _dispatch_stub_GenTransformFeedbacks(GLsizei n, GLuint *ids);
GLboolean GLAPIENTRY _dispatch_stub_IsTransformFeedback(GLuint id);
void GLAPIENTRY _dispatch_stub_PauseTransformFeedback(void);
void GLAPIENTRY _dispatch_stub_ResumeTransformFeedback(void);
void GLAPIENTRY _dispatch_stub_BeginQueryIndexed(GLenum target, GLuint index, GLuint id);
void GLAPIENTRY _dispatch_stub_DrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream);
void GLAPIENTRY _dispatch_stub_EndQueryIndexed(GLenum target, GLuint index);
void GLAPIENTRY _dispatch_stub_GetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_ClearDepthf(GLclampf depth);
void GLAPIENTRY _dispatch_stub_DepthRangef(GLclampf zNear, GLclampf zFar);
void GLAPIENTRY _dispatch_stub_GetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
void GLAPIENTRY _dispatch_stub_ReleaseShaderCompiler(void);
void GLAPIENTRY _dispatch_stub_ShaderBinary(GLsizei n, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length);
void GLAPIENTRY _dispatch_stub_GetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary);
void GLAPIENTRY _dispatch_stub_ProgramBinary(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length);
void GLAPIENTRY _dispatch_stub_ProgramParameteri(GLuint program, GLenum pname, GLint value);
void GLAPIENTRY _dispatch_stub_GetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params);
void GLAPIENTRY _dispatch_stub_VertexAttribL1d(GLuint index, GLdouble x);
void GLAPIENTRY _dispatch_stub_VertexAttribL1dv(GLuint index, const GLdouble *v);
void GLAPIENTRY _dispatch_stub_VertexAttribL2d(GLuint index, GLdouble x, GLdouble y);
void GLAPIENTRY _dispatch_stub_VertexAttribL2dv(GLuint index, const GLdouble *v);
void GLAPIENTRY _dispatch_stub_VertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
void GLAPIENTRY _dispatch_stub_VertexAttribL3dv(GLuint index, const GLdouble *v);
void GLAPIENTRY _dispatch_stub_VertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void GLAPIENTRY _dispatch_stub_VertexAttribL4dv(GLuint index, const GLdouble *v);
void GLAPIENTRY _dispatch_stub_VertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void GLAPIENTRY _dispatch_stub_DepthRangeArrayv(GLuint first, GLsizei count, const GLclampd *v);
void GLAPIENTRY _dispatch_stub_DepthRangeIndexed(GLuint index, GLclampd n, GLclampd f);
void GLAPIENTRY _dispatch_stub_GetDoublei_v(GLenum target, GLuint index, GLdouble *data);
void GLAPIENTRY _dispatch_stub_GetFloati_v(GLenum target, GLuint index, GLfloat *data);
void GLAPIENTRY _dispatch_stub_ScissorArrayv(GLuint first, GLsizei count, const int *v);
void GLAPIENTRY _dispatch_stub_ScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
void GLAPIENTRY _dispatch_stub_ScissorIndexedv(GLuint index, const GLint *v);
void GLAPIENTRY _dispatch_stub_ViewportArrayv(GLuint first, GLsizei count, const GLfloat *v);
void GLAPIENTRY _dispatch_stub_ViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
void GLAPIENTRY _dispatch_stub_ViewportIndexedfv(GLuint index, const GLfloat *v);
GLenum GLAPIENTRY _dispatch_stub_GetGraphicsResetStatusARB(void);
void GLAPIENTRY _dispatch_stub_GetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, GLvoid *img);
void GLAPIENTRY _dispatch_stub_GetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
void GLAPIENTRY _dispatch_stub_GetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
void GLAPIENTRY _dispatch_stub_GetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint *v);
void GLAPIENTRY _dispatch_stub_GetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat *values);
void GLAPIENTRY _dispatch_stub_GetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint *values);
void GLAPIENTRY _dispatch_stub_GetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort *values);
void GLAPIENTRY _dispatch_stub_GetnPolygonStippleARB(GLsizei bufSize, GLubyte *pattern);
void GLAPIENTRY _dispatch_stub_GetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img);
void GLAPIENTRY _dispatch_stub_GetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
void GLAPIENTRY _dispatch_stub_GetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
void GLAPIENTRY _dispatch_stub_GetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint *params);
void GLAPIENTRY _dispatch_stub_GetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
void GLAPIENTRY _dispatch_stub_ReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data);
void GLAPIENTRY _dispatch_stub_DrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instance_count, GLuint baseinstance);
void GLAPIENTRY _dispatch_stub_DrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLuint baseinstance);
void GLAPIENTRY _dispatch_stub_DrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instance_count, GLint basevertex, GLuint baseinstance);
void GLAPIENTRY _dispatch_stub_DrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei primcount);
void GLAPIENTRY _dispatch_stub_DrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei primcount);
void GLAPIENTRY _dispatch_stub_GetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
void GLAPIENTRY _dispatch_stub_GetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_BindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
void GLAPIENTRY _dispatch_stub_MemoryBarrier(GLbitfield barriers);
void GLAPIENTRY _dispatch_stub_TexStorage1D(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width);
void GLAPIENTRY _dispatch_stub_TexStorage2D(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height);
void GLAPIENTRY _dispatch_stub_TexStorage3D(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth);
void GLAPIENTRY _dispatch_stub_TextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width);
void GLAPIENTRY _dispatch_stub_TextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height);
void GLAPIENTRY _dispatch_stub_TextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth);
void GLAPIENTRY _dispatch_stub_ClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_ClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_DispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
void GLAPIENTRY _dispatch_stub_DispatchComputeIndirect(GLintptr indirect);
void GLAPIENTRY _dispatch_stub_CopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
void GLAPIENTRY _dispatch_stub_TextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
void GLAPIENTRY _dispatch_stub_BindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
void GLAPIENTRY _dispatch_stub_VertexAttribBinding(GLuint attribindex, GLuint bindingindex);
void GLAPIENTRY _dispatch_stub_VertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
void GLAPIENTRY _dispatch_stub_VertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void GLAPIENTRY _dispatch_stub_VertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void GLAPIENTRY _dispatch_stub_VertexBindingDivisor(GLuint bindingindex, GLuint divisor);
void GLAPIENTRY _dispatch_stub_FramebufferParameteri(GLenum target, GLenum pname, GLint param);
void GLAPIENTRY _dispatch_stub_GetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_GetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);
void GLAPIENTRY _dispatch_stub_MultiDrawArraysIndirect(GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride);
void GLAPIENTRY _dispatch_stub_MultiDrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride);
void GLAPIENTRY _dispatch_stub_GetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params);
GLuint GLAPIENTRY _dispatch_stub_GetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name);
GLint GLAPIENTRY _dispatch_stub_GetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name);
GLint GLAPIENTRY _dispatch_stub_GetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name);
void GLAPIENTRY _dispatch_stub_GetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
void GLAPIENTRY _dispatch_stub_GetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);
void GLAPIENTRY _dispatch_stub_ShaderStorageBlockBinding(GLuint program, GLuint shaderStorageBlockIndex, GLuint shaderStorageBlockBinding);
void GLAPIENTRY _dispatch_stub_TexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
void GLAPIENTRY _dispatch_stub_TexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void GLAPIENTRY _dispatch_stub_TexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
void GLAPIENTRY _dispatch_stub_BufferStorage(GLenum target, GLsizeiptr size, const GLvoid *data, GLbitfield flags);
void GLAPIENTRY _dispatch_stub_ClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_ClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_BindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
void GLAPIENTRY _dispatch_stub_BindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
void GLAPIENTRY _dispatch_stub_BindImageTextures(GLuint first, GLsizei count, const GLuint *textures);
void GLAPIENTRY _dispatch_stub_BindSamplers(GLuint first, GLsizei count, const GLuint *samplers);
void GLAPIENTRY _dispatch_stub_BindTextures(GLuint first, GLsizei count, const GLuint *textures);
void GLAPIENTRY _dispatch_stub_BindVertexBuffers(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
GLuint64 GLAPIENTRY _dispatch_stub_GetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
GLuint64 GLAPIENTRY _dispatch_stub_GetTextureHandleARB(GLuint texture);
GLuint64 GLAPIENTRY _dispatch_stub_GetTextureSamplerHandleARB(GLuint texture, GLuint sampler);
void GLAPIENTRY _dispatch_stub_GetVertexAttribLui64vARB(GLuint index, GLenum pname, GLuint64EXT *params);
GLboolean GLAPIENTRY _dispatch_stub_IsImageHandleResidentARB(GLuint64 handle);
GLboolean GLAPIENTRY _dispatch_stub_IsTextureHandleResidentARB(GLuint64 handle);
void GLAPIENTRY _dispatch_stub_MakeImageHandleNonResidentARB(GLuint64 handle);
void GLAPIENTRY _dispatch_stub_MakeImageHandleResidentARB(GLuint64 handle, GLenum access);
void GLAPIENTRY _dispatch_stub_MakeTextureHandleNonResidentARB(GLuint64 handle);
void GLAPIENTRY _dispatch_stub_MakeTextureHandleResidentARB(GLuint64 handle);
void GLAPIENTRY _dispatch_stub_ProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value);
void GLAPIENTRY _dispatch_stub_ProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value);
void GLAPIENTRY _dispatch_stub_UniformHandleui64ARB(GLint location, GLuint64 value);
void GLAPIENTRY _dispatch_stub_UniformHandleui64vARB(GLint location, GLsizei count, const GLuint64 *value);
void GLAPIENTRY _dispatch_stub_VertexAttribL1ui64ARB(GLuint index, GLuint64EXT x);
void GLAPIENTRY _dispatch_stub_VertexAttribL1ui64vARB(GLuint index, const GLuint64EXT *v);
void GLAPIENTRY _dispatch_stub_DispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);
void GLAPIENTRY _dispatch_stub_MultiDrawArraysIndirectCountARB(GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
void GLAPIENTRY _dispatch_stub_MultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
void GLAPIENTRY _dispatch_stub_ClipControl(GLenum origin, GLenum depth);
void GLAPIENTRY _dispatch_stub_BindTextureUnit(GLuint unit, GLuint texture);
void GLAPIENTRY _dispatch_stub_BlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
GLenum GLAPIENTRY _dispatch_stub_CheckNamedFramebufferStatus(GLuint framebuffer, GLenum target);
void GLAPIENTRY _dispatch_stub_ClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_ClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_ClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
void GLAPIENTRY _dispatch_stub_ClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_ClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value);
void GLAPIENTRY _dispatch_stub_ClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value);
void GLAPIENTRY _dispatch_stub_CompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_CompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_CompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_CopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
void GLAPIENTRY _dispatch_stub_CopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void GLAPIENTRY _dispatch_stub_CopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void GLAPIENTRY _dispatch_stub_CopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void GLAPIENTRY _dispatch_stub_CreateBuffers(GLsizei n, GLuint *buffers);
void GLAPIENTRY _dispatch_stub_CreateFramebuffers(GLsizei n, GLuint *framebuffers);
void GLAPIENTRY _dispatch_stub_CreateProgramPipelines(GLsizei n, GLuint *pipelines);
void GLAPIENTRY _dispatch_stub_CreateQueries(GLenum target, GLsizei n, GLuint *ids);
void GLAPIENTRY _dispatch_stub_CreateRenderbuffers(GLsizei n, GLuint *renderbuffers);
void GLAPIENTRY _dispatch_stub_CreateSamplers(GLsizei n, GLuint *samplers);
void GLAPIENTRY _dispatch_stub_CreateTextures(GLenum target, GLsizei n, GLuint *textures);
void GLAPIENTRY _dispatch_stub_CreateTransformFeedbacks(GLsizei n, GLuint *ids);
void GLAPIENTRY _dispatch_stub_CreateVertexArrays(GLsizei n, GLuint *arrays);
void GLAPIENTRY _dispatch_stub_DisableVertexArrayAttrib(GLuint vaobj, GLuint index);
void GLAPIENTRY _dispatch_stub_EnableVertexArrayAttrib(GLuint vaobj, GLuint index);
void GLAPIENTRY _dispatch_stub_FlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length);
void GLAPIENTRY _dispatch_stub_GenerateTextureMipmap(GLuint texture);
void GLAPIENTRY _dispatch_stub_GetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, GLvoid *pixels);
void GLAPIENTRY _dispatch_stub_GetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 *params);
void GLAPIENTRY _dispatch_stub_GetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_GetNamedBufferPointerv(GLuint buffer, GLenum pname, GLvoid **params);
void GLAPIENTRY _dispatch_stub_GetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data);
void GLAPIENTRY _dispatch_stub_GetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_GetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint *param);
void GLAPIENTRY _dispatch_stub_GetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_GetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
void GLAPIENTRY _dispatch_stub_GetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
void GLAPIENTRY _dispatch_stub_GetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
void GLAPIENTRY _dispatch_stub_GetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
void GLAPIENTRY _dispatch_stub_GetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *pixels);
void GLAPIENTRY _dispatch_stub_GetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat *params);
void GLAPIENTRY _dispatch_stub_GetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_GetTextureParameterIiv(GLuint texture, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_GetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint *params);
void GLAPIENTRY _dispatch_stub_GetTextureParameterfv(GLuint texture, GLenum pname, GLfloat *params);
void GLAPIENTRY _dispatch_stub_GetTextureParameteriv(GLuint texture, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_GetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
void GLAPIENTRY _dispatch_stub_GetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint *param);
void GLAPIENTRY _dispatch_stub_GetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint *param);
void GLAPIENTRY _dispatch_stub_GetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param);
void GLAPIENTRY _dispatch_stub_GetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint *param);
void GLAPIENTRY _dispatch_stub_GetVertexArrayiv(GLuint vaobj, GLenum pname, GLint *param);
void GLAPIENTRY _dispatch_stub_InvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments);
void GLAPIENTRY _dispatch_stub_InvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
GLvoid * GLAPIENTRY _dispatch_stub_MapNamedBuffer(GLuint buffer, GLenum access);
GLvoid * GLAPIENTRY _dispatch_stub_MapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
void GLAPIENTRY _dispatch_stub_NamedBufferData(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage);
void GLAPIENTRY _dispatch_stub_NamedBufferStorage(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLbitfield flags);
void GLAPIENTRY _dispatch_stub_NamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_NamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf);
void GLAPIENTRY _dispatch_stub_NamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum *bufs);
void GLAPIENTRY _dispatch_stub_NamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param);
void GLAPIENTRY _dispatch_stub_NamedFramebufferReadBuffer(GLuint framebuffer, GLenum buf);
void GLAPIENTRY _dispatch_stub_NamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void GLAPIENTRY _dispatch_stub_NamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
void GLAPIENTRY _dispatch_stub_NamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
void GLAPIENTRY _dispatch_stub_NamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
void GLAPIENTRY _dispatch_stub_NamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
void GLAPIENTRY _dispatch_stub_TextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer);
void GLAPIENTRY _dispatch_stub_TextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
void GLAPIENTRY _dispatch_stub_TextureParameterIiv(GLuint texture, GLenum pname, const GLint *params);
void GLAPIENTRY _dispatch_stub_TextureParameterIuiv(GLuint texture, GLenum pname, const GLuint *params);
void GLAPIENTRY _dispatch_stub_TextureParameterf(GLuint texture, GLenum pname, GLfloat param);
void GLAPIENTRY _dispatch_stub_TextureParameterfv(GLuint texture, GLenum pname, const GLfloat *param);
void GLAPIENTRY _dispatch_stub_TextureParameteri(GLuint texture, GLenum pname, GLint param);
void GLAPIENTRY _dispatch_stub_TextureParameteriv(GLuint texture, GLenum pname, const GLint *param);
void GLAPIENTRY _dispatch_stub_TextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
void GLAPIENTRY _dispatch_stub_TextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
void GLAPIENTRY _dispatch_stub_TextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void GLAPIENTRY _dispatch_stub_TextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
void GLAPIENTRY _dispatch_stub_TextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
void GLAPIENTRY _dispatch_stub_TextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
void GLAPIENTRY _dispatch_stub_TextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
void GLAPIENTRY _dispatch_stub_TextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
void GLAPIENTRY _dispatch_stub_TransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer);
void GLAPIENTRY _dispatch_stub_TransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLboolean GLAPIENTRY _dispatch_stub_UnmapNamedBufferEXT(GLuint buffer);
void GLAPIENTRY _dispatch_stub_VertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
void GLAPIENTRY _dispatch_stub_VertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
void GLAPIENTRY _dispatch_stub_VertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void GLAPIENTRY _dispatch_stub_VertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void GLAPIENTRY _dispatch_stub_VertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor);
void GLAPIENTRY _dispatch_stub_VertexArrayElementBuffer(GLuint vaobj, GLuint buffer);
void GLAPIENTRY _dispatch_stub_VertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
void GLAPIENTRY _dispatch_stub_VertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
void GLAPIENTRY _dispatch_stub_GetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, GLvoid *pixels);
void GLAPIENTRY _dispatch_stub_GetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, GLvoid *pixels);
void GLAPIENTRY _dispatch_stub_BufferPageCommitmentARB(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit);
void GLAPIENTRY _dispatch_stub_NamedBufferPageCommitmentARB(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
void GLAPIENTRY _dispatch_stub_GetUniformi64vARB(GLuint program, GLint location, GLint64 *params);
void GLAPIENTRY _dispatch_stub_GetUniformui64vARB(GLuint program, GLint location, GLuint64 *params);
void GLAPIENTRY _dispatch_stub_GetnUniformi64vARB(GLuint program, GLint location, GLsizei bufSize, GLint64 *params);
void GLAPIENTRY _dispatch_stub_GetnUniformui64vARB(GLuint program, GLint location, GLsizei bufSize, GLuint64 *params);
void GLAPIENTRY _dispatch_stub_ProgramUniform1i64ARB(GLuint program, GLint location, GLint64 x);
void GLAPIENTRY _dispatch_stub_ProgramUniform1i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value);
void GLAPIENTRY _dispatch_stub_ProgramUniform1ui64ARB(GLuint program, GLint location, GLuint64 x);
void GLAPIENTRY _dispatch_stub_ProgramUniform1ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value);
void GLAPIENTRY _dispatch_stub_ProgramUniform2i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y);
void GLAPIENTRY _dispatch_stub_ProgramUniform2i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value);
void GLAPIENTRY _dispatch_stub_ProgramUniform2ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y);
void GLAPIENTRY _dispatch_stub_ProgramUniform2ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value);
void GLAPIENTRY _dispatch_stub_ProgramUniform3i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z);
void GLAPIENTRY _dispatch_stub_ProgramUniform3i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value);
void GLAPIENTRY _dispatch_stub_ProgramUniform3ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
void GLAPIENTRY _dispatch_stub_ProgramUniform3ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value);
void GLAPIENTRY _dispatch_stub_ProgramUniform4i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
void GLAPIENTRY _dispatch_stub_ProgramUniform4i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value);
void GLAPIENTRY _dispatch_stub_ProgramUniform4ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
void GLAPIENTRY _dispatch_stub_ProgramUniform4ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value);
void GLAPIENTRY _dispatch_stub_Uniform1i64ARB(GLint location, GLint64 x);
void GLAPIENTRY _dispatch_stub_Uniform1i64vARB(GLint location, GLsizei count, const GLint64 *value);
void GLAPIENTRY _dispatch_stub_Uniform1ui64ARB(GLint location, GLuint64 x);
void GLAPIENTRY _dispatch_stub_Uniform1ui64vARB(GLint location, GLsizei count, const GLuint64 *value);
void GLAPIENTRY _dispatch_stub_Uniform2i64ARB(GLint location, GLint64 x, GLint64 y);
void GLAPIENTRY _dispatch_stub_Uniform2i64vARB(GLint location, GLsizei count, const GLint64 *value);
void GLAPIENTRY _dispatch_stub_Uniform2ui64ARB(GLint location, GLuint64 x, GLuint64 y);
void GLAPIENTRY _dispatch_stub_Uniform2ui64vARB(GLint location, GLsizei count, const GLuint64 *value);
void GLAPIENTRY _dispatch_stub_Uniform3i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z);
void GLAPIENTRY _dispatch_stub_Uniform3i64vARB(GLint location, GLsizei count, const GLint64 *value);
void GLAPIENTRY _dispatch_stub_Uniform3ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z);
void GLAPIENTRY _dispatch_stub_Uniform3ui64vARB(GLint location, GLsizei count, const GLuint64 *value);
void GLAPIENTRY _dispatch_stub_Uniform4i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w);
void GLAPIENTRY _dispatch_stub_Uniform4i64vARB(GLint location, GLsizei count, const GLint64 *value);
void GLAPIENTRY _dispatch_stub_Uniform4ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w);
void GLAPIENTRY _dispatch_stub_Uniform4ui64vARB(GLint location, GLsizei count, const GLuint64 *value);
void GLAPIENTRY _dispatch_stub_EvaluateDepthValuesARB(void);
void GLAPIENTRY _dispatch_stub_FramebufferSampleLocationsfvARB(GLenum target, GLuint start, GLsizei count, const GLfloat *v);
void GLAPIENTRY _dispatch_stub_NamedFramebufferSampleLocationsfvARB(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);
void GLAPIENTRY _dispatch_stub_SpecializeShaderARB(GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue);
void GLAPIENTRY _dispatch_stub_InvalidateBufferData(GLuint buffer);
void GLAPIENTRY _dispatch_stub_InvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length);
void GLAPIENTRY _dispatch_stub_InvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments);
void GLAPIENTRY _dispatch_stub_InvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
void GLAPIENTRY _dispatch_stub_InvalidateTexImage(GLuint texture, GLint level);
void GLAPIENTRY _dispatch_stub_InvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
void GLAPIENTRY _dispatch_stub_DrawTexfOES(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height);
void GLAPIENTRY _dispatch_stub_DrawTexfvOES(const GLfloat *coords);
void GLAPIENTRY _dispatch_stub_DrawTexiOES(GLint x, GLint y, GLint z, GLint width, GLint height);
void GLAPIENTRY _dispatch_stub_DrawTexivOES(const GLint *coords);
void GLAPIENTRY _dispatch_stub_DrawTexsOES(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height);
void GLAPIENTRY _dispatch_stub_DrawTexsvOES(const GLshort *coords);
void GLAPIENTRY _dispatch_stub_DrawTexxOES(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height);
void GLAPIENTRY _dispatch_stub_DrawTexxvOES(const GLfixed *coords);
void GLAPIENTRY _dispatch_stub_PointSizePointerOES(GLenum type, GLsizei stride, const GLvoid *pointer);
GLbitfield GLAPIENTRY _dispatch_stub_QueryMatrixxOES(GLfixed *mantissa, GLint *exponent);
void GLAPIENTRY _dispatch_stub_ColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
void GLAPIENTRY _dispatch_stub_EdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean *pointer);
void GLAPIENTRY _dispatch_stub_IndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
void GLAPIENTRY _dispatch_stub_NormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
void GLAPIENTRY _dispatch_stub_TexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
void GLAPIENTRY _dispatch_stub_VertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
void GLAPIENTRY _dispatch_stub_DiscardFramebufferEXT(GLenum target, GLsizei numAttachments, const GLenum *attachments);
void GLAPIENTRY _dispatch_stub_ActiveShaderProgram(GLuint pipeline, GLuint program);
void GLAPIENTRY _dispatch_stub_BindProgramPipeline(GLuint pipeline);
GLuint GLAPIENTRY _dispatch_stub_CreateShaderProgramv(GLenum type, GLsizei count, const GLchar * const *strings);
void GLAPIENTRY _dispatch_stub_DeleteProgramPipelines(GLsizei n, const GLuint *pipelines);
void GLAPIENTRY _dispatch_stub_GenProgramPipelines(GLsizei n, GLuint *pipelines);
void GLAPIENTRY _dispatch_stub_GetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
void GLAPIENTRY _dispatch_stub_GetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params);
GLboolean GLAPIENTRY _dispatch_stub_IsProgramPipeline(GLuint pipeline);
void GLAPIENTRY _dispatch_stub_LockArraysEXT(GLint first, GLsizei count);
void GLAPIENTRY _dispatch_stub_ProgramUniform1d(GLuint program, GLint location, GLdouble x);
void GLAPIENTRY _dispatch_stub_ProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void GLAPIENTRY _dispatch_stub_ProgramUniform1f(GLuint program, GLint location, GLfloat x);
void GLAPIENTRY _dispatch_stub_ProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_ProgramUniform1i(GLuint program, GLint location, GLint x);
void GLAPIENTRY _dispatch_stub_ProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value);
void GLAPIENTRY _dispatch_stub_ProgramUniform1ui(GLuint program, GLint location, GLuint x);
void GLAPIENTRY _dispatch_stub_ProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
void GLAPIENTRY _dispatch_stub_ProgramUniform2d(GLuint program, GLint location, GLdouble x, GLdouble y);
void GLAPIENTRY _dispatch_stub_ProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void GLAPIENTRY _dispatch_stub_ProgramUniform2f(GLuint program, GLint location, GLfloat x, GLfloat y);
void GLAPIENTRY _dispatch_stub_ProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_ProgramUniform2i(GLuint program, GLint location, GLint x, GLint y);
void GLAPIENTRY _dispatch_stub_ProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value);
void GLAPIENTRY _dispatch_stub_ProgramUniform2ui(GLuint program, GLint location, GLuint x, GLuint y);
void GLAPIENTRY _dispatch_stub_ProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
void GLAPIENTRY _dispatch_stub_ProgramUniform3d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
void GLAPIENTRY _dispatch_stub_ProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void GLAPIENTRY _dispatch_stub_ProgramUniform3f(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z);
void GLAPIENTRY _dispatch_stub_ProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_ProgramUniform3i(GLuint program, GLint location, GLint x, GLint y, GLint z);
void GLAPIENTRY _dispatch_stub_ProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value);
void GLAPIENTRY _dispatch_stub_ProgramUniform3ui(GLuint program, GLint location, GLuint x, GLuint y, GLuint z);
void GLAPIENTRY _dispatch_stub_ProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
void GLAPIENTRY _dispatch_stub_ProgramUniform4d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void GLAPIENTRY _dispatch_stub_ProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
void GLAPIENTRY _dispatch_stub_ProgramUniform4f(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void GLAPIENTRY _dispatch_stub_ProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_ProgramUniform4i(GLuint program, GLint location, GLint x, GLint y, GLint z, GLint w);
void GLAPIENTRY _dispatch_stub_ProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value);
void GLAPIENTRY _dispatch_stub_ProgramUniform4ui(GLuint program, GLint location, GLuint x, GLuint y, GLuint z, GLuint w);
void GLAPIENTRY _dispatch_stub_ProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value);
void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_UnlockArraysEXT(void);
void GLAPIENTRY _dispatch_stub_UseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program);
void GLAPIENTRY _dispatch_stub_ValidateProgramPipeline(GLuint pipeline);
void GLAPIENTRY _dispatch_stub_FramebufferTexture2DMultisampleEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples);
void GLAPIENTRY _dispatch_stub_DebugMessageCallback(GLDEBUGPROC callback, const GLvoid *userParam);
void GLAPIENTRY _dispatch_stub_DebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
void GLAPIENTRY _dispatch_stub_DebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
GLuint GLAPIENTRY _dispatch_stub_GetDebugMessageLog(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
void GLAPIENTRY _dispatch_stub_GetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
void GLAPIENTRY _dispatch_stub_GetObjectPtrLabel(const GLvoid *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
void GLAPIENTRY _dispatch_stub_ObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
void GLAPIENTRY _dispatch_stub_ObjectPtrLabel(const GLvoid *ptr, GLsizei length, const GLchar *label);
void GLAPIENTRY _dispatch_stub_PopDebugGroup(void);
void GLAPIENTRY _dispatch_stub_PushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message);
void GLAPIENTRY _dispatch_stub_SecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue);
void GLAPIENTRY _dispatch_stub_SecondaryColor3fvEXT(const GLfloat *v);
void GLAPIENTRY _dispatch_stub_MultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount);
void GLAPIENTRY _dispatch_stub_FogCoordfEXT(GLfloat coord);
void GLAPIENTRY _dispatch_stub_FogCoordfvEXT(const GLfloat *coord);
void GLAPIENTRY _dispatch_stub_WindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void GLAPIENTRY _dispatch_stub_WindowPos4dvMESA(const GLdouble *v);
void GLAPIENTRY _dispatch_stub_WindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void GLAPIENTRY _dispatch_stub_WindowPos4fvMESA(const GLfloat *v);
void GLAPIENTRY _dispatch_stub_WindowPos4iMESA(GLint x, GLint y, GLint z, GLint w);
void GLAPIENTRY _dispatch_stub_WindowPos4ivMESA(const GLint *v);
void GLAPIENTRY _dispatch_stub_WindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w);
void GLAPIENTRY _dispatch_stub_WindowPos4svMESA(const GLshort *v);
void GLAPIENTRY _dispatch_stub_MultiModeDrawArraysIBM(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
void GLAPIENTRY _dispatch_stub_MultiModeDrawElementsIBM(const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, GLint modestride);
void GLAPIENTRY _dispatch_stub_VertexAttrib1dNV(GLuint index, GLdouble x);
void GLAPIENTRY _dispatch_stub_VertexAttrib1dvNV(GLuint index, const GLdouble *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib1fNV(GLuint index, GLfloat x);
void GLAPIENTRY _dispatch_stub_VertexAttrib1fvNV(GLuint index, const GLfloat *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib1sNV(GLuint index, GLshort x);
void GLAPIENTRY _dispatch_stub_VertexAttrib1svNV(GLuint index, const GLshort *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y);
void GLAPIENTRY _dispatch_stub_VertexAttrib2dvNV(GLuint index, const GLdouble *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y);
void GLAPIENTRY _dispatch_stub_VertexAttrib2fvNV(GLuint index, const GLfloat *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib2sNV(GLuint index, GLshort x, GLshort y);
void GLAPIENTRY _dispatch_stub_VertexAttrib2svNV(GLuint index, const GLshort *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z);
void GLAPIENTRY _dispatch_stub_VertexAttrib3dvNV(GLuint index, const GLdouble *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z);
void GLAPIENTRY _dispatch_stub_VertexAttrib3fvNV(GLuint index, const GLfloat *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z);
void GLAPIENTRY _dispatch_stub_VertexAttrib3svNV(GLuint index, const GLshort *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void GLAPIENTRY _dispatch_stub_VertexAttrib4dvNV(GLuint index, const GLdouble *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void GLAPIENTRY _dispatch_stub_VertexAttrib4fvNV(GLuint index, const GLfloat *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
void GLAPIENTRY _dispatch_stub_VertexAttrib4svNV(GLuint index, const GLshort *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
void GLAPIENTRY _dispatch_stub_VertexAttrib4ubvNV(GLuint index, const GLubyte *v);
void GLAPIENTRY _dispatch_stub_VertexAttribs1dvNV(GLuint index, GLsizei n, const GLdouble *v);
void GLAPIENTRY _dispatch_stub_VertexAttribs1fvNV(GLuint index, GLsizei n, const GLfloat *v);
void GLAPIENTRY _dispatch_stub_VertexAttribs1svNV(GLuint index, GLsizei n, const GLshort *v);
void GLAPIENTRY _dispatch_stub_VertexAttribs2dvNV(GLuint index, GLsizei n, const GLdouble *v);
void GLAPIENTRY _dispatch_stub_VertexAttribs2fvNV(GLuint index, GLsizei n, const GLfloat *v);
void GLAPIENTRY _dispatch_stub_VertexAttribs2svNV(GLuint index, GLsizei n, const GLshort *v);
void GLAPIENTRY _dispatch_stub_VertexAttribs3dvNV(GLuint index, GLsizei n, const GLdouble *v);
void GLAPIENTRY _dispatch_stub_VertexAttribs3fvNV(GLuint index, GLsizei n, const GLfloat *v);
void GLAPIENTRY _dispatch_stub_VertexAttribs3svNV(GLuint index, GLsizei n, const GLshort *v);
void GLAPIENTRY _dispatch_stub_VertexAttribs4dvNV(GLuint index, GLsizei n, const GLdouble *v);
void GLAPIENTRY _dispatch_stub_VertexAttribs4fvNV(GLuint index, GLsizei n, const GLfloat *v);
void GLAPIENTRY _dispatch_stub_VertexAttribs4svNV(GLuint index, GLsizei n, const GLshort *v);
void GLAPIENTRY _dispatch_stub_VertexAttribs4ubvNV(GLuint index, GLsizei n, const GLubyte *v);
void GLAPIENTRY _dispatch_stub_AlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
void GLAPIENTRY _dispatch_stub_AlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
void GLAPIENTRY _dispatch_stub_AlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
void GLAPIENTRY _dispatch_stub_BeginFragmentShaderATI(void);
void GLAPIENTRY _dispatch_stub_BindFragmentShaderATI(GLuint id);
void GLAPIENTRY _dispatch_stub_ColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
void GLAPIENTRY _dispatch_stub_ColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
void GLAPIENTRY _dispatch_stub_ColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
void GLAPIENTRY _dispatch_stub_DeleteFragmentShaderATI(GLuint id);
void GLAPIENTRY _dispatch_stub_EndFragmentShaderATI(void);
GLuint GLAPIENTRY _dispatch_stub_GenFragmentShadersATI(GLuint range);
void GLAPIENTRY _dispatch_stub_PassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle);
void GLAPIENTRY _dispatch_stub_SampleMapATI(GLuint dst, GLuint interp, GLenum swizzle);
void GLAPIENTRY _dispatch_stub_SetFragmentShaderConstantATI(GLuint dst, const GLfloat *value);
void GLAPIENTRY _dispatch_stub_DepthRangeArrayfvOES(GLuint first, GLsizei count, const GLfloat *v);
void GLAPIENTRY _dispatch_stub_DepthRangeIndexedfOES(GLuint index, GLfloat n, GLfloat f);
void GLAPIENTRY _dispatch_stub_ActiveStencilFaceEXT(GLenum face);
void GLAPIENTRY _dispatch_stub_PrimitiveRestartNV(void);
void GLAPIENTRY _dispatch_stub_GetTexGenxvOES(GLenum coord, GLenum pname, GLfixed *params);
void GLAPIENTRY _dispatch_stub_TexGenxOES(GLenum coord, GLenum pname, GLfixed param);
void GLAPIENTRY _dispatch_stub_TexGenxvOES(GLenum coord, GLenum pname, const GLfixed *params);
void GLAPIENTRY _dispatch_stub_DepthBoundsEXT(GLclampd zmin, GLclampd zmax);
void GLAPIENTRY _dispatch_stub_BindFramebufferEXT(GLenum target, GLuint framebuffer);
void GLAPIENTRY _dispatch_stub_BindRenderbufferEXT(GLenum target, GLuint renderbuffer);
void GLAPIENTRY _dispatch_stub_StringMarkerGREMEDY(GLsizei len, const GLvoid *string);
void GLAPIENTRY _dispatch_stub_VertexAttribI1iEXT(GLuint index, GLint x);
void GLAPIENTRY _dispatch_stub_VertexAttribI1uiEXT(GLuint index, GLuint x);
void GLAPIENTRY _dispatch_stub_VertexAttribI2iEXT(GLuint index, GLint x, GLint y);
void GLAPIENTRY _dispatch_stub_VertexAttribI2ivEXT(GLuint index, const GLint *v);
void GLAPIENTRY _dispatch_stub_VertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y);
void GLAPIENTRY _dispatch_stub_VertexAttribI2uivEXT(GLuint index, const GLuint *v);
void GLAPIENTRY _dispatch_stub_VertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z);
void GLAPIENTRY _dispatch_stub_VertexAttribI3ivEXT(GLuint index, const GLint *v);
void GLAPIENTRY _dispatch_stub_VertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z);
void GLAPIENTRY _dispatch_stub_VertexAttribI3uivEXT(GLuint index, const GLuint *v);
void GLAPIENTRY _dispatch_stub_VertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w);
void GLAPIENTRY _dispatch_stub_VertexAttribI4ivEXT(GLuint index, const GLint *v);
void GLAPIENTRY _dispatch_stub_VertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
void GLAPIENTRY _dispatch_stub_VertexAttribI4uivEXT(GLuint index, const GLuint *v);
void GLAPIENTRY _dispatch_stub_ClearColorIiEXT(GLint r, GLint g, GLint b, GLint a);
void GLAPIENTRY _dispatch_stub_ClearColorIuiEXT(GLuint r, GLuint g, GLuint b, GLuint a);
void GLAPIENTRY _dispatch_stub_BindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
void GLAPIENTRY _dispatch_stub_BeginPerfMonitorAMD(GLuint monitor);
void GLAPIENTRY _dispatch_stub_DeletePerfMonitorsAMD(GLsizei n, GLuint *monitors);
void GLAPIENTRY _dispatch_stub_EndPerfMonitorAMD(GLuint monitor);
void GLAPIENTRY _dispatch_stub_GenPerfMonitorsAMD(GLsizei n, GLuint *monitors);
void GLAPIENTRY _dispatch_stub_GetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);
void GLAPIENTRY _dispatch_stub_GetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, GLvoid *data);
void GLAPIENTRY _dispatch_stub_GetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);
void GLAPIENTRY _dispatch_stub_GetPerfMonitorCountersAMD(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei countersSize, GLuint *counters);
void GLAPIENTRY _dispatch_stub_GetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);
void GLAPIENTRY _dispatch_stub_GetPerfMonitorGroupsAMD(GLint *numGroups, GLsizei groupsSize, GLuint *groups);
void GLAPIENTRY _dispatch_stub_SelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList);
void GLAPIENTRY _dispatch_stub_TextureBarrierNV(void);
void GLAPIENTRY _dispatch_stub_VDPAUFiniNV(void);
void GLAPIENTRY _dispatch_stub_VDPAUGetSurfaceivNV(GLintptr surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
void GLAPIENTRY _dispatch_stub_VDPAUInitNV(const GLvoid *vdpDevice, const GLvoid *getProcAddress);
GLboolean GLAPIENTRY _dispatch_stub_VDPAUIsSurfaceNV(GLintptr surface);
void GLAPIENTRY _dispatch_stub_VDPAUMapSurfacesNV(GLsizei numSurfaces, const GLintptr *surfaces);
GLintptr GLAPIENTRY _dispatch_stub_VDPAURegisterOutputSurfaceNV(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
GLintptr GLAPIENTRY _dispatch_stub_VDPAURegisterVideoSurfaceNV(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
void GLAPIENTRY _dispatch_stub_VDPAUSurfaceAccessNV(GLintptr surface, GLenum access);
void GLAPIENTRY _dispatch_stub_VDPAUUnmapSurfacesNV(GLsizei numSurfaces, const GLintptr *surfaces);
void GLAPIENTRY _dispatch_stub_VDPAUUnregisterSurfaceNV(GLintptr surface);
void GLAPIENTRY _dispatch_stub_BeginPerfQueryINTEL(GLuint queryHandle);
void GLAPIENTRY _dispatch_stub_CreatePerfQueryINTEL(GLuint queryId, GLuint *queryHandle);
void GLAPIENTRY _dispatch_stub_DeletePerfQueryINTEL(GLuint queryHandle);
void GLAPIENTRY _dispatch_stub_EndPerfQueryINTEL(GLuint queryHandle);
void GLAPIENTRY _dispatch_stub_GetFirstPerfQueryIdINTEL(GLuint *queryId);
void GLAPIENTRY _dispatch_stub_GetNextPerfQueryIdINTEL(GLuint queryId, GLuint *nextQueryId);
void GLAPIENTRY _dispatch_stub_GetPerfCounterInfoINTEL(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue);
void GLAPIENTRY _dispatch_stub_GetPerfQueryDataINTEL(GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten);
void GLAPIENTRY _dispatch_stub_GetPerfQueryIdByNameINTEL(GLchar *queryName, GLuint *queryId);
void GLAPIENTRY _dispatch_stub_GetPerfQueryInfoINTEL(GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask);
void GLAPIENTRY _dispatch_stub_PolygonOffsetClampEXT(GLfloat factor, GLfloat units, GLfloat clamp);
void GLAPIENTRY _dispatch_stub_SubpixelPrecisionBiasNV(GLuint xbits, GLuint ybits);
void GLAPIENTRY _dispatch_stub_ConservativeRasterParameterfNV(GLenum pname, GLfloat param);
void GLAPIENTRY _dispatch_stub_ConservativeRasterParameteriNV(GLenum pname, GLint param);
void GLAPIENTRY _dispatch_stub_WindowRectanglesEXT(GLenum mode, GLsizei count, const GLint *box);
void GLAPIENTRY _dispatch_stub_BufferStorageMemEXT(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset);
void GLAPIENTRY _dispatch_stub_CreateMemoryObjectsEXT(GLsizei n, GLuint *memoryObjects);
void GLAPIENTRY _dispatch_stub_DeleteMemoryObjectsEXT(GLsizei n, const GLuint *memoryObjects);
void GLAPIENTRY _dispatch_stub_DeleteSemaphoresEXT(GLsizei n, const GLuint *semaphores);
void GLAPIENTRY _dispatch_stub_GenSemaphoresEXT(GLsizei n, GLuint *semaphores);
void GLAPIENTRY _dispatch_stub_GetMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_GetSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, GLuint64 *params);
void GLAPIENTRY _dispatch_stub_GetUnsignedBytei_vEXT(GLenum target, GLuint index, GLubyte *data);
void GLAPIENTRY _dispatch_stub_GetUnsignedBytevEXT(GLenum pname, GLubyte *data);
GLboolean GLAPIENTRY _dispatch_stub_IsMemoryObjectEXT(GLuint memoryObject);
GLboolean GLAPIENTRY _dispatch_stub_IsSemaphoreEXT(GLuint semaphore);
void GLAPIENTRY _dispatch_stub_MemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, const GLint *params);
void GLAPIENTRY _dispatch_stub_NamedBufferStorageMemEXT(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset);
void GLAPIENTRY _dispatch_stub_SemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, const GLuint64 *params);
void GLAPIENTRY _dispatch_stub_SignalSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts);
void GLAPIENTRY _dispatch_stub_TexStorageMem1DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset);
void GLAPIENTRY _dispatch_stub_TexStorageMem2DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset);
void GLAPIENTRY _dispatch_stub_TexStorageMem2DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
void GLAPIENTRY _dispatch_stub_TexStorageMem3DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset);
void GLAPIENTRY _dispatch_stub_TexStorageMem3DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
void GLAPIENTRY _dispatch_stub_TextureStorageMem1DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset);
void GLAPIENTRY _dispatch_stub_TextureStorageMem2DEXT(GLenum texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset);
void GLAPIENTRY _dispatch_stub_TextureStorageMem2DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
void GLAPIENTRY _dispatch_stub_TextureStorageMem3DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset);
void GLAPIENTRY _dispatch_stub_TextureStorageMem3DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
void GLAPIENTRY _dispatch_stub_WaitSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts);
void GLAPIENTRY _dispatch_stub_ImportMemoryFdEXT(GLuint memory, GLuint64 size, GLenum handleType, GLint fd);
void GLAPIENTRY _dispatch_stub_ImportSemaphoreFdEXT(GLuint semaphore, GLenum handleType, GLint fd);
void GLAPIENTRY _dispatch_stub_FramebufferFetchBarrierEXT(void);
void GLAPIENTRY _dispatch_stub_NamedRenderbufferStorageMultisampleAdvancedAMD(GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height);
void GLAPIENTRY _dispatch_stub_RenderbufferStorageMultisampleAdvancedAMD(GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height);
void GLAPIENTRY _dispatch_stub_StencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
void GLAPIENTRY _dispatch_stub_ProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params);
void GLAPIENTRY _dispatch_stub_ProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params);
void GLAPIENTRY _dispatch_stub_EGLImageTargetRenderbufferStorageOES(GLenum target, GLvoid *writeOffset);
void GLAPIENTRY _dispatch_stub_EGLImageTargetTexture2DOES(GLenum target, GLvoid *writeOffset);
void GLAPIENTRY _dispatch_stub_AlphaFuncx(GLenum func, GLclampx ref);
void GLAPIENTRY _dispatch_stub_ClearColorx(GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha);
void GLAPIENTRY _dispatch_stub_ClearDepthx(GLclampx depth);
void GLAPIENTRY _dispatch_stub_Color4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
void GLAPIENTRY _dispatch_stub_DepthRangex(GLclampx zNear, GLclampx zFar);
void GLAPIENTRY _dispatch_stub_Fogx(GLenum pname, GLfixed param);
void GLAPIENTRY _dispatch_stub_Fogxv(GLenum pname, const GLfixed *params);
void GLAPIENTRY _dispatch_stub_Frustumf(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar);
void GLAPIENTRY _dispatch_stub_Frustumx(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar);
void GLAPIENTRY _dispatch_stub_LightModelx(GLenum pname, GLfixed param);
void GLAPIENTRY _dispatch_stub_LightModelxv(GLenum pname, const GLfixed *params);
void GLAPIENTRY _dispatch_stub_Lightx(GLenum light, GLenum pname, GLfixed param);
void GLAPIENTRY _dispatch_stub_Lightxv(GLenum light, GLenum pname, const GLfixed *params);
void GLAPIENTRY _dispatch_stub_LineWidthx(GLfixed width);
void GLAPIENTRY _dispatch_stub_LoadMatrixx(const GLfixed *m);
void GLAPIENTRY _dispatch_stub_Materialx(GLenum face, GLenum pname, GLfixed param);
void GLAPIENTRY _dispatch_stub_Materialxv(GLenum face, GLenum pname, const GLfixed *params);
void GLAPIENTRY _dispatch_stub_MultMatrixx(const GLfixed *m);
void GLAPIENTRY _dispatch_stub_MultiTexCoord4x(GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
void GLAPIENTRY _dispatch_stub_Normal3x(GLfixed nx, GLfixed ny, GLfixed nz);
void GLAPIENTRY _dispatch_stub_Orthof(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar);
void GLAPIENTRY _dispatch_stub_Orthox(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar);
void GLAPIENTRY _dispatch_stub_PointSizex(GLfixed size);
void GLAPIENTRY _dispatch_stub_PolygonOffsetx(GLfixed factor, GLfixed units);
void GLAPIENTRY _dispatch_stub_Rotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
void GLAPIENTRY _dispatch_stub_SampleCoveragex(GLclampx value, GLboolean invert);
void GLAPIENTRY _dispatch_stub_Scalex(GLfixed x, GLfixed y, GLfixed z);
void GLAPIENTRY _dispatch_stub_TexEnvx(GLenum target, GLenum pname, GLfixed param);
void GLAPIENTRY _dispatch_stub_TexEnvxv(GLenum target, GLenum pname, const GLfixed *params);
void GLAPIENTRY _dispatch_stub_TexParameterx(GLenum target, GLenum pname, GLfixed param);
void GLAPIENTRY _dispatch_stub_Translatex(GLfixed x, GLfixed y, GLfixed z);
void GLAPIENTRY _dispatch_stub_ClipPlanef(GLenum plane, const GLfloat *equation);
void GLAPIENTRY _dispatch_stub_ClipPlanex(GLenum plane, const GLfixed *equation);
void GLAPIENTRY _dispatch_stub_GetClipPlanef(GLenum plane, GLfloat *equation);
void GLAPIENTRY _dispatch_stub_GetClipPlanex(GLenum plane, GLfixed *equation);
void GLAPIENTRY _dispatch_stub_GetFixedv(GLenum pname, GLfixed *params);
void GLAPIENTRY _dispatch_stub_GetLightxv(GLenum light, GLenum pname, GLfixed *params);
void GLAPIENTRY _dispatch_stub_GetMaterialxv(GLenum face, GLenum pname, GLfixed *params);
void GLAPIENTRY _dispatch_stub_GetTexEnvxv(GLenum target, GLenum pname, GLfixed *params);
void GLAPIENTRY _dispatch_stub_GetTexParameterxv(GLenum target, GLenum pname, GLfixed *params);
void GLAPIENTRY _dispatch_stub_PointParameterx(GLenum pname, GLfixed param);
void GLAPIENTRY _dispatch_stub_PointParameterxv(GLenum pname, const GLfixed *params);
void GLAPIENTRY _dispatch_stub_TexParameterxv(GLenum target, GLenum pname, const GLfixed *params);
void GLAPIENTRY _dispatch_stub_BlendBarrier(void);
void GLAPIENTRY _dispatch_stub_PrimitiveBoundingBox(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);
void GLAPIENTRY _dispatch_stub_MaxShaderCompilerThreadsKHR(GLuint count);
void GLAPIENTRY _dispatch_stub_MatrixLoadfEXT(GLenum matrixMode, const GLfloat *m);
void GLAPIENTRY _dispatch_stub_MatrixLoaddEXT(GLenum matrixMode, const GLdouble *m);
void GLAPIENTRY _dispatch_stub_MatrixMultfEXT(GLenum matrixMode, const GLfloat *m);
void GLAPIENTRY _dispatch_stub_MatrixMultdEXT(GLenum matrixMode, const GLdouble *m);
void GLAPIENTRY _dispatch_stub_MatrixLoadIdentityEXT(GLenum matrixMode);
void GLAPIENTRY _dispatch_stub_MatrixRotatefEXT(GLenum matrixMode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
void GLAPIENTRY _dispatch_stub_MatrixRotatedEXT(GLenum matrixMode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
void GLAPIENTRY _dispatch_stub_MatrixScalefEXT(GLenum matrixMode, GLfloat x, GLfloat y, GLfloat z);
void GLAPIENTRY _dispatch_stub_MatrixScaledEXT(GLenum matrixMode, GLdouble x, GLdouble y, GLdouble z);
void GLAPIENTRY _dispatch_stub_MatrixTranslatefEXT(GLenum matrixMode, GLfloat x, GLfloat y, GLfloat z);
void GLAPIENTRY _dispatch_stub_MatrixTranslatedEXT(GLenum matrixMode, GLdouble x, GLdouble y, GLdouble z);
void GLAPIENTRY _dispatch_stub_MatrixOrthoEXT(GLenum matrixMode, GLdouble l, GLdouble r, GLdouble b, GLdouble t, GLdouble n, GLdouble f);
void GLAPIENTRY _dispatch_stub_MatrixFrustumEXT(GLenum matrixMode, GLdouble l, GLdouble r, GLdouble b, GLdouble t, GLdouble n, GLdouble f);
void GLAPIENTRY _dispatch_stub_MatrixPushEXT(GLenum matrixMode);
void GLAPIENTRY _dispatch_stub_MatrixPopEXT(GLenum matrixMode);
void GLAPIENTRY _dispatch_stub_MatrixLoadTransposefEXT(GLenum matrixMode, const GLfloat *m);
void GLAPIENTRY _dispatch_stub_MatrixLoadTransposedEXT(GLenum matrixMode, const GLdouble *m);
void GLAPIENTRY _dispatch_stub_MatrixMultTransposefEXT(GLenum matrixMode, const GLfloat *m);
void GLAPIENTRY _dispatch_stub_MatrixMultTransposedEXT(GLenum matrixMode, const GLdouble *m);
void GLAPIENTRY _dispatch_stub_BindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture);
void GLAPIENTRY _dispatch_stub_NamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage);
void GLAPIENTRY _dispatch_stub_NamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_NamedBufferStorageEXT(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLbitfield flags);
GLvoid * GLAPIENTRY _dispatch_stub_MapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
void GLAPIENTRY _dispatch_stub_TextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
void GLAPIENTRY _dispatch_stub_TextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
void GLAPIENTRY _dispatch_stub_TextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
void GLAPIENTRY _dispatch_stub_TextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
void GLAPIENTRY _dispatch_stub_TextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
void GLAPIENTRY _dispatch_stub_TextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
void GLAPIENTRY _dispatch_stub_CopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, int border);
void GLAPIENTRY _dispatch_stub_CopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, int border);
void GLAPIENTRY _dispatch_stub_CopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void GLAPIENTRY _dispatch_stub_CopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void GLAPIENTRY _dispatch_stub_CopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLvoid * GLAPIENTRY _dispatch_stub_MapNamedBufferEXT(GLuint buffer, GLenum access);
void GLAPIENTRY _dispatch_stub_GetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_GetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, float *params);
void GLAPIENTRY _dispatch_stub_TextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, int param);
void GLAPIENTRY _dispatch_stub_TextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params);
void GLAPIENTRY _dispatch_stub_TextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, float param);
void GLAPIENTRY _dispatch_stub_TextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const float *params);
void GLAPIENTRY _dispatch_stub_GetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
void GLAPIENTRY _dispatch_stub_GetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_GetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, float *params);
void GLAPIENTRY _dispatch_stub_GetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data);
void GLAPIENTRY _dispatch_stub_GetNamedBufferPointervEXT(GLuint buffer, GLenum pname, GLvoid **params);
void GLAPIENTRY _dispatch_stub_GetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_FlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length);
void GLAPIENTRY _dispatch_stub_FramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode);
void GLAPIENTRY _dispatch_stub_FramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum *bufs);
void GLAPIENTRY _dispatch_stub_FramebufferReadBufferEXT(GLuint framebuffer, GLenum mode);
void GLAPIENTRY _dispatch_stub_GetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *param);
GLenum GLAPIENTRY _dispatch_stub_CheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target);
void GLAPIENTRY _dispatch_stub_NamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void GLAPIENTRY _dispatch_stub_NamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void GLAPIENTRY _dispatch_stub_NamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
void GLAPIENTRY _dispatch_stub_NamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void GLAPIENTRY _dispatch_stub_GetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_EnableClientStateiEXT(GLenum array, GLuint index);
void GLAPIENTRY _dispatch_stub_DisableClientStateiEXT(GLenum array, GLuint index);
void GLAPIENTRY _dispatch_stub_GetPointerIndexedvEXT(GLenum target, GLuint index, GLvoid**params);
void GLAPIENTRY _dispatch_stub_MultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param);
void GLAPIENTRY _dispatch_stub_MultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *param);
void GLAPIENTRY _dispatch_stub_MultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
void GLAPIENTRY _dispatch_stub_MultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *param);
void GLAPIENTRY _dispatch_stub_GetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *param);
void GLAPIENTRY _dispatch_stub_GetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *param);
void GLAPIENTRY _dispatch_stub_MultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param);
void GLAPIENTRY _dispatch_stub_MultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint*param);
void GLAPIENTRY _dispatch_stub_MultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
void GLAPIENTRY _dispatch_stub_MultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat*param);
void GLAPIENTRY _dispatch_stub_GetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid*pixels);
void GLAPIENTRY _dispatch_stub_MultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid*pixels);
void GLAPIENTRY _dispatch_stub_MultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid*pixels);
void GLAPIENTRY _dispatch_stub_MultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid*pixels);
void GLAPIENTRY _dispatch_stub_MultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid*pixels);
void GLAPIENTRY _dispatch_stub_MultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid*pixels);
void GLAPIENTRY _dispatch_stub_MultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid*pixels);
void GLAPIENTRY _dispatch_stub_GetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint*params);
void GLAPIENTRY _dispatch_stub_GetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat*params);
void GLAPIENTRY _dispatch_stub_CopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
void GLAPIENTRY _dispatch_stub_CopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void GLAPIENTRY _dispatch_stub_CopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
void GLAPIENTRY _dispatch_stub_CopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void GLAPIENTRY _dispatch_stub_CopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void GLAPIENTRY _dispatch_stub_MultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
void GLAPIENTRY _dispatch_stub_MultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble*param);
void GLAPIENTRY _dispatch_stub_MultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
void GLAPIENTRY _dispatch_stub_MultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *param);
void GLAPIENTRY _dispatch_stub_MultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param);
void GLAPIENTRY _dispatch_stub_MultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint *param);
void GLAPIENTRY _dispatch_stub_GetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble *param);
void GLAPIENTRY _dispatch_stub_GetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat *param);
void GLAPIENTRY _dispatch_stub_GetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint *param);
void GLAPIENTRY _dispatch_stub_MultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void GLAPIENTRY _dispatch_stub_BindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);
void GLAPIENTRY _dispatch_stub_CompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei border, GLsizei imageSize, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_CompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei border, GLsizei imageSize, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_CompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei border, GLsizei imageSize, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_CompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_CompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_CompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_GetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint level, GLvoid *img);
void GLAPIENTRY _dispatch_stub_CompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei border, GLsizei imageSize, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_CompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei border, GLsizei imageSize, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_CompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei border, GLsizei imageSize, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_CompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_CompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_CompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_GetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLvoid *img);
void GLAPIENTRY _dispatch_stub_GetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint*params);
void GLAPIENTRY _dispatch_stub_GetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat*params);
void GLAPIENTRY _dispatch_stub_FramebufferParameteriMESA(GLenum target, GLenum pname, GLint param);
void GLAPIENTRY _dispatch_stub_GetFramebufferParameterivMESA(GLenum target, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_NamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
void GLAPIENTRY _dispatch_stub_GetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_ClientAttribDefaultEXT(GLbitfield mask);
void GLAPIENTRY _dispatch_stub_PushClientAttribDefaultEXT(GLbitfield mask);
void GLAPIENTRY _dispatch_stub_NamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid*string);
void GLAPIENTRY _dispatch_stub_GetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, GLvoid*string);
void GLAPIENTRY _dispatch_stub_NamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void GLAPIENTRY _dispatch_stub_NamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat*params);
void GLAPIENTRY _dispatch_stub_GetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat*params);
void GLAPIENTRY _dispatch_stub_NamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void GLAPIENTRY _dispatch_stub_NamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble*params);
void GLAPIENTRY _dispatch_stub_GetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble*params);
void GLAPIENTRY _dispatch_stub_GetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint*params);
void GLAPIENTRY _dispatch_stub_TextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
void GLAPIENTRY _dispatch_stub_MultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
void GLAPIENTRY _dispatch_stub_TextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint*params);
void GLAPIENTRY _dispatch_stub_TextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint*params);
void GLAPIENTRY _dispatch_stub_GetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint*params);
void GLAPIENTRY _dispatch_stub_GetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint*params);
void GLAPIENTRY _dispatch_stub_MultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint*params);
void GLAPIENTRY _dispatch_stub_MultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint*params);
void GLAPIENTRY _dispatch_stub_GetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint*params);
void GLAPIENTRY _dispatch_stub_GetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint*params);
void GLAPIENTRY _dispatch_stub_NamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat*params);
void GLAPIENTRY _dispatch_stub_GenerateTextureMipmapEXT(GLuint texture, GLenum target);
void GLAPIENTRY _dispatch_stub_GenerateMultiTexMipmapEXT(GLenum texunit, GLenum target);
void GLAPIENTRY _dispatch_stub_NamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
void GLAPIENTRY _dispatch_stub_NamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
void GLAPIENTRY _dispatch_stub_VertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
void GLAPIENTRY _dispatch_stub_VertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
void GLAPIENTRY _dispatch_stub_VertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset);
void GLAPIENTRY _dispatch_stub_VertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
void GLAPIENTRY _dispatch_stub_VertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
void GLAPIENTRY _dispatch_stub_VertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
void GLAPIENTRY _dispatch_stub_VertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset);
void GLAPIENTRY _dispatch_stub_VertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
void GLAPIENTRY _dispatch_stub_VertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
void GLAPIENTRY _dispatch_stub_VertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
void GLAPIENTRY _dispatch_stub_VertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
void GLAPIENTRY _dispatch_stub_EnableVertexArrayEXT(GLuint vaobj, GLenum array);
void GLAPIENTRY _dispatch_stub_DisableVertexArrayEXT(GLuint vaobj, GLenum array);
void GLAPIENTRY _dispatch_stub_EnableVertexArrayAttribEXT(GLuint vaobj, GLuint index);
void GLAPIENTRY _dispatch_stub_DisableVertexArrayAttribEXT(GLuint vaobj, GLuint index);
void GLAPIENTRY _dispatch_stub_GetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint*param);
void GLAPIENTRY _dispatch_stub_GetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, GLvoid**param);
void GLAPIENTRY _dispatch_stub_GetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint*param);
void GLAPIENTRY _dispatch_stub_GetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLvoid**param);
void GLAPIENTRY _dispatch_stub_ClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_ClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_NamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param);
void GLAPIENTRY _dispatch_stub_GetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint*params);
void GLAPIENTRY _dispatch_stub_VertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
void GLAPIENTRY _dispatch_stub_VertexArrayVertexAttribDivisorEXT(GLuint vaobj, GLuint index, GLuint divisor);
void GLAPIENTRY _dispatch_stub_TextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
void GLAPIENTRY _dispatch_stub_TextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
void GLAPIENTRY _dispatch_stub_TextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
void GLAPIENTRY _dispatch_stub_VertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
void GLAPIENTRY _dispatch_stub_VertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
void GLAPIENTRY _dispatch_stub_VertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void GLAPIENTRY _dispatch_stub_VertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
void GLAPIENTRY _dispatch_stub_VertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
void GLAPIENTRY _dispatch_stub_VertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor);
void GLAPIENTRY _dispatch_stub_NamedBufferPageCommitmentEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
void GLAPIENTRY _dispatch_stub_NamedStringARB(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);
void GLAPIENTRY _dispatch_stub_DeleteNamedStringARB(GLint namelen, const GLchar *name);
void GLAPIENTRY _dispatch_stub_CompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar * const *path, const GLint *length);
GLboolean GLAPIENTRY _dispatch_stub_IsNamedStringARB(GLint namelen, const GLchar *name);
void GLAPIENTRY _dispatch_stub_GetNamedStringARB(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);
void GLAPIENTRY _dispatch_stub_GetNamedStringivARB(GLint namelen, const GLchar *name, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_EGLImageTargetTexStorageEXT(GLenum target, GLvoid *image, const GLint *attrib_list);
void GLAPIENTRY _dispatch_stub_EGLImageTargetTextureStorageEXT(GLuint texture, GLvoid *image, const GLint *attrib_list);
void GLAPIENTRY _dispatch_stub_CopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
void GLAPIENTRY _dispatch_stub_ViewportSwizzleNV(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew);
void GLAPIENTRY _dispatch_stub_AlphaToCoverageDitherControlNV(GLenum mode);
void GLAPIENTRY _dispatch_stub_InternalBufferSubDataCopyMESA(GLintptr srcBuffer, GLuint srcOffset, GLuint dstTargetOrName, GLintptr dstOffset, GLsizeiptr size, GLboolean named, GLboolean ext_dsa);
void GLAPIENTRY _dispatch_stub_Vertex2hNV(GLhalfNV x, GLhalfNV y);
void GLAPIENTRY _dispatch_stub_Vertex2hvNV(const GLhalfNV *v);
void GLAPIENTRY _dispatch_stub_Vertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z);
void GLAPIENTRY _dispatch_stub_Vertex3hvNV(const GLhalfNV *v);
void GLAPIENTRY _dispatch_stub_Vertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
void GLAPIENTRY _dispatch_stub_Vertex4hvNV(const GLhalfNV *v);
void GLAPIENTRY _dispatch_stub_Normal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
void GLAPIENTRY _dispatch_stub_Normal3hvNV(const GLhalfNV *v);
void GLAPIENTRY _dispatch_stub_Color3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
void GLAPIENTRY _dispatch_stub_Color3hvNV(const GLhalfNV *v);
void GLAPIENTRY _dispatch_stub_Color4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
void GLAPIENTRY _dispatch_stub_Color4hvNV(const GLhalfNV *v);
void GLAPIENTRY _dispatch_stub_TexCoord1hNV(GLhalfNV s);
void GLAPIENTRY _dispatch_stub_TexCoord1hvNV(const GLhalfNV *v);
void GLAPIENTRY _dispatch_stub_TexCoord2hNV(GLhalfNV s, GLhalfNV t);
void GLAPIENTRY _dispatch_stub_TexCoord2hvNV(const GLhalfNV *v);
void GLAPIENTRY _dispatch_stub_TexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r);
void GLAPIENTRY _dispatch_stub_TexCoord3hvNV(const GLhalfNV *v);
void GLAPIENTRY _dispatch_stub_TexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
void GLAPIENTRY _dispatch_stub_TexCoord4hvNV(const GLhalfNV *v);
void GLAPIENTRY _dispatch_stub_MultiTexCoord1hNV(GLenum target, GLhalfNV s);
void GLAPIENTRY _dispatch_stub_MultiTexCoord1hvNV(GLenum target, const GLhalfNV *v);
void GLAPIENTRY _dispatch_stub_MultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t);
void GLAPIENTRY _dispatch_stub_MultiTexCoord2hvNV(GLenum target, const GLhalfNV *v);
void GLAPIENTRY _dispatch_stub_MultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
void GLAPIENTRY _dispatch_stub_MultiTexCoord3hvNV(GLenum target, const GLhalfNV *v);
void GLAPIENTRY _dispatch_stub_MultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
void GLAPIENTRY _dispatch_stub_MultiTexCoord4hvNV(GLenum target, const GLhalfNV *v);
void GLAPIENTRY _dispatch_stub_FogCoordhNV(GLhalfNV x);
void GLAPIENTRY _dispatch_stub_FogCoordhvNV(const GLhalfNV *v);
void GLAPIENTRY _dispatch_stub_SecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
void GLAPIENTRY _dispatch_stub_SecondaryColor3hvNV(const GLhalfNV *v);
void GLAPIENTRY _dispatch_stub_InternalSetError(GLenum error);
void GLAPIENTRY _dispatch_stub_VertexAttrib1hNV(GLuint index, GLhalfNV x);
void GLAPIENTRY _dispatch_stub_VertexAttrib1hvNV(GLuint index, const GLhalfNV *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y);
void GLAPIENTRY _dispatch_stub_VertexAttrib2hvNV(GLuint index, const GLhalfNV *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
void GLAPIENTRY _dispatch_stub_VertexAttrib3hvNV(GLuint index, const GLhalfNV *v);
void GLAPIENTRY _dispatch_stub_VertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
void GLAPIENTRY _dispatch_stub_VertexAttrib4hvNV(GLuint index, const GLhalfNV *v);
void GLAPIENTRY _dispatch_stub_VertexAttribs1hvNV(GLuint index, GLsizei n, const GLhalfNV *v);
void GLAPIENTRY _dispatch_stub_VertexAttribs2hvNV(GLuint index, GLsizei n, const GLhalfNV *v);
void GLAPIENTRY _dispatch_stub_VertexAttribs3hvNV(GLuint index, GLsizei n, const GLhalfNV *v);
void GLAPIENTRY _dispatch_stub_VertexAttribs4hvNV(GLuint index, GLsizei n, const GLhalfNV *v);
void GLAPIENTRY _dispatch_stub_TexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
void GLAPIENTRY _dispatch_stub_TexturePageCommitmentEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
void GLAPIENTRY _dispatch_stub_ImportMemoryWin32HandleEXT(GLuint memory, GLuint64 size, GLenum handleType, GLvoid *handle);
void GLAPIENTRY _dispatch_stub_ImportSemaphoreWin32HandleEXT(GLuint semaphore, GLenum handleType, GLvoid *handle);
void GLAPIENTRY _dispatch_stub_ImportMemoryWin32NameEXT(GLuint memory, GLuint64 size, GLenum handleType, const GLvoid *name);
void GLAPIENTRY _dispatch_stub_ImportSemaphoreWin32NameEXT(GLuint semaphore, GLenum handleType, const GLvoid *handle);
void GLAPIENTRY _dispatch_stub_GetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label);
void GLAPIENTRY _dispatch_stub_LabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar *label);
void GLAPIENTRY _dispatch_stub_DrawArraysUserBuf(void);
void GLAPIENTRY _dispatch_stub_DrawElementsUserBuf(const GLvoid *cmd);
void GLAPIENTRY _dispatch_stub_MultiDrawArraysUserBuf(void);
void GLAPIENTRY _dispatch_stub_MultiDrawElementsUserBuf(GLintptr indexBuf, GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, const GLint *basevertex);
void GLAPIENTRY _dispatch_stub_DrawArraysInstancedBaseInstanceDrawID(void);
void GLAPIENTRY _dispatch_stub_DrawElementsInstancedBaseVertexBaseInstanceDrawID(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instance_count, GLint basevertex, GLuint baseinstance, GLuint drawid);
void GLAPIENTRY _dispatch_stub_InternalInvalidateFramebufferAncillaryMESA(void);
void GLAPIENTRY _dispatch_stub_DrawElementsPacked(GLenum mode, GLenum type, GLushort count, GLushort indices);
void GLAPIENTRY _dispatch_stub_DrawElementsUserBufPacked(const GLvoid *cmd);
void GLAPIENTRY _dispatch_stub_TexStorageAttribs2DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, const GLint *attrib_list);
void GLAPIENTRY _dispatch_stub_TexStorageAttribs3DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, const GLint *attrib_list);
void GLAPIENTRY _dispatch_stub_FramebufferTextureMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseviewindex, GLsizei numviews);
void GLAPIENTRY _dispatch_stub_NamedFramebufferTextureMultiviewOVR(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint baseviewindex, GLsizei numviews);
void GLAPIENTRY _dispatch_stub_FramebufferTextureMultisampleMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLsizei samples, GLint baseviewindex, GLsizei numviews);
void GLAPIENTRY _dispatch_stub_ColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
void GLAPIENTRY _dispatch_stub_ColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params);
void GLAPIENTRY _dispatch_stub_ColorTableParameteriv(GLenum target, GLenum pname, const GLint *params);
void GLAPIENTRY _dispatch_stub_CopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
void GLAPIENTRY _dispatch_stub_GetColorTable(GLenum target, GLenum format, GLenum type, GLvoid *table);
void GLAPIENTRY _dispatch_stub_GetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params);
void GLAPIENTRY _dispatch_stub_GetColorTableParameteriv(GLenum target, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_ColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
void GLAPIENTRY _dispatch_stub_CopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
void GLAPIENTRY _dispatch_stub_ConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
void GLAPIENTRY _dispatch_stub_ConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
void GLAPIENTRY _dispatch_stub_ConvolutionParameterf(GLenum target, GLenum pname, GLfloat params);
void GLAPIENTRY _dispatch_stub_ConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params);
void GLAPIENTRY _dispatch_stub_ConvolutionParameteri(GLenum target, GLenum pname, GLint params);
void GLAPIENTRY _dispatch_stub_ConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params);
void GLAPIENTRY _dispatch_stub_CopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
void GLAPIENTRY _dispatch_stub_CopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
void GLAPIENTRY _dispatch_stub_GetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid *image);
void GLAPIENTRY _dispatch_stub_GetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params);
void GLAPIENTRY _dispatch_stub_GetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_GetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
void GLAPIENTRY _dispatch_stub_SeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
void GLAPIENTRY _dispatch_stub_GetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
void GLAPIENTRY _dispatch_stub_GetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params);
void GLAPIENTRY _dispatch_stub_GetHistogramParameteriv(GLenum target, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_GetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
void GLAPIENTRY _dispatch_stub_GetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params);
void GLAPIENTRY _dispatch_stub_GetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params);
void GLAPIENTRY _dispatch_stub_Histogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
void GLAPIENTRY _dispatch_stub_Minmax(GLenum target, GLenum internalformat, GLboolean sink);
void GLAPIENTRY _dispatch_stub_ResetHistogram(GLenum target);
void GLAPIENTRY _dispatch_stub_ResetMinmax(GLenum target);
void GLAPIENTRY _dispatch_stub_GetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table);
void GLAPIENTRY _dispatch_stub_GetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image);
void GLAPIENTRY _dispatch_stub_GetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values);
void GLAPIENTRY _dispatch_stub_GetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values);
void GLAPIENTRY _dispatch_stub_GetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span);
#undef MAPI_TMP_DEFINES
#endif /* MAPI_TMP_DEFINES */

#ifdef MAPI_TMP_NOOP_ARRAY

static void GLAPIENTRY noopNewList(GLuint list, GLenum mode)
{
   (void) list; (void) mode;
   _mesa_noop_entrypoint("glNewList");
}

static void GLAPIENTRY noopEndList(void)
{
      _mesa_noop_entrypoint("glEndList");
}

static void GLAPIENTRY noopCallList(GLuint list)
{
   (void) list;
   _mesa_noop_entrypoint("glCallList");
}

static void GLAPIENTRY noopCallLists(GLsizei n, GLenum type, const GLvoid *lists)
{
   (void) n; (void) type; (void) lists;
   _mesa_noop_entrypoint("glCallLists");
}

static void GLAPIENTRY noopDeleteLists(GLuint list, GLsizei range)
{
   (void) list; (void) range;
   _mesa_noop_entrypoint("glDeleteLists");
}

static GLuint GLAPIENTRY noopGenLists(GLsizei range)
{
   (void) range;
   _mesa_noop_entrypoint("glGenLists");
   return (GLuint) 0;
}

static void GLAPIENTRY noopListBase(GLuint base)
{
   (void) base;
   _mesa_noop_entrypoint("glListBase");
}

static void GLAPIENTRY noopBegin(GLenum mode)
{
   (void) mode;
   _mesa_noop_entrypoint("glBegin");
}

static void GLAPIENTRY noopBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)
{
   (void) width; (void) height; (void) xorig; (void) yorig; (void) xmove; (void) ymove; (void) bitmap;
   _mesa_noop_entrypoint("glBitmap");
}

static void GLAPIENTRY noopColor3b(GLbyte red, GLbyte green, GLbyte blue)
{
   (void) red; (void) green; (void) blue;
   _mesa_noop_entrypoint("glColor3b");
}

static void GLAPIENTRY noopColor3bv(const GLbyte *v)
{
   (void) v;
   _mesa_noop_entrypoint("glColor3bv");
}

static void GLAPIENTRY noopColor3d(GLdouble red, GLdouble green, GLdouble blue)
{
   (void) red; (void) green; (void) blue;
   _mesa_noop_entrypoint("glColor3d");
}

static void GLAPIENTRY noopColor3dv(const GLdouble *v)
{
   (void) v;
   _mesa_noop_entrypoint("glColor3dv");
}

static void GLAPIENTRY noopColor3f(GLfloat red, GLfloat green, GLfloat blue)
{
   (void) red; (void) green; (void) blue;
   _mesa_noop_entrypoint("glColor3f");
}

static void GLAPIENTRY noopColor3fv(const GLfloat *v)
{
   (void) v;
   _mesa_noop_entrypoint("glColor3fv");
}

static void GLAPIENTRY noopColor3i(GLint red, GLint green, GLint blue)
{
   (void) red; (void) green; (void) blue;
   _mesa_noop_entrypoint("glColor3i");
}

static void GLAPIENTRY noopColor3iv(const GLint *v)
{
   (void) v;
   _mesa_noop_entrypoint("glColor3iv");
}

static void GLAPIENTRY noopColor3s(GLshort red, GLshort green, GLshort blue)
{
   (void) red; (void) green; (void) blue;
   _mesa_noop_entrypoint("glColor3s");
}

static void GLAPIENTRY noopColor3sv(const GLshort *v)
{
   (void) v;
   _mesa_noop_entrypoint("glColor3sv");
}

static void GLAPIENTRY noopColor3ub(GLubyte red, GLubyte green, GLubyte blue)
{
   (void) red; (void) green; (void) blue;
   _mesa_noop_entrypoint("glColor3ub");
}

static void GLAPIENTRY noopColor3ubv(const GLubyte *v)
{
   (void) v;
   _mesa_noop_entrypoint("glColor3ubv");
}

static void GLAPIENTRY noopColor3ui(GLuint red, GLuint green, GLuint blue)
{
   (void) red; (void) green; (void) blue;
   _mesa_noop_entrypoint("glColor3ui");
}

static void GLAPIENTRY noopColor3uiv(const GLuint *v)
{
   (void) v;
   _mesa_noop_entrypoint("glColor3uiv");
}

static void GLAPIENTRY noopColor3us(GLushort red, GLushort green, GLushort blue)
{
   (void) red; (void) green; (void) blue;
   _mesa_noop_entrypoint("glColor3us");
}

static void GLAPIENTRY noopColor3usv(const GLushort *v)
{
   (void) v;
   _mesa_noop_entrypoint("glColor3usv");
}

static void GLAPIENTRY noopColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   _mesa_noop_entrypoint("glColor4b");
}

static void GLAPIENTRY noopColor4bv(const GLbyte *v)
{
   (void) v;
   _mesa_noop_entrypoint("glColor4bv");
}

static void GLAPIENTRY noopColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   _mesa_noop_entrypoint("glColor4d");
}

static void GLAPIENTRY noopColor4dv(const GLdouble *v)
{
   (void) v;
   _mesa_noop_entrypoint("glColor4dv");
}

static void GLAPIENTRY noopColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   _mesa_noop_entrypoint("glColor4f");
}

static void GLAPIENTRY noopColor4fv(const GLfloat *v)
{
   (void) v;
   _mesa_noop_entrypoint("glColor4fv");
}

static void GLAPIENTRY noopColor4i(GLint red, GLint green, GLint blue, GLint alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   _mesa_noop_entrypoint("glColor4i");
}

static void GLAPIENTRY noopColor4iv(const GLint *v)
{
   (void) v;
   _mesa_noop_entrypoint("glColor4iv");
}

static void GLAPIENTRY noopColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   _mesa_noop_entrypoint("glColor4s");
}

static void GLAPIENTRY noopColor4sv(const GLshort *v)
{
   (void) v;
   _mesa_noop_entrypoint("glColor4sv");
}

static void GLAPIENTRY noopColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   _mesa_noop_entrypoint("glColor4ub");
}

static void GLAPIENTRY noopColor4ubv(const GLubyte *v)
{
   (void) v;
   _mesa_noop_entrypoint("glColor4ubv");
}

static void GLAPIENTRY noopColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   _mesa_noop_entrypoint("glColor4ui");
}

static void GLAPIENTRY noopColor4uiv(const GLuint *v)
{
   (void) v;
   _mesa_noop_entrypoint("glColor4uiv");
}

static void GLAPIENTRY noopColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   _mesa_noop_entrypoint("glColor4us");
}

static void GLAPIENTRY noopColor4usv(const GLushort *v)
{
   (void) v;
   _mesa_noop_entrypoint("glColor4usv");
}

static void GLAPIENTRY noopEdgeFlag(GLboolean flag)
{
   (void) flag;
   _mesa_noop_entrypoint("glEdgeFlag");
}

static void GLAPIENTRY noopEdgeFlagv(const GLboolean *flag)
{
   (void) flag;
   _mesa_noop_entrypoint("glEdgeFlagv");
}

static void GLAPIENTRY noopEnd(void)
{
      _mesa_noop_entrypoint("glEnd");
}

static void GLAPIENTRY noopIndexd(GLdouble c)
{
   (void) c;
   _mesa_noop_entrypoint("glIndexd");
}

static void GLAPIENTRY noopIndexdv(const GLdouble *c)
{
   (void) c;
   _mesa_noop_entrypoint("glIndexdv");
}

static void GLAPIENTRY noopIndexf(GLfloat c)
{
   (void) c;
   _mesa_noop_entrypoint("glIndexf");
}

static void GLAPIENTRY noopIndexfv(const GLfloat *c)
{
   (void) c;
   _mesa_noop_entrypoint("glIndexfv");
}

static void GLAPIENTRY noopIndexi(GLint c)
{
   (void) c;
   _mesa_noop_entrypoint("glIndexi");
}

static void GLAPIENTRY noopIndexiv(const GLint *c)
{
   (void) c;
   _mesa_noop_entrypoint("glIndexiv");
}

static void GLAPIENTRY noopIndexs(GLshort c)
{
   (void) c;
   _mesa_noop_entrypoint("glIndexs");
}

static void GLAPIENTRY noopIndexsv(const GLshort *c)
{
   (void) c;
   _mesa_noop_entrypoint("glIndexsv");
}

static void GLAPIENTRY noopNormal3b(GLbyte nx, GLbyte ny, GLbyte nz)
{
   (void) nx; (void) ny; (void) nz;
   _mesa_noop_entrypoint("glNormal3b");
}

static void GLAPIENTRY noopNormal3bv(const GLbyte *v)
{
   (void) v;
   _mesa_noop_entrypoint("glNormal3bv");
}

static void GLAPIENTRY noopNormal3d(GLdouble nx, GLdouble ny, GLdouble nz)
{
   (void) nx; (void) ny; (void) nz;
   _mesa_noop_entrypoint("glNormal3d");
}

static void GLAPIENTRY noopNormal3dv(const GLdouble *v)
{
   (void) v;
   _mesa_noop_entrypoint("glNormal3dv");
}

static void GLAPIENTRY noopNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)
{
   (void) nx; (void) ny; (void) nz;
   _mesa_noop_entrypoint("glNormal3f");
}

static void GLAPIENTRY noopNormal3fv(const GLfloat *v)
{
   (void) v;
   _mesa_noop_entrypoint("glNormal3fv");
}

static void GLAPIENTRY noopNormal3i(GLint nx, GLint ny, GLint nz)
{
   (void) nx; (void) ny; (void) nz;
   _mesa_noop_entrypoint("glNormal3i");
}

static void GLAPIENTRY noopNormal3iv(const GLint *v)
{
   (void) v;
   _mesa_noop_entrypoint("glNormal3iv");
}

static void GLAPIENTRY noopNormal3s(GLshort nx, GLshort ny, GLshort nz)
{
   (void) nx; (void) ny; (void) nz;
   _mesa_noop_entrypoint("glNormal3s");
}

static void GLAPIENTRY noopNormal3sv(const GLshort *v)
{
   (void) v;
   _mesa_noop_entrypoint("glNormal3sv");
}

static void GLAPIENTRY noopRasterPos2d(GLdouble x, GLdouble y)
{
   (void) x; (void) y;
   _mesa_noop_entrypoint("glRasterPos2d");
}

static void GLAPIENTRY noopRasterPos2dv(const GLdouble *v)
{
   (void) v;
   _mesa_noop_entrypoint("glRasterPos2dv");
}

static void GLAPIENTRY noopRasterPos2f(GLfloat x, GLfloat y)
{
   (void) x; (void) y;
   _mesa_noop_entrypoint("glRasterPos2f");
}

static void GLAPIENTRY noopRasterPos2fv(const GLfloat *v)
{
   (void) v;
   _mesa_noop_entrypoint("glRasterPos2fv");
}

static void GLAPIENTRY noopRasterPos2i(GLint x, GLint y)
{
   (void) x; (void) y;
   _mesa_noop_entrypoint("glRasterPos2i");
}

static void GLAPIENTRY noopRasterPos2iv(const GLint *v)
{
   (void) v;
   _mesa_noop_entrypoint("glRasterPos2iv");
}

static void GLAPIENTRY noopRasterPos2s(GLshort x, GLshort y)
{
   (void) x; (void) y;
   _mesa_noop_entrypoint("glRasterPos2s");
}

static void GLAPIENTRY noopRasterPos2sv(const GLshort *v)
{
   (void) v;
   _mesa_noop_entrypoint("glRasterPos2sv");
}

static void GLAPIENTRY noopRasterPos3d(GLdouble x, GLdouble y, GLdouble z)
{
   (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glRasterPos3d");
}

static void GLAPIENTRY noopRasterPos3dv(const GLdouble *v)
{
   (void) v;
   _mesa_noop_entrypoint("glRasterPos3dv");
}

static void GLAPIENTRY noopRasterPos3f(GLfloat x, GLfloat y, GLfloat z)
{
   (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glRasterPos3f");
}

static void GLAPIENTRY noopRasterPos3fv(const GLfloat *v)
{
   (void) v;
   _mesa_noop_entrypoint("glRasterPos3fv");
}

static void GLAPIENTRY noopRasterPos3i(GLint x, GLint y, GLint z)
{
   (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glRasterPos3i");
}

static void GLAPIENTRY noopRasterPos3iv(const GLint *v)
{
   (void) v;
   _mesa_noop_entrypoint("glRasterPos3iv");
}

static void GLAPIENTRY noopRasterPos3s(GLshort x, GLshort y, GLshort z)
{
   (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glRasterPos3s");
}

static void GLAPIENTRY noopRasterPos3sv(const GLshort *v)
{
   (void) v;
   _mesa_noop_entrypoint("glRasterPos3sv");
}

static void GLAPIENTRY noopRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glRasterPos4d");
}

static void GLAPIENTRY noopRasterPos4dv(const GLdouble *v)
{
   (void) v;
   _mesa_noop_entrypoint("glRasterPos4dv");
}

static void GLAPIENTRY noopRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glRasterPos4f");
}

static void GLAPIENTRY noopRasterPos4fv(const GLfloat *v)
{
   (void) v;
   _mesa_noop_entrypoint("glRasterPos4fv");
}

static void GLAPIENTRY noopRasterPos4i(GLint x, GLint y, GLint z, GLint w)
{
   (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glRasterPos4i");
}

static void GLAPIENTRY noopRasterPos4iv(const GLint *v)
{
   (void) v;
   _mesa_noop_entrypoint("glRasterPos4iv");
}

static void GLAPIENTRY noopRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w)
{
   (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glRasterPos4s");
}

static void GLAPIENTRY noopRasterPos4sv(const GLshort *v)
{
   (void) v;
   _mesa_noop_entrypoint("glRasterPos4sv");
}

static void GLAPIENTRY noopRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
{
   (void) x1; (void) y1; (void) x2; (void) y2;
   _mesa_noop_entrypoint("glRectd");
}

static void GLAPIENTRY noopRectdv(const GLdouble *v1, const GLdouble *v2)
{
   (void) v1; (void) v2;
   _mesa_noop_entrypoint("glRectdv");
}

static void GLAPIENTRY noopRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
{
   (void) x1; (void) y1; (void) x2; (void) y2;
   _mesa_noop_entrypoint("glRectf");
}

static void GLAPIENTRY noopRectfv(const GLfloat *v1, const GLfloat *v2)
{
   (void) v1; (void) v2;
   _mesa_noop_entrypoint("glRectfv");
}

static void GLAPIENTRY noopRecti(GLint x1, GLint y1, GLint x2, GLint y2)
{
   (void) x1; (void) y1; (void) x2; (void) y2;
   _mesa_noop_entrypoint("glRecti");
}

static void GLAPIENTRY noopRectiv(const GLint *v1, const GLint *v2)
{
   (void) v1; (void) v2;
   _mesa_noop_entrypoint("glRectiv");
}

static void GLAPIENTRY noopRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
{
   (void) x1; (void) y1; (void) x2; (void) y2;
   _mesa_noop_entrypoint("glRects");
}

static void GLAPIENTRY noopRectsv(const GLshort *v1, const GLshort *v2)
{
   (void) v1; (void) v2;
   _mesa_noop_entrypoint("glRectsv");
}

static void GLAPIENTRY noopTexCoord1d(GLdouble s)
{
   (void) s;
   _mesa_noop_entrypoint("glTexCoord1d");
}

static void GLAPIENTRY noopTexCoord1dv(const GLdouble *v)
{
   (void) v;
   _mesa_noop_entrypoint("glTexCoord1dv");
}

static void GLAPIENTRY noopTexCoord1f(GLfloat s)
{
   (void) s;
   _mesa_noop_entrypoint("glTexCoord1f");
}

static void GLAPIENTRY noopTexCoord1fv(const GLfloat *v)
{
   (void) v;
   _mesa_noop_entrypoint("glTexCoord1fv");
}

static void GLAPIENTRY noopTexCoord1i(GLint s)
{
   (void) s;
   _mesa_noop_entrypoint("glTexCoord1i");
}

static void GLAPIENTRY noopTexCoord1iv(const GLint *v)
{
   (void) v;
   _mesa_noop_entrypoint("glTexCoord1iv");
}

static void GLAPIENTRY noopTexCoord1s(GLshort s)
{
   (void) s;
   _mesa_noop_entrypoint("glTexCoord1s");
}

static void GLAPIENTRY noopTexCoord1sv(const GLshort *v)
{
   (void) v;
   _mesa_noop_entrypoint("glTexCoord1sv");
}

static void GLAPIENTRY noopTexCoord2d(GLdouble s, GLdouble t)
{
   (void) s; (void) t;
   _mesa_noop_entrypoint("glTexCoord2d");
}

static void GLAPIENTRY noopTexCoord2dv(const GLdouble *v)
{
   (void) v;
   _mesa_noop_entrypoint("glTexCoord2dv");
}

static void GLAPIENTRY noopTexCoord2f(GLfloat s, GLfloat t)
{
   (void) s; (void) t;
   _mesa_noop_entrypoint("glTexCoord2f");
}

static void GLAPIENTRY noopTexCoord2fv(const GLfloat *v)
{
   (void) v;
   _mesa_noop_entrypoint("glTexCoord2fv");
}

static void GLAPIENTRY noopTexCoord2i(GLint s, GLint t)
{
   (void) s; (void) t;
   _mesa_noop_entrypoint("glTexCoord2i");
}

static void GLAPIENTRY noopTexCoord2iv(const GLint *v)
{
   (void) v;
   _mesa_noop_entrypoint("glTexCoord2iv");
}

static void GLAPIENTRY noopTexCoord2s(GLshort s, GLshort t)
{
   (void) s; (void) t;
   _mesa_noop_entrypoint("glTexCoord2s");
}

static void GLAPIENTRY noopTexCoord2sv(const GLshort *v)
{
   (void) v;
   _mesa_noop_entrypoint("glTexCoord2sv");
}

static void GLAPIENTRY noopTexCoord3d(GLdouble s, GLdouble t, GLdouble r)
{
   (void) s; (void) t; (void) r;
   _mesa_noop_entrypoint("glTexCoord3d");
}

static void GLAPIENTRY noopTexCoord3dv(const GLdouble *v)
{
   (void) v;
   _mesa_noop_entrypoint("glTexCoord3dv");
}

static void GLAPIENTRY noopTexCoord3f(GLfloat s, GLfloat t, GLfloat r)
{
   (void) s; (void) t; (void) r;
   _mesa_noop_entrypoint("glTexCoord3f");
}

static void GLAPIENTRY noopTexCoord3fv(const GLfloat *v)
{
   (void) v;
   _mesa_noop_entrypoint("glTexCoord3fv");
}

static void GLAPIENTRY noopTexCoord3i(GLint s, GLint t, GLint r)
{
   (void) s; (void) t; (void) r;
   _mesa_noop_entrypoint("glTexCoord3i");
}

static void GLAPIENTRY noopTexCoord3iv(const GLint *v)
{
   (void) v;
   _mesa_noop_entrypoint("glTexCoord3iv");
}

static void GLAPIENTRY noopTexCoord3s(GLshort s, GLshort t, GLshort r)
{
   (void) s; (void) t; (void) r;
   _mesa_noop_entrypoint("glTexCoord3s");
}

static void GLAPIENTRY noopTexCoord3sv(const GLshort *v)
{
   (void) v;
   _mesa_noop_entrypoint("glTexCoord3sv");
}

static void GLAPIENTRY noopTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
   (void) s; (void) t; (void) r; (void) q;
   _mesa_noop_entrypoint("glTexCoord4d");
}

static void GLAPIENTRY noopTexCoord4dv(const GLdouble *v)
{
   (void) v;
   _mesa_noop_entrypoint("glTexCoord4dv");
}

static void GLAPIENTRY noopTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
   (void) s; (void) t; (void) r; (void) q;
   _mesa_noop_entrypoint("glTexCoord4f");
}

static void GLAPIENTRY noopTexCoord4fv(const GLfloat *v)
{
   (void) v;
   _mesa_noop_entrypoint("glTexCoord4fv");
}

static void GLAPIENTRY noopTexCoord4i(GLint s, GLint t, GLint r, GLint q)
{
   (void) s; (void) t; (void) r; (void) q;
   _mesa_noop_entrypoint("glTexCoord4i");
}

static void GLAPIENTRY noopTexCoord4iv(const GLint *v)
{
   (void) v;
   _mesa_noop_entrypoint("glTexCoord4iv");
}

static void GLAPIENTRY noopTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q)
{
   (void) s; (void) t; (void) r; (void) q;
   _mesa_noop_entrypoint("glTexCoord4s");
}

static void GLAPIENTRY noopTexCoord4sv(const GLshort *v)
{
   (void) v;
   _mesa_noop_entrypoint("glTexCoord4sv");
}

static void GLAPIENTRY noopVertex2d(GLdouble x, GLdouble y)
{
   (void) x; (void) y;
   _mesa_noop_entrypoint("glVertex2d");
}

static void GLAPIENTRY noopVertex2dv(const GLdouble *v)
{
   (void) v;
   _mesa_noop_entrypoint("glVertex2dv");
}

static void GLAPIENTRY noopVertex2f(GLfloat x, GLfloat y)
{
   (void) x; (void) y;
   _mesa_noop_entrypoint("glVertex2f");
}

static void GLAPIENTRY noopVertex2fv(const GLfloat *v)
{
   (void) v;
   _mesa_noop_entrypoint("glVertex2fv");
}

static void GLAPIENTRY noopVertex2i(GLint x, GLint y)
{
   (void) x; (void) y;
   _mesa_noop_entrypoint("glVertex2i");
}

static void GLAPIENTRY noopVertex2iv(const GLint *v)
{
   (void) v;
   _mesa_noop_entrypoint("glVertex2iv");
}

static void GLAPIENTRY noopVertex2s(GLshort x, GLshort y)
{
   (void) x; (void) y;
   _mesa_noop_entrypoint("glVertex2s");
}

static void GLAPIENTRY noopVertex2sv(const GLshort *v)
{
   (void) v;
   _mesa_noop_entrypoint("glVertex2sv");
}

static void GLAPIENTRY noopVertex3d(GLdouble x, GLdouble y, GLdouble z)
{
   (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glVertex3d");
}

static void GLAPIENTRY noopVertex3dv(const GLdouble *v)
{
   (void) v;
   _mesa_noop_entrypoint("glVertex3dv");
}

static void GLAPIENTRY noopVertex3f(GLfloat x, GLfloat y, GLfloat z)
{
   (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glVertex3f");
}

static void GLAPIENTRY noopVertex3fv(const GLfloat *v)
{
   (void) v;
   _mesa_noop_entrypoint("glVertex3fv");
}

static void GLAPIENTRY noopVertex3i(GLint x, GLint y, GLint z)
{
   (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glVertex3i");
}

static void GLAPIENTRY noopVertex3iv(const GLint *v)
{
   (void) v;
   _mesa_noop_entrypoint("glVertex3iv");
}

static void GLAPIENTRY noopVertex3s(GLshort x, GLshort y, GLshort z)
{
   (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glVertex3s");
}

static void GLAPIENTRY noopVertex3sv(const GLshort *v)
{
   (void) v;
   _mesa_noop_entrypoint("glVertex3sv");
}

static void GLAPIENTRY noopVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glVertex4d");
}

static void GLAPIENTRY noopVertex4dv(const GLdouble *v)
{
   (void) v;
   _mesa_noop_entrypoint("glVertex4dv");
}

static void GLAPIENTRY noopVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glVertex4f");
}

static void GLAPIENTRY noopVertex4fv(const GLfloat *v)
{
   (void) v;
   _mesa_noop_entrypoint("glVertex4fv");
}

static void GLAPIENTRY noopVertex4i(GLint x, GLint y, GLint z, GLint w)
{
   (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glVertex4i");
}

static void GLAPIENTRY noopVertex4iv(const GLint *v)
{
   (void) v;
   _mesa_noop_entrypoint("glVertex4iv");
}

static void GLAPIENTRY noopVertex4s(GLshort x, GLshort y, GLshort z, GLshort w)
{
   (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glVertex4s");
}

static void GLAPIENTRY noopVertex4sv(const GLshort *v)
{
   (void) v;
   _mesa_noop_entrypoint("glVertex4sv");
}

static void GLAPIENTRY noopClipPlane(GLenum plane, const GLdouble *equation)
{
   (void) plane; (void) equation;
   _mesa_noop_entrypoint("glClipPlane");
}

static void GLAPIENTRY noopColorMaterial(GLenum face, GLenum mode)
{
   (void) face; (void) mode;
   _mesa_noop_entrypoint("glColorMaterial");
}

static void GLAPIENTRY noopCullFace(GLenum mode)
{
   (void) mode;
   _mesa_noop_entrypoint("glCullFace");
}

static void GLAPIENTRY noopFogf(GLenum pname, GLfloat param)
{
   (void) pname; (void) param;
   _mesa_noop_entrypoint("glFogf");
}

static void GLAPIENTRY noopFogfv(GLenum pname, const GLfloat *params)
{
   (void) pname; (void) params;
   _mesa_noop_entrypoint("glFogfv");
}

static void GLAPIENTRY noopFogi(GLenum pname, GLint param)
{
   (void) pname; (void) param;
   _mesa_noop_entrypoint("glFogi");
}

static void GLAPIENTRY noopFogiv(GLenum pname, const GLint *params)
{
   (void) pname; (void) params;
   _mesa_noop_entrypoint("glFogiv");
}

static void GLAPIENTRY noopFrontFace(GLenum mode)
{
   (void) mode;
   _mesa_noop_entrypoint("glFrontFace");
}

static void GLAPIENTRY noopHint(GLenum target, GLenum mode)
{
   (void) target; (void) mode;
   _mesa_noop_entrypoint("glHint");
}

static void GLAPIENTRY noopLightf(GLenum light, GLenum pname, GLfloat param)
{
   (void) light; (void) pname; (void) param;
   _mesa_noop_entrypoint("glLightf");
}

static void GLAPIENTRY noopLightfv(GLenum light, GLenum pname, const GLfloat *params)
{
   (void) light; (void) pname; (void) params;
   _mesa_noop_entrypoint("glLightfv");
}

static void GLAPIENTRY noopLighti(GLenum light, GLenum pname, GLint param)
{
   (void) light; (void) pname; (void) param;
   _mesa_noop_entrypoint("glLighti");
}

static void GLAPIENTRY noopLightiv(GLenum light, GLenum pname, const GLint *params)
{
   (void) light; (void) pname; (void) params;
   _mesa_noop_entrypoint("glLightiv");
}

static void GLAPIENTRY noopLightModelf(GLenum pname, GLfloat param)
{
   (void) pname; (void) param;
   _mesa_noop_entrypoint("glLightModelf");
}

static void GLAPIENTRY noopLightModelfv(GLenum pname, const GLfloat *params)
{
   (void) pname; (void) params;
   _mesa_noop_entrypoint("glLightModelfv");
}

static void GLAPIENTRY noopLightModeli(GLenum pname, GLint param)
{
   (void) pname; (void) param;
   _mesa_noop_entrypoint("glLightModeli");
}

static void GLAPIENTRY noopLightModeliv(GLenum pname, const GLint *params)
{
   (void) pname; (void) params;
   _mesa_noop_entrypoint("glLightModeliv");
}

static void GLAPIENTRY noopLineStipple(GLint factor, GLushort pattern)
{
   (void) factor; (void) pattern;
   _mesa_noop_entrypoint("glLineStipple");
}

static void GLAPIENTRY noopLineWidth(GLfloat width)
{
   (void) width;
   _mesa_noop_entrypoint("glLineWidth");
}

static void GLAPIENTRY noopMaterialf(GLenum face, GLenum pname, GLfloat param)
{
   (void) face; (void) pname; (void) param;
   _mesa_noop_entrypoint("glMaterialf");
}

static void GLAPIENTRY noopMaterialfv(GLenum face, GLenum pname, const GLfloat *params)
{
   (void) face; (void) pname; (void) params;
   _mesa_noop_entrypoint("glMaterialfv");
}

static void GLAPIENTRY noopMateriali(GLenum face, GLenum pname, GLint param)
{
   (void) face; (void) pname; (void) param;
   _mesa_noop_entrypoint("glMateriali");
}

static void GLAPIENTRY noopMaterialiv(GLenum face, GLenum pname, const GLint *params)
{
   (void) face; (void) pname; (void) params;
   _mesa_noop_entrypoint("glMaterialiv");
}

static void GLAPIENTRY noopPointSize(GLfloat size)
{
   (void) size;
   _mesa_noop_entrypoint("glPointSize");
}

static void GLAPIENTRY noopPolygonMode(GLenum face, GLenum mode)
{
   (void) face; (void) mode;
   _mesa_noop_entrypoint("glPolygonMode");
}

static void GLAPIENTRY noopPolygonStipple(const GLubyte *mask)
{
   (void) mask;
   _mesa_noop_entrypoint("glPolygonStipple");
}

static void GLAPIENTRY noopScissor(GLint x, GLint y, GLsizei width, GLsizei height)
{
   (void) x; (void) y; (void) width; (void) height;
   _mesa_noop_entrypoint("glScissor");
}

static void GLAPIENTRY noopShadeModel(GLenum mode)
{
   (void) mode;
   _mesa_noop_entrypoint("glShadeModel");
}

static void GLAPIENTRY noopTexParameterf(GLenum target, GLenum pname, GLfloat param)
{
   (void) target; (void) pname; (void) param;
   _mesa_noop_entrypoint("glTexParameterf");
}

static void GLAPIENTRY noopTexParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glTexParameterfv");
}

static void GLAPIENTRY noopTexParameteri(GLenum target, GLenum pname, GLint param)
{
   (void) target; (void) pname; (void) param;
   _mesa_noop_entrypoint("glTexParameteri");
}

static void GLAPIENTRY noopTexParameteriv(GLenum target, GLenum pname, const GLint *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glTexParameteriv");
}

static void GLAPIENTRY noopTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   (void) target; (void) level; (void) internalformat; (void) width; (void) border; (void) format; (void) type; (void) pixels;
   _mesa_noop_entrypoint("glTexImage1D");
}

static void GLAPIENTRY noopTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   (void) target; (void) level; (void) internalformat; (void) width; (void) height; (void) border; (void) format; (void) type; (void) pixels;
   _mesa_noop_entrypoint("glTexImage2D");
}

static void GLAPIENTRY noopTexEnvf(GLenum target, GLenum pname, GLfloat param)
{
   (void) target; (void) pname; (void) param;
   _mesa_noop_entrypoint("glTexEnvf");
}

static void GLAPIENTRY noopTexEnvfv(GLenum target, GLenum pname, const GLfloat *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glTexEnvfv");
}

static void GLAPIENTRY noopTexEnvi(GLenum target, GLenum pname, GLint param)
{
   (void) target; (void) pname; (void) param;
   _mesa_noop_entrypoint("glTexEnvi");
}

static void GLAPIENTRY noopTexEnviv(GLenum target, GLenum pname, const GLint *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glTexEnviv");
}

static void GLAPIENTRY noopTexGend(GLenum coord, GLenum pname, GLdouble param)
{
   (void) coord; (void) pname; (void) param;
   _mesa_noop_entrypoint("glTexGend");
}

static void GLAPIENTRY noopTexGendv(GLenum coord, GLenum pname, const GLdouble *params)
{
   (void) coord; (void) pname; (void) params;
   _mesa_noop_entrypoint("glTexGendv");
}

static void GLAPIENTRY noopTexGenf(GLenum coord, GLenum pname, GLfloat param)
{
   (void) coord; (void) pname; (void) param;
   _mesa_noop_entrypoint("glTexGenf");
}

static void GLAPIENTRY noopTexGenfv(GLenum coord, GLenum pname, const GLfloat *params)
{
   (void) coord; (void) pname; (void) params;
   _mesa_noop_entrypoint("glTexGenfv");
}

static void GLAPIENTRY noopTexGeni(GLenum coord, GLenum pname, GLint param)
{
   (void) coord; (void) pname; (void) param;
   _mesa_noop_entrypoint("glTexGeni");
}

static void GLAPIENTRY noopTexGeniv(GLenum coord, GLenum pname, const GLint *params)
{
   (void) coord; (void) pname; (void) params;
   _mesa_noop_entrypoint("glTexGeniv");
}

static void GLAPIENTRY noopFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer)
{
   (void) size; (void) type; (void) buffer;
   _mesa_noop_entrypoint("glFeedbackBuffer");
}

static void GLAPIENTRY noopSelectBuffer(GLsizei size, GLuint *buffer)
{
   (void) size; (void) buffer;
   _mesa_noop_entrypoint("glSelectBuffer");
}

static GLint GLAPIENTRY noopRenderMode(GLenum mode)
{
   (void) mode;
   _mesa_noop_entrypoint("glRenderMode");
   return (GLint) 0;
}

static void GLAPIENTRY noopInitNames(void)
{
      _mesa_noop_entrypoint("glInitNames");
}

static void GLAPIENTRY noopLoadName(GLuint name)
{
   (void) name;
   _mesa_noop_entrypoint("glLoadName");
}

static void GLAPIENTRY noopPassThrough(GLfloat token)
{
   (void) token;
   _mesa_noop_entrypoint("glPassThrough");
}

static void GLAPIENTRY noopPopName(void)
{
      _mesa_noop_entrypoint("glPopName");
}

static void GLAPIENTRY noopPushName(GLuint name)
{
   (void) name;
   _mesa_noop_entrypoint("glPushName");
}

static void GLAPIENTRY noopDrawBuffer(GLenum mode)
{
   (void) mode;
   _mesa_noop_entrypoint("glDrawBuffer");
}

static void GLAPIENTRY noopClear(GLbitfield mask)
{
   (void) mask;
   _mesa_noop_entrypoint("glClear");
}

static void GLAPIENTRY noopClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   _mesa_noop_entrypoint("glClearAccum");
}

static void GLAPIENTRY noopClearIndex(GLfloat c)
{
   (void) c;
   _mesa_noop_entrypoint("glClearIndex");
}

static void GLAPIENTRY noopClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   _mesa_noop_entrypoint("glClearColor");
}

static void GLAPIENTRY noopClearStencil(GLint s)
{
   (void) s;
   _mesa_noop_entrypoint("glClearStencil");
}

static void GLAPIENTRY noopClearDepth(GLclampd depth)
{
   (void) depth;
   _mesa_noop_entrypoint("glClearDepth");
}

static void GLAPIENTRY noopStencilMask(GLuint mask)
{
   (void) mask;
   _mesa_noop_entrypoint("glStencilMask");
}

static void GLAPIENTRY noopColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   _mesa_noop_entrypoint("glColorMask");
}

static void GLAPIENTRY noopDepthMask(GLboolean flag)
{
   (void) flag;
   _mesa_noop_entrypoint("glDepthMask");
}

static void GLAPIENTRY noopIndexMask(GLuint mask)
{
   (void) mask;
   _mesa_noop_entrypoint("glIndexMask");
}

static void GLAPIENTRY noopAccum(GLenum op, GLfloat value)
{
   (void) op; (void) value;
   _mesa_noop_entrypoint("glAccum");
}

static void GLAPIENTRY noopDisable(GLenum cap)
{
   (void) cap;
   _mesa_noop_entrypoint("glDisable");
}

static void GLAPIENTRY noopEnable(GLenum cap)
{
   (void) cap;
   _mesa_noop_entrypoint("glEnable");
}

static void GLAPIENTRY noopFinish(void)
{
      _mesa_noop_entrypoint("glFinish");
}

static void GLAPIENTRY noopFlush(void)
{
      _mesa_noop_entrypoint("glFlush");
}

static void GLAPIENTRY noopPopAttrib(void)
{
      _mesa_noop_entrypoint("glPopAttrib");
}

static void GLAPIENTRY noopPushAttrib(GLbitfield mask)
{
   (void) mask;
   _mesa_noop_entrypoint("glPushAttrib");
}

static void GLAPIENTRY noopMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
{
   (void) target; (void) u1; (void) u2; (void) stride; (void) order; (void) points;
   _mesa_noop_entrypoint("glMap1d");
}

static void GLAPIENTRY noopMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
{
   (void) target; (void) u1; (void) u2; (void) stride; (void) order; (void) points;
   _mesa_noop_entrypoint("glMap1f");
}

static void GLAPIENTRY noopMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
{
   (void) target; (void) u1; (void) u2; (void) ustride; (void) uorder; (void) v1; (void) v2; (void) vstride; (void) vorder; (void) points;
   _mesa_noop_entrypoint("glMap2d");
}

static void GLAPIENTRY noopMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
{
   (void) target; (void) u1; (void) u2; (void) ustride; (void) uorder; (void) v1; (void) v2; (void) vstride; (void) vorder; (void) points;
   _mesa_noop_entrypoint("glMap2f");
}

static void GLAPIENTRY noopMapGrid1d(GLint un, GLdouble u1, GLdouble u2)
{
   (void) un; (void) u1; (void) u2;
   _mesa_noop_entrypoint("glMapGrid1d");
}

static void GLAPIENTRY noopMapGrid1f(GLint un, GLfloat u1, GLfloat u2)
{
   (void) un; (void) u1; (void) u2;
   _mesa_noop_entrypoint("glMapGrid1f");
}

static void GLAPIENTRY noopMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
{
   (void) un; (void) u1; (void) u2; (void) vn; (void) v1; (void) v2;
   _mesa_noop_entrypoint("glMapGrid2d");
}

static void GLAPIENTRY noopMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
{
   (void) un; (void) u1; (void) u2; (void) vn; (void) v1; (void) v2;
   _mesa_noop_entrypoint("glMapGrid2f");
}

static void GLAPIENTRY noopEvalCoord1d(GLdouble u)
{
   (void) u;
   _mesa_noop_entrypoint("glEvalCoord1d");
}

static void GLAPIENTRY noopEvalCoord1dv(const GLdouble *u)
{
   (void) u;
   _mesa_noop_entrypoint("glEvalCoord1dv");
}

static void GLAPIENTRY noopEvalCoord1f(GLfloat u)
{
   (void) u;
   _mesa_noop_entrypoint("glEvalCoord1f");
}

static void GLAPIENTRY noopEvalCoord1fv(const GLfloat *u)
{
   (void) u;
   _mesa_noop_entrypoint("glEvalCoord1fv");
}

static void GLAPIENTRY noopEvalCoord2d(GLdouble u, GLdouble v)
{
   (void) u; (void) v;
   _mesa_noop_entrypoint("glEvalCoord2d");
}

static void GLAPIENTRY noopEvalCoord2dv(const GLdouble *u)
{
   (void) u;
   _mesa_noop_entrypoint("glEvalCoord2dv");
}

static void GLAPIENTRY noopEvalCoord2f(GLfloat u, GLfloat v)
{
   (void) u; (void) v;
   _mesa_noop_entrypoint("glEvalCoord2f");
}

static void GLAPIENTRY noopEvalCoord2fv(const GLfloat *u)
{
   (void) u;
   _mesa_noop_entrypoint("glEvalCoord2fv");
}

static void GLAPIENTRY noopEvalMesh1(GLenum mode, GLint i1, GLint i2)
{
   (void) mode; (void) i1; (void) i2;
   _mesa_noop_entrypoint("glEvalMesh1");
}

static void GLAPIENTRY noopEvalPoint1(GLint i)
{
   (void) i;
   _mesa_noop_entrypoint("glEvalPoint1");
}

static void GLAPIENTRY noopEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
{
   (void) mode; (void) i1; (void) i2; (void) j1; (void) j2;
   _mesa_noop_entrypoint("glEvalMesh2");
}

static void GLAPIENTRY noopEvalPoint2(GLint i, GLint j)
{
   (void) i; (void) j;
   _mesa_noop_entrypoint("glEvalPoint2");
}

static void GLAPIENTRY noopAlphaFunc(GLenum func, GLclampf ref)
{
   (void) func; (void) ref;
   _mesa_noop_entrypoint("glAlphaFunc");
}

static void GLAPIENTRY noopBlendFunc(GLenum sfactor, GLenum dfactor)
{
   (void) sfactor; (void) dfactor;
   _mesa_noop_entrypoint("glBlendFunc");
}

static void GLAPIENTRY noopLogicOp(GLenum opcode)
{
   (void) opcode;
   _mesa_noop_entrypoint("glLogicOp");
}

static void GLAPIENTRY noopStencilFunc(GLenum func, GLint ref, GLuint mask)
{
   (void) func; (void) ref; (void) mask;
   _mesa_noop_entrypoint("glStencilFunc");
}

static void GLAPIENTRY noopStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
{
   (void) fail; (void) zfail; (void) zpass;
   _mesa_noop_entrypoint("glStencilOp");
}

static void GLAPIENTRY noopDepthFunc(GLenum func)
{
   (void) func;
   _mesa_noop_entrypoint("glDepthFunc");
}

static void GLAPIENTRY noopPixelZoom(GLfloat xfactor, GLfloat yfactor)
{
   (void) xfactor; (void) yfactor;
   _mesa_noop_entrypoint("glPixelZoom");
}

static void GLAPIENTRY noopPixelTransferf(GLenum pname, GLfloat param)
{
   (void) pname; (void) param;
   _mesa_noop_entrypoint("glPixelTransferf");
}

static void GLAPIENTRY noopPixelTransferi(GLenum pname, GLint param)
{
   (void) pname; (void) param;
   _mesa_noop_entrypoint("glPixelTransferi");
}

static void GLAPIENTRY noopPixelStoref(GLenum pname, GLfloat param)
{
   (void) pname; (void) param;
   _mesa_noop_entrypoint("glPixelStoref");
}

static void GLAPIENTRY noopPixelStorei(GLenum pname, GLint param)
{
   (void) pname; (void) param;
   _mesa_noop_entrypoint("glPixelStorei");
}

static void GLAPIENTRY noopPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat *values)
{
   (void) map; (void) mapsize; (void) values;
   _mesa_noop_entrypoint("glPixelMapfv");
}

static void GLAPIENTRY noopPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint *values)
{
   (void) map; (void) mapsize; (void) values;
   _mesa_noop_entrypoint("glPixelMapuiv");
}

static void GLAPIENTRY noopPixelMapusv(GLenum map, GLsizei mapsize, const GLushort *values)
{
   (void) map; (void) mapsize; (void) values;
   _mesa_noop_entrypoint("glPixelMapusv");
}

static void GLAPIENTRY noopReadBuffer(GLenum mode)
{
   (void) mode;
   _mesa_noop_entrypoint("glReadBuffer");
}

static void GLAPIENTRY noopCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
{
   (void) x; (void) y; (void) width; (void) height; (void) type;
   _mesa_noop_entrypoint("glCopyPixels");
}

static void GLAPIENTRY noopReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
{
   (void) x; (void) y; (void) width; (void) height; (void) format; (void) type; (void) pixels;
   _mesa_noop_entrypoint("glReadPixels");
}

static void GLAPIENTRY noopDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
   (void) width; (void) height; (void) format; (void) type; (void) pixels;
   _mesa_noop_entrypoint("glDrawPixels");
}

static void GLAPIENTRY noopGetBooleanv(GLenum pname, GLboolean *params)
{
   (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetBooleanv");
}

static void GLAPIENTRY noopGetClipPlane(GLenum plane, GLdouble *equation)
{
   (void) plane; (void) equation;
   _mesa_noop_entrypoint("glGetClipPlane");
}

static void GLAPIENTRY noopGetDoublev(GLenum pname, GLdouble *params)
{
   (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetDoublev");
}

static GLenum GLAPIENTRY noopGetError(void)
{
      _mesa_noop_entrypoint("glGetError");
   return (GLenum) 0;
}

static void GLAPIENTRY noopGetFloatv(GLenum pname, GLfloat *params)
{
   (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetFloatv");
}

static void GLAPIENTRY noopGetIntegerv(GLenum pname, GLint *params)
{
   (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetIntegerv");
}

static void GLAPIENTRY noopGetLightfv(GLenum light, GLenum pname, GLfloat *params)
{
   (void) light; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetLightfv");
}

static void GLAPIENTRY noopGetLightiv(GLenum light, GLenum pname, GLint *params)
{
   (void) light; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetLightiv");
}

static void GLAPIENTRY noopGetMapdv(GLenum target, GLenum query, GLdouble *v)
{
   (void) target; (void) query; (void) v;
   _mesa_noop_entrypoint("glGetMapdv");
}

static void GLAPIENTRY noopGetMapfv(GLenum target, GLenum query, GLfloat *v)
{
   (void) target; (void) query; (void) v;
   _mesa_noop_entrypoint("glGetMapfv");
}

static void GLAPIENTRY noopGetMapiv(GLenum target, GLenum query, GLint *v)
{
   (void) target; (void) query; (void) v;
   _mesa_noop_entrypoint("glGetMapiv");
}

static void GLAPIENTRY noopGetMaterialfv(GLenum face, GLenum pname, GLfloat *params)
{
   (void) face; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetMaterialfv");
}

static void GLAPIENTRY noopGetMaterialiv(GLenum face, GLenum pname, GLint *params)
{
   (void) face; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetMaterialiv");
}

static void GLAPIENTRY noopGetPixelMapfv(GLenum map, GLfloat *values)
{
   (void) map; (void) values;
   _mesa_noop_entrypoint("glGetPixelMapfv");
}

static void GLAPIENTRY noopGetPixelMapuiv(GLenum map, GLuint *values)
{
   (void) map; (void) values;
   _mesa_noop_entrypoint("glGetPixelMapuiv");
}

static void GLAPIENTRY noopGetPixelMapusv(GLenum map, GLushort *values)
{
   (void) map; (void) values;
   _mesa_noop_entrypoint("glGetPixelMapusv");
}

static void GLAPIENTRY noopGetPolygonStipple(GLubyte *mask)
{
   (void) mask;
   _mesa_noop_entrypoint("glGetPolygonStipple");
}

static const GLubyte * GLAPIENTRY noopGetString(GLenum name)
{
   (void) name;
   _mesa_noop_entrypoint("glGetString");
   return (const GLubyte *) 0;
}

static void GLAPIENTRY noopGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetTexEnvfv");
}

static void GLAPIENTRY noopGetTexEnviv(GLenum target, GLenum pname, GLint *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetTexEnviv");
}

static void GLAPIENTRY noopGetTexGendv(GLenum coord, GLenum pname, GLdouble *params)
{
   (void) coord; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetTexGendv");
}

static void GLAPIENTRY noopGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params)
{
   (void) coord; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetTexGenfv");
}

static void GLAPIENTRY noopGetTexGeniv(GLenum coord, GLenum pname, GLint *params)
{
   (void) coord; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetTexGeniv");
}

static void GLAPIENTRY noopGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
   (void) target; (void) level; (void) format; (void) type; (void) pixels;
   _mesa_noop_entrypoint("glGetTexImage");
}

static void GLAPIENTRY noopGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetTexParameterfv");
}

static void GLAPIENTRY noopGetTexParameteriv(GLenum target, GLenum pname, GLint *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetTexParameteriv");
}

static void GLAPIENTRY noopGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params)
{
   (void) target; (void) level; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetTexLevelParameterfv");
}

static void GLAPIENTRY noopGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params)
{
   (void) target; (void) level; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetTexLevelParameteriv");
}

static GLboolean GLAPIENTRY noopIsEnabled(GLenum cap)
{
   (void) cap;
   _mesa_noop_entrypoint("glIsEnabled");
   return (GLboolean) 0;
}

static GLboolean GLAPIENTRY noopIsList(GLuint list)
{
   (void) list;
   _mesa_noop_entrypoint("glIsList");
   return (GLboolean) 0;
}

static void GLAPIENTRY noopDepthRange(GLclampd zNear, GLclampd zFar)
{
   (void) zNear; (void) zFar;
   _mesa_noop_entrypoint("glDepthRange");
}

static void GLAPIENTRY noopFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
   (void) left; (void) right; (void) bottom; (void) top; (void) zNear; (void) zFar;
   _mesa_noop_entrypoint("glFrustum");
}

static void GLAPIENTRY noopLoadIdentity(void)
{
      _mesa_noop_entrypoint("glLoadIdentity");
}

static void GLAPIENTRY noopLoadMatrixf(const GLfloat *m)
{
   (void) m;
   _mesa_noop_entrypoint("glLoadMatrixf");
}

static void GLAPIENTRY noopLoadMatrixd(const GLdouble *m)
{
   (void) m;
   _mesa_noop_entrypoint("glLoadMatrixd");
}

static void GLAPIENTRY noopMatrixMode(GLenum mode)
{
   (void) mode;
   _mesa_noop_entrypoint("glMatrixMode");
}

static void GLAPIENTRY noopMultMatrixf(const GLfloat *m)
{
   (void) m;
   _mesa_noop_entrypoint("glMultMatrixf");
}

static void GLAPIENTRY noopMultMatrixd(const GLdouble *m)
{
   (void) m;
   _mesa_noop_entrypoint("glMultMatrixd");
}

static void GLAPIENTRY noopOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
   (void) left; (void) right; (void) bottom; (void) top; (void) zNear; (void) zFar;
   _mesa_noop_entrypoint("glOrtho");
}

static void GLAPIENTRY noopPopMatrix(void)
{
      _mesa_noop_entrypoint("glPopMatrix");
}

static void GLAPIENTRY noopPushMatrix(void)
{
      _mesa_noop_entrypoint("glPushMatrix");
}

static void GLAPIENTRY noopRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
   (void) angle; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glRotated");
}

static void GLAPIENTRY noopRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
   (void) angle; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glRotatef");
}

static void GLAPIENTRY noopScaled(GLdouble x, GLdouble y, GLdouble z)
{
   (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glScaled");
}

static void GLAPIENTRY noopScalef(GLfloat x, GLfloat y, GLfloat z)
{
   (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glScalef");
}

static void GLAPIENTRY noopTranslated(GLdouble x, GLdouble y, GLdouble z)
{
   (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glTranslated");
}

static void GLAPIENTRY noopTranslatef(GLfloat x, GLfloat y, GLfloat z)
{
   (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glTranslatef");
}

static void GLAPIENTRY noopViewport(GLint x, GLint y, GLsizei width, GLsizei height)
{
   (void) x; (void) y; (void) width; (void) height;
   _mesa_noop_entrypoint("glViewport");
}

static void GLAPIENTRY noopArrayElement(GLint i)
{
   (void) i;
   _mesa_noop_entrypoint("glArrayElement");
}

static void GLAPIENTRY noopBindTexture(GLenum target, GLuint texture)
{
   (void) target; (void) texture;
   _mesa_noop_entrypoint("glBindTexture");
}

static void GLAPIENTRY noopColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   (void) size; (void) type; (void) stride; (void) pointer;
   _mesa_noop_entrypoint("glColorPointer");
}

static void GLAPIENTRY noopDisableClientState(GLenum array)
{
   (void) array;
   _mesa_noop_entrypoint("glDisableClientState");
}

static void GLAPIENTRY noopDrawArrays(GLenum mode, GLint first, GLsizei count)
{
   (void) mode; (void) first; (void) count;
   _mesa_noop_entrypoint("glDrawArrays");
}

static void GLAPIENTRY noopDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
{
   (void) mode; (void) count; (void) type; (void) indices;
   _mesa_noop_entrypoint("glDrawElements");
}

static void GLAPIENTRY noopEdgeFlagPointer(GLsizei stride, const GLvoid *pointer)
{
   (void) stride; (void) pointer;
   _mesa_noop_entrypoint("glEdgeFlagPointer");
}

static void GLAPIENTRY noopEnableClientState(GLenum array)
{
   (void) array;
   _mesa_noop_entrypoint("glEnableClientState");
}

static void GLAPIENTRY noopIndexPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
   (void) type; (void) stride; (void) pointer;
   _mesa_noop_entrypoint("glIndexPointer");
}

static void GLAPIENTRY noopIndexub(GLubyte c)
{
   (void) c;
   _mesa_noop_entrypoint("glIndexub");
}

static void GLAPIENTRY noopIndexubv(const GLubyte *c)
{
   (void) c;
   _mesa_noop_entrypoint("glIndexubv");
}

static void GLAPIENTRY noopInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer)
{
   (void) format; (void) stride; (void) pointer;
   _mesa_noop_entrypoint("glInterleavedArrays");
}

static void GLAPIENTRY noopNormalPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
   (void) type; (void) stride; (void) pointer;
   _mesa_noop_entrypoint("glNormalPointer");
}

static void GLAPIENTRY noopPolygonOffset(GLfloat factor, GLfloat units)
{
   (void) factor; (void) units;
   _mesa_noop_entrypoint("glPolygonOffset");
}

static void GLAPIENTRY noopTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   (void) size; (void) type; (void) stride; (void) pointer;
   _mesa_noop_entrypoint("glTexCoordPointer");
}

static void GLAPIENTRY noopVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   (void) size; (void) type; (void) stride; (void) pointer;
   _mesa_noop_entrypoint("glVertexPointer");
}

static GLboolean GLAPIENTRY noopAreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences)
{
   (void) n; (void) textures; (void) residences;
   _mesa_noop_entrypoint("glAreTexturesResident");
   return (GLboolean) 0;
}

static void GLAPIENTRY noopCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
   (void) target; (void) level; (void) internalformat; (void) x; (void) y; (void) width; (void) border;
   _mesa_noop_entrypoint("glCopyTexImage1D");
}

static void GLAPIENTRY noopCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
   (void) target; (void) level; (void) internalformat; (void) x; (void) y; (void) width; (void) height; (void) border;
   _mesa_noop_entrypoint("glCopyTexImage2D");
}

static void GLAPIENTRY noopCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
   (void) target; (void) level; (void) xoffset; (void) x; (void) y; (void) width;
   _mesa_noop_entrypoint("glCopyTexSubImage1D");
}

static void GLAPIENTRY noopCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   (void) target; (void) level; (void) xoffset; (void) yoffset; (void) x; (void) y; (void) width; (void) height;
   _mesa_noop_entrypoint("glCopyTexSubImage2D");
}

static void GLAPIENTRY noopDeleteTextures(GLsizei n, const GLuint *textures)
{
   (void) n; (void) textures;
   _mesa_noop_entrypoint("glDeleteTextures");
}

static void GLAPIENTRY noopGenTextures(GLsizei n, GLuint *textures)
{
   (void) n; (void) textures;
   _mesa_noop_entrypoint("glGenTextures");
}

static void GLAPIENTRY noopGetPointerv(GLenum pname, GLvoid **params)
{
   (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetPointerv");
}

static GLboolean GLAPIENTRY noopIsTexture(GLuint texture)
{
   (void) texture;
   _mesa_noop_entrypoint("glIsTexture");
   return (GLboolean) 0;
}

static void GLAPIENTRY noopPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities)
{
   (void) n; (void) textures; (void) priorities;
   _mesa_noop_entrypoint("glPrioritizeTextures");
}

static void GLAPIENTRY noopTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
   (void) target; (void) level; (void) xoffset; (void) width; (void) format; (void) type; (void) pixels;
   _mesa_noop_entrypoint("glTexSubImage1D");
}

static void GLAPIENTRY noopTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
   (void) target; (void) level; (void) xoffset; (void) yoffset; (void) width; (void) height; (void) format; (void) type; (void) pixels;
   _mesa_noop_entrypoint("glTexSubImage2D");
}

static void GLAPIENTRY noopPopClientAttrib(void)
{
      _mesa_noop_entrypoint("glPopClientAttrib");
}

static void GLAPIENTRY noopPushClientAttrib(GLbitfield mask)
{
   (void) mask;
   _mesa_noop_entrypoint("glPushClientAttrib");
}

static void GLAPIENTRY noopBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   _mesa_noop_entrypoint("glBlendColor");
}

static void GLAPIENTRY noopBlendEquation(GLenum mode)
{
   (void) mode;
   _mesa_noop_entrypoint("glBlendEquation");
}

static void GLAPIENTRY noopDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
{
   (void) mode; (void) start; (void) end; (void) count; (void) type; (void) indices;
   _mesa_noop_entrypoint("glDrawRangeElements");
}

static void GLAPIENTRY noopTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   (void) target; (void) level; (void) internalformat; (void) width; (void) height; (void) depth; (void) border; (void) format; (void) type; (void) pixels;
   _mesa_noop_entrypoint("glTexImage3D");
}

static void GLAPIENTRY noopTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
   (void) target; (void) level; (void) xoffset; (void) yoffset; (void) zoffset; (void) width; (void) height; (void) depth; (void) format; (void) type; (void) pixels;
   _mesa_noop_entrypoint("glTexSubImage3D");
}

static void GLAPIENTRY noopCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   (void) target; (void) level; (void) xoffset; (void) yoffset; (void) zoffset; (void) x; (void) y; (void) width; (void) height;
   _mesa_noop_entrypoint("glCopyTexSubImage3D");
}

static void GLAPIENTRY noopActiveTexture(GLenum texture)
{
   (void) texture;
   _mesa_noop_entrypoint("glActiveTexture");
}

static void GLAPIENTRY noopClientActiveTexture(GLenum texture)
{
   (void) texture;
   _mesa_noop_entrypoint("glClientActiveTexture");
}

static void GLAPIENTRY noopMultiTexCoord1d(GLenum target, GLdouble s)
{
   (void) target; (void) s;
   _mesa_noop_entrypoint("glMultiTexCoord1d");
}

static void GLAPIENTRY noopMultiTexCoord1dv(GLenum target, const GLdouble *v)
{
   (void) target; (void) v;
   _mesa_noop_entrypoint("glMultiTexCoord1dv");
}

static void GLAPIENTRY noopMultiTexCoord1fARB(GLenum target, GLfloat s)
{
   (void) target; (void) s;
   _mesa_noop_entrypoint("glMultiTexCoord1fARB");
}

static void GLAPIENTRY noopMultiTexCoord1fvARB(GLenum target, const GLfloat *v)
{
   (void) target; (void) v;
   _mesa_noop_entrypoint("glMultiTexCoord1fvARB");
}

static void GLAPIENTRY noopMultiTexCoord1i(GLenum target, GLint s)
{
   (void) target; (void) s;
   _mesa_noop_entrypoint("glMultiTexCoord1i");
}

static void GLAPIENTRY noopMultiTexCoord1iv(GLenum target, const GLint *v)
{
   (void) target; (void) v;
   _mesa_noop_entrypoint("glMultiTexCoord1iv");
}

static void GLAPIENTRY noopMultiTexCoord1s(GLenum target, GLshort s)
{
   (void) target; (void) s;
   _mesa_noop_entrypoint("glMultiTexCoord1s");
}

static void GLAPIENTRY noopMultiTexCoord1sv(GLenum target, const GLshort *v)
{
   (void) target; (void) v;
   _mesa_noop_entrypoint("glMultiTexCoord1sv");
}

static void GLAPIENTRY noopMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)
{
   (void) target; (void) s; (void) t;
   _mesa_noop_entrypoint("glMultiTexCoord2d");
}

static void GLAPIENTRY noopMultiTexCoord2dv(GLenum target, const GLdouble *v)
{
   (void) target; (void) v;
   _mesa_noop_entrypoint("glMultiTexCoord2dv");
}

static void GLAPIENTRY noopMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t)
{
   (void) target; (void) s; (void) t;
   _mesa_noop_entrypoint("glMultiTexCoord2fARB");
}

static void GLAPIENTRY noopMultiTexCoord2fvARB(GLenum target, const GLfloat *v)
{
   (void) target; (void) v;
   _mesa_noop_entrypoint("glMultiTexCoord2fvARB");
}

static void GLAPIENTRY noopMultiTexCoord2i(GLenum target, GLint s, GLint t)
{
   (void) target; (void) s; (void) t;
   _mesa_noop_entrypoint("glMultiTexCoord2i");
}

static void GLAPIENTRY noopMultiTexCoord2iv(GLenum target, const GLint *v)
{
   (void) target; (void) v;
   _mesa_noop_entrypoint("glMultiTexCoord2iv");
}

static void GLAPIENTRY noopMultiTexCoord2s(GLenum target, GLshort s, GLshort t)
{
   (void) target; (void) s; (void) t;
   _mesa_noop_entrypoint("glMultiTexCoord2s");
}

static void GLAPIENTRY noopMultiTexCoord2sv(GLenum target, const GLshort *v)
{
   (void) target; (void) v;
   _mesa_noop_entrypoint("glMultiTexCoord2sv");
}

static void GLAPIENTRY noopMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
   (void) target; (void) s; (void) t; (void) r;
   _mesa_noop_entrypoint("glMultiTexCoord3d");
}

static void GLAPIENTRY noopMultiTexCoord3dv(GLenum target, const GLdouble *v)
{
   (void) target; (void) v;
   _mesa_noop_entrypoint("glMultiTexCoord3dv");
}

static void GLAPIENTRY noopMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
   (void) target; (void) s; (void) t; (void) r;
   _mesa_noop_entrypoint("glMultiTexCoord3fARB");
}

static void GLAPIENTRY noopMultiTexCoord3fvARB(GLenum target, const GLfloat *v)
{
   (void) target; (void) v;
   _mesa_noop_entrypoint("glMultiTexCoord3fvARB");
}

static void GLAPIENTRY noopMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)
{
   (void) target; (void) s; (void) t; (void) r;
   _mesa_noop_entrypoint("glMultiTexCoord3i");
}

static void GLAPIENTRY noopMultiTexCoord3iv(GLenum target, const GLint *v)
{
   (void) target; (void) v;
   _mesa_noop_entrypoint("glMultiTexCoord3iv");
}

static void GLAPIENTRY noopMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)
{
   (void) target; (void) s; (void) t; (void) r;
   _mesa_noop_entrypoint("glMultiTexCoord3s");
}

static void GLAPIENTRY noopMultiTexCoord3sv(GLenum target, const GLshort *v)
{
   (void) target; (void) v;
   _mesa_noop_entrypoint("glMultiTexCoord3sv");
}

static void GLAPIENTRY noopMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
   (void) target; (void) s; (void) t; (void) r; (void) q;
   _mesa_noop_entrypoint("glMultiTexCoord4d");
}

static void GLAPIENTRY noopMultiTexCoord4dv(GLenum target, const GLdouble *v)
{
   (void) target; (void) v;
   _mesa_noop_entrypoint("glMultiTexCoord4dv");
}

static void GLAPIENTRY noopMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
   (void) target; (void) s; (void) t; (void) r; (void) q;
   _mesa_noop_entrypoint("glMultiTexCoord4fARB");
}

static void GLAPIENTRY noopMultiTexCoord4fvARB(GLenum target, const GLfloat *v)
{
   (void) target; (void) v;
   _mesa_noop_entrypoint("glMultiTexCoord4fvARB");
}

static void GLAPIENTRY noopMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)
{
   (void) target; (void) s; (void) t; (void) r; (void) q;
   _mesa_noop_entrypoint("glMultiTexCoord4i");
}

static void GLAPIENTRY noopMultiTexCoord4iv(GLenum target, const GLint *v)
{
   (void) target; (void) v;
   _mesa_noop_entrypoint("glMultiTexCoord4iv");
}

static void GLAPIENTRY noopMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
   (void) target; (void) s; (void) t; (void) r; (void) q;
   _mesa_noop_entrypoint("glMultiTexCoord4s");
}

static void GLAPIENTRY noopMultiTexCoord4sv(GLenum target, const GLshort *v)
{
   (void) target; (void) v;
   _mesa_noop_entrypoint("glMultiTexCoord4sv");
}

static void GLAPIENTRY noopCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
   (void) target; (void) level; (void) internalformat; (void) width; (void) border; (void) imageSize; (void) data;
   _mesa_noop_entrypoint("glCompressedTexImage1D");
}

static void GLAPIENTRY noopCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
{
   (void) target; (void) level; (void) internalformat; (void) width; (void) height; (void) border; (void) imageSize; (void) data;
   _mesa_noop_entrypoint("glCompressedTexImage2D");
}

static void GLAPIENTRY noopCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
   (void) target; (void) level; (void) internalformat; (void) width; (void) height; (void) depth; (void) border; (void) imageSize; (void) data;
   _mesa_noop_entrypoint("glCompressedTexImage3D");
}

static void GLAPIENTRY noopCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   (void) target; (void) level; (void) xoffset; (void) width; (void) format; (void) imageSize; (void) data;
   _mesa_noop_entrypoint("glCompressedTexSubImage1D");
}

static void GLAPIENTRY noopCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   (void) target; (void) level; (void) xoffset; (void) yoffset; (void) width; (void) height; (void) format; (void) imageSize; (void) data;
   _mesa_noop_entrypoint("glCompressedTexSubImage2D");
}

static void GLAPIENTRY noopCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   (void) target; (void) level; (void) xoffset; (void) yoffset; (void) zoffset; (void) width; (void) height; (void) depth; (void) format; (void) imageSize; (void) data;
   _mesa_noop_entrypoint("glCompressedTexSubImage3D");
}

static void GLAPIENTRY noopGetCompressedTexImage(GLenum target, GLint level, GLvoid *img)
{
   (void) target; (void) level; (void) img;
   _mesa_noop_entrypoint("glGetCompressedTexImage");
}

static void GLAPIENTRY noopLoadTransposeMatrixd(const GLdouble *m)
{
   (void) m;
   _mesa_noop_entrypoint("glLoadTransposeMatrixd");
}

static void GLAPIENTRY noopLoadTransposeMatrixf(const GLfloat *m)
{
   (void) m;
   _mesa_noop_entrypoint("glLoadTransposeMatrixf");
}

static void GLAPIENTRY noopMultTransposeMatrixd(const GLdouble *m)
{
   (void) m;
   _mesa_noop_entrypoint("glMultTransposeMatrixd");
}

static void GLAPIENTRY noopMultTransposeMatrixf(const GLfloat *m)
{
   (void) m;
   _mesa_noop_entrypoint("glMultTransposeMatrixf");
}

static void GLAPIENTRY noopSampleCoverage(GLclampf value, GLboolean invert)
{
   (void) value; (void) invert;
   _mesa_noop_entrypoint("glSampleCoverage");
}

static void GLAPIENTRY noopBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
   (void) sfactorRGB; (void) dfactorRGB; (void) sfactorAlpha; (void) dfactorAlpha;
   _mesa_noop_entrypoint("glBlendFuncSeparate");
}

static void GLAPIENTRY noopFogCoordPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
   (void) type; (void) stride; (void) pointer;
   _mesa_noop_entrypoint("glFogCoordPointer");
}

static void GLAPIENTRY noopFogCoordd(GLdouble coord)
{
   (void) coord;
   _mesa_noop_entrypoint("glFogCoordd");
}

static void GLAPIENTRY noopFogCoorddv(const GLdouble *coord)
{
   (void) coord;
   _mesa_noop_entrypoint("glFogCoorddv");
}

static void GLAPIENTRY noopMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
   (void) mode; (void) first; (void) count; (void) primcount;
   _mesa_noop_entrypoint("glMultiDrawArrays");
}

static void GLAPIENTRY noopPointParameterf(GLenum pname, GLfloat param)
{
   (void) pname; (void) param;
   _mesa_noop_entrypoint("glPointParameterf");
}

static void GLAPIENTRY noopPointParameterfv(GLenum pname, const GLfloat *params)
{
   (void) pname; (void) params;
   _mesa_noop_entrypoint("glPointParameterfv");
}

static void GLAPIENTRY noopPointParameteri(GLenum pname, GLint param)
{
   (void) pname; (void) param;
   _mesa_noop_entrypoint("glPointParameteri");
}

static void GLAPIENTRY noopPointParameteriv(GLenum pname, const GLint *params)
{
   (void) pname; (void) params;
   _mesa_noop_entrypoint("glPointParameteriv");
}

static void GLAPIENTRY noopSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue)
{
   (void) red; (void) green; (void) blue;
   _mesa_noop_entrypoint("glSecondaryColor3b");
}

static void GLAPIENTRY noopSecondaryColor3bv(const GLbyte *v)
{
   (void) v;
   _mesa_noop_entrypoint("glSecondaryColor3bv");
}

static void GLAPIENTRY noopSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue)
{
   (void) red; (void) green; (void) blue;
   _mesa_noop_entrypoint("glSecondaryColor3d");
}

static void GLAPIENTRY noopSecondaryColor3dv(const GLdouble *v)
{
   (void) v;
   _mesa_noop_entrypoint("glSecondaryColor3dv");
}

static void GLAPIENTRY noopSecondaryColor3i(GLint red, GLint green, GLint blue)
{
   (void) red; (void) green; (void) blue;
   _mesa_noop_entrypoint("glSecondaryColor3i");
}

static void GLAPIENTRY noopSecondaryColor3iv(const GLint *v)
{
   (void) v;
   _mesa_noop_entrypoint("glSecondaryColor3iv");
}

static void GLAPIENTRY noopSecondaryColor3s(GLshort red, GLshort green, GLshort blue)
{
   (void) red; (void) green; (void) blue;
   _mesa_noop_entrypoint("glSecondaryColor3s");
}

static void GLAPIENTRY noopSecondaryColor3sv(const GLshort *v)
{
   (void) v;
   _mesa_noop_entrypoint("glSecondaryColor3sv");
}

static void GLAPIENTRY noopSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue)
{
   (void) red; (void) green; (void) blue;
   _mesa_noop_entrypoint("glSecondaryColor3ub");
}

static void GLAPIENTRY noopSecondaryColor3ubv(const GLubyte *v)
{
   (void) v;
   _mesa_noop_entrypoint("glSecondaryColor3ubv");
}

static void GLAPIENTRY noopSecondaryColor3ui(GLuint red, GLuint green, GLuint blue)
{
   (void) red; (void) green; (void) blue;
   _mesa_noop_entrypoint("glSecondaryColor3ui");
}

static void GLAPIENTRY noopSecondaryColor3uiv(const GLuint *v)
{
   (void) v;
   _mesa_noop_entrypoint("glSecondaryColor3uiv");
}

static void GLAPIENTRY noopSecondaryColor3us(GLushort red, GLushort green, GLushort blue)
{
   (void) red; (void) green; (void) blue;
   _mesa_noop_entrypoint("glSecondaryColor3us");
}

static void GLAPIENTRY noopSecondaryColor3usv(const GLushort *v)
{
   (void) v;
   _mesa_noop_entrypoint("glSecondaryColor3usv");
}

static void GLAPIENTRY noopSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   (void) size; (void) type; (void) stride; (void) pointer;
   _mesa_noop_entrypoint("glSecondaryColorPointer");
}

static void GLAPIENTRY noopWindowPos2d(GLdouble x, GLdouble y)
{
   (void) x; (void) y;
   _mesa_noop_entrypoint("glWindowPos2d");
}

static void GLAPIENTRY noopWindowPos2dv(const GLdouble *v)
{
   (void) v;
   _mesa_noop_entrypoint("glWindowPos2dv");
}

static void GLAPIENTRY noopWindowPos2f(GLfloat x, GLfloat y)
{
   (void) x; (void) y;
   _mesa_noop_entrypoint("glWindowPos2f");
}

static void GLAPIENTRY noopWindowPos2fv(const GLfloat *v)
{
   (void) v;
   _mesa_noop_entrypoint("glWindowPos2fv");
}

static void GLAPIENTRY noopWindowPos2i(GLint x, GLint y)
{
   (void) x; (void) y;
   _mesa_noop_entrypoint("glWindowPos2i");
}

static void GLAPIENTRY noopWindowPos2iv(const GLint *v)
{
   (void) v;
   _mesa_noop_entrypoint("glWindowPos2iv");
}

static void GLAPIENTRY noopWindowPos2s(GLshort x, GLshort y)
{
   (void) x; (void) y;
   _mesa_noop_entrypoint("glWindowPos2s");
}

static void GLAPIENTRY noopWindowPos2sv(const GLshort *v)
{
   (void) v;
   _mesa_noop_entrypoint("glWindowPos2sv");
}

static void GLAPIENTRY noopWindowPos3d(GLdouble x, GLdouble y, GLdouble z)
{
   (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glWindowPos3d");
}

static void GLAPIENTRY noopWindowPos3dv(const GLdouble *v)
{
   (void) v;
   _mesa_noop_entrypoint("glWindowPos3dv");
}

static void GLAPIENTRY noopWindowPos3f(GLfloat x, GLfloat y, GLfloat z)
{
   (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glWindowPos3f");
}

static void GLAPIENTRY noopWindowPos3fv(const GLfloat *v)
{
   (void) v;
   _mesa_noop_entrypoint("glWindowPos3fv");
}

static void GLAPIENTRY noopWindowPos3i(GLint x, GLint y, GLint z)
{
   (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glWindowPos3i");
}

static void GLAPIENTRY noopWindowPos3iv(const GLint *v)
{
   (void) v;
   _mesa_noop_entrypoint("glWindowPos3iv");
}

static void GLAPIENTRY noopWindowPos3s(GLshort x, GLshort y, GLshort z)
{
   (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glWindowPos3s");
}

static void GLAPIENTRY noopWindowPos3sv(const GLshort *v)
{
   (void) v;
   _mesa_noop_entrypoint("glWindowPos3sv");
}

static void GLAPIENTRY noopBeginQuery(GLenum target, GLuint id)
{
   (void) target; (void) id;
   _mesa_noop_entrypoint("glBeginQuery");
}

static void GLAPIENTRY noopBindBuffer(GLenum target, GLuint buffer)
{
   (void) target; (void) buffer;
   _mesa_noop_entrypoint("glBindBuffer");
}

static void GLAPIENTRY noopBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
   (void) target; (void) size; (void) data; (void) usage;
   _mesa_noop_entrypoint("glBufferData");
}

static void GLAPIENTRY noopBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
   (void) target; (void) offset; (void) size; (void) data;
   _mesa_noop_entrypoint("glBufferSubData");
}

static void GLAPIENTRY noopDeleteBuffers(GLsizei n, const GLuint *buffer)
{
   (void) n; (void) buffer;
   _mesa_noop_entrypoint("glDeleteBuffers");
}

static void GLAPIENTRY noopDeleteQueries(GLsizei n, const GLuint *ids)
{
   (void) n; (void) ids;
   _mesa_noop_entrypoint("glDeleteQueries");
}

static void GLAPIENTRY noopEndQuery(GLenum target)
{
   (void) target;
   _mesa_noop_entrypoint("glEndQuery");
}

static void GLAPIENTRY noopGenBuffers(GLsizei n, GLuint *buffer)
{
   (void) n; (void) buffer;
   _mesa_noop_entrypoint("glGenBuffers");
}

static void GLAPIENTRY noopGenQueries(GLsizei n, GLuint *ids)
{
   (void) n; (void) ids;
   _mesa_noop_entrypoint("glGenQueries");
}

static void GLAPIENTRY noopGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetBufferParameteriv");
}

static void GLAPIENTRY noopGetBufferPointerv(GLenum target, GLenum pname, GLvoid **params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetBufferPointerv");
}

static void GLAPIENTRY noopGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
   (void) target; (void) offset; (void) size; (void) data;
   _mesa_noop_entrypoint("glGetBufferSubData");
}

static void GLAPIENTRY noopGetQueryObjectiv(GLuint id, GLenum pname, GLint *params)
{
   (void) id; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetQueryObjectiv");
}

static void GLAPIENTRY noopGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params)
{
   (void) id; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetQueryObjectuiv");
}

static void GLAPIENTRY noopGetQueryiv(GLenum target, GLenum pname, GLint *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetQueryiv");
}

static GLboolean GLAPIENTRY noopIsBuffer(GLuint buffer)
{
   (void) buffer;
   _mesa_noop_entrypoint("glIsBuffer");
   return (GLboolean) 0;
}

static GLboolean GLAPIENTRY noopIsQuery(GLuint id)
{
   (void) id;
   _mesa_noop_entrypoint("glIsQuery");
   return (GLboolean) 0;
}

static GLvoid * GLAPIENTRY noopMapBuffer(GLenum target, GLenum access)
{
   (void) target; (void) access;
   _mesa_noop_entrypoint("glMapBuffer");
   return (GLvoid *) 0;
}

static GLboolean GLAPIENTRY noopUnmapBuffer(GLenum target)
{
   (void) target;
   _mesa_noop_entrypoint("glUnmapBuffer");
   return (GLboolean) 0;
}

static void GLAPIENTRY noopAttachShader(GLuint program, GLuint shader)
{
   (void) program; (void) shader;
   _mesa_noop_entrypoint("glAttachShader");
}

static void GLAPIENTRY noopBindAttribLocation(GLuint program, GLuint index, const GLchar *name)
{
   (void) program; (void) index; (void) name;
   _mesa_noop_entrypoint("glBindAttribLocation");
}

static void GLAPIENTRY noopBlendEquationSeparate(GLenum modeRGB, GLenum modeA)
{
   (void) modeRGB; (void) modeA;
   _mesa_noop_entrypoint("glBlendEquationSeparate");
}

static void GLAPIENTRY noopCompileShader(GLuint shader)
{
   (void) shader;
   _mesa_noop_entrypoint("glCompileShader");
}

static GLuint GLAPIENTRY noopCreateProgram(void)
{
      _mesa_noop_entrypoint("glCreateProgram");
   return (GLuint) 0;
}

static GLuint GLAPIENTRY noopCreateShader(GLenum type)
{
   (void) type;
   _mesa_noop_entrypoint("glCreateShader");
   return (GLuint) 0;
}

static void GLAPIENTRY noopDeleteProgram(GLuint program)
{
   (void) program;
   _mesa_noop_entrypoint("glDeleteProgram");
}

static void GLAPIENTRY noopDeleteShader(GLuint program)
{
   (void) program;
   _mesa_noop_entrypoint("glDeleteShader");
}

static void GLAPIENTRY noopDetachShader(GLuint program, GLuint shader)
{
   (void) program; (void) shader;
   _mesa_noop_entrypoint("glDetachShader");
}

static void GLAPIENTRY noopDisableVertexAttribArray(GLuint index)
{
   (void) index;
   _mesa_noop_entrypoint("glDisableVertexAttribArray");
}

static void GLAPIENTRY noopDrawBuffers(GLsizei n, const GLenum *bufs)
{
   (void) n; (void) bufs;
   _mesa_noop_entrypoint("glDrawBuffers");
}

static void GLAPIENTRY noopEnableVertexAttribArray(GLuint index)
{
   (void) index;
   _mesa_noop_entrypoint("glEnableVertexAttribArray");
}

static void GLAPIENTRY noopGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
   (void) program; (void) index; (void) bufSize; (void) length; (void) size; (void) type; (void) name;
   _mesa_noop_entrypoint("glGetActiveAttrib");
}

static void GLAPIENTRY noopGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
   (void) program; (void) index; (void) bufSize; (void) length; (void) size; (void) type; (void) name;
   _mesa_noop_entrypoint("glGetActiveUniform");
}

static void GLAPIENTRY noopGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj)
{
   (void) program; (void) maxCount; (void) count; (void) obj;
   _mesa_noop_entrypoint("glGetAttachedShaders");
}

static GLint GLAPIENTRY noopGetAttribLocation(GLuint program, const GLchar *name)
{
   (void) program; (void) name;
   _mesa_noop_entrypoint("glGetAttribLocation");
   return (GLint) 0;
}

static void GLAPIENTRY noopGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
   (void) program; (void) bufSize; (void) length; (void) infoLog;
   _mesa_noop_entrypoint("glGetProgramInfoLog");
}

static void GLAPIENTRY noopGetProgramiv(GLuint program, GLenum pname, GLint *params)
{
   (void) program; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetProgramiv");
}

static void GLAPIENTRY noopGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
   (void) shader; (void) bufSize; (void) length; (void) infoLog;
   _mesa_noop_entrypoint("glGetShaderInfoLog");
}

static void GLAPIENTRY noopGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
{
   (void) shader; (void) bufSize; (void) length; (void) source;
   _mesa_noop_entrypoint("glGetShaderSource");
}

static void GLAPIENTRY noopGetShaderiv(GLuint shader, GLenum pname, GLint *params)
{
   (void) shader; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetShaderiv");
}

static GLint GLAPIENTRY noopGetUniformLocation(GLuint program, const GLchar *name)
{
   (void) program; (void) name;
   _mesa_noop_entrypoint("glGetUniformLocation");
   return (GLint) 0;
}

static void GLAPIENTRY noopGetUniformfv(GLuint program, GLint location, GLfloat *params)
{
   (void) program; (void) location; (void) params;
   _mesa_noop_entrypoint("glGetUniformfv");
}

static void GLAPIENTRY noopGetUniformiv(GLuint program, GLint location, GLint *params)
{
   (void) program; (void) location; (void) params;
   _mesa_noop_entrypoint("glGetUniformiv");
}

static void GLAPIENTRY noopGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid **pointer)
{
   (void) index; (void) pname; (void) pointer;
   _mesa_noop_entrypoint("glGetVertexAttribPointerv");
}

static void GLAPIENTRY noopGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params)
{
   (void) index; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetVertexAttribdv");
}

static void GLAPIENTRY noopGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)
{
   (void) index; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetVertexAttribfv");
}

static void GLAPIENTRY noopGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)
{
   (void) index; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetVertexAttribiv");
}

static GLboolean GLAPIENTRY noopIsProgram(GLuint program)
{
   (void) program;
   _mesa_noop_entrypoint("glIsProgram");
   return (GLboolean) 0;
}

static GLboolean GLAPIENTRY noopIsShader(GLuint shader)
{
   (void) shader;
   _mesa_noop_entrypoint("glIsShader");
   return (GLboolean) 0;
}

static void GLAPIENTRY noopLinkProgram(GLuint program)
{
   (void) program;
   _mesa_noop_entrypoint("glLinkProgram");
}

static void GLAPIENTRY noopShaderSource(GLuint shader, GLsizei count, const GLchar * const *string, const GLint *length)
{
   (void) shader; (void) count; (void) string; (void) length;
   _mesa_noop_entrypoint("glShaderSource");
}

static void GLAPIENTRY noopStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
{
   (void) face; (void) func; (void) ref; (void) mask;
   _mesa_noop_entrypoint("glStencilFuncSeparate");
}

static void GLAPIENTRY noopStencilMaskSeparate(GLenum face, GLuint mask)
{
   (void) face; (void) mask;
   _mesa_noop_entrypoint("glStencilMaskSeparate");
}

static void GLAPIENTRY noopStencilOpSeparate(GLenum face, GLenum sfail, GLenum zfail, GLenum zpass)
{
   (void) face; (void) sfail; (void) zfail; (void) zpass;
   _mesa_noop_entrypoint("glStencilOpSeparate");
}

static void GLAPIENTRY noopUniform1f(GLint location, GLfloat v0)
{
   (void) location; (void) v0;
   _mesa_noop_entrypoint("glUniform1f");
}

static void GLAPIENTRY noopUniform1fv(GLint location, GLsizei count, const GLfloat *value)
{
   (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glUniform1fv");
}

static void GLAPIENTRY noopUniform1i(GLint location, GLint v0)
{
   (void) location; (void) v0;
   _mesa_noop_entrypoint("glUniform1i");
}

static void GLAPIENTRY noopUniform1iv(GLint location, GLsizei count, const GLint *value)
{
   (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glUniform1iv");
}

static void GLAPIENTRY noopUniform2f(GLint location, GLfloat v0, GLfloat v1)
{
   (void) location; (void) v0; (void) v1;
   _mesa_noop_entrypoint("glUniform2f");
}

static void GLAPIENTRY noopUniform2fv(GLint location, GLsizei count, const GLfloat *value)
{
   (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glUniform2fv");
}

static void GLAPIENTRY noopUniform2i(GLint location, GLint v0, GLint v1)
{
   (void) location; (void) v0; (void) v1;
   _mesa_noop_entrypoint("glUniform2i");
}

static void GLAPIENTRY noopUniform2iv(GLint location, GLsizei count, const GLint *value)
{
   (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glUniform2iv");
}

static void GLAPIENTRY noopUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
   (void) location; (void) v0; (void) v1; (void) v2;
   _mesa_noop_entrypoint("glUniform3f");
}

static void GLAPIENTRY noopUniform3fv(GLint location, GLsizei count, const GLfloat *value)
{
   (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glUniform3fv");
}

static void GLAPIENTRY noopUniform3i(GLint location, GLint v0, GLint v1, GLint v2)
{
   (void) location; (void) v0; (void) v1; (void) v2;
   _mesa_noop_entrypoint("glUniform3i");
}

static void GLAPIENTRY noopUniform3iv(GLint location, GLsizei count, const GLint *value)
{
   (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glUniform3iv");
}

static void GLAPIENTRY noopUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
   (void) location; (void) v0; (void) v1; (void) v2; (void) v3;
   _mesa_noop_entrypoint("glUniform4f");
}

static void GLAPIENTRY noopUniform4fv(GLint location, GLsizei count, const GLfloat *value)
{
   (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glUniform4fv");
}

static void GLAPIENTRY noopUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
   (void) location; (void) v0; (void) v1; (void) v2; (void) v3;
   _mesa_noop_entrypoint("glUniform4i");
}

static void GLAPIENTRY noopUniform4iv(GLint location, GLsizei count, const GLint *value)
{
   (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glUniform4iv");
}

static void GLAPIENTRY noopUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glUniformMatrix2fv");
}

static void GLAPIENTRY noopUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glUniformMatrix3fv");
}

static void GLAPIENTRY noopUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glUniformMatrix4fv");
}

static void GLAPIENTRY noopUseProgram(GLuint program)
{
   (void) program;
   _mesa_noop_entrypoint("glUseProgram");
}

static void GLAPIENTRY noopValidateProgram(GLuint program)
{
   (void) program;
   _mesa_noop_entrypoint("glValidateProgram");
}

static void GLAPIENTRY noopVertexAttrib1d(GLuint index, GLdouble x)
{
   (void) index; (void) x;
   _mesa_noop_entrypoint("glVertexAttrib1d");
}

static void GLAPIENTRY noopVertexAttrib1dv(GLuint index, const GLdouble *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib1dv");
}

static void GLAPIENTRY noopVertexAttrib1s(GLuint index, GLshort x)
{
   (void) index; (void) x;
   _mesa_noop_entrypoint("glVertexAttrib1s");
}

static void GLAPIENTRY noopVertexAttrib1sv(GLuint index, const GLshort *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib1sv");
}

static void GLAPIENTRY noopVertexAttrib2d(GLuint index, GLdouble x, GLdouble y)
{
   (void) index; (void) x; (void) y;
   _mesa_noop_entrypoint("glVertexAttrib2d");
}

static void GLAPIENTRY noopVertexAttrib2dv(GLuint index, const GLdouble *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib2dv");
}

static void GLAPIENTRY noopVertexAttrib2s(GLuint index, GLshort x, GLshort y)
{
   (void) index; (void) x; (void) y;
   _mesa_noop_entrypoint("glVertexAttrib2s");
}

static void GLAPIENTRY noopVertexAttrib2sv(GLuint index, const GLshort *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib2sv");
}

static void GLAPIENTRY noopVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
   (void) index; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glVertexAttrib3d");
}

static void GLAPIENTRY noopVertexAttrib3dv(GLuint index, const GLdouble *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib3dv");
}

static void GLAPIENTRY noopVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)
{
   (void) index; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glVertexAttrib3s");
}

static void GLAPIENTRY noopVertexAttrib3sv(GLuint index, const GLshort *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib3sv");
}

static void GLAPIENTRY noopVertexAttrib4Nbv(GLuint index, const GLbyte *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib4Nbv");
}

static void GLAPIENTRY noopVertexAttrib4Niv(GLuint index, const GLint *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib4Niv");
}

static void GLAPIENTRY noopVertexAttrib4Nsv(GLuint index, const GLshort *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib4Nsv");
}

static void GLAPIENTRY noopVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
   (void) index; (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glVertexAttrib4Nub");
}

static void GLAPIENTRY noopVertexAttrib4Nubv(GLuint index, const GLubyte *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib4Nubv");
}

static void GLAPIENTRY noopVertexAttrib4Nuiv(GLuint index, const GLuint *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib4Nuiv");
}

static void GLAPIENTRY noopVertexAttrib4Nusv(GLuint index, const GLushort *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib4Nusv");
}

static void GLAPIENTRY noopVertexAttrib4bv(GLuint index, const GLbyte *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib4bv");
}

static void GLAPIENTRY noopVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   (void) index; (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glVertexAttrib4d");
}

static void GLAPIENTRY noopVertexAttrib4dv(GLuint index, const GLdouble *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib4dv");
}

static void GLAPIENTRY noopVertexAttrib4iv(GLuint index, const GLint *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib4iv");
}

static void GLAPIENTRY noopVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
   (void) index; (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glVertexAttrib4s");
}

static void GLAPIENTRY noopVertexAttrib4sv(GLuint index, const GLshort *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib4sv");
}

static void GLAPIENTRY noopVertexAttrib4ubv(GLuint index, const GLubyte *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib4ubv");
}

static void GLAPIENTRY noopVertexAttrib4uiv(GLuint index, const GLuint *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib4uiv");
}

static void GLAPIENTRY noopVertexAttrib4usv(GLuint index, const GLushort *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib4usv");
}

static void GLAPIENTRY noopVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
   (void) index; (void) size; (void) type; (void) normalized; (void) stride; (void) pointer;
   _mesa_noop_entrypoint("glVertexAttribPointer");
}

static void GLAPIENTRY noopUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glUniformMatrix2x3fv");
}

static void GLAPIENTRY noopUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glUniformMatrix2x4fv");
}

static void GLAPIENTRY noopUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glUniformMatrix3x2fv");
}

static void GLAPIENTRY noopUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glUniformMatrix3x4fv");
}

static void GLAPIENTRY noopUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glUniformMatrix4x2fv");
}

static void GLAPIENTRY noopUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glUniformMatrix4x3fv");
}

static void GLAPIENTRY noopBeginConditionalRender(GLuint query, GLenum mode)
{
   (void) query; (void) mode;
   _mesa_noop_entrypoint("glBeginConditionalRender");
}

static void GLAPIENTRY noopBeginTransformFeedback(GLenum mode)
{
   (void) mode;
   _mesa_noop_entrypoint("glBeginTransformFeedback");
}

static void GLAPIENTRY noopBindBufferBase(GLenum target, GLuint index, GLuint buffer)
{
   (void) target; (void) index; (void) buffer;
   _mesa_noop_entrypoint("glBindBufferBase");
}

static void GLAPIENTRY noopBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
   (void) target; (void) index; (void) buffer; (void) offset; (void) size;
   _mesa_noop_entrypoint("glBindBufferRange");
}

static void GLAPIENTRY noopBindFragDataLocation(GLuint program, GLuint colorNumber, const GLchar *name)
{
   (void) program; (void) colorNumber; (void) name;
   _mesa_noop_entrypoint("glBindFragDataLocation");
}

static void GLAPIENTRY noopClampColor(GLenum target, GLenum clamp)
{
   (void) target; (void) clamp;
   _mesa_noop_entrypoint("glClampColor");
}

static void GLAPIENTRY noopClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
{
   (void) buffer; (void) drawbuffer; (void) depth; (void) stencil;
   _mesa_noop_entrypoint("glClearBufferfi");
}

static void GLAPIENTRY noopClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value)
{
   (void) buffer; (void) drawbuffer; (void) value;
   _mesa_noop_entrypoint("glClearBufferfv");
}

static void GLAPIENTRY noopClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value)
{
   (void) buffer; (void) drawbuffer; (void) value;
   _mesa_noop_entrypoint("glClearBufferiv");
}

static void GLAPIENTRY noopClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value)
{
   (void) buffer; (void) drawbuffer; (void) value;
   _mesa_noop_entrypoint("glClearBufferuiv");
}

static void GLAPIENTRY noopColorMaski(GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
   (void) buf; (void) r; (void) g; (void) b; (void) a;
   _mesa_noop_entrypoint("glColorMaski");
}

static void GLAPIENTRY noopDisablei(GLenum target, GLuint index)
{
   (void) target; (void) index;
   _mesa_noop_entrypoint("glDisablei");
}

static void GLAPIENTRY noopEnablei(GLenum target, GLuint index)
{
   (void) target; (void) index;
   _mesa_noop_entrypoint("glEnablei");
}

static void GLAPIENTRY noopEndConditionalRender(void)
{
      _mesa_noop_entrypoint("glEndConditionalRender");
}

static void GLAPIENTRY noopEndTransformFeedback(void)
{
      _mesa_noop_entrypoint("glEndTransformFeedback");
}

static void GLAPIENTRY noopGetBooleani_v(GLenum value, GLuint index, GLboolean *data)
{
   (void) value; (void) index; (void) data;
   _mesa_noop_entrypoint("glGetBooleani_v");
}

static GLint GLAPIENTRY noopGetFragDataLocation(GLuint program, const GLchar *name)
{
   (void) program; (void) name;
   _mesa_noop_entrypoint("glGetFragDataLocation");
   return (GLint) 0;
}

static void GLAPIENTRY noopGetIntegeri_v(GLenum value, GLuint index, GLint *data)
{
   (void) value; (void) index; (void) data;
   _mesa_noop_entrypoint("glGetIntegeri_v");
}

static const GLubyte * GLAPIENTRY noopGetStringi(GLenum name, GLuint index)
{
   (void) name; (void) index;
   _mesa_noop_entrypoint("glGetStringi");
   return (const GLubyte *) 0;
}

static void GLAPIENTRY noopGetTexParameterIiv(GLenum target, GLenum pname, GLint *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetTexParameterIiv");
}

static void GLAPIENTRY noopGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetTexParameterIuiv");
}

static void GLAPIENTRY noopGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
   (void) program; (void) index; (void) bufSize; (void) length; (void) size; (void) type; (void) name;
   _mesa_noop_entrypoint("glGetTransformFeedbackVarying");
}

static void GLAPIENTRY noopGetUniformuiv(GLuint program, GLint location, GLuint *params)
{
   (void) program; (void) location; (void) params;
   _mesa_noop_entrypoint("glGetUniformuiv");
}

static void GLAPIENTRY noopGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params)
{
   (void) index; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetVertexAttribIiv");
}

static void GLAPIENTRY noopGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params)
{
   (void) index; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetVertexAttribIuiv");
}

static GLboolean GLAPIENTRY noopIsEnabledi(GLenum target, GLuint index)
{
   (void) target; (void) index;
   _mesa_noop_entrypoint("glIsEnabledi");
   return (GLboolean) 0;
}

static void GLAPIENTRY noopTexParameterIiv(GLenum target, GLenum pname, const GLint *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glTexParameterIiv");
}

static void GLAPIENTRY noopTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glTexParameterIuiv");
}

static void GLAPIENTRY noopTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar * const *varyings, GLenum bufferMode)
{
   (void) program; (void) count; (void) varyings; (void) bufferMode;
   _mesa_noop_entrypoint("glTransformFeedbackVaryings");
}

static void GLAPIENTRY noopUniform1ui(GLint location, GLuint x)
{
   (void) location; (void) x;
   _mesa_noop_entrypoint("glUniform1ui");
}

static void GLAPIENTRY noopUniform1uiv(GLint location, GLsizei count, const GLuint *value)
{
   (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glUniform1uiv");
}

static void GLAPIENTRY noopUniform2ui(GLint location, GLuint x, GLuint y)
{
   (void) location; (void) x; (void) y;
   _mesa_noop_entrypoint("glUniform2ui");
}

static void GLAPIENTRY noopUniform2uiv(GLint location, GLsizei count, const GLuint *value)
{
   (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glUniform2uiv");
}

static void GLAPIENTRY noopUniform3ui(GLint location, GLuint x, GLuint y, GLuint z)
{
   (void) location; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glUniform3ui");
}

static void GLAPIENTRY noopUniform3uiv(GLint location, GLsizei count, const GLuint *value)
{
   (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glUniform3uiv");
}

static void GLAPIENTRY noopUniform4ui(GLint location, GLuint x, GLuint y, GLuint z, GLuint w)
{
   (void) location; (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glUniform4ui");
}

static void GLAPIENTRY noopUniform4uiv(GLint location, GLsizei count, const GLuint *value)
{
   (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glUniform4uiv");
}

static void GLAPIENTRY noopVertexAttribI1iv(GLuint index, const GLint *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttribI1iv");
}

static void GLAPIENTRY noopVertexAttribI1uiv(GLuint index, const GLuint *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttribI1uiv");
}

static void GLAPIENTRY noopVertexAttribI4bv(GLuint index, const GLbyte *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttribI4bv");
}

static void GLAPIENTRY noopVertexAttribI4sv(GLuint index, const GLshort *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttribI4sv");
}

static void GLAPIENTRY noopVertexAttribI4ubv(GLuint index, const GLubyte *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttribI4ubv");
}

static void GLAPIENTRY noopVertexAttribI4usv(GLuint index, const GLushort *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttribI4usv");
}

static void GLAPIENTRY noopVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   (void) index; (void) size; (void) type; (void) stride; (void) pointer;
   _mesa_noop_entrypoint("glVertexAttribIPointer");
}

static void GLAPIENTRY noopPrimitiveRestartIndex(GLuint index)
{
   (void) index;
   _mesa_noop_entrypoint("glPrimitiveRestartIndex");
}

static void GLAPIENTRY noopTexBuffer(GLenum target, GLenum internalFormat, GLuint buffer)
{
   (void) target; (void) internalFormat; (void) buffer;
   _mesa_noop_entrypoint("glTexBuffer");
}

static void GLAPIENTRY noopFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level)
{
   (void) target; (void) attachment; (void) texture; (void) level;
   _mesa_noop_entrypoint("glFramebufferTexture");
}

static void GLAPIENTRY noopGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetBufferParameteri64v");
}

static void GLAPIENTRY noopGetInteger64i_v(GLenum cap, GLuint index, GLint64 *data)
{
   (void) cap; (void) index; (void) data;
   _mesa_noop_entrypoint("glGetInteger64i_v");
}

static void GLAPIENTRY noopVertexAttribDivisor(GLuint index, GLuint divisor)
{
   (void) index; (void) divisor;
   _mesa_noop_entrypoint("glVertexAttribDivisor");
}

static void GLAPIENTRY noopMinSampleShading(GLfloat value)
{
   (void) value;
   _mesa_noop_entrypoint("glMinSampleShading");
}

static void GLAPIENTRY noopMemoryBarrierByRegion(GLbitfield barriers)
{
   (void) barriers;
   _mesa_noop_entrypoint("glMemoryBarrierByRegion");
}

static void GLAPIENTRY noopBindProgramARB(GLenum target, GLuint program)
{
   (void) target; (void) program;
   _mesa_noop_entrypoint("glBindProgramARB");
}

static void GLAPIENTRY noopDeleteProgramsARB(GLsizei n, const GLuint *programs)
{
   (void) n; (void) programs;
   _mesa_noop_entrypoint("glDeleteProgramsARB");
}

static void GLAPIENTRY noopGenProgramsARB(GLsizei n, GLuint *programs)
{
   (void) n; (void) programs;
   _mesa_noop_entrypoint("glGenProgramsARB");
}

static void GLAPIENTRY noopGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble *params)
{
   (void) target; (void) index; (void) params;
   _mesa_noop_entrypoint("glGetProgramEnvParameterdvARB");
}

static void GLAPIENTRY noopGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat *params)
{
   (void) target; (void) index; (void) params;
   _mesa_noop_entrypoint("glGetProgramEnvParameterfvARB");
}

static void GLAPIENTRY noopGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble *params)
{
   (void) target; (void) index; (void) params;
   _mesa_noop_entrypoint("glGetProgramLocalParameterdvARB");
}

static void GLAPIENTRY noopGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat *params)
{
   (void) target; (void) index; (void) params;
   _mesa_noop_entrypoint("glGetProgramLocalParameterfvARB");
}

static void GLAPIENTRY noopGetProgramStringARB(GLenum target, GLenum pname, GLvoid *string)
{
   (void) target; (void) pname; (void) string;
   _mesa_noop_entrypoint("glGetProgramStringARB");
}

static void GLAPIENTRY noopGetProgramivARB(GLenum target, GLenum pname, GLint *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetProgramivARB");
}

static GLboolean GLAPIENTRY noopIsProgramARB(GLuint program)
{
   (void) program;
   _mesa_noop_entrypoint("glIsProgramARB");
   return (GLboolean) 0;
}

static void GLAPIENTRY noopProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   (void) target; (void) index; (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glProgramEnvParameter4dARB");
}

static void GLAPIENTRY noopProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
{
   (void) target; (void) index; (void) params;
   _mesa_noop_entrypoint("glProgramEnvParameter4dvARB");
}

static void GLAPIENTRY noopProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   (void) target; (void) index; (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glProgramEnvParameter4fARB");
}

static void GLAPIENTRY noopProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
{
   (void) target; (void) index; (void) params;
   _mesa_noop_entrypoint("glProgramEnvParameter4fvARB");
}

static void GLAPIENTRY noopProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   (void) target; (void) index; (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glProgramLocalParameter4dARB");
}

static void GLAPIENTRY noopProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
{
   (void) target; (void) index; (void) params;
   _mesa_noop_entrypoint("glProgramLocalParameter4dvARB");
}

static void GLAPIENTRY noopProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   (void) target; (void) index; (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glProgramLocalParameter4fARB");
}

static void GLAPIENTRY noopProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
{
   (void) target; (void) index; (void) params;
   _mesa_noop_entrypoint("glProgramLocalParameter4fvARB");
}

static void GLAPIENTRY noopProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid *string)
{
   (void) target; (void) format; (void) len; (void) string;
   _mesa_noop_entrypoint("glProgramStringARB");
}

static void GLAPIENTRY noopVertexAttrib1fARB(GLuint index, GLfloat x)
{
   (void) index; (void) x;
   _mesa_noop_entrypoint("glVertexAttrib1fARB");
}

static void GLAPIENTRY noopVertexAttrib1fvARB(GLuint index, const GLfloat *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib1fvARB");
}

static void GLAPIENTRY noopVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y)
{
   (void) index; (void) x; (void) y;
   _mesa_noop_entrypoint("glVertexAttrib2fARB");
}

static void GLAPIENTRY noopVertexAttrib2fvARB(GLuint index, const GLfloat *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib2fvARB");
}

static void GLAPIENTRY noopVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
   (void) index; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glVertexAttrib3fARB");
}

static void GLAPIENTRY noopVertexAttrib3fvARB(GLuint index, const GLfloat *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib3fvARB");
}

static void GLAPIENTRY noopVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   (void) index; (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glVertexAttrib4fARB");
}

static void GLAPIENTRY noopVertexAttrib4fvARB(GLuint index, const GLfloat *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib4fvARB");
}

static void GLAPIENTRY noopAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj)
{
   (void) containerObj; (void) obj;
   _mesa_noop_entrypoint("glAttachObjectARB");
}

static GLhandleARB GLAPIENTRY noopCreateProgramObjectARB(void)
{
      _mesa_noop_entrypoint("glCreateProgramObjectARB");
   return (GLhandleARB) 0;
}

static GLhandleARB GLAPIENTRY noopCreateShaderObjectARB(GLenum shaderType)
{
   (void) shaderType;
   _mesa_noop_entrypoint("glCreateShaderObjectARB");
   return (GLhandleARB) 0;
}

static void GLAPIENTRY noopDeleteObjectARB(GLhandleARB obj)
{
   (void) obj;
   _mesa_noop_entrypoint("glDeleteObjectARB");
}

static void GLAPIENTRY noopDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)
{
   (void) containerObj; (void) attachedObj;
   _mesa_noop_entrypoint("glDetachObjectARB");
}

static void GLAPIENTRY noopGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxLength, GLsizei *length, GLhandleARB *infoLog)
{
   (void) containerObj; (void) maxLength; (void) length; (void) infoLog;
   _mesa_noop_entrypoint("glGetAttachedObjectsARB");
}

static GLhandleARB GLAPIENTRY noopGetHandleARB(GLenum pname)
{
   (void) pname;
   _mesa_noop_entrypoint("glGetHandleARB");
   return (GLhandleARB) 0;
}

static void GLAPIENTRY noopGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)
{
   (void) obj; (void) maxLength; (void) length; (void) infoLog;
   _mesa_noop_entrypoint("glGetInfoLogARB");
}

static void GLAPIENTRY noopGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat *params)
{
   (void) obj; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetObjectParameterfvARB");
}

static void GLAPIENTRY noopGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint *params)
{
   (void) obj; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetObjectParameterivARB");
}

static void GLAPIENTRY noopDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei primcount)
{
   (void) mode; (void) first; (void) count; (void) primcount;
   _mesa_noop_entrypoint("glDrawArraysInstanced");
}

static void GLAPIENTRY noopDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instance_count)
{
   (void) mode; (void) count; (void) type; (void) indices; (void) instance_count;
   _mesa_noop_entrypoint("glDrawElementsInstanced");
}

static void GLAPIENTRY noopBindFramebuffer(GLenum target, GLuint framebuffer)
{
   (void) target; (void) framebuffer;
   _mesa_noop_entrypoint("glBindFramebuffer");
}

static void GLAPIENTRY noopBindRenderbuffer(GLenum target, GLuint renderbuffer)
{
   (void) target; (void) renderbuffer;
   _mesa_noop_entrypoint("glBindRenderbuffer");
}

static void GLAPIENTRY noopBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
   (void) srcX0; (void) srcY0; (void) srcX1; (void) srcY1; (void) dstX0; (void) dstY0; (void) dstX1; (void) dstY1; (void) mask; (void) filter;
   _mesa_noop_entrypoint("glBlitFramebuffer");
}

static GLenum GLAPIENTRY noopCheckFramebufferStatus(GLenum target)
{
   (void) target;
   _mesa_noop_entrypoint("glCheckFramebufferStatus");
   return (GLenum) 0;
}

static void GLAPIENTRY noopDeleteFramebuffers(GLsizei n, const GLuint *framebuffers)
{
   (void) n; (void) framebuffers;
   _mesa_noop_entrypoint("glDeleteFramebuffers");
}

static void GLAPIENTRY noopDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)
{
   (void) n; (void) renderbuffers;
   _mesa_noop_entrypoint("glDeleteRenderbuffers");
}

static void GLAPIENTRY noopFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
   (void) target; (void) attachment; (void) renderbuffertarget; (void) renderbuffer;
   _mesa_noop_entrypoint("glFramebufferRenderbuffer");
}

static void GLAPIENTRY noopFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
   (void) target; (void) attachment; (void) textarget; (void) texture; (void) level;
   _mesa_noop_entrypoint("glFramebufferTexture1D");
}

static void GLAPIENTRY noopFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
   (void) target; (void) attachment; (void) textarget; (void) texture; (void) level;
   _mesa_noop_entrypoint("glFramebufferTexture2D");
}

static void GLAPIENTRY noopFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer)
{
   (void) target; (void) attachment; (void) textarget; (void) texture; (void) level; (void) layer;
   _mesa_noop_entrypoint("glFramebufferTexture3D");
}

static void GLAPIENTRY noopFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
   (void) target; (void) attachment; (void) texture; (void) level; (void) layer;
   _mesa_noop_entrypoint("glFramebufferTextureLayer");
}

static void GLAPIENTRY noopGenFramebuffers(GLsizei n, GLuint *framebuffers)
{
   (void) n; (void) framebuffers;
   _mesa_noop_entrypoint("glGenFramebuffers");
}

static void GLAPIENTRY noopGenRenderbuffers(GLsizei n, GLuint *renderbuffers)
{
   (void) n; (void) renderbuffers;
   _mesa_noop_entrypoint("glGenRenderbuffers");
}

static void GLAPIENTRY noopGenerateMipmap(GLenum target)
{
   (void) target;
   _mesa_noop_entrypoint("glGenerateMipmap");
}

static void GLAPIENTRY noopGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
   (void) target; (void) attachment; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetFramebufferAttachmentParameteriv");
}

static void GLAPIENTRY noopGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetRenderbufferParameteriv");
}

static GLboolean GLAPIENTRY noopIsFramebuffer(GLuint framebuffer)
{
   (void) framebuffer;
   _mesa_noop_entrypoint("glIsFramebuffer");
   return (GLboolean) 0;
}

static GLboolean GLAPIENTRY noopIsRenderbuffer(GLuint renderbuffer)
{
   (void) renderbuffer;
   _mesa_noop_entrypoint("glIsRenderbuffer");
   return (GLboolean) 0;
}

static void GLAPIENTRY noopRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
   (void) target; (void) internalformat; (void) width; (void) height;
   _mesa_noop_entrypoint("glRenderbufferStorage");
}

static void GLAPIENTRY noopRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
   (void) target; (void) samples; (void) internalformat; (void) width; (void) height;
   _mesa_noop_entrypoint("glRenderbufferStorageMultisample");
}

static void GLAPIENTRY noopFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)
{
   (void) target; (void) offset; (void) length;
   _mesa_noop_entrypoint("glFlushMappedBufferRange");
}

static GLvoid * GLAPIENTRY noopMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
   (void) target; (void) offset; (void) length; (void) access;
   _mesa_noop_entrypoint("glMapBufferRange");
   return (GLvoid *) 0;
}

static void GLAPIENTRY noopBindVertexArray(GLuint array)
{
   (void) array;
   _mesa_noop_entrypoint("glBindVertexArray");
}

static void GLAPIENTRY noopDeleteVertexArrays(GLsizei n, const GLuint *arrays)
{
   (void) n; (void) arrays;
   _mesa_noop_entrypoint("glDeleteVertexArrays");
}

static void GLAPIENTRY noopGenVertexArrays(GLsizei n, GLuint *arrays)
{
   (void) n; (void) arrays;
   _mesa_noop_entrypoint("glGenVertexArrays");
}

static GLboolean GLAPIENTRY noopIsVertexArray(GLuint array)
{
   (void) array;
   _mesa_noop_entrypoint("glIsVertexArray");
   return (GLboolean) 0;
}

static void GLAPIENTRY noopGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)
{
   (void) program; (void) uniformBlockIndex; (void) bufSize; (void) length; (void) uniformBlockName;
   _mesa_noop_entrypoint("glGetActiveUniformBlockName");
}

static void GLAPIENTRY noopGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)
{
   (void) program; (void) uniformBlockIndex; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetActiveUniformBlockiv");
}

static void GLAPIENTRY noopGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)
{
   (void) program; (void) uniformIndex; (void) bufSize; (void) length; (void) uniformName;
   _mesa_noop_entrypoint("glGetActiveUniformName");
}

static void GLAPIENTRY noopGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)
{
   (void) program; (void) uniformCount; (void) uniformIndices; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetActiveUniformsiv");
}

static GLuint GLAPIENTRY noopGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName)
{
   (void) program; (void) uniformBlockName;
   _mesa_noop_entrypoint("glGetUniformBlockIndex");
   return (GLuint) 0;
}

static void GLAPIENTRY noopGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar * const *uniformNames, GLuint *uniformIndices)
{
   (void) program; (void) uniformCount; (void) uniformNames; (void) uniformIndices;
   _mesa_noop_entrypoint("glGetUniformIndices");
}

static void GLAPIENTRY noopUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
{
   (void) program; (void) uniformBlockIndex; (void) uniformBlockBinding;
   _mesa_noop_entrypoint("glUniformBlockBinding");
}

static void GLAPIENTRY noopCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
   (void) readTarget; (void) writeTarget; (void) readOffset; (void) writeOffset; (void) size;
   _mesa_noop_entrypoint("glCopyBufferSubData");
}

static GLenum GLAPIENTRY noopClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
   (void) sync; (void) flags; (void) timeout;
   _mesa_noop_entrypoint("glClientWaitSync");
   return (GLenum) 0;
}

static void GLAPIENTRY noopDeleteSync(GLsync sync)
{
   (void) sync;
   _mesa_noop_entrypoint("glDeleteSync");
}

static GLsync GLAPIENTRY noopFenceSync(GLenum condition, GLbitfield flags)
{
   (void) condition; (void) flags;
   _mesa_noop_entrypoint("glFenceSync");
   return (GLsync) 0;
}

static void GLAPIENTRY noopGetInteger64v(GLenum pname, GLint64 *params)
{
   (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetInteger64v");
}

static void GLAPIENTRY noopGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
   (void) sync; (void) pname; (void) bufSize; (void) length; (void) values;
   _mesa_noop_entrypoint("glGetSynciv");
}

static GLboolean GLAPIENTRY noopIsSync(GLsync sync)
{
   (void) sync;
   _mesa_noop_entrypoint("glIsSync");
   return (GLboolean) 0;
}

static void GLAPIENTRY noopWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
   (void) sync; (void) flags; (void) timeout;
   _mesa_noop_entrypoint("glWaitSync");
}

static void GLAPIENTRY noopDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
   (void) mode; (void) count; (void) type; (void) indices; (void) basevertex;
   _mesa_noop_entrypoint("glDrawElementsBaseVertex");
}

static void GLAPIENTRY noopDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex)
{
   (void) mode; (void) count; (void) type; (void) indices; (void) primcount; (void) basevertex;
   _mesa_noop_entrypoint("glDrawElementsInstancedBaseVertex");
}

static void GLAPIENTRY noopDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
   (void) mode; (void) start; (void) end; (void) count; (void) type; (void) indices; (void) basevertex;
   _mesa_noop_entrypoint("glDrawRangeElementsBaseVertex");
}

static void GLAPIENTRY noopMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, const GLint *basevertex)
{
   (void) mode; (void) count; (void) type; (void) indices; (void) primcount; (void) basevertex;
   _mesa_noop_entrypoint("glMultiDrawElementsBaseVertex");
}

static void GLAPIENTRY noopProvokingVertex(GLenum mode)
{
   (void) mode;
   _mesa_noop_entrypoint("glProvokingVertex");
}

static void GLAPIENTRY noopGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val)
{
   (void) pname; (void) index; (void) val;
   _mesa_noop_entrypoint("glGetMultisamplefv");
}

static void GLAPIENTRY noopSampleMaski(GLuint index, GLbitfield mask)
{
   (void) index; (void) mask;
   _mesa_noop_entrypoint("glSampleMaski");
}

static void GLAPIENTRY noopTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
   (void) target; (void) samples; (void) internalformat; (void) width; (void) height; (void) fixedsamplelocations;
   _mesa_noop_entrypoint("glTexImage2DMultisample");
}

static void GLAPIENTRY noopTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
   (void) target; (void) samples; (void) internalformat; (void) width; (void) height; (void) depth; (void) fixedsamplelocations;
   _mesa_noop_entrypoint("glTexImage3DMultisample");
}

static void GLAPIENTRY noopBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeA)
{
   (void) buf; (void) modeRGB; (void) modeA;
   _mesa_noop_entrypoint("glBlendEquationSeparateiARB");
}

static void GLAPIENTRY noopBlendEquationiARB(GLuint buf, GLenum mode)
{
   (void) buf; (void) mode;
   _mesa_noop_entrypoint("glBlendEquationiARB");
}

static void GLAPIENTRY noopBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcA, GLenum dstA)
{
   (void) buf; (void) srcRGB; (void) dstRGB; (void) srcA; (void) dstA;
   _mesa_noop_entrypoint("glBlendFuncSeparateiARB");
}

static void GLAPIENTRY noopBlendFunciARB(GLuint buf, GLenum src, GLenum dst)
{
   (void) buf; (void) src; (void) dst;
   _mesa_noop_entrypoint("glBlendFunciARB");
}

static void GLAPIENTRY noopBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)
{
   (void) program; (void) colorNumber; (void) index; (void) name;
   _mesa_noop_entrypoint("glBindFragDataLocationIndexed");
}

static GLint GLAPIENTRY noopGetFragDataIndex(GLuint program, const GLchar *name)
{
   (void) program; (void) name;
   _mesa_noop_entrypoint("glGetFragDataIndex");
   return (GLint) 0;
}

static void GLAPIENTRY noopBindSampler(GLuint unit, GLuint sampler)
{
   (void) unit; (void) sampler;
   _mesa_noop_entrypoint("glBindSampler");
}

static void GLAPIENTRY noopDeleteSamplers(GLsizei count, const GLuint *samplers)
{
   (void) count; (void) samplers;
   _mesa_noop_entrypoint("glDeleteSamplers");
}

static void GLAPIENTRY noopGenSamplers(GLsizei count, GLuint *samplers)
{
   (void) count; (void) samplers;
   _mesa_noop_entrypoint("glGenSamplers");
}

static void GLAPIENTRY noopGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params)
{
   (void) sampler; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetSamplerParameterIiv");
}

static void GLAPIENTRY noopGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params)
{
   (void) sampler; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetSamplerParameterIuiv");
}

static void GLAPIENTRY noopGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params)
{
   (void) sampler; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetSamplerParameterfv");
}

static void GLAPIENTRY noopGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params)
{
   (void) sampler; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetSamplerParameteriv");
}

static GLboolean GLAPIENTRY noopIsSampler(GLuint sampler)
{
   (void) sampler;
   _mesa_noop_entrypoint("glIsSampler");
   return (GLboolean) 0;
}

static void GLAPIENTRY noopSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *params)
{
   (void) sampler; (void) pname; (void) params;
   _mesa_noop_entrypoint("glSamplerParameterIiv");
}

static void GLAPIENTRY noopSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *params)
{
   (void) sampler; (void) pname; (void) params;
   _mesa_noop_entrypoint("glSamplerParameterIuiv");
}

static void GLAPIENTRY noopSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param)
{
   (void) sampler; (void) pname; (void) param;
   _mesa_noop_entrypoint("glSamplerParameterf");
}

static void GLAPIENTRY noopSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *params)
{
   (void) sampler; (void) pname; (void) params;
   _mesa_noop_entrypoint("glSamplerParameterfv");
}

static void GLAPIENTRY noopSamplerParameteri(GLuint sampler, GLenum pname, GLint param)
{
   (void) sampler; (void) pname; (void) param;
   _mesa_noop_entrypoint("glSamplerParameteri");
}

static void GLAPIENTRY noopSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *params)
{
   (void) sampler; (void) pname; (void) params;
   _mesa_noop_entrypoint("glSamplerParameteriv");
}

static void GLAPIENTRY noopGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params)
{
   (void) id; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetQueryObjecti64v");
}

static void GLAPIENTRY noopGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params)
{
   (void) id; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetQueryObjectui64v");
}

static void GLAPIENTRY noopQueryCounter(GLuint id, GLenum target)
{
   (void) id; (void) target;
   _mesa_noop_entrypoint("glQueryCounter");
}

static void GLAPIENTRY noopColorP3ui(GLenum type, GLuint color)
{
   (void) type; (void) color;
   _mesa_noop_entrypoint("glColorP3ui");
}

static void GLAPIENTRY noopColorP3uiv(GLenum type, const GLuint *color)
{
   (void) type; (void) color;
   _mesa_noop_entrypoint("glColorP3uiv");
}

static void GLAPIENTRY noopColorP4ui(GLenum type, GLuint color)
{
   (void) type; (void) color;
   _mesa_noop_entrypoint("glColorP4ui");
}

static void GLAPIENTRY noopColorP4uiv(GLenum type, const GLuint *color)
{
   (void) type; (void) color;
   _mesa_noop_entrypoint("glColorP4uiv");
}

static void GLAPIENTRY noopMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords)
{
   (void) texture; (void) type; (void) coords;
   _mesa_noop_entrypoint("glMultiTexCoordP1ui");
}

static void GLAPIENTRY noopMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords)
{
   (void) texture; (void) type; (void) coords;
   _mesa_noop_entrypoint("glMultiTexCoordP1uiv");
}

static void GLAPIENTRY noopMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords)
{
   (void) texture; (void) type; (void) coords;
   _mesa_noop_entrypoint("glMultiTexCoordP2ui");
}

static void GLAPIENTRY noopMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords)
{
   (void) texture; (void) type; (void) coords;
   _mesa_noop_entrypoint("glMultiTexCoordP2uiv");
}

static void GLAPIENTRY noopMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords)
{
   (void) texture; (void) type; (void) coords;
   _mesa_noop_entrypoint("glMultiTexCoordP3ui");
}

static void GLAPIENTRY noopMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords)
{
   (void) texture; (void) type; (void) coords;
   _mesa_noop_entrypoint("glMultiTexCoordP3uiv");
}

static void GLAPIENTRY noopMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords)
{
   (void) texture; (void) type; (void) coords;
   _mesa_noop_entrypoint("glMultiTexCoordP4ui");
}

static void GLAPIENTRY noopMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords)
{
   (void) texture; (void) type; (void) coords;
   _mesa_noop_entrypoint("glMultiTexCoordP4uiv");
}

static void GLAPIENTRY noopNormalP3ui(GLenum type, GLuint coords)
{
   (void) type; (void) coords;
   _mesa_noop_entrypoint("glNormalP3ui");
}

static void GLAPIENTRY noopNormalP3uiv(GLenum type, const GLuint *coords)
{
   (void) type; (void) coords;
   _mesa_noop_entrypoint("glNormalP3uiv");
}

static void GLAPIENTRY noopSecondaryColorP3ui(GLenum type, GLuint color)
{
   (void) type; (void) color;
   _mesa_noop_entrypoint("glSecondaryColorP3ui");
}

static void GLAPIENTRY noopSecondaryColorP3uiv(GLenum type, const GLuint *color)
{
   (void) type; (void) color;
   _mesa_noop_entrypoint("glSecondaryColorP3uiv");
}

static void GLAPIENTRY noopTexCoordP1ui(GLenum type, GLuint coords)
{
   (void) type; (void) coords;
   _mesa_noop_entrypoint("glTexCoordP1ui");
}

static void GLAPIENTRY noopTexCoordP1uiv(GLenum type, const GLuint *coords)
{
   (void) type; (void) coords;
   _mesa_noop_entrypoint("glTexCoordP1uiv");
}

static void GLAPIENTRY noopTexCoordP2ui(GLenum type, GLuint coords)
{
   (void) type; (void) coords;
   _mesa_noop_entrypoint("glTexCoordP2ui");
}

static void GLAPIENTRY noopTexCoordP2uiv(GLenum type, const GLuint *coords)
{
   (void) type; (void) coords;
   _mesa_noop_entrypoint("glTexCoordP2uiv");
}

static void GLAPIENTRY noopTexCoordP3ui(GLenum type, GLuint coords)
{
   (void) type; (void) coords;
   _mesa_noop_entrypoint("glTexCoordP3ui");
}

static void GLAPIENTRY noopTexCoordP3uiv(GLenum type, const GLuint *coords)
{
   (void) type; (void) coords;
   _mesa_noop_entrypoint("glTexCoordP3uiv");
}

static void GLAPIENTRY noopTexCoordP4ui(GLenum type, GLuint coords)
{
   (void) type; (void) coords;
   _mesa_noop_entrypoint("glTexCoordP4ui");
}

static void GLAPIENTRY noopTexCoordP4uiv(GLenum type, const GLuint *coords)
{
   (void) type; (void) coords;
   _mesa_noop_entrypoint("glTexCoordP4uiv");
}

static void GLAPIENTRY noopVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
   (void) index; (void) type; (void) normalized; (void) value;
   _mesa_noop_entrypoint("glVertexAttribP1ui");
}

static void GLAPIENTRY noopVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
   (void) index; (void) type; (void) normalized; (void) value;
   _mesa_noop_entrypoint("glVertexAttribP1uiv");
}

static void GLAPIENTRY noopVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
   (void) index; (void) type; (void) normalized; (void) value;
   _mesa_noop_entrypoint("glVertexAttribP2ui");
}

static void GLAPIENTRY noopVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
   (void) index; (void) type; (void) normalized; (void) value;
   _mesa_noop_entrypoint("glVertexAttribP2uiv");
}

static void GLAPIENTRY noopVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
   (void) index; (void) type; (void) normalized; (void) value;
   _mesa_noop_entrypoint("glVertexAttribP3ui");
}

static void GLAPIENTRY noopVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
   (void) index; (void) type; (void) normalized; (void) value;
   _mesa_noop_entrypoint("glVertexAttribP3uiv");
}

static void GLAPIENTRY noopVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
   (void) index; (void) type; (void) normalized; (void) value;
   _mesa_noop_entrypoint("glVertexAttribP4ui");
}

static void GLAPIENTRY noopVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
   (void) index; (void) type; (void) normalized; (void) value;
   _mesa_noop_entrypoint("glVertexAttribP4uiv");
}

static void GLAPIENTRY noopVertexP2ui(GLenum type, GLuint value)
{
   (void) type; (void) value;
   _mesa_noop_entrypoint("glVertexP2ui");
}

static void GLAPIENTRY noopVertexP2uiv(GLenum type, const GLuint *value)
{
   (void) type; (void) value;
   _mesa_noop_entrypoint("glVertexP2uiv");
}

static void GLAPIENTRY noopVertexP3ui(GLenum type, GLuint value)
{
   (void) type; (void) value;
   _mesa_noop_entrypoint("glVertexP3ui");
}

static void GLAPIENTRY noopVertexP3uiv(GLenum type, const GLuint *value)
{
   (void) type; (void) value;
   _mesa_noop_entrypoint("glVertexP3uiv");
}

static void GLAPIENTRY noopVertexP4ui(GLenum type, GLuint value)
{
   (void) type; (void) value;
   _mesa_noop_entrypoint("glVertexP4ui");
}

static void GLAPIENTRY noopVertexP4uiv(GLenum type, const GLuint *value)
{
   (void) type; (void) value;
   _mesa_noop_entrypoint("glVertexP4uiv");
}

static void GLAPIENTRY noopDrawArraysIndirect(GLenum mode, const GLvoid *indirect)
{
   (void) mode; (void) indirect;
   _mesa_noop_entrypoint("glDrawArraysIndirect");
}

static void GLAPIENTRY noopDrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect)
{
   (void) mode; (void) type; (void) indirect;
   _mesa_noop_entrypoint("glDrawElementsIndirect");
}

static void GLAPIENTRY noopGetUniformdv(GLuint program, GLint location, GLdouble *params)
{
   (void) program; (void) location; (void) params;
   _mesa_noop_entrypoint("glGetUniformdv");
}

static void GLAPIENTRY noopUniform1d(GLint location, GLdouble x)
{
   (void) location; (void) x;
   _mesa_noop_entrypoint("glUniform1d");
}

static void GLAPIENTRY noopUniform1dv(GLint location, GLsizei count, const GLdouble *value)
{
   (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glUniform1dv");
}

static void GLAPIENTRY noopUniform2d(GLint location, GLdouble x, GLdouble y)
{
   (void) location; (void) x; (void) y;
   _mesa_noop_entrypoint("glUniform2d");
}

static void GLAPIENTRY noopUniform2dv(GLint location, GLsizei count, const GLdouble *value)
{
   (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glUniform2dv");
}

static void GLAPIENTRY noopUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z)
{
   (void) location; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glUniform3d");
}

static void GLAPIENTRY noopUniform3dv(GLint location, GLsizei count, const GLdouble *value)
{
   (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glUniform3dv");
}

static void GLAPIENTRY noopUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   (void) location; (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glUniform4d");
}

static void GLAPIENTRY noopUniform4dv(GLint location, GLsizei count, const GLdouble *value)
{
   (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glUniform4dv");
}

static void GLAPIENTRY noopUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glUniformMatrix2dv");
}

static void GLAPIENTRY noopUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glUniformMatrix2x3dv");
}

static void GLAPIENTRY noopUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glUniformMatrix2x4dv");
}

static void GLAPIENTRY noopUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glUniformMatrix3dv");
}

static void GLAPIENTRY noopUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glUniformMatrix3x2dv");
}

static void GLAPIENTRY noopUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glUniformMatrix3x4dv");
}

static void GLAPIENTRY noopUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glUniformMatrix4dv");
}

static void GLAPIENTRY noopUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glUniformMatrix4x2dv");
}

static void GLAPIENTRY noopUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glUniformMatrix4x3dv");
}

static void GLAPIENTRY noopGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name)
{
   (void) program; (void) shadertype; (void) index; (void) bufsize; (void) length; (void) name;
   _mesa_noop_entrypoint("glGetActiveSubroutineName");
}

static void GLAPIENTRY noopGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name)
{
   (void) program; (void) shadertype; (void) index; (void) bufsize; (void) length; (void) name;
   _mesa_noop_entrypoint("glGetActiveSubroutineUniformName");
}

static void GLAPIENTRY noopGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values)
{
   (void) program; (void) shadertype; (void) index; (void) pname; (void) values;
   _mesa_noop_entrypoint("glGetActiveSubroutineUniformiv");
}

static void GLAPIENTRY noopGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values)
{
   (void) program; (void) shadertype; (void) pname; (void) values;
   _mesa_noop_entrypoint("glGetProgramStageiv");
}

static GLuint GLAPIENTRY noopGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar *name)
{
   (void) program; (void) shadertype; (void) name;
   _mesa_noop_entrypoint("glGetSubroutineIndex");
   return (GLuint) 0;
}

static GLint GLAPIENTRY noopGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar *name)
{
   (void) program; (void) shadertype; (void) name;
   _mesa_noop_entrypoint("glGetSubroutineUniformLocation");
   return (GLint) 0;
}

static void GLAPIENTRY noopGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params)
{
   (void) shadertype; (void) location; (void) params;
   _mesa_noop_entrypoint("glGetUniformSubroutineuiv");
}

static void GLAPIENTRY noopUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint *indices)
{
   (void) shadertype; (void) count; (void) indices;
   _mesa_noop_entrypoint("glUniformSubroutinesuiv");
}

static void GLAPIENTRY noopPatchParameterfv(GLenum pname, const GLfloat *values)
{
   (void) pname; (void) values;
   _mesa_noop_entrypoint("glPatchParameterfv");
}

static void GLAPIENTRY noopPatchParameteri(GLenum pname, GLint value)
{
   (void) pname; (void) value;
   _mesa_noop_entrypoint("glPatchParameteri");
}

static void GLAPIENTRY noopBindTransformFeedback(GLenum target, GLuint id)
{
   (void) target; (void) id;
   _mesa_noop_entrypoint("glBindTransformFeedback");
}

static void GLAPIENTRY noopDeleteTransformFeedbacks(GLsizei n, const GLuint *ids)
{
   (void) n; (void) ids;
   _mesa_noop_entrypoint("glDeleteTransformFeedbacks");
}

static void GLAPIENTRY noopDrawTransformFeedback(GLenum mode, GLuint id)
{
   (void) mode; (void) id;
   _mesa_noop_entrypoint("glDrawTransformFeedback");
}

static void GLAPIENTRY noopGenTransformFeedbacks(GLsizei n, GLuint *ids)
{
   (void) n; (void) ids;
   _mesa_noop_entrypoint("glGenTransformFeedbacks");
}

static GLboolean GLAPIENTRY noopIsTransformFeedback(GLuint id)
{
   (void) id;
   _mesa_noop_entrypoint("glIsTransformFeedback");
   return (GLboolean) 0;
}

static void GLAPIENTRY noopPauseTransformFeedback(void)
{
      _mesa_noop_entrypoint("glPauseTransformFeedback");
}

static void GLAPIENTRY noopResumeTransformFeedback(void)
{
      _mesa_noop_entrypoint("glResumeTransformFeedback");
}

static void GLAPIENTRY noopBeginQueryIndexed(GLenum target, GLuint index, GLuint id)
{
   (void) target; (void) index; (void) id;
   _mesa_noop_entrypoint("glBeginQueryIndexed");
}

static void GLAPIENTRY noopDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream)
{
   (void) mode; (void) id; (void) stream;
   _mesa_noop_entrypoint("glDrawTransformFeedbackStream");
}

static void GLAPIENTRY noopEndQueryIndexed(GLenum target, GLuint index)
{
   (void) target; (void) index;
   _mesa_noop_entrypoint("glEndQueryIndexed");
}

static void GLAPIENTRY noopGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params)
{
   (void) target; (void) index; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetQueryIndexediv");
}

static void GLAPIENTRY noopClearDepthf(GLclampf depth)
{
   (void) depth;
   _mesa_noop_entrypoint("glClearDepthf");
}

static void GLAPIENTRY noopDepthRangef(GLclampf zNear, GLclampf zFar)
{
   (void) zNear; (void) zFar;
   _mesa_noop_entrypoint("glDepthRangef");
}

static void GLAPIENTRY noopGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)
{
   (void) shadertype; (void) precisiontype; (void) range; (void) precision;
   _mesa_noop_entrypoint("glGetShaderPrecisionFormat");
}

static void GLAPIENTRY noopReleaseShaderCompiler(void)
{
      _mesa_noop_entrypoint("glReleaseShaderCompiler");
}

static void GLAPIENTRY noopShaderBinary(GLsizei n, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length)
{
   (void) n; (void) shaders; (void) binaryformat; (void) binary; (void) length;
   _mesa_noop_entrypoint("glShaderBinary");
}

static void GLAPIENTRY noopGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
{
   (void) program; (void) bufSize; (void) length; (void) binaryFormat; (void) binary;
   _mesa_noop_entrypoint("glGetProgramBinary");
}

static void GLAPIENTRY noopProgramBinary(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length)
{
   (void) program; (void) binaryFormat; (void) binary; (void) length;
   _mesa_noop_entrypoint("glProgramBinary");
}

static void GLAPIENTRY noopProgramParameteri(GLuint program, GLenum pname, GLint value)
{
   (void) program; (void) pname; (void) value;
   _mesa_noop_entrypoint("glProgramParameteri");
}

static void GLAPIENTRY noopGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params)
{
   (void) index; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetVertexAttribLdv");
}

static void GLAPIENTRY noopVertexAttribL1d(GLuint index, GLdouble x)
{
   (void) index; (void) x;
   _mesa_noop_entrypoint("glVertexAttribL1d");
}

static void GLAPIENTRY noopVertexAttribL1dv(GLuint index, const GLdouble *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttribL1dv");
}

static void GLAPIENTRY noopVertexAttribL2d(GLuint index, GLdouble x, GLdouble y)
{
   (void) index; (void) x; (void) y;
   _mesa_noop_entrypoint("glVertexAttribL2d");
}

static void GLAPIENTRY noopVertexAttribL2dv(GLuint index, const GLdouble *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttribL2dv");
}

static void GLAPIENTRY noopVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
   (void) index; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glVertexAttribL3d");
}

static void GLAPIENTRY noopVertexAttribL3dv(GLuint index, const GLdouble *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttribL3dv");
}

static void GLAPIENTRY noopVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   (void) index; (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glVertexAttribL4d");
}

static void GLAPIENTRY noopVertexAttribL4dv(GLuint index, const GLdouble *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttribL4dv");
}

static void GLAPIENTRY noopVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   (void) index; (void) size; (void) type; (void) stride; (void) pointer;
   _mesa_noop_entrypoint("glVertexAttribLPointer");
}

static void GLAPIENTRY noopDepthRangeArrayv(GLuint first, GLsizei count, const GLclampd *v)
{
   (void) first; (void) count; (void) v;
   _mesa_noop_entrypoint("glDepthRangeArrayv");
}

static void GLAPIENTRY noopDepthRangeIndexed(GLuint index, GLclampd n, GLclampd f)
{
   (void) index; (void) n; (void) f;
   _mesa_noop_entrypoint("glDepthRangeIndexed");
}

static void GLAPIENTRY noopGetDoublei_v(GLenum target, GLuint index, GLdouble *data)
{
   (void) target; (void) index; (void) data;
   _mesa_noop_entrypoint("glGetDoublei_v");
}

static void GLAPIENTRY noopGetFloati_v(GLenum target, GLuint index, GLfloat *data)
{
   (void) target; (void) index; (void) data;
   _mesa_noop_entrypoint("glGetFloati_v");
}

static void GLAPIENTRY noopScissorArrayv(GLuint first, GLsizei count, const int *v)
{
   (void) first; (void) count; (void) v;
   _mesa_noop_entrypoint("glScissorArrayv");
}

static void GLAPIENTRY noopScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)
{
   (void) index; (void) left; (void) bottom; (void) width; (void) height;
   _mesa_noop_entrypoint("glScissorIndexed");
}

static void GLAPIENTRY noopScissorIndexedv(GLuint index, const GLint *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glScissorIndexedv");
}

static void GLAPIENTRY noopViewportArrayv(GLuint first, GLsizei count, const GLfloat *v)
{
   (void) first; (void) count; (void) v;
   _mesa_noop_entrypoint("glViewportArrayv");
}

static void GLAPIENTRY noopViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
{
   (void) index; (void) x; (void) y; (void) w; (void) h;
   _mesa_noop_entrypoint("glViewportIndexedf");
}

static void GLAPIENTRY noopViewportIndexedfv(GLuint index, const GLfloat *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glViewportIndexedfv");
}

static GLenum GLAPIENTRY noopGetGraphicsResetStatusARB(void)
{
      _mesa_noop_entrypoint("glGetGraphicsResetStatusARB");
   return (GLenum) 0;
}

static void GLAPIENTRY noopGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, GLvoid *img)
{
   (void) target; (void) lod; (void) bufSize; (void) img;
   _mesa_noop_entrypoint("glGetnCompressedTexImageARB");
}

static void GLAPIENTRY noopGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)
{
   (void) target; (void) query; (void) bufSize; (void) v;
   _mesa_noop_entrypoint("glGetnMapdvARB");
}

static void GLAPIENTRY noopGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)
{
   (void) target; (void) query; (void) bufSize; (void) v;
   _mesa_noop_entrypoint("glGetnMapfvARB");
}

static void GLAPIENTRY noopGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint *v)
{
   (void) target; (void) query; (void) bufSize; (void) v;
   _mesa_noop_entrypoint("glGetnMapivARB");
}

static void GLAPIENTRY noopGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat *values)
{
   (void) map; (void) bufSize; (void) values;
   _mesa_noop_entrypoint("glGetnPixelMapfvARB");
}

static void GLAPIENTRY noopGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint *values)
{
   (void) map; (void) bufSize; (void) values;
   _mesa_noop_entrypoint("glGetnPixelMapuivARB");
}

static void GLAPIENTRY noopGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort *values)
{
   (void) map; (void) bufSize; (void) values;
   _mesa_noop_entrypoint("glGetnPixelMapusvARB");
}

static void GLAPIENTRY noopGetnPolygonStippleARB(GLsizei bufSize, GLubyte *pattern)
{
   (void) bufSize; (void) pattern;
   _mesa_noop_entrypoint("glGetnPolygonStippleARB");
}

static void GLAPIENTRY noopGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img)
{
   (void) target; (void) level; (void) format; (void) type; (void) bufSize; (void) img;
   _mesa_noop_entrypoint("glGetnTexImageARB");
}

static void GLAPIENTRY noopGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble *params)
{
   (void) program; (void) location; (void) bufSize; (void) params;
   _mesa_noop_entrypoint("glGetnUniformdvARB");
}

static void GLAPIENTRY noopGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
{
   (void) program; (void) location; (void) bufSize; (void) params;
   _mesa_noop_entrypoint("glGetnUniformfvARB");
}

static void GLAPIENTRY noopGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint *params)
{
   (void) program; (void) location; (void) bufSize; (void) params;
   _mesa_noop_entrypoint("glGetnUniformivARB");
}

static void GLAPIENTRY noopGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint *params)
{
   (void) program; (void) location; (void) bufSize; (void) params;
   _mesa_noop_entrypoint("glGetnUniformuivARB");
}

static void GLAPIENTRY noopReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)
{
   (void) x; (void) y; (void) width; (void) height; (void) format; (void) type; (void) bufSize; (void) data;
   _mesa_noop_entrypoint("glReadnPixelsARB");
}

static void GLAPIENTRY noopDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instance_count, GLuint baseinstance)
{
   (void) mode; (void) first; (void) count; (void) instance_count; (void) baseinstance;
   _mesa_noop_entrypoint("glDrawArraysInstancedBaseInstance");
}

static void GLAPIENTRY noopDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLuint baseinstance)
{
   (void) mode; (void) count; (void) type; (void) indices; (void) primcount; (void) baseinstance;
   _mesa_noop_entrypoint("glDrawElementsInstancedBaseInstance");
}

static void GLAPIENTRY noopDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instance_count, GLint basevertex, GLuint baseinstance)
{
   (void) mode; (void) count; (void) type; (void) indices; (void) instance_count; (void) basevertex; (void) baseinstance;
   _mesa_noop_entrypoint("glDrawElementsInstancedBaseVertexBaseInstance");
}

static void GLAPIENTRY noopDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei primcount)
{
   (void) mode; (void) id; (void) primcount;
   _mesa_noop_entrypoint("glDrawTransformFeedbackInstanced");
}

static void GLAPIENTRY noopDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei primcount)
{
   (void) mode; (void) id; (void) stream; (void) primcount;
   _mesa_noop_entrypoint("glDrawTransformFeedbackStreamInstanced");
}

static void GLAPIENTRY noopGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)
{
   (void) target; (void) internalformat; (void) pname; (void) bufSize; (void) params;
   _mesa_noop_entrypoint("glGetInternalformativ");
}

static void GLAPIENTRY noopGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params)
{
   (void) program; (void) bufferIndex; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetActiveAtomicCounterBufferiv");
}

static void GLAPIENTRY noopBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
{
   (void) unit; (void) texture; (void) level; (void) layered; (void) layer; (void) access; (void) format;
   _mesa_noop_entrypoint("glBindImageTexture");
}

static void GLAPIENTRY noopMemoryBarrier(GLbitfield barriers)
{
   (void) barriers;
   _mesa_noop_entrypoint("glMemoryBarrier");
}

static void GLAPIENTRY noopTexStorage1D(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width)
{
   (void) target; (void) levels; (void) internalFormat; (void) width;
   _mesa_noop_entrypoint("glTexStorage1D");
}

static void GLAPIENTRY noopTexStorage2D(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height)
{
   (void) target; (void) levels; (void) internalFormat; (void) width; (void) height;
   _mesa_noop_entrypoint("glTexStorage2D");
}

static void GLAPIENTRY noopTexStorage3D(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth)
{
   (void) target; (void) levels; (void) internalFormat; (void) width; (void) height; (void) depth;
   _mesa_noop_entrypoint("glTexStorage3D");
}

static void GLAPIENTRY noopTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width)
{
   (void) texture; (void) target; (void) levels; (void) internalFormat; (void) width;
   _mesa_noop_entrypoint("glTextureStorage1DEXT");
}

static void GLAPIENTRY noopTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height)
{
   (void) texture; (void) target; (void) levels; (void) internalFormat; (void) width; (void) height;
   _mesa_noop_entrypoint("glTextureStorage2DEXT");
}

static void GLAPIENTRY noopTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth)
{
   (void) texture; (void) target; (void) levels; (void) internalFormat; (void) width; (void) height; (void) depth;
   _mesa_noop_entrypoint("glTextureStorage3DEXT");
}

static void GLAPIENTRY noopClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)
{
   (void) target; (void) internalformat; (void) format; (void) type; (void) data;
   _mesa_noop_entrypoint("glClearBufferData");
}

static void GLAPIENTRY noopClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)
{
   (void) target; (void) internalformat; (void) offset; (void) size; (void) format; (void) type; (void) data;
   _mesa_noop_entrypoint("glClearBufferSubData");
}

static void GLAPIENTRY noopDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
{
   (void) num_groups_x; (void) num_groups_y; (void) num_groups_z;
   _mesa_noop_entrypoint("glDispatchCompute");
}

static void GLAPIENTRY noopDispatchComputeIndirect(GLintptr indirect)
{
   (void) indirect;
   _mesa_noop_entrypoint("glDispatchComputeIndirect");
}

static void GLAPIENTRY noopCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
{
   (void) srcName; (void) srcTarget; (void) srcLevel; (void) srcX; (void) srcY; (void) srcZ; (void) dstName; (void) dstTarget; (void) dstLevel; (void) dstX; (void) dstY; (void) dstZ; (void) srcWidth; (void) srcHeight; (void) srcDepth;
   _mesa_noop_entrypoint("glCopyImageSubData");
}

static void GLAPIENTRY noopTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
{
   (void) texture; (void) target; (void) origtexture; (void) internalformat; (void) minlevel; (void) numlevels; (void) minlayer; (void) numlayers;
   _mesa_noop_entrypoint("glTextureView");
}

static void GLAPIENTRY noopBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
   (void) bindingindex; (void) buffer; (void) offset; (void) stride;
   _mesa_noop_entrypoint("glBindVertexBuffer");
}

static void GLAPIENTRY noopVertexAttribBinding(GLuint attribindex, GLuint bindingindex)
{
   (void) attribindex; (void) bindingindex;
   _mesa_noop_entrypoint("glVertexAttribBinding");
}

static void GLAPIENTRY noopVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
   (void) attribindex; (void) size; (void) type; (void) normalized; (void) relativeoffset;
   _mesa_noop_entrypoint("glVertexAttribFormat");
}

static void GLAPIENTRY noopVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
   (void) attribindex; (void) size; (void) type; (void) relativeoffset;
   _mesa_noop_entrypoint("glVertexAttribIFormat");
}

static void GLAPIENTRY noopVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
   (void) attribindex; (void) size; (void) type; (void) relativeoffset;
   _mesa_noop_entrypoint("glVertexAttribLFormat");
}

static void GLAPIENTRY noopVertexBindingDivisor(GLuint bindingindex, GLuint divisor)
{
   (void) bindingindex; (void) divisor;
   _mesa_noop_entrypoint("glVertexBindingDivisor");
}

static void GLAPIENTRY noopFramebufferParameteri(GLenum target, GLenum pname, GLint param)
{
   (void) target; (void) pname; (void) param;
   _mesa_noop_entrypoint("glFramebufferParameteri");
}

static void GLAPIENTRY noopGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetFramebufferParameteriv");
}

static void GLAPIENTRY noopGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params)
{
   (void) target; (void) internalformat; (void) pname; (void) bufSize; (void) params;
   _mesa_noop_entrypoint("glGetInternalformati64v");
}

static void GLAPIENTRY noopMultiDrawArraysIndirect(GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
   (void) mode; (void) indirect; (void) primcount; (void) stride;
   _mesa_noop_entrypoint("glMultiDrawArraysIndirect");
}

static void GLAPIENTRY noopMultiDrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
   (void) mode; (void) type; (void) indirect; (void) primcount; (void) stride;
   _mesa_noop_entrypoint("glMultiDrawElementsIndirect");
}

static void GLAPIENTRY noopGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params)
{
   (void) program; (void) programInterface; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetProgramInterfaceiv");
}

static GLuint GLAPIENTRY noopGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name)
{
   (void) program; (void) programInterface; (void) name;
   _mesa_noop_entrypoint("glGetProgramResourceIndex");
   return (GLuint) 0;
}

static GLint GLAPIENTRY noopGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name)
{
   (void) program; (void) programInterface; (void) name;
   _mesa_noop_entrypoint("glGetProgramResourceLocation");
   return (GLint) 0;
}

static GLint GLAPIENTRY noopGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name)
{
   (void) program; (void) programInterface; (void) name;
   _mesa_noop_entrypoint("glGetProgramResourceLocationIndex");
   return (GLint) 0;
}

static void GLAPIENTRY noopGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
   (void) program; (void) programInterface; (void) index; (void) bufSize; (void) length; (void) name;
   _mesa_noop_entrypoint("glGetProgramResourceName");
}

static void GLAPIENTRY noopGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params)
{
   (void) program; (void) programInterface; (void) index; (void) propCount; (void) props; (void) bufSize; (void) length; (void) params;
   _mesa_noop_entrypoint("glGetProgramResourceiv");
}

static void GLAPIENTRY noopShaderStorageBlockBinding(GLuint program, GLuint shaderStorageBlockIndex, GLuint shaderStorageBlockBinding)
{
   (void) program; (void) shaderStorageBlockIndex; (void) shaderStorageBlockBinding;
   _mesa_noop_entrypoint("glShaderStorageBlockBinding");
}

static void GLAPIENTRY noopTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
   (void) target; (void) internalformat; (void) buffer; (void) offset; (void) size;
   _mesa_noop_entrypoint("glTexBufferRange");
}

static void GLAPIENTRY noopTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
   (void) target; (void) samples; (void) internalformat; (void) width; (void) height; (void) fixedsamplelocations;
   _mesa_noop_entrypoint("glTexStorage2DMultisample");
}

static void GLAPIENTRY noopTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
   (void) target; (void) samples; (void) internalformat; (void) width; (void) height; (void) depth; (void) fixedsamplelocations;
   _mesa_noop_entrypoint("glTexStorage3DMultisample");
}

static void GLAPIENTRY noopBufferStorage(GLenum target, GLsizeiptr size, const GLvoid *data, GLbitfield flags)
{
   (void) target; (void) size; (void) data; (void) flags;
   _mesa_noop_entrypoint("glBufferStorage");
}

static void GLAPIENTRY noopClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const GLvoid *data)
{
   (void) texture; (void) level; (void) format; (void) type; (void) data;
   _mesa_noop_entrypoint("glClearTexImage");
}

static void GLAPIENTRY noopClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *data)
{
   (void) texture; (void) level; (void) xoffset; (void) yoffset; (void) zoffset; (void) width; (void) height; (void) depth; (void) format; (void) type; (void) data;
   _mesa_noop_entrypoint("glClearTexSubImage");
}

static void GLAPIENTRY noopBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint *buffers)
{
   (void) target; (void) first; (void) count; (void) buffers;
   _mesa_noop_entrypoint("glBindBuffersBase");
}

static void GLAPIENTRY noopBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes)
{
   (void) target; (void) first; (void) count; (void) buffers; (void) offsets; (void) sizes;
   _mesa_noop_entrypoint("glBindBuffersRange");
}

static void GLAPIENTRY noopBindImageTextures(GLuint first, GLsizei count, const GLuint *textures)
{
   (void) first; (void) count; (void) textures;
   _mesa_noop_entrypoint("glBindImageTextures");
}

static void GLAPIENTRY noopBindSamplers(GLuint first, GLsizei count, const GLuint *samplers)
{
   (void) first; (void) count; (void) samplers;
   _mesa_noop_entrypoint("glBindSamplers");
}

static void GLAPIENTRY noopBindTextures(GLuint first, GLsizei count, const GLuint *textures)
{
   (void) first; (void) count; (void) textures;
   _mesa_noop_entrypoint("glBindTextures");
}

static void GLAPIENTRY noopBindVertexBuffers(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)
{
   (void) first; (void) count; (void) buffers; (void) offsets; (void) strides;
   _mesa_noop_entrypoint("glBindVertexBuffers");
}

static GLuint64 GLAPIENTRY noopGetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
{
   (void) texture; (void) level; (void) layered; (void) layer; (void) format;
   _mesa_noop_entrypoint("glGetImageHandleARB");
   return (GLuint64) 0;
}

static GLuint64 GLAPIENTRY noopGetTextureHandleARB(GLuint texture)
{
   (void) texture;
   _mesa_noop_entrypoint("glGetTextureHandleARB");
   return (GLuint64) 0;
}

static GLuint64 GLAPIENTRY noopGetTextureSamplerHandleARB(GLuint texture, GLuint sampler)
{
   (void) texture; (void) sampler;
   _mesa_noop_entrypoint("glGetTextureSamplerHandleARB");
   return (GLuint64) 0;
}

static void GLAPIENTRY noopGetVertexAttribLui64vARB(GLuint index, GLenum pname, GLuint64EXT *params)
{
   (void) index; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetVertexAttribLui64vARB");
}

static GLboolean GLAPIENTRY noopIsImageHandleResidentARB(GLuint64 handle)
{
   (void) handle;
   _mesa_noop_entrypoint("glIsImageHandleResidentARB");
   return (GLboolean) 0;
}

static GLboolean GLAPIENTRY noopIsTextureHandleResidentARB(GLuint64 handle)
{
   (void) handle;
   _mesa_noop_entrypoint("glIsTextureHandleResidentARB");
   return (GLboolean) 0;
}

static void GLAPIENTRY noopMakeImageHandleNonResidentARB(GLuint64 handle)
{
   (void) handle;
   _mesa_noop_entrypoint("glMakeImageHandleNonResidentARB");
}

static void GLAPIENTRY noopMakeImageHandleResidentARB(GLuint64 handle, GLenum access)
{
   (void) handle; (void) access;
   _mesa_noop_entrypoint("glMakeImageHandleResidentARB");
}

static void GLAPIENTRY noopMakeTextureHandleNonResidentARB(GLuint64 handle)
{
   (void) handle;
   _mesa_noop_entrypoint("glMakeTextureHandleNonResidentARB");
}

static void GLAPIENTRY noopMakeTextureHandleResidentARB(GLuint64 handle)
{
   (void) handle;
   _mesa_noop_entrypoint("glMakeTextureHandleResidentARB");
}

static void GLAPIENTRY noopProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value)
{
   (void) program; (void) location; (void) value;
   _mesa_noop_entrypoint("glProgramUniformHandleui64ARB");
}

static void GLAPIENTRY noopProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value)
{
   (void) program; (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glProgramUniformHandleui64vARB");
}

static void GLAPIENTRY noopUniformHandleui64ARB(GLint location, GLuint64 value)
{
   (void) location; (void) value;
   _mesa_noop_entrypoint("glUniformHandleui64ARB");
}

static void GLAPIENTRY noopUniformHandleui64vARB(GLint location, GLsizei count, const GLuint64 *value)
{
   (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glUniformHandleui64vARB");
}

static void GLAPIENTRY noopVertexAttribL1ui64ARB(GLuint index, GLuint64EXT x)
{
   (void) index; (void) x;
   _mesa_noop_entrypoint("glVertexAttribL1ui64ARB");
}

static void GLAPIENTRY noopVertexAttribL1ui64vARB(GLuint index, const GLuint64EXT *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttribL1ui64vARB");
}

static void GLAPIENTRY noopDispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)
{
   (void) num_groups_x; (void) num_groups_y; (void) num_groups_z; (void) group_size_x; (void) group_size_y; (void) group_size_z;
   _mesa_noop_entrypoint("glDispatchComputeGroupSizeARB");
}

static void GLAPIENTRY noopMultiDrawArraysIndirectCountARB(GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
{
   (void) mode; (void) indirect; (void) drawcount; (void) maxdrawcount; (void) stride;
   _mesa_noop_entrypoint("glMultiDrawArraysIndirectCountARB");
}

static void GLAPIENTRY noopMultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
{
   (void) mode; (void) type; (void) indirect; (void) drawcount; (void) maxdrawcount; (void) stride;
   _mesa_noop_entrypoint("glMultiDrawElementsIndirectCountARB");
}

static void GLAPIENTRY noopClipControl(GLenum origin, GLenum depth)
{
   (void) origin; (void) depth;
   _mesa_noop_entrypoint("glClipControl");
}

static void GLAPIENTRY noopBindTextureUnit(GLuint unit, GLuint texture)
{
   (void) unit; (void) texture;
   _mesa_noop_entrypoint("glBindTextureUnit");
}

static void GLAPIENTRY noopBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
   (void) readFramebuffer; (void) drawFramebuffer; (void) srcX0; (void) srcY0; (void) srcX1; (void) srcY1; (void) dstX0; (void) dstY0; (void) dstX1; (void) dstY1; (void) mask; (void) filter;
   _mesa_noop_entrypoint("glBlitNamedFramebuffer");
}

static GLenum GLAPIENTRY noopCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target)
{
   (void) framebuffer; (void) target;
   _mesa_noop_entrypoint("glCheckNamedFramebufferStatus");
   return (GLenum) 0;
}

static void GLAPIENTRY noopClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)
{
   (void) buffer; (void) internalformat; (void) format; (void) type; (void) data;
   _mesa_noop_entrypoint("glClearNamedBufferData");
}

static void GLAPIENTRY noopClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)
{
   (void) buffer; (void) internalformat; (void) offset; (void) size; (void) format; (void) type; (void) data;
   _mesa_noop_entrypoint("glClearNamedBufferSubData");
}

static void GLAPIENTRY noopClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
{
   (void) framebuffer; (void) buffer; (void) drawbuffer; (void) depth; (void) stencil;
   _mesa_noop_entrypoint("glClearNamedFramebufferfi");
}

static void GLAPIENTRY noopClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value)
{
   (void) framebuffer; (void) buffer; (void) drawbuffer; (void) value;
   _mesa_noop_entrypoint("glClearNamedFramebufferfv");
}

static void GLAPIENTRY noopClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value)
{
   (void) framebuffer; (void) buffer; (void) drawbuffer; (void) value;
   _mesa_noop_entrypoint("glClearNamedFramebufferiv");
}

static void GLAPIENTRY noopClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value)
{
   (void) framebuffer; (void) buffer; (void) drawbuffer; (void) value;
   _mesa_noop_entrypoint("glClearNamedFramebufferuiv");
}

static void GLAPIENTRY noopCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   (void) texture; (void) level; (void) xoffset; (void) width; (void) format; (void) imageSize; (void) data;
   _mesa_noop_entrypoint("glCompressedTextureSubImage1D");
}

static void GLAPIENTRY noopCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   (void) texture; (void) level; (void) xoffset; (void) yoffset; (void) width; (void) height; (void) format; (void) imageSize; (void) data;
   _mesa_noop_entrypoint("glCompressedTextureSubImage2D");
}

static void GLAPIENTRY noopCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   (void) texture; (void) level; (void) xoffset; (void) yoffset; (void) zoffset; (void) width; (void) height; (void) depth; (void) format; (void) imageSize; (void) data;
   _mesa_noop_entrypoint("glCompressedTextureSubImage3D");
}

static void GLAPIENTRY noopCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
   (void) readBuffer; (void) writeBuffer; (void) readOffset; (void) writeOffset; (void) size;
   _mesa_noop_entrypoint("glCopyNamedBufferSubData");
}

static void GLAPIENTRY noopCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
   (void) texture; (void) level; (void) xoffset; (void) x; (void) y; (void) width;
   _mesa_noop_entrypoint("glCopyTextureSubImage1D");
}

static void GLAPIENTRY noopCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   (void) texture; (void) level; (void) xoffset; (void) yoffset; (void) x; (void) y; (void) width; (void) height;
   _mesa_noop_entrypoint("glCopyTextureSubImage2D");
}

static void GLAPIENTRY noopCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   (void) texture; (void) level; (void) xoffset; (void) yoffset; (void) zoffset; (void) x; (void) y; (void) width; (void) height;
   _mesa_noop_entrypoint("glCopyTextureSubImage3D");
}

static void GLAPIENTRY noopCreateBuffers(GLsizei n, GLuint *buffers)
{
   (void) n; (void) buffers;
   _mesa_noop_entrypoint("glCreateBuffers");
}

static void GLAPIENTRY noopCreateFramebuffers(GLsizei n, GLuint *framebuffers)
{
   (void) n; (void) framebuffers;
   _mesa_noop_entrypoint("glCreateFramebuffers");
}

static void GLAPIENTRY noopCreateProgramPipelines(GLsizei n, GLuint *pipelines)
{
   (void) n; (void) pipelines;
   _mesa_noop_entrypoint("glCreateProgramPipelines");
}

static void GLAPIENTRY noopCreateQueries(GLenum target, GLsizei n, GLuint *ids)
{
   (void) target; (void) n; (void) ids;
   _mesa_noop_entrypoint("glCreateQueries");
}

static void GLAPIENTRY noopCreateRenderbuffers(GLsizei n, GLuint *renderbuffers)
{
   (void) n; (void) renderbuffers;
   _mesa_noop_entrypoint("glCreateRenderbuffers");
}

static void GLAPIENTRY noopCreateSamplers(GLsizei n, GLuint *samplers)
{
   (void) n; (void) samplers;
   _mesa_noop_entrypoint("glCreateSamplers");
}

static void GLAPIENTRY noopCreateTextures(GLenum target, GLsizei n, GLuint *textures)
{
   (void) target; (void) n; (void) textures;
   _mesa_noop_entrypoint("glCreateTextures");
}

static void GLAPIENTRY noopCreateTransformFeedbacks(GLsizei n, GLuint *ids)
{
   (void) n; (void) ids;
   _mesa_noop_entrypoint("glCreateTransformFeedbacks");
}

static void GLAPIENTRY noopCreateVertexArrays(GLsizei n, GLuint *arrays)
{
   (void) n; (void) arrays;
   _mesa_noop_entrypoint("glCreateVertexArrays");
}

static void GLAPIENTRY noopDisableVertexArrayAttrib(GLuint vaobj, GLuint index)
{
   (void) vaobj; (void) index;
   _mesa_noop_entrypoint("glDisableVertexArrayAttrib");
}

static void GLAPIENTRY noopEnableVertexArrayAttrib(GLuint vaobj, GLuint index)
{
   (void) vaobj; (void) index;
   _mesa_noop_entrypoint("glEnableVertexArrayAttrib");
}

static void GLAPIENTRY noopFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length)
{
   (void) buffer; (void) offset; (void) length;
   _mesa_noop_entrypoint("glFlushMappedNamedBufferRange");
}

static void GLAPIENTRY noopGenerateTextureMipmap(GLuint texture)
{
   (void) texture;
   _mesa_noop_entrypoint("glGenerateTextureMipmap");
}

static void GLAPIENTRY noopGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, GLvoid *pixels)
{
   (void) texture; (void) level; (void) bufSize; (void) pixels;
   _mesa_noop_entrypoint("glGetCompressedTextureImage");
}

static void GLAPIENTRY noopGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 *params)
{
   (void) buffer; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetNamedBufferParameteri64v");
}

static void GLAPIENTRY noopGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint *params)
{
   (void) buffer; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetNamedBufferParameteriv");
}

static void GLAPIENTRY noopGetNamedBufferPointerv(GLuint buffer, GLenum pname, GLvoid **params)
{
   (void) buffer; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetNamedBufferPointerv");
}

static void GLAPIENTRY noopGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
   (void) buffer; (void) offset; (void) size; (void) data;
   _mesa_noop_entrypoint("glGetNamedBufferSubData");
}

static void GLAPIENTRY noopGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)
{
   (void) framebuffer; (void) attachment; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetNamedFramebufferAttachmentParameteriv");
}

static void GLAPIENTRY noopGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint *param)
{
   (void) framebuffer; (void) pname; (void) param;
   _mesa_noop_entrypoint("glGetNamedFramebufferParameteriv");
}

static void GLAPIENTRY noopGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint *params)
{
   (void) renderbuffer; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetNamedRenderbufferParameteriv");
}

static void GLAPIENTRY noopGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
   (void) id; (void) buffer; (void) pname; (void) offset;
   _mesa_noop_entrypoint("glGetQueryBufferObjecti64v");
}

static void GLAPIENTRY noopGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
   (void) id; (void) buffer; (void) pname; (void) offset;
   _mesa_noop_entrypoint("glGetQueryBufferObjectiv");
}

static void GLAPIENTRY noopGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
   (void) id; (void) buffer; (void) pname; (void) offset;
   _mesa_noop_entrypoint("glGetQueryBufferObjectui64v");
}

static void GLAPIENTRY noopGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
   (void) id; (void) buffer; (void) pname; (void) offset;
   _mesa_noop_entrypoint("glGetQueryBufferObjectuiv");
}

static void GLAPIENTRY noopGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *pixels)
{
   (void) texture; (void) level; (void) format; (void) type; (void) bufSize; (void) pixels;
   _mesa_noop_entrypoint("glGetTextureImage");
}

static void GLAPIENTRY noopGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat *params)
{
   (void) texture; (void) level; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetTextureLevelParameterfv");
}

static void GLAPIENTRY noopGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint *params)
{
   (void) texture; (void) level; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetTextureLevelParameteriv");
}

static void GLAPIENTRY noopGetTextureParameterIiv(GLuint texture, GLenum pname, GLint *params)
{
   (void) texture; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetTextureParameterIiv");
}

static void GLAPIENTRY noopGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint *params)
{
   (void) texture; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetTextureParameterIuiv");
}

static void GLAPIENTRY noopGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat *params)
{
   (void) texture; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetTextureParameterfv");
}

static void GLAPIENTRY noopGetTextureParameteriv(GLuint texture, GLenum pname, GLint *params)
{
   (void) texture; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetTextureParameteriv");
}

static void GLAPIENTRY noopGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 *param)
{
   (void) xfb; (void) pname; (void) index; (void) param;
   _mesa_noop_entrypoint("glGetTransformFeedbacki64_v");
}

static void GLAPIENTRY noopGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint *param)
{
   (void) xfb; (void) pname; (void) index; (void) param;
   _mesa_noop_entrypoint("glGetTransformFeedbacki_v");
}

static void GLAPIENTRY noopGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint *param)
{
   (void) xfb; (void) pname; (void) param;
   _mesa_noop_entrypoint("glGetTransformFeedbackiv");
}

static void GLAPIENTRY noopGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param)
{
   (void) vaobj; (void) index; (void) pname; (void) param;
   _mesa_noop_entrypoint("glGetVertexArrayIndexed64iv");
}

static void GLAPIENTRY noopGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint *param)
{
   (void) vaobj; (void) index; (void) pname; (void) param;
   _mesa_noop_entrypoint("glGetVertexArrayIndexediv");
}

static void GLAPIENTRY noopGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint *param)
{
   (void) vaobj; (void) pname; (void) param;
   _mesa_noop_entrypoint("glGetVertexArrayiv");
}

static void GLAPIENTRY noopInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments)
{
   (void) framebuffer; (void) numAttachments; (void) attachments;
   _mesa_noop_entrypoint("glInvalidateNamedFramebufferData");
}

static void GLAPIENTRY noopInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
   (void) framebuffer; (void) numAttachments; (void) attachments; (void) x; (void) y; (void) width; (void) height;
   _mesa_noop_entrypoint("glInvalidateNamedFramebufferSubData");
}

static GLvoid * GLAPIENTRY noopMapNamedBuffer(GLuint buffer, GLenum access)
{
   (void) buffer; (void) access;
   _mesa_noop_entrypoint("glMapNamedBuffer");
   return (GLvoid *) 0;
}

static GLvoid * GLAPIENTRY noopMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
   (void) buffer; (void) offset; (void) length; (void) access;
   _mesa_noop_entrypoint("glMapNamedBufferRange");
   return (GLvoid *) 0;
}

static void GLAPIENTRY noopNamedBufferData(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
   (void) buffer; (void) size; (void) data; (void) usage;
   _mesa_noop_entrypoint("glNamedBufferData");
}

static void GLAPIENTRY noopNamedBufferStorage(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLbitfield flags)
{
   (void) buffer; (void) size; (void) data; (void) flags;
   _mesa_noop_entrypoint("glNamedBufferStorage");
}

static void GLAPIENTRY noopNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
   (void) buffer; (void) offset; (void) size; (void) data;
   _mesa_noop_entrypoint("glNamedBufferSubData");
}

static void GLAPIENTRY noopNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf)
{
   (void) framebuffer; (void) buf;
   _mesa_noop_entrypoint("glNamedFramebufferDrawBuffer");
}

static void GLAPIENTRY noopNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum *bufs)
{
   (void) framebuffer; (void) n; (void) bufs;
   _mesa_noop_entrypoint("glNamedFramebufferDrawBuffers");
}

static void GLAPIENTRY noopNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param)
{
   (void) framebuffer; (void) pname; (void) param;
   _mesa_noop_entrypoint("glNamedFramebufferParameteri");
}

static void GLAPIENTRY noopNamedFramebufferReadBuffer(GLuint framebuffer, GLenum buf)
{
   (void) framebuffer; (void) buf;
   _mesa_noop_entrypoint("glNamedFramebufferReadBuffer");
}

static void GLAPIENTRY noopNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
   (void) framebuffer; (void) attachment; (void) renderbuffertarget; (void) renderbuffer;
   _mesa_noop_entrypoint("glNamedFramebufferRenderbuffer");
}

static void GLAPIENTRY noopNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
{
   (void) framebuffer; (void) attachment; (void) texture; (void) level;
   _mesa_noop_entrypoint("glNamedFramebufferTexture");
}

static void GLAPIENTRY noopNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
   (void) framebuffer; (void) attachment; (void) texture; (void) level; (void) layer;
   _mesa_noop_entrypoint("glNamedFramebufferTextureLayer");
}

static void GLAPIENTRY noopNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
{
   (void) renderbuffer; (void) internalformat; (void) width; (void) height;
   _mesa_noop_entrypoint("glNamedRenderbufferStorage");
}

static void GLAPIENTRY noopNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
   (void) renderbuffer; (void) samples; (void) internalformat; (void) width; (void) height;
   _mesa_noop_entrypoint("glNamedRenderbufferStorageMultisample");
}

static void GLAPIENTRY noopTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer)
{
   (void) texture; (void) internalformat; (void) buffer;
   _mesa_noop_entrypoint("glTextureBuffer");
}

static void GLAPIENTRY noopTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
   (void) texture; (void) internalformat; (void) buffer; (void) offset; (void) size;
   _mesa_noop_entrypoint("glTextureBufferRange");
}

static void GLAPIENTRY noopTextureParameterIiv(GLuint texture, GLenum pname, const GLint *params)
{
   (void) texture; (void) pname; (void) params;
   _mesa_noop_entrypoint("glTextureParameterIiv");
}

static void GLAPIENTRY noopTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint *params)
{
   (void) texture; (void) pname; (void) params;
   _mesa_noop_entrypoint("glTextureParameterIuiv");
}

static void GLAPIENTRY noopTextureParameterf(GLuint texture, GLenum pname, GLfloat param)
{
   (void) texture; (void) pname; (void) param;
   _mesa_noop_entrypoint("glTextureParameterf");
}

static void GLAPIENTRY noopTextureParameterfv(GLuint texture, GLenum pname, const GLfloat *param)
{
   (void) texture; (void) pname; (void) param;
   _mesa_noop_entrypoint("glTextureParameterfv");
}

static void GLAPIENTRY noopTextureParameteri(GLuint texture, GLenum pname, GLint param)
{
   (void) texture; (void) pname; (void) param;
   _mesa_noop_entrypoint("glTextureParameteri");
}

static void GLAPIENTRY noopTextureParameteriv(GLuint texture, GLenum pname, const GLint *param)
{
   (void) texture; (void) pname; (void) param;
   _mesa_noop_entrypoint("glTextureParameteriv");
}

static void GLAPIENTRY noopTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width)
{
   (void) texture; (void) levels; (void) internalformat; (void) width;
   _mesa_noop_entrypoint("glTextureStorage1D");
}

static void GLAPIENTRY noopTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
   (void) texture; (void) levels; (void) internalformat; (void) width; (void) height;
   _mesa_noop_entrypoint("glTextureStorage2D");
}

static void GLAPIENTRY noopTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
   (void) texture; (void) samples; (void) internalformat; (void) width; (void) height; (void) fixedsamplelocations;
   _mesa_noop_entrypoint("glTextureStorage2DMultisample");
}

static void GLAPIENTRY noopTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
   (void) texture; (void) levels; (void) internalformat; (void) width; (void) height; (void) depth;
   _mesa_noop_entrypoint("glTextureStorage3D");
}

static void GLAPIENTRY noopTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
   (void) texture; (void) samples; (void) internalformat; (void) width; (void) height; (void) depth; (void) fixedsamplelocations;
   _mesa_noop_entrypoint("glTextureStorage3DMultisample");
}

static void GLAPIENTRY noopTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
   (void) texture; (void) level; (void) xoffset; (void) width; (void) format; (void) type; (void) pixels;
   _mesa_noop_entrypoint("glTextureSubImage1D");
}

static void GLAPIENTRY noopTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
   (void) texture; (void) level; (void) xoffset; (void) yoffset; (void) width; (void) height; (void) format; (void) type; (void) pixels;
   _mesa_noop_entrypoint("glTextureSubImage2D");
}

static void GLAPIENTRY noopTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
   (void) texture; (void) level; (void) xoffset; (void) yoffset; (void) zoffset; (void) width; (void) height; (void) depth; (void) format; (void) type; (void) pixels;
   _mesa_noop_entrypoint("glTextureSubImage3D");
}

static void GLAPIENTRY noopTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer)
{
   (void) xfb; (void) index; (void) buffer;
   _mesa_noop_entrypoint("glTransformFeedbackBufferBase");
}

static void GLAPIENTRY noopTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
   (void) xfb; (void) index; (void) buffer; (void) offset; (void) size;
   _mesa_noop_entrypoint("glTransformFeedbackBufferRange");
}

static GLboolean GLAPIENTRY noopUnmapNamedBufferEXT(GLuint buffer)
{
   (void) buffer;
   _mesa_noop_entrypoint("glUnmapNamedBufferEXT");
   return (GLboolean) 0;
}

static void GLAPIENTRY noopVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex)
{
   (void) vaobj; (void) attribindex; (void) bindingindex;
   _mesa_noop_entrypoint("glVertexArrayAttribBinding");
}

static void GLAPIENTRY noopVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
   (void) vaobj; (void) attribindex; (void) size; (void) type; (void) normalized; (void) relativeoffset;
   _mesa_noop_entrypoint("glVertexArrayAttribFormat");
}

static void GLAPIENTRY noopVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
   (void) vaobj; (void) attribindex; (void) size; (void) type; (void) relativeoffset;
   _mesa_noop_entrypoint("glVertexArrayAttribIFormat");
}

static void GLAPIENTRY noopVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
   (void) vaobj; (void) attribindex; (void) size; (void) type; (void) relativeoffset;
   _mesa_noop_entrypoint("glVertexArrayAttribLFormat");
}

static void GLAPIENTRY noopVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor)
{
   (void) vaobj; (void) bindingindex; (void) divisor;
   _mesa_noop_entrypoint("glVertexArrayBindingDivisor");
}

static void GLAPIENTRY noopVertexArrayElementBuffer(GLuint vaobj, GLuint buffer)
{
   (void) vaobj; (void) buffer;
   _mesa_noop_entrypoint("glVertexArrayElementBuffer");
}

static void GLAPIENTRY noopVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
   (void) vaobj; (void) bindingindex; (void) buffer; (void) offset; (void) stride;
   _mesa_noop_entrypoint("glVertexArrayVertexBuffer");
}

static void GLAPIENTRY noopVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)
{
   (void) vaobj; (void) first; (void) count; (void) buffers; (void) offsets; (void) strides;
   _mesa_noop_entrypoint("glVertexArrayVertexBuffers");
}

static void GLAPIENTRY noopGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, GLvoid *pixels)
{
   (void) texture; (void) level; (void) xoffset; (void) yoffset; (void) zoffset; (void) width; (void) height; (void) depth; (void) bufSize; (void) pixels;
   _mesa_noop_entrypoint("glGetCompressedTextureSubImage");
}

static void GLAPIENTRY noopGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, GLvoid *pixels)
{
   (void) texture; (void) level; (void) xoffset; (void) yoffset; (void) zoffset; (void) width; (void) height; (void) depth; (void) format; (void) type; (void) bufSize; (void) pixels;
   _mesa_noop_entrypoint("glGetTextureSubImage");
}

static void GLAPIENTRY noopBufferPageCommitmentARB(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit)
{
   (void) target; (void) offset; (void) size; (void) commit;
   _mesa_noop_entrypoint("glBufferPageCommitmentARB");
}

static void GLAPIENTRY noopNamedBufferPageCommitmentARB(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)
{
   (void) buffer; (void) offset; (void) size; (void) commit;
   _mesa_noop_entrypoint("glNamedBufferPageCommitmentARB");
}

static void GLAPIENTRY noopGetUniformi64vARB(GLuint program, GLint location, GLint64 *params)
{
   (void) program; (void) location; (void) params;
   _mesa_noop_entrypoint("glGetUniformi64vARB");
}

static void GLAPIENTRY noopGetUniformui64vARB(GLuint program, GLint location, GLuint64 *params)
{
   (void) program; (void) location; (void) params;
   _mesa_noop_entrypoint("glGetUniformui64vARB");
}

static void GLAPIENTRY noopGetnUniformi64vARB(GLuint program, GLint location, GLsizei bufSize, GLint64 *params)
{
   (void) program; (void) location; (void) bufSize; (void) params;
   _mesa_noop_entrypoint("glGetnUniformi64vARB");
}

static void GLAPIENTRY noopGetnUniformui64vARB(GLuint program, GLint location, GLsizei bufSize, GLuint64 *params)
{
   (void) program; (void) location; (void) bufSize; (void) params;
   _mesa_noop_entrypoint("glGetnUniformui64vARB");
}

static void GLAPIENTRY noopProgramUniform1i64ARB(GLuint program, GLint location, GLint64 x)
{
   (void) program; (void) location; (void) x;
   _mesa_noop_entrypoint("glProgramUniform1i64ARB");
}

static void GLAPIENTRY noopProgramUniform1i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value)
{
   (void) program; (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glProgramUniform1i64vARB");
}

static void GLAPIENTRY noopProgramUniform1ui64ARB(GLuint program, GLint location, GLuint64 x)
{
   (void) program; (void) location; (void) x;
   _mesa_noop_entrypoint("glProgramUniform1ui64ARB");
}

static void GLAPIENTRY noopProgramUniform1ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value)
{
   (void) program; (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glProgramUniform1ui64vARB");
}

static void GLAPIENTRY noopProgramUniform2i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y)
{
   (void) program; (void) location; (void) x; (void) y;
   _mesa_noop_entrypoint("glProgramUniform2i64ARB");
}

static void GLAPIENTRY noopProgramUniform2i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value)
{
   (void) program; (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glProgramUniform2i64vARB");
}

static void GLAPIENTRY noopProgramUniform2ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y)
{
   (void) program; (void) location; (void) x; (void) y;
   _mesa_noop_entrypoint("glProgramUniform2ui64ARB");
}

static void GLAPIENTRY noopProgramUniform2ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value)
{
   (void) program; (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glProgramUniform2ui64vARB");
}

static void GLAPIENTRY noopProgramUniform3i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z)
{
   (void) program; (void) location; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glProgramUniform3i64ARB");
}

static void GLAPIENTRY noopProgramUniform3i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value)
{
   (void) program; (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glProgramUniform3i64vARB");
}

static void GLAPIENTRY noopProgramUniform3ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z)
{
   (void) program; (void) location; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glProgramUniform3ui64ARB");
}

static void GLAPIENTRY noopProgramUniform3ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value)
{
   (void) program; (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glProgramUniform3ui64vARB");
}

static void GLAPIENTRY noopProgramUniform4i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w)
{
   (void) program; (void) location; (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glProgramUniform4i64ARB");
}

static void GLAPIENTRY noopProgramUniform4i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value)
{
   (void) program; (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glProgramUniform4i64vARB");
}

static void GLAPIENTRY noopProgramUniform4ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)
{
   (void) program; (void) location; (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glProgramUniform4ui64ARB");
}

static void GLAPIENTRY noopProgramUniform4ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value)
{
   (void) program; (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glProgramUniform4ui64vARB");
}

static void GLAPIENTRY noopUniform1i64ARB(GLint location, GLint64 x)
{
   (void) location; (void) x;
   _mesa_noop_entrypoint("glUniform1i64ARB");
}

static void GLAPIENTRY noopUniform1i64vARB(GLint location, GLsizei count, const GLint64 *value)
{
   (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glUniform1i64vARB");
}

static void GLAPIENTRY noopUniform1ui64ARB(GLint location, GLuint64 x)
{
   (void) location; (void) x;
   _mesa_noop_entrypoint("glUniform1ui64ARB");
}

static void GLAPIENTRY noopUniform1ui64vARB(GLint location, GLsizei count, const GLuint64 *value)
{
   (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glUniform1ui64vARB");
}

static void GLAPIENTRY noopUniform2i64ARB(GLint location, GLint64 x, GLint64 y)
{
   (void) location; (void) x; (void) y;
   _mesa_noop_entrypoint("glUniform2i64ARB");
}

static void GLAPIENTRY noopUniform2i64vARB(GLint location, GLsizei count, const GLint64 *value)
{
   (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glUniform2i64vARB");
}

static void GLAPIENTRY noopUniform2ui64ARB(GLint location, GLuint64 x, GLuint64 y)
{
   (void) location; (void) x; (void) y;
   _mesa_noop_entrypoint("glUniform2ui64ARB");
}

static void GLAPIENTRY noopUniform2ui64vARB(GLint location, GLsizei count, const GLuint64 *value)
{
   (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glUniform2ui64vARB");
}

static void GLAPIENTRY noopUniform3i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z)
{
   (void) location; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glUniform3i64ARB");
}

static void GLAPIENTRY noopUniform3i64vARB(GLint location, GLsizei count, const GLint64 *value)
{
   (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glUniform3i64vARB");
}

static void GLAPIENTRY noopUniform3ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z)
{
   (void) location; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glUniform3ui64ARB");
}

static void GLAPIENTRY noopUniform3ui64vARB(GLint location, GLsizei count, const GLuint64 *value)
{
   (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glUniform3ui64vARB");
}

static void GLAPIENTRY noopUniform4i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w)
{
   (void) location; (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glUniform4i64ARB");
}

static void GLAPIENTRY noopUniform4i64vARB(GLint location, GLsizei count, const GLint64 *value)
{
   (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glUniform4i64vARB");
}

static void GLAPIENTRY noopUniform4ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)
{
   (void) location; (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glUniform4ui64ARB");
}

static void GLAPIENTRY noopUniform4ui64vARB(GLint location, GLsizei count, const GLuint64 *value)
{
   (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glUniform4ui64vARB");
}

static void GLAPIENTRY noopEvaluateDepthValuesARB(void)
{
      _mesa_noop_entrypoint("glEvaluateDepthValuesARB");
}

static void GLAPIENTRY noopFramebufferSampleLocationsfvARB(GLenum target, GLuint start, GLsizei count, const GLfloat *v)
{
   (void) target; (void) start; (void) count; (void) v;
   _mesa_noop_entrypoint("glFramebufferSampleLocationsfvARB");
}

static void GLAPIENTRY noopNamedFramebufferSampleLocationsfvARB(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v)
{
   (void) framebuffer; (void) start; (void) count; (void) v;
   _mesa_noop_entrypoint("glNamedFramebufferSampleLocationsfvARB");
}

static void GLAPIENTRY noopSpecializeShaderARB(GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue)
{
   (void) shader; (void) pEntryPoint; (void) numSpecializationConstants; (void) pConstantIndex; (void) pConstantValue;
   _mesa_noop_entrypoint("glSpecializeShaderARB");
}

static void GLAPIENTRY noopInvalidateBufferData(GLuint buffer)
{
   (void) buffer;
   _mesa_noop_entrypoint("glInvalidateBufferData");
}

static void GLAPIENTRY noopInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length)
{
   (void) buffer; (void) offset; (void) length;
   _mesa_noop_entrypoint("glInvalidateBufferSubData");
}

static void GLAPIENTRY noopInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments)
{
   (void) target; (void) numAttachments; (void) attachments;
   _mesa_noop_entrypoint("glInvalidateFramebuffer");
}

static void GLAPIENTRY noopInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
   (void) target; (void) numAttachments; (void) attachments; (void) x; (void) y; (void) width; (void) height;
   _mesa_noop_entrypoint("glInvalidateSubFramebuffer");
}

static void GLAPIENTRY noopInvalidateTexImage(GLuint texture, GLint level)
{
   (void) texture; (void) level;
   _mesa_noop_entrypoint("glInvalidateTexImage");
}

static void GLAPIENTRY noopInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
{
   (void) texture; (void) level; (void) xoffset; (void) yoffset; (void) zoffset; (void) width; (void) height; (void) depth;
   _mesa_noop_entrypoint("glInvalidateTexSubImage");
}

static void GLAPIENTRY noopDrawTexfOES(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height)
{
   (void) x; (void) y; (void) z; (void) width; (void) height;
   _mesa_noop_entrypoint("glDrawTexfOES");
}

static void GLAPIENTRY noopDrawTexfvOES(const GLfloat *coords)
{
   (void) coords;
   _mesa_noop_entrypoint("glDrawTexfvOES");
}

static void GLAPIENTRY noopDrawTexiOES(GLint x, GLint y, GLint z, GLint width, GLint height)
{
   (void) x; (void) y; (void) z; (void) width; (void) height;
   _mesa_noop_entrypoint("glDrawTexiOES");
}

static void GLAPIENTRY noopDrawTexivOES(const GLint *coords)
{
   (void) coords;
   _mesa_noop_entrypoint("glDrawTexivOES");
}

static void GLAPIENTRY noopDrawTexsOES(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height)
{
   (void) x; (void) y; (void) z; (void) width; (void) height;
   _mesa_noop_entrypoint("glDrawTexsOES");
}

static void GLAPIENTRY noopDrawTexsvOES(const GLshort *coords)
{
   (void) coords;
   _mesa_noop_entrypoint("glDrawTexsvOES");
}

static void GLAPIENTRY noopDrawTexxOES(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height)
{
   (void) x; (void) y; (void) z; (void) width; (void) height;
   _mesa_noop_entrypoint("glDrawTexxOES");
}

static void GLAPIENTRY noopDrawTexxvOES(const GLfixed *coords)
{
   (void) coords;
   _mesa_noop_entrypoint("glDrawTexxvOES");
}

static void GLAPIENTRY noopPointSizePointerOES(GLenum type, GLsizei stride, const GLvoid *pointer)
{
   (void) type; (void) stride; (void) pointer;
   _mesa_noop_entrypoint("glPointSizePointerOES");
}

static GLbitfield GLAPIENTRY noopQueryMatrixxOES(GLfixed *mantissa, GLint *exponent)
{
   (void) mantissa; (void) exponent;
   _mesa_noop_entrypoint("glQueryMatrixxOES");
   return (GLbitfield) 0;
}

static void GLAPIENTRY noopColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
   (void) size; (void) type; (void) stride; (void) count; (void) pointer;
   _mesa_noop_entrypoint("glColorPointerEXT");
}

static void GLAPIENTRY noopEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean *pointer)
{
   (void) stride; (void) count; (void) pointer;
   _mesa_noop_entrypoint("glEdgeFlagPointerEXT");
}

static void GLAPIENTRY noopIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
   (void) type; (void) stride; (void) count; (void) pointer;
   _mesa_noop_entrypoint("glIndexPointerEXT");
}

static void GLAPIENTRY noopNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
   (void) type; (void) stride; (void) count; (void) pointer;
   _mesa_noop_entrypoint("glNormalPointerEXT");
}

static void GLAPIENTRY noopTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
   (void) size; (void) type; (void) stride; (void) count; (void) pointer;
   _mesa_noop_entrypoint("glTexCoordPointerEXT");
}

static void GLAPIENTRY noopVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
   (void) size; (void) type; (void) stride; (void) count; (void) pointer;
   _mesa_noop_entrypoint("glVertexPointerEXT");
}

static void GLAPIENTRY noopDiscardFramebufferEXT(GLenum target, GLsizei numAttachments, const GLenum *attachments)
{
   (void) target; (void) numAttachments; (void) attachments;
   _mesa_noop_entrypoint("glDiscardFramebufferEXT");
}

static void GLAPIENTRY noopActiveShaderProgram(GLuint pipeline, GLuint program)
{
   (void) pipeline; (void) program;
   _mesa_noop_entrypoint("glActiveShaderProgram");
}

static void GLAPIENTRY noopBindProgramPipeline(GLuint pipeline)
{
   (void) pipeline;
   _mesa_noop_entrypoint("glBindProgramPipeline");
}

static GLuint GLAPIENTRY noopCreateShaderProgramv(GLenum type, GLsizei count, const GLchar * const *strings)
{
   (void) type; (void) count; (void) strings;
   _mesa_noop_entrypoint("glCreateShaderProgramv");
   return (GLuint) 0;
}

static void GLAPIENTRY noopDeleteProgramPipelines(GLsizei n, const GLuint *pipelines)
{
   (void) n; (void) pipelines;
   _mesa_noop_entrypoint("glDeleteProgramPipelines");
}

static void GLAPIENTRY noopGenProgramPipelines(GLsizei n, GLuint *pipelines)
{
   (void) n; (void) pipelines;
   _mesa_noop_entrypoint("glGenProgramPipelines");
}

static void GLAPIENTRY noopGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
   (void) pipeline; (void) bufSize; (void) length; (void) infoLog;
   _mesa_noop_entrypoint("glGetProgramPipelineInfoLog");
}

static void GLAPIENTRY noopGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params)
{
   (void) pipeline; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetProgramPipelineiv");
}

static GLboolean GLAPIENTRY noopIsProgramPipeline(GLuint pipeline)
{
   (void) pipeline;
   _mesa_noop_entrypoint("glIsProgramPipeline");
   return (GLboolean) 0;
}

static void GLAPIENTRY noopLockArraysEXT(GLint first, GLsizei count)
{
   (void) first; (void) count;
   _mesa_noop_entrypoint("glLockArraysEXT");
}

static void GLAPIENTRY noopProgramUniform1d(GLuint program, GLint location, GLdouble x)
{
   (void) program; (void) location; (void) x;
   _mesa_noop_entrypoint("glProgramUniform1d");
}

static void GLAPIENTRY noopProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
   (void) program; (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glProgramUniform1dv");
}

static void GLAPIENTRY noopProgramUniform1f(GLuint program, GLint location, GLfloat x)
{
   (void) program; (void) location; (void) x;
   _mesa_noop_entrypoint("glProgramUniform1f");
}

static void GLAPIENTRY noopProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
   (void) program; (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glProgramUniform1fv");
}

static void GLAPIENTRY noopProgramUniform1i(GLuint program, GLint location, GLint x)
{
   (void) program; (void) location; (void) x;
   _mesa_noop_entrypoint("glProgramUniform1i");
}

static void GLAPIENTRY noopProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
   (void) program; (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glProgramUniform1iv");
}

static void GLAPIENTRY noopProgramUniform1ui(GLuint program, GLint location, GLuint x)
{
   (void) program; (void) location; (void) x;
   _mesa_noop_entrypoint("glProgramUniform1ui");
}

static void GLAPIENTRY noopProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
   (void) program; (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glProgramUniform1uiv");
}

static void GLAPIENTRY noopProgramUniform2d(GLuint program, GLint location, GLdouble x, GLdouble y)
{
   (void) program; (void) location; (void) x; (void) y;
   _mesa_noop_entrypoint("glProgramUniform2d");
}

static void GLAPIENTRY noopProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
   (void) program; (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glProgramUniform2dv");
}

static void GLAPIENTRY noopProgramUniform2f(GLuint program, GLint location, GLfloat x, GLfloat y)
{
   (void) program; (void) location; (void) x; (void) y;
   _mesa_noop_entrypoint("glProgramUniform2f");
}

static void GLAPIENTRY noopProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
   (void) program; (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glProgramUniform2fv");
}

static void GLAPIENTRY noopProgramUniform2i(GLuint program, GLint location, GLint x, GLint y)
{
   (void) program; (void) location; (void) x; (void) y;
   _mesa_noop_entrypoint("glProgramUniform2i");
}

static void GLAPIENTRY noopProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
   (void) program; (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glProgramUniform2iv");
}

static void GLAPIENTRY noopProgramUniform2ui(GLuint program, GLint location, GLuint x, GLuint y)
{
   (void) program; (void) location; (void) x; (void) y;
   _mesa_noop_entrypoint("glProgramUniform2ui");
}

static void GLAPIENTRY noopProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
   (void) program; (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glProgramUniform2uiv");
}

static void GLAPIENTRY noopProgramUniform3d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
   (void) program; (void) location; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glProgramUniform3d");
}

static void GLAPIENTRY noopProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
   (void) program; (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glProgramUniform3dv");
}

static void GLAPIENTRY noopProgramUniform3f(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z)
{
   (void) program; (void) location; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glProgramUniform3f");
}

static void GLAPIENTRY noopProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
   (void) program; (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glProgramUniform3fv");
}

static void GLAPIENTRY noopProgramUniform3i(GLuint program, GLint location, GLint x, GLint y, GLint z)
{
   (void) program; (void) location; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glProgramUniform3i");
}

static void GLAPIENTRY noopProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
   (void) program; (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glProgramUniform3iv");
}

static void GLAPIENTRY noopProgramUniform3ui(GLuint program, GLint location, GLuint x, GLuint y, GLuint z)
{
   (void) program; (void) location; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glProgramUniform3ui");
}

static void GLAPIENTRY noopProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
   (void) program; (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glProgramUniform3uiv");
}

static void GLAPIENTRY noopProgramUniform4d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   (void) program; (void) location; (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glProgramUniform4d");
}

static void GLAPIENTRY noopProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
   (void) program; (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glProgramUniform4dv");
}

static void GLAPIENTRY noopProgramUniform4f(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   (void) program; (void) location; (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glProgramUniform4f");
}

static void GLAPIENTRY noopProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
   (void) program; (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glProgramUniform4fv");
}

static void GLAPIENTRY noopProgramUniform4i(GLuint program, GLint location, GLint x, GLint y, GLint z, GLint w)
{
   (void) program; (void) location; (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glProgramUniform4i");
}

static void GLAPIENTRY noopProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
   (void) program; (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glProgramUniform4iv");
}

static void GLAPIENTRY noopProgramUniform4ui(GLuint program, GLint location, GLuint x, GLuint y, GLuint z, GLuint w)
{
   (void) program; (void) location; (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glProgramUniform4ui");
}

static void GLAPIENTRY noopProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
   (void) program; (void) location; (void) count; (void) value;
   _mesa_noop_entrypoint("glProgramUniform4uiv");
}

static void GLAPIENTRY noopProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   (void) program; (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glProgramUniformMatrix2dv");
}

static void GLAPIENTRY noopProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   (void) program; (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glProgramUniformMatrix2fv");
}

static void GLAPIENTRY noopProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   (void) program; (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glProgramUniformMatrix2x3dv");
}

static void GLAPIENTRY noopProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   (void) program; (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glProgramUniformMatrix2x3fv");
}

static void GLAPIENTRY noopProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   (void) program; (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glProgramUniformMatrix2x4dv");
}

static void GLAPIENTRY noopProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   (void) program; (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glProgramUniformMatrix2x4fv");
}

static void GLAPIENTRY noopProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   (void) program; (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glProgramUniformMatrix3dv");
}

static void GLAPIENTRY noopProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   (void) program; (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glProgramUniformMatrix3fv");
}

static void GLAPIENTRY noopProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   (void) program; (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glProgramUniformMatrix3x2dv");
}

static void GLAPIENTRY noopProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   (void) program; (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glProgramUniformMatrix3x2fv");
}

static void GLAPIENTRY noopProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   (void) program; (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glProgramUniformMatrix3x4dv");
}

static void GLAPIENTRY noopProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   (void) program; (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glProgramUniformMatrix3x4fv");
}

static void GLAPIENTRY noopProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   (void) program; (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glProgramUniformMatrix4dv");
}

static void GLAPIENTRY noopProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   (void) program; (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glProgramUniformMatrix4fv");
}

static void GLAPIENTRY noopProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   (void) program; (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glProgramUniformMatrix4x2dv");
}

static void GLAPIENTRY noopProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   (void) program; (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glProgramUniformMatrix4x2fv");
}

static void GLAPIENTRY noopProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   (void) program; (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glProgramUniformMatrix4x3dv");
}

static void GLAPIENTRY noopProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   (void) program; (void) location; (void) count; (void) transpose; (void) value;
   _mesa_noop_entrypoint("glProgramUniformMatrix4x3fv");
}

static void GLAPIENTRY noopUnlockArraysEXT(void)
{
      _mesa_noop_entrypoint("glUnlockArraysEXT");
}

static void GLAPIENTRY noopUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program)
{
   (void) pipeline; (void) stages; (void) program;
   _mesa_noop_entrypoint("glUseProgramStages");
}

static void GLAPIENTRY noopValidateProgramPipeline(GLuint pipeline)
{
   (void) pipeline;
   _mesa_noop_entrypoint("glValidateProgramPipeline");
}

static void GLAPIENTRY noopFramebufferTexture2DMultisampleEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
{
   (void) target; (void) attachment; (void) textarget; (void) texture; (void) level; (void) samples;
   _mesa_noop_entrypoint("glFramebufferTexture2DMultisampleEXT");
}

static void GLAPIENTRY noopDebugMessageCallback(GLDEBUGPROC callback, const GLvoid *userParam)
{
   (void) callback; (void) userParam;
   _mesa_noop_entrypoint("glDebugMessageCallback");
}

static void GLAPIENTRY noopDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
   (void) source; (void) type; (void) severity; (void) count; (void) ids; (void) enabled;
   _mesa_noop_entrypoint("glDebugMessageControl");
}

static void GLAPIENTRY noopDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
{
   (void) source; (void) type; (void) id; (void) severity; (void) length; (void) buf;
   _mesa_noop_entrypoint("glDebugMessageInsert");
}

static GLuint GLAPIENTRY noopGetDebugMessageLog(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
{
   (void) count; (void) bufsize; (void) sources; (void) types; (void) ids; (void) severities; (void) lengths; (void) messageLog;
   _mesa_noop_entrypoint("glGetDebugMessageLog");
   return (GLuint) 0;
}

static void GLAPIENTRY noopGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)
{
   (void) identifier; (void) name; (void) bufSize; (void) length; (void) label;
   _mesa_noop_entrypoint("glGetObjectLabel");
}

static void GLAPIENTRY noopGetObjectPtrLabel(const GLvoid *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)
{
   (void) ptr; (void) bufSize; (void) length; (void) label;
   _mesa_noop_entrypoint("glGetObjectPtrLabel");
}

static void GLAPIENTRY noopObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label)
{
   (void) identifier; (void) name; (void) length; (void) label;
   _mesa_noop_entrypoint("glObjectLabel");
}

static void GLAPIENTRY noopObjectPtrLabel(const GLvoid *ptr, GLsizei length, const GLchar *label)
{
   (void) ptr; (void) length; (void) label;
   _mesa_noop_entrypoint("glObjectPtrLabel");
}

static void GLAPIENTRY noopPopDebugGroup(void)
{
      _mesa_noop_entrypoint("glPopDebugGroup");
}

static void GLAPIENTRY noopPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message)
{
   (void) source; (void) id; (void) length; (void) message;
   _mesa_noop_entrypoint("glPushDebugGroup");
}

static void GLAPIENTRY noopSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue)
{
   (void) red; (void) green; (void) blue;
   _mesa_noop_entrypoint("glSecondaryColor3fEXT");
}

static void GLAPIENTRY noopSecondaryColor3fvEXT(const GLfloat *v)
{
   (void) v;
   _mesa_noop_entrypoint("glSecondaryColor3fvEXT");
}

static void GLAPIENTRY noopMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount)
{
   (void) mode; (void) count; (void) type; (void) indices; (void) primcount;
   _mesa_noop_entrypoint("glMultiDrawElements");
}

static void GLAPIENTRY noopFogCoordfEXT(GLfloat coord)
{
   (void) coord;
   _mesa_noop_entrypoint("glFogCoordfEXT");
}

static void GLAPIENTRY noopFogCoordfvEXT(const GLfloat *coord)
{
   (void) coord;
   _mesa_noop_entrypoint("glFogCoordfvEXT");
}

static void GLAPIENTRY noopWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glWindowPos4dMESA");
}

static void GLAPIENTRY noopWindowPos4dvMESA(const GLdouble *v)
{
   (void) v;
   _mesa_noop_entrypoint("glWindowPos4dvMESA");
}

static void GLAPIENTRY noopWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glWindowPos4fMESA");
}

static void GLAPIENTRY noopWindowPos4fvMESA(const GLfloat *v)
{
   (void) v;
   _mesa_noop_entrypoint("glWindowPos4fvMESA");
}

static void GLAPIENTRY noopWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w)
{
   (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glWindowPos4iMESA");
}

static void GLAPIENTRY noopWindowPos4ivMESA(const GLint *v)
{
   (void) v;
   _mesa_noop_entrypoint("glWindowPos4ivMESA");
}

static void GLAPIENTRY noopWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w)
{
   (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glWindowPos4sMESA");
}

static void GLAPIENTRY noopWindowPos4svMESA(const GLshort *v)
{
   (void) v;
   _mesa_noop_entrypoint("glWindowPos4svMESA");
}

static void GLAPIENTRY noopMultiModeDrawArraysIBM(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride)
{
   (void) mode; (void) first; (void) count; (void) primcount; (void) modestride;
   _mesa_noop_entrypoint("glMultiModeDrawArraysIBM");
}

static void GLAPIENTRY noopMultiModeDrawElementsIBM(const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, GLint modestride)
{
   (void) mode; (void) count; (void) type; (void) indices; (void) primcount; (void) modestride;
   _mesa_noop_entrypoint("glMultiModeDrawElementsIBM");
}

static void GLAPIENTRY noopVertexAttrib1dNV(GLuint index, GLdouble x)
{
   (void) index; (void) x;
   _mesa_noop_entrypoint("glVertexAttrib1dNV");
}

static void GLAPIENTRY noopVertexAttrib1dvNV(GLuint index, const GLdouble *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib1dvNV");
}

static void GLAPIENTRY noopVertexAttrib1fNV(GLuint index, GLfloat x)
{
   (void) index; (void) x;
   _mesa_noop_entrypoint("glVertexAttrib1fNV");
}

static void GLAPIENTRY noopVertexAttrib1fvNV(GLuint index, const GLfloat *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib1fvNV");
}

static void GLAPIENTRY noopVertexAttrib1sNV(GLuint index, GLshort x)
{
   (void) index; (void) x;
   _mesa_noop_entrypoint("glVertexAttrib1sNV");
}

static void GLAPIENTRY noopVertexAttrib1svNV(GLuint index, const GLshort *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib1svNV");
}

static void GLAPIENTRY noopVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y)
{
   (void) index; (void) x; (void) y;
   _mesa_noop_entrypoint("glVertexAttrib2dNV");
}

static void GLAPIENTRY noopVertexAttrib2dvNV(GLuint index, const GLdouble *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib2dvNV");
}

static void GLAPIENTRY noopVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y)
{
   (void) index; (void) x; (void) y;
   _mesa_noop_entrypoint("glVertexAttrib2fNV");
}

static void GLAPIENTRY noopVertexAttrib2fvNV(GLuint index, const GLfloat *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib2fvNV");
}

static void GLAPIENTRY noopVertexAttrib2sNV(GLuint index, GLshort x, GLshort y)
{
   (void) index; (void) x; (void) y;
   _mesa_noop_entrypoint("glVertexAttrib2sNV");
}

static void GLAPIENTRY noopVertexAttrib2svNV(GLuint index, const GLshort *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib2svNV");
}

static void GLAPIENTRY noopVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
   (void) index; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glVertexAttrib3dNV");
}

static void GLAPIENTRY noopVertexAttrib3dvNV(GLuint index, const GLdouble *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib3dvNV");
}

static void GLAPIENTRY noopVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
   (void) index; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glVertexAttrib3fNV");
}

static void GLAPIENTRY noopVertexAttrib3fvNV(GLuint index, const GLfloat *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib3fvNV");
}

static void GLAPIENTRY noopVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z)
{
   (void) index; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glVertexAttrib3sNV");
}

static void GLAPIENTRY noopVertexAttrib3svNV(GLuint index, const GLshort *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib3svNV");
}

static void GLAPIENTRY noopVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   (void) index; (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glVertexAttrib4dNV");
}

static void GLAPIENTRY noopVertexAttrib4dvNV(GLuint index, const GLdouble *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib4dvNV");
}

static void GLAPIENTRY noopVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   (void) index; (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glVertexAttrib4fNV");
}

static void GLAPIENTRY noopVertexAttrib4fvNV(GLuint index, const GLfloat *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib4fvNV");
}

static void GLAPIENTRY noopVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
   (void) index; (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glVertexAttrib4sNV");
}

static void GLAPIENTRY noopVertexAttrib4svNV(GLuint index, const GLshort *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib4svNV");
}

static void GLAPIENTRY noopVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
   (void) index; (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glVertexAttrib4ubNV");
}

static void GLAPIENTRY noopVertexAttrib4ubvNV(GLuint index, const GLubyte *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib4ubvNV");
}

static void GLAPIENTRY noopVertexAttribs1dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
   (void) index; (void) n; (void) v;
   _mesa_noop_entrypoint("glVertexAttribs1dvNV");
}

static void GLAPIENTRY noopVertexAttribs1fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
   (void) index; (void) n; (void) v;
   _mesa_noop_entrypoint("glVertexAttribs1fvNV");
}

static void GLAPIENTRY noopVertexAttribs1svNV(GLuint index, GLsizei n, const GLshort *v)
{
   (void) index; (void) n; (void) v;
   _mesa_noop_entrypoint("glVertexAttribs1svNV");
}

static void GLAPIENTRY noopVertexAttribs2dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
   (void) index; (void) n; (void) v;
   _mesa_noop_entrypoint("glVertexAttribs2dvNV");
}

static void GLAPIENTRY noopVertexAttribs2fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
   (void) index; (void) n; (void) v;
   _mesa_noop_entrypoint("glVertexAttribs2fvNV");
}

static void GLAPIENTRY noopVertexAttribs2svNV(GLuint index, GLsizei n, const GLshort *v)
{
   (void) index; (void) n; (void) v;
   _mesa_noop_entrypoint("glVertexAttribs2svNV");
}

static void GLAPIENTRY noopVertexAttribs3dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
   (void) index; (void) n; (void) v;
   _mesa_noop_entrypoint("glVertexAttribs3dvNV");
}

static void GLAPIENTRY noopVertexAttribs3fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
   (void) index; (void) n; (void) v;
   _mesa_noop_entrypoint("glVertexAttribs3fvNV");
}

static void GLAPIENTRY noopVertexAttribs3svNV(GLuint index, GLsizei n, const GLshort *v)
{
   (void) index; (void) n; (void) v;
   _mesa_noop_entrypoint("glVertexAttribs3svNV");
}

static void GLAPIENTRY noopVertexAttribs4dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
   (void) index; (void) n; (void) v;
   _mesa_noop_entrypoint("glVertexAttribs4dvNV");
}

static void GLAPIENTRY noopVertexAttribs4fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
   (void) index; (void) n; (void) v;
   _mesa_noop_entrypoint("glVertexAttribs4fvNV");
}

static void GLAPIENTRY noopVertexAttribs4svNV(GLuint index, GLsizei n, const GLshort *v)
{
   (void) index; (void) n; (void) v;
   _mesa_noop_entrypoint("glVertexAttribs4svNV");
}

static void GLAPIENTRY noopVertexAttribs4ubvNV(GLuint index, GLsizei n, const GLubyte *v)
{
   (void) index; (void) n; (void) v;
   _mesa_noop_entrypoint("glVertexAttribs4ubvNV");
}

static void GLAPIENTRY noopAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
   (void) op; (void) dst; (void) dstMod; (void) arg1; (void) arg1Rep; (void) arg1Mod;
   _mesa_noop_entrypoint("glAlphaFragmentOp1ATI");
}

static void GLAPIENTRY noopAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
   (void) op; (void) dst; (void) dstMod; (void) arg1; (void) arg1Rep; (void) arg1Mod; (void) arg2; (void) arg2Rep; (void) arg2Mod;
   _mesa_noop_entrypoint("glAlphaFragmentOp2ATI");
}

static void GLAPIENTRY noopAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
   (void) op; (void) dst; (void) dstMod; (void) arg1; (void) arg1Rep; (void) arg1Mod; (void) arg2; (void) arg2Rep; (void) arg2Mod; (void) arg3; (void) arg3Rep; (void) arg3Mod;
   _mesa_noop_entrypoint("glAlphaFragmentOp3ATI");
}

static void GLAPIENTRY noopBeginFragmentShaderATI(void)
{
      _mesa_noop_entrypoint("glBeginFragmentShaderATI");
}

static void GLAPIENTRY noopBindFragmentShaderATI(GLuint id)
{
   (void) id;
   _mesa_noop_entrypoint("glBindFragmentShaderATI");
}

static void GLAPIENTRY noopColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
   (void) op; (void) dst; (void) dstMask; (void) dstMod; (void) arg1; (void) arg1Rep; (void) arg1Mod;
   _mesa_noop_entrypoint("glColorFragmentOp1ATI");
}

static void GLAPIENTRY noopColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
   (void) op; (void) dst; (void) dstMask; (void) dstMod; (void) arg1; (void) arg1Rep; (void) arg1Mod; (void) arg2; (void) arg2Rep; (void) arg2Mod;
   _mesa_noop_entrypoint("glColorFragmentOp2ATI");
}

static void GLAPIENTRY noopColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
   (void) op; (void) dst; (void) dstMask; (void) dstMod; (void) arg1; (void) arg1Rep; (void) arg1Mod; (void) arg2; (void) arg2Rep; (void) arg2Mod; (void) arg3; (void) arg3Rep; (void) arg3Mod;
   _mesa_noop_entrypoint("glColorFragmentOp3ATI");
}

static void GLAPIENTRY noopDeleteFragmentShaderATI(GLuint id)
{
   (void) id;
   _mesa_noop_entrypoint("glDeleteFragmentShaderATI");
}

static void GLAPIENTRY noopEndFragmentShaderATI(void)
{
      _mesa_noop_entrypoint("glEndFragmentShaderATI");
}

static GLuint GLAPIENTRY noopGenFragmentShadersATI(GLuint range)
{
   (void) range;
   _mesa_noop_entrypoint("glGenFragmentShadersATI");
   return (GLuint) 0;
}

static void GLAPIENTRY noopPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle)
{
   (void) dst; (void) coord; (void) swizzle;
   _mesa_noop_entrypoint("glPassTexCoordATI");
}

static void GLAPIENTRY noopSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle)
{
   (void) dst; (void) interp; (void) swizzle;
   _mesa_noop_entrypoint("glSampleMapATI");
}

static void GLAPIENTRY noopSetFragmentShaderConstantATI(GLuint dst, const GLfloat *value)
{
   (void) dst; (void) value;
   _mesa_noop_entrypoint("glSetFragmentShaderConstantATI");
}

static void GLAPIENTRY noopDepthRangeArrayfvOES(GLuint first, GLsizei count, const GLfloat *v)
{
   (void) first; (void) count; (void) v;
   _mesa_noop_entrypoint("glDepthRangeArrayfvOES");
}

static void GLAPIENTRY noopDepthRangeIndexedfOES(GLuint index, GLfloat n, GLfloat f)
{
   (void) index; (void) n; (void) f;
   _mesa_noop_entrypoint("glDepthRangeIndexedfOES");
}

static void GLAPIENTRY noopActiveStencilFaceEXT(GLenum face)
{
   (void) face;
   _mesa_noop_entrypoint("glActiveStencilFaceEXT");
}

static void GLAPIENTRY noopPrimitiveRestartNV(void)
{
      _mesa_noop_entrypoint("glPrimitiveRestartNV");
}

static void GLAPIENTRY noopGetTexGenxvOES(GLenum coord, GLenum pname, GLfixed *params)
{
   (void) coord; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetTexGenxvOES");
}

static void GLAPIENTRY noopTexGenxOES(GLenum coord, GLenum pname, GLfixed param)
{
   (void) coord; (void) pname; (void) param;
   _mesa_noop_entrypoint("glTexGenxOES");
}

static void GLAPIENTRY noopTexGenxvOES(GLenum coord, GLenum pname, const GLfixed *params)
{
   (void) coord; (void) pname; (void) params;
   _mesa_noop_entrypoint("glTexGenxvOES");
}

static void GLAPIENTRY noopDepthBoundsEXT(GLclampd zmin, GLclampd zmax)
{
   (void) zmin; (void) zmax;
   _mesa_noop_entrypoint("glDepthBoundsEXT");
}

static void GLAPIENTRY noopBindFramebufferEXT(GLenum target, GLuint framebuffer)
{
   (void) target; (void) framebuffer;
   _mesa_noop_entrypoint("glBindFramebufferEXT");
}

static void GLAPIENTRY noopBindRenderbufferEXT(GLenum target, GLuint renderbuffer)
{
   (void) target; (void) renderbuffer;
   _mesa_noop_entrypoint("glBindRenderbufferEXT");
}

static void GLAPIENTRY noopStringMarkerGREMEDY(GLsizei len, const GLvoid *string)
{
   (void) len; (void) string;
   _mesa_noop_entrypoint("glStringMarkerGREMEDY");
}

static void GLAPIENTRY noopVertexAttribI1iEXT(GLuint index, GLint x)
{
   (void) index; (void) x;
   _mesa_noop_entrypoint("glVertexAttribI1iEXT");
}

static void GLAPIENTRY noopVertexAttribI1uiEXT(GLuint index, GLuint x)
{
   (void) index; (void) x;
   _mesa_noop_entrypoint("glVertexAttribI1uiEXT");
}

static void GLAPIENTRY noopVertexAttribI2iEXT(GLuint index, GLint x, GLint y)
{
   (void) index; (void) x; (void) y;
   _mesa_noop_entrypoint("glVertexAttribI2iEXT");
}

static void GLAPIENTRY noopVertexAttribI2ivEXT(GLuint index, const GLint *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttribI2ivEXT");
}

static void GLAPIENTRY noopVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y)
{
   (void) index; (void) x; (void) y;
   _mesa_noop_entrypoint("glVertexAttribI2uiEXT");
}

static void GLAPIENTRY noopVertexAttribI2uivEXT(GLuint index, const GLuint *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttribI2uivEXT");
}

static void GLAPIENTRY noopVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z)
{
   (void) index; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glVertexAttribI3iEXT");
}

static void GLAPIENTRY noopVertexAttribI3ivEXT(GLuint index, const GLint *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttribI3ivEXT");
}

static void GLAPIENTRY noopVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z)
{
   (void) index; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glVertexAttribI3uiEXT");
}

static void GLAPIENTRY noopVertexAttribI3uivEXT(GLuint index, const GLuint *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttribI3uivEXT");
}

static void GLAPIENTRY noopVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w)
{
   (void) index; (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glVertexAttribI4iEXT");
}

static void GLAPIENTRY noopVertexAttribI4ivEXT(GLuint index, const GLint *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttribI4ivEXT");
}

static void GLAPIENTRY noopVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
   (void) index; (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glVertexAttribI4uiEXT");
}

static void GLAPIENTRY noopVertexAttribI4uivEXT(GLuint index, const GLuint *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttribI4uivEXT");
}

static void GLAPIENTRY noopClearColorIiEXT(GLint r, GLint g, GLint b, GLint a)
{
   (void) r; (void) g; (void) b; (void) a;
   _mesa_noop_entrypoint("glClearColorIiEXT");
}

static void GLAPIENTRY noopClearColorIuiEXT(GLuint r, GLuint g, GLuint b, GLuint a)
{
   (void) r; (void) g; (void) b; (void) a;
   _mesa_noop_entrypoint("glClearColorIuiEXT");
}

static void GLAPIENTRY noopBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
{
   (void) target; (void) index; (void) buffer; (void) offset;
   _mesa_noop_entrypoint("glBindBufferOffsetEXT");
}

static void GLAPIENTRY noopBeginPerfMonitorAMD(GLuint monitor)
{
   (void) monitor;
   _mesa_noop_entrypoint("glBeginPerfMonitorAMD");
}

static void GLAPIENTRY noopDeletePerfMonitorsAMD(GLsizei n, GLuint *monitors)
{
   (void) n; (void) monitors;
   _mesa_noop_entrypoint("glDeletePerfMonitorsAMD");
}

static void GLAPIENTRY noopEndPerfMonitorAMD(GLuint monitor)
{
   (void) monitor;
   _mesa_noop_entrypoint("glEndPerfMonitorAMD");
}

static void GLAPIENTRY noopGenPerfMonitorsAMD(GLsizei n, GLuint *monitors)
{
   (void) n; (void) monitors;
   _mesa_noop_entrypoint("glGenPerfMonitorsAMD");
}

static void GLAPIENTRY noopGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten)
{
   (void) monitor; (void) pname; (void) dataSize; (void) data; (void) bytesWritten;
   _mesa_noop_entrypoint("glGetPerfMonitorCounterDataAMD");
}

static void GLAPIENTRY noopGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, GLvoid *data)
{
   (void) group; (void) counter; (void) pname; (void) data;
   _mesa_noop_entrypoint("glGetPerfMonitorCounterInfoAMD");
}

static void GLAPIENTRY noopGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString)
{
   (void) group; (void) counter; (void) bufSize; (void) length; (void) counterString;
   _mesa_noop_entrypoint("glGetPerfMonitorCounterStringAMD");
}

static void GLAPIENTRY noopGetPerfMonitorCountersAMD(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei countersSize, GLuint *counters)
{
   (void) group; (void) numCounters; (void) maxActiveCounters; (void) countersSize; (void) counters;
   _mesa_noop_entrypoint("glGetPerfMonitorCountersAMD");
}

static void GLAPIENTRY noopGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString)
{
   (void) group; (void) bufSize; (void) length; (void) groupString;
   _mesa_noop_entrypoint("glGetPerfMonitorGroupStringAMD");
}

static void GLAPIENTRY noopGetPerfMonitorGroupsAMD(GLint *numGroups, GLsizei groupsSize, GLuint *groups)
{
   (void) numGroups; (void) groupsSize; (void) groups;
   _mesa_noop_entrypoint("glGetPerfMonitorGroupsAMD");
}

static void GLAPIENTRY noopSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList)
{
   (void) monitor; (void) enable; (void) group; (void) numCounters; (void) counterList;
   _mesa_noop_entrypoint("glSelectPerfMonitorCountersAMD");
}

static void GLAPIENTRY noopTextureBarrierNV(void)
{
      _mesa_noop_entrypoint("glTextureBarrierNV");
}

static void GLAPIENTRY noopVDPAUFiniNV(void)
{
      _mesa_noop_entrypoint("glVDPAUFiniNV");
}

static void GLAPIENTRY noopVDPAUGetSurfaceivNV(GLintptr surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
   (void) surface; (void) pname; (void) bufSize; (void) length; (void) values;
   _mesa_noop_entrypoint("glVDPAUGetSurfaceivNV");
}

static void GLAPIENTRY noopVDPAUInitNV(const GLvoid *vdpDevice, const GLvoid *getProcAddress)
{
   (void) vdpDevice; (void) getProcAddress;
   _mesa_noop_entrypoint("glVDPAUInitNV");
}

static GLboolean GLAPIENTRY noopVDPAUIsSurfaceNV(GLintptr surface)
{
   (void) surface;
   _mesa_noop_entrypoint("glVDPAUIsSurfaceNV");
   return (GLboolean) 0;
}

static void GLAPIENTRY noopVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLintptr *surfaces)
{
   (void) numSurfaces; (void) surfaces;
   _mesa_noop_entrypoint("glVDPAUMapSurfacesNV");
}

static GLintptr GLAPIENTRY noopVDPAURegisterOutputSurfaceNV(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
{
   (void) vdpSurface; (void) target; (void) numTextureNames; (void) textureNames;
   _mesa_noop_entrypoint("glVDPAURegisterOutputSurfaceNV");
   return (GLintptr) 0;
}

static GLintptr GLAPIENTRY noopVDPAURegisterVideoSurfaceNV(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
{
   (void) vdpSurface; (void) target; (void) numTextureNames; (void) textureNames;
   _mesa_noop_entrypoint("glVDPAURegisterVideoSurfaceNV");
   return (GLintptr) 0;
}

static void GLAPIENTRY noopVDPAUSurfaceAccessNV(GLintptr surface, GLenum access)
{
   (void) surface; (void) access;
   _mesa_noop_entrypoint("glVDPAUSurfaceAccessNV");
}

static void GLAPIENTRY noopVDPAUUnmapSurfacesNV(GLsizei numSurfaces, const GLintptr *surfaces)
{
   (void) numSurfaces; (void) surfaces;
   _mesa_noop_entrypoint("glVDPAUUnmapSurfacesNV");
}

static void GLAPIENTRY noopVDPAUUnregisterSurfaceNV(GLintptr surface)
{
   (void) surface;
   _mesa_noop_entrypoint("glVDPAUUnregisterSurfaceNV");
}

static void GLAPIENTRY noopBeginPerfQueryINTEL(GLuint queryHandle)
{
   (void) queryHandle;
   _mesa_noop_entrypoint("glBeginPerfQueryINTEL");
}

static void GLAPIENTRY noopCreatePerfQueryINTEL(GLuint queryId, GLuint *queryHandle)
{
   (void) queryId; (void) queryHandle;
   _mesa_noop_entrypoint("glCreatePerfQueryINTEL");
}

static void GLAPIENTRY noopDeletePerfQueryINTEL(GLuint queryHandle)
{
   (void) queryHandle;
   _mesa_noop_entrypoint("glDeletePerfQueryINTEL");
}

static void GLAPIENTRY noopEndPerfQueryINTEL(GLuint queryHandle)
{
   (void) queryHandle;
   _mesa_noop_entrypoint("glEndPerfQueryINTEL");
}

static void GLAPIENTRY noopGetFirstPerfQueryIdINTEL(GLuint *queryId)
{
   (void) queryId;
   _mesa_noop_entrypoint("glGetFirstPerfQueryIdINTEL");
}

static void GLAPIENTRY noopGetNextPerfQueryIdINTEL(GLuint queryId, GLuint *nextQueryId)
{
   (void) queryId; (void) nextQueryId;
   _mesa_noop_entrypoint("glGetNextPerfQueryIdINTEL");
}

static void GLAPIENTRY noopGetPerfCounterInfoINTEL(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue)
{
   (void) queryId; (void) counterId; (void) counterNameLength; (void) counterName; (void) counterDescLength; (void) counterDesc; (void) counterOffset; (void) counterDataSize; (void) counterTypeEnum; (void) counterDataTypeEnum; (void) rawCounterMaxValue;
   _mesa_noop_entrypoint("glGetPerfCounterInfoINTEL");
}

static void GLAPIENTRY noopGetPerfQueryDataINTEL(GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten)
{
   (void) queryHandle; (void) flags; (void) dataSize; (void) data; (void) bytesWritten;
   _mesa_noop_entrypoint("glGetPerfQueryDataINTEL");
}

static void GLAPIENTRY noopGetPerfQueryIdByNameINTEL(GLchar *queryName, GLuint *queryId)
{
   (void) queryName; (void) queryId;
   _mesa_noop_entrypoint("glGetPerfQueryIdByNameINTEL");
}

static void GLAPIENTRY noopGetPerfQueryInfoINTEL(GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask)
{
   (void) queryId; (void) queryNameLength; (void) queryName; (void) dataSize; (void) noCounters; (void) noInstances; (void) capsMask;
   _mesa_noop_entrypoint("glGetPerfQueryInfoINTEL");
}

static void GLAPIENTRY noopPolygonOffsetClampEXT(GLfloat factor, GLfloat units, GLfloat clamp)
{
   (void) factor; (void) units; (void) clamp;
   _mesa_noop_entrypoint("glPolygonOffsetClampEXT");
}

static void GLAPIENTRY noopSubpixelPrecisionBiasNV(GLuint xbits, GLuint ybits)
{
   (void) xbits; (void) ybits;
   _mesa_noop_entrypoint("glSubpixelPrecisionBiasNV");
}

static void GLAPIENTRY noopConservativeRasterParameterfNV(GLenum pname, GLfloat param)
{
   (void) pname; (void) param;
   _mesa_noop_entrypoint("glConservativeRasterParameterfNV");
}

static void GLAPIENTRY noopConservativeRasterParameteriNV(GLenum pname, GLint param)
{
   (void) pname; (void) param;
   _mesa_noop_entrypoint("glConservativeRasterParameteriNV");
}

static void GLAPIENTRY noopWindowRectanglesEXT(GLenum mode, GLsizei count, const GLint *box)
{
   (void) mode; (void) count; (void) box;
   _mesa_noop_entrypoint("glWindowRectanglesEXT");
}

static void GLAPIENTRY noopBufferStorageMemEXT(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset)
{
   (void) target; (void) size; (void) memory; (void) offset;
   _mesa_noop_entrypoint("glBufferStorageMemEXT");
}

static void GLAPIENTRY noopCreateMemoryObjectsEXT(GLsizei n, GLuint *memoryObjects)
{
   (void) n; (void) memoryObjects;
   _mesa_noop_entrypoint("glCreateMemoryObjectsEXT");
}

static void GLAPIENTRY noopDeleteMemoryObjectsEXT(GLsizei n, const GLuint *memoryObjects)
{
   (void) n; (void) memoryObjects;
   _mesa_noop_entrypoint("glDeleteMemoryObjectsEXT");
}

static void GLAPIENTRY noopDeleteSemaphoresEXT(GLsizei n, const GLuint *semaphores)
{
   (void) n; (void) semaphores;
   _mesa_noop_entrypoint("glDeleteSemaphoresEXT");
}

static void GLAPIENTRY noopGenSemaphoresEXT(GLsizei n, GLuint *semaphores)
{
   (void) n; (void) semaphores;
   _mesa_noop_entrypoint("glGenSemaphoresEXT");
}

static void GLAPIENTRY noopGetMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, GLint *params)
{
   (void) memoryObject; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetMemoryObjectParameterivEXT");
}

static void GLAPIENTRY noopGetSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, GLuint64 *params)
{
   (void) semaphore; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetSemaphoreParameterui64vEXT");
}

static void GLAPIENTRY noopGetUnsignedBytei_vEXT(GLenum target, GLuint index, GLubyte *data)
{
   (void) target; (void) index; (void) data;
   _mesa_noop_entrypoint("glGetUnsignedBytei_vEXT");
}

static void GLAPIENTRY noopGetUnsignedBytevEXT(GLenum pname, GLubyte *data)
{
   (void) pname; (void) data;
   _mesa_noop_entrypoint("glGetUnsignedBytevEXT");
}

static GLboolean GLAPIENTRY noopIsMemoryObjectEXT(GLuint memoryObject)
{
   (void) memoryObject;
   _mesa_noop_entrypoint("glIsMemoryObjectEXT");
   return (GLboolean) 0;
}

static GLboolean GLAPIENTRY noopIsSemaphoreEXT(GLuint semaphore)
{
   (void) semaphore;
   _mesa_noop_entrypoint("glIsSemaphoreEXT");
   return (GLboolean) 0;
}

static void GLAPIENTRY noopMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, const GLint *params)
{
   (void) memoryObject; (void) pname; (void) params;
   _mesa_noop_entrypoint("glMemoryObjectParameterivEXT");
}

static void GLAPIENTRY noopNamedBufferStorageMemEXT(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset)
{
   (void) buffer; (void) size; (void) memory; (void) offset;
   _mesa_noop_entrypoint("glNamedBufferStorageMemEXT");
}

static void GLAPIENTRY noopSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, const GLuint64 *params)
{
   (void) semaphore; (void) pname; (void) params;
   _mesa_noop_entrypoint("glSemaphoreParameterui64vEXT");
}

static void GLAPIENTRY noopSignalSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts)
{
   (void) semaphore; (void) numBufferBarriers; (void) buffers; (void) numTextureBarriers; (void) textures; (void) dstLayouts;
   _mesa_noop_entrypoint("glSignalSemaphoreEXT");
}

static void GLAPIENTRY noopTexStorageMem1DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset)
{
   (void) target; (void) levels; (void) internalFormat; (void) width; (void) memory; (void) offset;
   _mesa_noop_entrypoint("glTexStorageMem1DEXT");
}

static void GLAPIENTRY noopTexStorageMem2DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset)
{
   (void) target; (void) levels; (void) internalFormat; (void) width; (void) height; (void) memory; (void) offset;
   _mesa_noop_entrypoint("glTexStorageMem2DEXT");
}

static void GLAPIENTRY noopTexStorageMem2DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
{
   (void) target; (void) samples; (void) internalFormat; (void) width; (void) height; (void) fixedSampleLocations; (void) memory; (void) offset;
   _mesa_noop_entrypoint("glTexStorageMem2DMultisampleEXT");
}

static void GLAPIENTRY noopTexStorageMem3DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset)
{
   (void) target; (void) levels; (void) internalFormat; (void) width; (void) height; (void) depth; (void) memory; (void) offset;
   _mesa_noop_entrypoint("glTexStorageMem3DEXT");
}

static void GLAPIENTRY noopTexStorageMem3DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
{
   (void) target; (void) samples; (void) internalFormat; (void) width; (void) height; (void) depth; (void) fixedSampleLocations; (void) memory; (void) offset;
   _mesa_noop_entrypoint("glTexStorageMem3DMultisampleEXT");
}

static void GLAPIENTRY noopTextureStorageMem1DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset)
{
   (void) texture; (void) levels; (void) internalFormat; (void) width; (void) memory; (void) offset;
   _mesa_noop_entrypoint("glTextureStorageMem1DEXT");
}

static void GLAPIENTRY noopTextureStorageMem2DEXT(GLenum texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset)
{
   (void) texture; (void) levels; (void) internalFormat; (void) width; (void) height; (void) memory; (void) offset;
   _mesa_noop_entrypoint("glTextureStorageMem2DEXT");
}

static void GLAPIENTRY noopTextureStorageMem2DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
{
   (void) texture; (void) samples; (void) internalFormat; (void) width; (void) height; (void) fixedSampleLocations; (void) memory; (void) offset;
   _mesa_noop_entrypoint("glTextureStorageMem2DMultisampleEXT");
}

static void GLAPIENTRY noopTextureStorageMem3DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset)
{
   (void) texture; (void) levels; (void) internalFormat; (void) width; (void) height; (void) depth; (void) memory; (void) offset;
   _mesa_noop_entrypoint("glTextureStorageMem3DEXT");
}

static void GLAPIENTRY noopTextureStorageMem3DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
{
   (void) texture; (void) samples; (void) internalFormat; (void) width; (void) height; (void) depth; (void) fixedSampleLocations; (void) memory; (void) offset;
   _mesa_noop_entrypoint("glTextureStorageMem3DMultisampleEXT");
}

static void GLAPIENTRY noopWaitSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts)
{
   (void) semaphore; (void) numBufferBarriers; (void) buffers; (void) numTextureBarriers; (void) textures; (void) srcLayouts;
   _mesa_noop_entrypoint("glWaitSemaphoreEXT");
}

static void GLAPIENTRY noopImportMemoryFdEXT(GLuint memory, GLuint64 size, GLenum handleType, GLint fd)
{
   (void) memory; (void) size; (void) handleType; (void) fd;
   _mesa_noop_entrypoint("glImportMemoryFdEXT");
}

static void GLAPIENTRY noopImportSemaphoreFdEXT(GLuint semaphore, GLenum handleType, GLint fd)
{
   (void) semaphore; (void) handleType; (void) fd;
   _mesa_noop_entrypoint("glImportSemaphoreFdEXT");
}

static void GLAPIENTRY noopFramebufferFetchBarrierEXT(void)
{
      _mesa_noop_entrypoint("glFramebufferFetchBarrierEXT");
}

static void GLAPIENTRY noopNamedRenderbufferStorageMultisampleAdvancedAMD(GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
   (void) renderbuffer; (void) samples; (void) storageSamples; (void) internalformat; (void) width; (void) height;
   _mesa_noop_entrypoint("glNamedRenderbufferStorageMultisampleAdvancedAMD");
}

static void GLAPIENTRY noopRenderbufferStorageMultisampleAdvancedAMD(GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
   (void) target; (void) samples; (void) storageSamples; (void) internalformat; (void) width; (void) height;
   _mesa_noop_entrypoint("glRenderbufferStorageMultisampleAdvancedAMD");
}

static void GLAPIENTRY noopStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
{
   (void) frontfunc; (void) backfunc; (void) ref; (void) mask;
   _mesa_noop_entrypoint("glStencilFuncSeparateATI");
}

static void GLAPIENTRY noopProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
   (void) target; (void) index; (void) count; (void) params;
   _mesa_noop_entrypoint("glProgramEnvParameters4fvEXT");
}

static void GLAPIENTRY noopProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
   (void) target; (void) index; (void) count; (void) params;
   _mesa_noop_entrypoint("glProgramLocalParameters4fvEXT");
}

static void GLAPIENTRY noopEGLImageTargetRenderbufferStorageOES(GLenum target, GLvoid *writeOffset)
{
   (void) target; (void) writeOffset;
   _mesa_noop_entrypoint("glEGLImageTargetRenderbufferStorageOES");
}

static void GLAPIENTRY noopEGLImageTargetTexture2DOES(GLenum target, GLvoid *writeOffset)
{
   (void) target; (void) writeOffset;
   _mesa_noop_entrypoint("glEGLImageTargetTexture2DOES");
}

static void GLAPIENTRY noopAlphaFuncx(GLenum func, GLclampx ref)
{
   (void) func; (void) ref;
   _mesa_noop_entrypoint("glAlphaFuncx");
}

static void GLAPIENTRY noopClearColorx(GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   _mesa_noop_entrypoint("glClearColorx");
}

static void GLAPIENTRY noopClearDepthx(GLclampx depth)
{
   (void) depth;
   _mesa_noop_entrypoint("glClearDepthx");
}

static void GLAPIENTRY noopColor4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   _mesa_noop_entrypoint("glColor4x");
}

static void GLAPIENTRY noopDepthRangex(GLclampx zNear, GLclampx zFar)
{
   (void) zNear; (void) zFar;
   _mesa_noop_entrypoint("glDepthRangex");
}

static void GLAPIENTRY noopFogx(GLenum pname, GLfixed param)
{
   (void) pname; (void) param;
   _mesa_noop_entrypoint("glFogx");
}

static void GLAPIENTRY noopFogxv(GLenum pname, const GLfixed *params)
{
   (void) pname; (void) params;
   _mesa_noop_entrypoint("glFogxv");
}

static void GLAPIENTRY noopFrustumf(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{
   (void) left; (void) right; (void) bottom; (void) top; (void) zNear; (void) zFar;
   _mesa_noop_entrypoint("glFrustumf");
}

static void GLAPIENTRY noopFrustumx(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{
   (void) left; (void) right; (void) bottom; (void) top; (void) zNear; (void) zFar;
   _mesa_noop_entrypoint("glFrustumx");
}

static void GLAPIENTRY noopLightModelx(GLenum pname, GLfixed param)
{
   (void) pname; (void) param;
   _mesa_noop_entrypoint("glLightModelx");
}

static void GLAPIENTRY noopLightModelxv(GLenum pname, const GLfixed *params)
{
   (void) pname; (void) params;
   _mesa_noop_entrypoint("glLightModelxv");
}

static void GLAPIENTRY noopLightx(GLenum light, GLenum pname, GLfixed param)
{
   (void) light; (void) pname; (void) param;
   _mesa_noop_entrypoint("glLightx");
}

static void GLAPIENTRY noopLightxv(GLenum light, GLenum pname, const GLfixed *params)
{
   (void) light; (void) pname; (void) params;
   _mesa_noop_entrypoint("glLightxv");
}

static void GLAPIENTRY noopLineWidthx(GLfixed width)
{
   (void) width;
   _mesa_noop_entrypoint("glLineWidthx");
}

static void GLAPIENTRY noopLoadMatrixx(const GLfixed *m)
{
   (void) m;
   _mesa_noop_entrypoint("glLoadMatrixx");
}

static void GLAPIENTRY noopMaterialx(GLenum face, GLenum pname, GLfixed param)
{
   (void) face; (void) pname; (void) param;
   _mesa_noop_entrypoint("glMaterialx");
}

static void GLAPIENTRY noopMaterialxv(GLenum face, GLenum pname, const GLfixed *params)
{
   (void) face; (void) pname; (void) params;
   _mesa_noop_entrypoint("glMaterialxv");
}

static void GLAPIENTRY noopMultMatrixx(const GLfixed *m)
{
   (void) m;
   _mesa_noop_entrypoint("glMultMatrixx");
}

static void GLAPIENTRY noopMultiTexCoord4x(GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
{
   (void) target; (void) s; (void) t; (void) r; (void) q;
   _mesa_noop_entrypoint("glMultiTexCoord4x");
}

static void GLAPIENTRY noopNormal3x(GLfixed nx, GLfixed ny, GLfixed nz)
{
   (void) nx; (void) ny; (void) nz;
   _mesa_noop_entrypoint("glNormal3x");
}

static void GLAPIENTRY noopOrthof(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{
   (void) left; (void) right; (void) bottom; (void) top; (void) zNear; (void) zFar;
   _mesa_noop_entrypoint("glOrthof");
}

static void GLAPIENTRY noopOrthox(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{
   (void) left; (void) right; (void) bottom; (void) top; (void) zNear; (void) zFar;
   _mesa_noop_entrypoint("glOrthox");
}

static void GLAPIENTRY noopPointSizex(GLfixed size)
{
   (void) size;
   _mesa_noop_entrypoint("glPointSizex");
}

static void GLAPIENTRY noopPolygonOffsetx(GLfixed factor, GLfixed units)
{
   (void) factor; (void) units;
   _mesa_noop_entrypoint("glPolygonOffsetx");
}

static void GLAPIENTRY noopRotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
{
   (void) angle; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glRotatex");
}

static void GLAPIENTRY noopSampleCoveragex(GLclampx value, GLboolean invert)
{
   (void) value; (void) invert;
   _mesa_noop_entrypoint("glSampleCoveragex");
}

static void GLAPIENTRY noopScalex(GLfixed x, GLfixed y, GLfixed z)
{
   (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glScalex");
}

static void GLAPIENTRY noopTexEnvx(GLenum target, GLenum pname, GLfixed param)
{
   (void) target; (void) pname; (void) param;
   _mesa_noop_entrypoint("glTexEnvx");
}

static void GLAPIENTRY noopTexEnvxv(GLenum target, GLenum pname, const GLfixed *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glTexEnvxv");
}

static void GLAPIENTRY noopTexParameterx(GLenum target, GLenum pname, GLfixed param)
{
   (void) target; (void) pname; (void) param;
   _mesa_noop_entrypoint("glTexParameterx");
}

static void GLAPIENTRY noopTranslatex(GLfixed x, GLfixed y, GLfixed z)
{
   (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glTranslatex");
}

static void GLAPIENTRY noopClipPlanef(GLenum plane, const GLfloat *equation)
{
   (void) plane; (void) equation;
   _mesa_noop_entrypoint("glClipPlanef");
}

static void GLAPIENTRY noopClipPlanex(GLenum plane, const GLfixed *equation)
{
   (void) plane; (void) equation;
   _mesa_noop_entrypoint("glClipPlanex");
}

static void GLAPIENTRY noopGetClipPlanef(GLenum plane, GLfloat *equation)
{
   (void) plane; (void) equation;
   _mesa_noop_entrypoint("glGetClipPlanef");
}

static void GLAPIENTRY noopGetClipPlanex(GLenum plane, GLfixed *equation)
{
   (void) plane; (void) equation;
   _mesa_noop_entrypoint("glGetClipPlanex");
}

static void GLAPIENTRY noopGetFixedv(GLenum pname, GLfixed *params)
{
   (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetFixedv");
}

static void GLAPIENTRY noopGetLightxv(GLenum light, GLenum pname, GLfixed *params)
{
   (void) light; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetLightxv");
}

static void GLAPIENTRY noopGetMaterialxv(GLenum face, GLenum pname, GLfixed *params)
{
   (void) face; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetMaterialxv");
}

static void GLAPIENTRY noopGetTexEnvxv(GLenum target, GLenum pname, GLfixed *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetTexEnvxv");
}

static void GLAPIENTRY noopGetTexParameterxv(GLenum target, GLenum pname, GLfixed *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetTexParameterxv");
}

static void GLAPIENTRY noopPointParameterx(GLenum pname, GLfixed param)
{
   (void) pname; (void) param;
   _mesa_noop_entrypoint("glPointParameterx");
}

static void GLAPIENTRY noopPointParameterxv(GLenum pname, const GLfixed *params)
{
   (void) pname; (void) params;
   _mesa_noop_entrypoint("glPointParameterxv");
}

static void GLAPIENTRY noopTexParameterxv(GLenum target, GLenum pname, const GLfixed *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glTexParameterxv");
}

static void GLAPIENTRY noopBlendBarrier(void)
{
      _mesa_noop_entrypoint("glBlendBarrier");
}

static void GLAPIENTRY noopPrimitiveBoundingBox(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)
{
   (void) minX; (void) minY; (void) minZ; (void) minW; (void) maxX; (void) maxY; (void) maxZ; (void) maxW;
   _mesa_noop_entrypoint("glPrimitiveBoundingBox");
}

static void GLAPIENTRY noopMaxShaderCompilerThreadsKHR(GLuint count)
{
   (void) count;
   _mesa_noop_entrypoint("glMaxShaderCompilerThreadsKHR");
}

static void GLAPIENTRY noopMatrixLoadfEXT(GLenum matrixMode, const GLfloat *m)
{
   (void) matrixMode; (void) m;
   _mesa_noop_entrypoint("glMatrixLoadfEXT");
}

static void GLAPIENTRY noopMatrixLoaddEXT(GLenum matrixMode, const GLdouble *m)
{
   (void) matrixMode; (void) m;
   _mesa_noop_entrypoint("glMatrixLoaddEXT");
}

static void GLAPIENTRY noopMatrixMultfEXT(GLenum matrixMode, const GLfloat *m)
{
   (void) matrixMode; (void) m;
   _mesa_noop_entrypoint("glMatrixMultfEXT");
}

static void GLAPIENTRY noopMatrixMultdEXT(GLenum matrixMode, const GLdouble *m)
{
   (void) matrixMode; (void) m;
   _mesa_noop_entrypoint("glMatrixMultdEXT");
}

static void GLAPIENTRY noopMatrixLoadIdentityEXT(GLenum matrixMode)
{
   (void) matrixMode;
   _mesa_noop_entrypoint("glMatrixLoadIdentityEXT");
}

static void GLAPIENTRY noopMatrixRotatefEXT(GLenum matrixMode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
   (void) matrixMode; (void) angle; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glMatrixRotatefEXT");
}

static void GLAPIENTRY noopMatrixRotatedEXT(GLenum matrixMode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
   (void) matrixMode; (void) angle; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glMatrixRotatedEXT");
}

static void GLAPIENTRY noopMatrixScalefEXT(GLenum matrixMode, GLfloat x, GLfloat y, GLfloat z)
{
   (void) matrixMode; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glMatrixScalefEXT");
}

static void GLAPIENTRY noopMatrixScaledEXT(GLenum matrixMode, GLdouble x, GLdouble y, GLdouble z)
{
   (void) matrixMode; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glMatrixScaledEXT");
}

static void GLAPIENTRY noopMatrixTranslatefEXT(GLenum matrixMode, GLfloat x, GLfloat y, GLfloat z)
{
   (void) matrixMode; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glMatrixTranslatefEXT");
}

static void GLAPIENTRY noopMatrixTranslatedEXT(GLenum matrixMode, GLdouble x, GLdouble y, GLdouble z)
{
   (void) matrixMode; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glMatrixTranslatedEXT");
}

static void GLAPIENTRY noopMatrixOrthoEXT(GLenum matrixMode, GLdouble l, GLdouble r, GLdouble b, GLdouble t, GLdouble n, GLdouble f)
{
   (void) matrixMode; (void) l; (void) r; (void) b; (void) t; (void) n; (void) f;
   _mesa_noop_entrypoint("glMatrixOrthoEXT");
}

static void GLAPIENTRY noopMatrixFrustumEXT(GLenum matrixMode, GLdouble l, GLdouble r, GLdouble b, GLdouble t, GLdouble n, GLdouble f)
{
   (void) matrixMode; (void) l; (void) r; (void) b; (void) t; (void) n; (void) f;
   _mesa_noop_entrypoint("glMatrixFrustumEXT");
}

static void GLAPIENTRY noopMatrixPushEXT(GLenum matrixMode)
{
   (void) matrixMode;
   _mesa_noop_entrypoint("glMatrixPushEXT");
}

static void GLAPIENTRY noopMatrixPopEXT(GLenum matrixMode)
{
   (void) matrixMode;
   _mesa_noop_entrypoint("glMatrixPopEXT");
}

static void GLAPIENTRY noopMatrixLoadTransposefEXT(GLenum matrixMode, const GLfloat *m)
{
   (void) matrixMode; (void) m;
   _mesa_noop_entrypoint("glMatrixLoadTransposefEXT");
}

static void GLAPIENTRY noopMatrixLoadTransposedEXT(GLenum matrixMode, const GLdouble *m)
{
   (void) matrixMode; (void) m;
   _mesa_noop_entrypoint("glMatrixLoadTransposedEXT");
}

static void GLAPIENTRY noopMatrixMultTransposefEXT(GLenum matrixMode, const GLfloat *m)
{
   (void) matrixMode; (void) m;
   _mesa_noop_entrypoint("glMatrixMultTransposefEXT");
}

static void GLAPIENTRY noopMatrixMultTransposedEXT(GLenum matrixMode, const GLdouble *m)
{
   (void) matrixMode; (void) m;
   _mesa_noop_entrypoint("glMatrixMultTransposedEXT");
}

static void GLAPIENTRY noopBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture)
{
   (void) texunit; (void) target; (void) texture;
   _mesa_noop_entrypoint("glBindMultiTextureEXT");
}

static void GLAPIENTRY noopNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
   (void) buffer; (void) size; (void) data; (void) usage;
   _mesa_noop_entrypoint("glNamedBufferDataEXT");
}

static void GLAPIENTRY noopNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
   (void) buffer; (void) offset; (void) size; (void) data;
   _mesa_noop_entrypoint("glNamedBufferSubDataEXT");
}

static void GLAPIENTRY noopNamedBufferStorageEXT(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLbitfield flags)
{
   (void) buffer; (void) size; (void) data; (void) flags;
   _mesa_noop_entrypoint("glNamedBufferStorageEXT");
}

static GLvoid * GLAPIENTRY noopMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
   (void) buffer; (void) offset; (void) length; (void) access;
   _mesa_noop_entrypoint("glMapNamedBufferRangeEXT");
   return (GLvoid *) 0;
}

static void GLAPIENTRY noopTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   (void) texture; (void) target; (void) level; (void) internalFormat; (void) width; (void) border; (void) format; (void) type; (void) pixels;
   _mesa_noop_entrypoint("glTextureImage1DEXT");
}

static void GLAPIENTRY noopTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   (void) texture; (void) target; (void) level; (void) internalFormat; (void) width; (void) height; (void) border; (void) format; (void) type; (void) pixels;
   _mesa_noop_entrypoint("glTextureImage2DEXT");
}

static void GLAPIENTRY noopTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   (void) texture; (void) target; (void) level; (void) internalFormat; (void) width; (void) height; (void) depth; (void) border; (void) format; (void) type; (void) pixels;
   _mesa_noop_entrypoint("glTextureImage3DEXT");
}

static void GLAPIENTRY noopTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
   (void) texture; (void) target; (void) level; (void) xoffset; (void) width; (void) format; (void) type; (void) pixels;
   _mesa_noop_entrypoint("glTextureSubImage1DEXT");
}

static void GLAPIENTRY noopTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
   (void) texture; (void) target; (void) level; (void) xoffset; (void) yoffset; (void) width; (void) height; (void) format; (void) type; (void) pixels;
   _mesa_noop_entrypoint("glTextureSubImage2DEXT");
}

static void GLAPIENTRY noopTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
   (void) texture; (void) target; (void) level; (void) xoffset; (void) yoffset; (void) zoffset; (void) width; (void) height; (void) depth; (void) format; (void) type; (void) pixels;
   _mesa_noop_entrypoint("glTextureSubImage3DEXT");
}

static void GLAPIENTRY noopCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, int border)
{
   (void) texture; (void) target; (void) level; (void) internalFormat; (void) x; (void) y; (void) width; (void) border;
   _mesa_noop_entrypoint("glCopyTextureImage1DEXT");
}

static void GLAPIENTRY noopCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, int border)
{
   (void) texture; (void) target; (void) level; (void) internalFormat; (void) x; (void) y; (void) width; (void) height; (void) border;
   _mesa_noop_entrypoint("glCopyTextureImage2DEXT");
}

static void GLAPIENTRY noopCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
   (void) texture; (void) target; (void) level; (void) xoffset; (void) x; (void) y; (void) width;
   _mesa_noop_entrypoint("glCopyTextureSubImage1DEXT");
}

static void GLAPIENTRY noopCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   (void) texture; (void) target; (void) level; (void) xoffset; (void) yoffset; (void) x; (void) y; (void) width; (void) height;
   _mesa_noop_entrypoint("glCopyTextureSubImage2DEXT");
}

static void GLAPIENTRY noopCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   (void) texture; (void) target; (void) level; (void) xoffset; (void) yoffset; (void) zoffset; (void) x; (void) y; (void) width; (void) height;
   _mesa_noop_entrypoint("glCopyTextureSubImage3DEXT");
}

static GLvoid * GLAPIENTRY noopMapNamedBufferEXT(GLuint buffer, GLenum access)
{
   (void) buffer; (void) access;
   _mesa_noop_entrypoint("glMapNamedBufferEXT");
   return (GLvoid *) 0;
}

static void GLAPIENTRY noopGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params)
{
   (void) texture; (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetTextureParameterivEXT");
}

static void GLAPIENTRY noopGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, float *params)
{
   (void) texture; (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetTextureParameterfvEXT");
}

static void GLAPIENTRY noopTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, int param)
{
   (void) texture; (void) target; (void) pname; (void) param;
   _mesa_noop_entrypoint("glTextureParameteriEXT");
}

static void GLAPIENTRY noopTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params)
{
   (void) texture; (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glTextureParameterivEXT");
}

static void GLAPIENTRY noopTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, float param)
{
   (void) texture; (void) target; (void) pname; (void) param;
   _mesa_noop_entrypoint("glTextureParameterfEXT");
}

static void GLAPIENTRY noopTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const float *params)
{
   (void) texture; (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glTextureParameterfvEXT");
}

static void GLAPIENTRY noopGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
   (void) texture; (void) target; (void) level; (void) format; (void) type; (void) pixels;
   _mesa_noop_entrypoint("glGetTextureImageEXT");
}

static void GLAPIENTRY noopGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params)
{
   (void) texture; (void) target; (void) level; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetTextureLevelParameterivEXT");
}

static void GLAPIENTRY noopGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, float *params)
{
   (void) texture; (void) target; (void) level; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetTextureLevelParameterfvEXT");
}

static void GLAPIENTRY noopGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
   (void) buffer; (void) offset; (void) size; (void) data;
   _mesa_noop_entrypoint("glGetNamedBufferSubDataEXT");
}

static void GLAPIENTRY noopGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, GLvoid **params)
{
   (void) buffer; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetNamedBufferPointervEXT");
}

static void GLAPIENTRY noopGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint *params)
{
   (void) buffer; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetNamedBufferParameterivEXT");
}

static void GLAPIENTRY noopFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length)
{
   (void) buffer; (void) offset; (void) length;
   _mesa_noop_entrypoint("glFlushMappedNamedBufferRangeEXT");
}

static void GLAPIENTRY noopFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode)
{
   (void) framebuffer; (void) mode;
   _mesa_noop_entrypoint("glFramebufferDrawBufferEXT");
}

static void GLAPIENTRY noopFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum *bufs)
{
   (void) framebuffer; (void) n; (void) bufs;
   _mesa_noop_entrypoint("glFramebufferDrawBuffersEXT");
}

static void GLAPIENTRY noopFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode)
{
   (void) framebuffer; (void) mode;
   _mesa_noop_entrypoint("glFramebufferReadBufferEXT");
}

static void GLAPIENTRY noopGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *param)
{
   (void) framebuffer; (void) pname; (void) param;
   _mesa_noop_entrypoint("glGetFramebufferParameterivEXT");
}

static GLenum GLAPIENTRY noopCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target)
{
   (void) framebuffer; (void) target;
   _mesa_noop_entrypoint("glCheckNamedFramebufferStatusEXT");
   return (GLenum) 0;
}

static void GLAPIENTRY noopNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
   (void) framebuffer; (void) attachment; (void) textarget; (void) texture; (void) level;
   _mesa_noop_entrypoint("glNamedFramebufferTexture1DEXT");
}

static void GLAPIENTRY noopNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
   (void) framebuffer; (void) attachment; (void) textarget; (void) texture; (void) level;
   _mesa_noop_entrypoint("glNamedFramebufferTexture2DEXT");
}

static void GLAPIENTRY noopNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
   (void) framebuffer; (void) attachment; (void) textarget; (void) texture; (void) level; (void) zoffset;
   _mesa_noop_entrypoint("glNamedFramebufferTexture3DEXT");
}

static void GLAPIENTRY noopNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
   (void) framebuffer; (void) attachment; (void) renderbuffertarget; (void) renderbuffer;
   _mesa_noop_entrypoint("glNamedFramebufferRenderbufferEXT");
}

static void GLAPIENTRY noopGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)
{
   (void) framebuffer; (void) attachment; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetNamedFramebufferAttachmentParameterivEXT");
}

static void GLAPIENTRY noopEnableClientStateiEXT(GLenum array, GLuint index)
{
   (void) array; (void) index;
   _mesa_noop_entrypoint("glEnableClientStateiEXT");
}

static void GLAPIENTRY noopDisableClientStateiEXT(GLenum array, GLuint index)
{
   (void) array; (void) index;
   _mesa_noop_entrypoint("glDisableClientStateiEXT");
}

static void GLAPIENTRY noopGetPointerIndexedvEXT(GLenum target, GLuint index, GLvoid**params)
{
   (void) target; (void) index; (void) params;
   _mesa_noop_entrypoint("glGetPointerIndexedvEXT");
}

static void GLAPIENTRY noopMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
{
   (void) texunit; (void) target; (void) pname; (void) param;
   _mesa_noop_entrypoint("glMultiTexEnviEXT");
}

static void GLAPIENTRY noopMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *param)
{
   (void) texunit; (void) target; (void) pname; (void) param;
   _mesa_noop_entrypoint("glMultiTexEnvivEXT");
}

static void GLAPIENTRY noopMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
   (void) texunit; (void) target; (void) pname; (void) param;
   _mesa_noop_entrypoint("glMultiTexEnvfEXT");
}

static void GLAPIENTRY noopMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *param)
{
   (void) texunit; (void) target; (void) pname; (void) param;
   _mesa_noop_entrypoint("glMultiTexEnvfvEXT");
}

static void GLAPIENTRY noopGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *param)
{
   (void) texunit; (void) target; (void) pname; (void) param;
   _mesa_noop_entrypoint("glGetMultiTexEnvivEXT");
}

static void GLAPIENTRY noopGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *param)
{
   (void) texunit; (void) target; (void) pname; (void) param;
   _mesa_noop_entrypoint("glGetMultiTexEnvfvEXT");
}

static void GLAPIENTRY noopMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
{
   (void) texunit; (void) target; (void) pname; (void) param;
   _mesa_noop_entrypoint("glMultiTexParameteriEXT");
}

static void GLAPIENTRY noopMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint*param)
{
   (void) texunit; (void) target; (void) pname; (void) param;
   _mesa_noop_entrypoint("glMultiTexParameterivEXT");
}

static void GLAPIENTRY noopMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
   (void) texunit; (void) target; (void) pname; (void) param;
   _mesa_noop_entrypoint("glMultiTexParameterfEXT");
}

static void GLAPIENTRY noopMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat*param)
{
   (void) texunit; (void) target; (void) pname; (void) param;
   _mesa_noop_entrypoint("glMultiTexParameterfvEXT");
}

static void GLAPIENTRY noopGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid*pixels)
{
   (void) texunit; (void) target; (void) level; (void) format; (void) type; (void) pixels;
   _mesa_noop_entrypoint("glGetMultiTexImageEXT");
}

static void GLAPIENTRY noopMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid*pixels)
{
   (void) texunit; (void) target; (void) level; (void) internalformat; (void) width; (void) border; (void) format; (void) type; (void) pixels;
   _mesa_noop_entrypoint("glMultiTexImage1DEXT");
}

static void GLAPIENTRY noopMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid*pixels)
{
   (void) texunit; (void) target; (void) level; (void) internalformat; (void) width; (void) height; (void) border; (void) format; (void) type; (void) pixels;
   _mesa_noop_entrypoint("glMultiTexImage2DEXT");
}

static void GLAPIENTRY noopMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid*pixels)
{
   (void) texunit; (void) target; (void) level; (void) internalformat; (void) width; (void) height; (void) depth; (void) border; (void) format; (void) type; (void) pixels;
   _mesa_noop_entrypoint("glMultiTexImage3DEXT");
}

static void GLAPIENTRY noopMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid*pixels)
{
   (void) texunit; (void) target; (void) level; (void) xoffset; (void) width; (void) format; (void) type; (void) pixels;
   _mesa_noop_entrypoint("glMultiTexSubImage1DEXT");
}

static void GLAPIENTRY noopMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid*pixels)
{
   (void) texunit; (void) target; (void) level; (void) xoffset; (void) yoffset; (void) width; (void) height; (void) format; (void) type; (void) pixels;
   _mesa_noop_entrypoint("glMultiTexSubImage2DEXT");
}

static void GLAPIENTRY noopMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid*pixels)
{
   (void) texunit; (void) target; (void) level; (void) xoffset; (void) yoffset; (void) zoffset; (void) width; (void) height; (void) depth; (void) format; (void) type; (void) pixels;
   _mesa_noop_entrypoint("glMultiTexSubImage3DEXT");
}

static void GLAPIENTRY noopGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint*params)
{
   (void) texunit; (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetMultiTexParameterivEXT");
}

static void GLAPIENTRY noopGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat*params)
{
   (void) texunit; (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetMultiTexParameterfvEXT");
}

static void GLAPIENTRY noopCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
   (void) texunit; (void) target; (void) level; (void) internalformat; (void) x; (void) y; (void) width; (void) border;
   _mesa_noop_entrypoint("glCopyMultiTexImage1DEXT");
}

static void GLAPIENTRY noopCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
   (void) texunit; (void) target; (void) level; (void) internalformat; (void) x; (void) y; (void) width; (void) height; (void) border;
   _mesa_noop_entrypoint("glCopyMultiTexImage2DEXT");
}

static void GLAPIENTRY noopCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
   (void) texunit; (void) target; (void) level; (void) xoffset; (void) x; (void) y; (void) width;
   _mesa_noop_entrypoint("glCopyMultiTexSubImage1DEXT");
}

static void GLAPIENTRY noopCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   (void) texunit; (void) target; (void) level; (void) xoffset; (void) yoffset; (void) x; (void) y; (void) width; (void) height;
   _mesa_noop_entrypoint("glCopyMultiTexSubImage2DEXT");
}

static void GLAPIENTRY noopCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   (void) texunit; (void) target; (void) level; (void) xoffset; (void) yoffset; (void) zoffset; (void) x; (void) y; (void) width; (void) height;
   _mesa_noop_entrypoint("glCopyMultiTexSubImage3DEXT");
}

static void GLAPIENTRY noopMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param)
{
   (void) texunit; (void) coord; (void) pname; (void) param;
   _mesa_noop_entrypoint("glMultiTexGendEXT");
}

static void GLAPIENTRY noopMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble*param)
{
   (void) texunit; (void) coord; (void) pname; (void) param;
   _mesa_noop_entrypoint("glMultiTexGendvEXT");
}

static void GLAPIENTRY noopMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param)
{
   (void) texunit; (void) coord; (void) pname; (void) param;
   _mesa_noop_entrypoint("glMultiTexGenfEXT");
}

static void GLAPIENTRY noopMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *param)
{
   (void) texunit; (void) coord; (void) pname; (void) param;
   _mesa_noop_entrypoint("glMultiTexGenfvEXT");
}

static void GLAPIENTRY noopMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param)
{
   (void) texunit; (void) coord; (void) pname; (void) param;
   _mesa_noop_entrypoint("glMultiTexGeniEXT");
}

static void GLAPIENTRY noopMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint *param)
{
   (void) texunit; (void) coord; (void) pname; (void) param;
   _mesa_noop_entrypoint("glMultiTexGenivEXT");
}

static void GLAPIENTRY noopGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble *param)
{
   (void) texunit; (void) coord; (void) pname; (void) param;
   _mesa_noop_entrypoint("glGetMultiTexGendvEXT");
}

static void GLAPIENTRY noopGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat *param)
{
   (void) texunit; (void) coord; (void) pname; (void) param;
   _mesa_noop_entrypoint("glGetMultiTexGenfvEXT");
}

static void GLAPIENTRY noopGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint *param)
{
   (void) texunit; (void) coord; (void) pname; (void) param;
   _mesa_noop_entrypoint("glGetMultiTexGenivEXT");
}

static void GLAPIENTRY noopMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   (void) texunit; (void) size; (void) type; (void) stride; (void) pointer;
   _mesa_noop_entrypoint("glMultiTexCoordPointerEXT");
}

static void GLAPIENTRY noopBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format)
{
   (void) index; (void) texture; (void) level; (void) layered; (void) layer; (void) access; (void) format;
   _mesa_noop_entrypoint("glBindImageTextureEXT");
}

static void GLAPIENTRY noopCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei border, GLsizei imageSize, const GLvoid *data)
{
   (void) texture; (void) target; (void) level; (void) internalFormat; (void) width; (void) border; (void) imageSize; (void) data;
   _mesa_noop_entrypoint("glCompressedTextureImage1DEXT");
}

static void GLAPIENTRY noopCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei border, GLsizei imageSize, const GLvoid *data)
{
   (void) texture; (void) target; (void) level; (void) internalFormat; (void) width; (void) height; (void) border; (void) imageSize; (void) data;
   _mesa_noop_entrypoint("glCompressedTextureImage2DEXT");
}

static void GLAPIENTRY noopCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei border, GLsizei imageSize, const GLvoid *data)
{
   (void) texture; (void) target; (void) level; (void) internalFormat; (void) width; (void) height; (void) depth; (void) border; (void) imageSize; (void) data;
   _mesa_noop_entrypoint("glCompressedTextureImage3DEXT");
}

static void GLAPIENTRY noopCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   (void) texture; (void) target; (void) level; (void) xoffset; (void) width; (void) format; (void) imageSize; (void) data;
   _mesa_noop_entrypoint("glCompressedTextureSubImage1DEXT");
}

static void GLAPIENTRY noopCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   (void) texture; (void) target; (void) level; (void) xoffset; (void) yoffset; (void) width; (void) height; (void) format; (void) imageSize; (void) data;
   _mesa_noop_entrypoint("glCompressedTextureSubImage2DEXT");
}

static void GLAPIENTRY noopCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   (void) texture; (void) target; (void) level; (void) xoffset; (void) yoffset; (void) zoffset; (void) width; (void) height; (void) depth; (void) format; (void) imageSize; (void) data;
   _mesa_noop_entrypoint("glCompressedTextureSubImage3DEXT");
}

static void GLAPIENTRY noopGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint level, GLvoid *img)
{
   (void) texture; (void) target; (void) level; (void) img;
   _mesa_noop_entrypoint("glGetCompressedTextureImageEXT");
}

static void GLAPIENTRY noopCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei border, GLsizei imageSize, const GLvoid *data)
{
   (void) texunit; (void) target; (void) level; (void) internalFormat; (void) width; (void) border; (void) imageSize; (void) data;
   _mesa_noop_entrypoint("glCompressedMultiTexImage1DEXT");
}

static void GLAPIENTRY noopCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei border, GLsizei imageSize, const GLvoid *data)
{
   (void) texunit; (void) target; (void) level; (void) internalFormat; (void) width; (void) height; (void) border; (void) imageSize; (void) data;
   _mesa_noop_entrypoint("glCompressedMultiTexImage2DEXT");
}

static void GLAPIENTRY noopCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei border, GLsizei imageSize, const GLvoid *data)
{
   (void) texunit; (void) target; (void) level; (void) internalFormat; (void) width; (void) height; (void) depth; (void) border; (void) imageSize; (void) data;
   _mesa_noop_entrypoint("glCompressedMultiTexImage3DEXT");
}

static void GLAPIENTRY noopCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   (void) texunit; (void) target; (void) level; (void) xoffset; (void) width; (void) format; (void) imageSize; (void) data;
   _mesa_noop_entrypoint("glCompressedMultiTexSubImage1DEXT");
}

static void GLAPIENTRY noopCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   (void) texunit; (void) target; (void) level; (void) xoffset; (void) yoffset; (void) width; (void) height; (void) format; (void) imageSize; (void) data;
   _mesa_noop_entrypoint("glCompressedMultiTexSubImage2DEXT");
}

static void GLAPIENTRY noopCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   (void) texunit; (void) target; (void) level; (void) xoffset; (void) yoffset; (void) zoffset; (void) width; (void) height; (void) depth; (void) format; (void) imageSize; (void) data;
   _mesa_noop_entrypoint("glCompressedMultiTexSubImage3DEXT");
}

static void GLAPIENTRY noopGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLvoid *img)
{
   (void) texunit; (void) target; (void) level; (void) img;
   _mesa_noop_entrypoint("glGetCompressedMultiTexImageEXT");
}

static void GLAPIENTRY noopGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint*params)
{
   (void) texunit; (void) target; (void) level; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetMultiTexLevelParameterivEXT");
}

static void GLAPIENTRY noopGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat*params)
{
   (void) texunit; (void) target; (void) level; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetMultiTexLevelParameterfvEXT");
}

static void GLAPIENTRY noopFramebufferParameteriMESA(GLenum target, GLenum pname, GLint param)
{
   (void) target; (void) pname; (void) param;
   _mesa_noop_entrypoint("glFramebufferParameteriMESA");
}

static void GLAPIENTRY noopGetFramebufferParameterivMESA(GLenum target, GLenum pname, GLint *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetFramebufferParameterivMESA");
}

static void GLAPIENTRY noopNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
{
   (void) renderbuffer; (void) internalformat; (void) width; (void) height;
   _mesa_noop_entrypoint("glNamedRenderbufferStorageEXT");
}

static void GLAPIENTRY noopGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint *params)
{
   (void) renderbuffer; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetNamedRenderbufferParameterivEXT");
}

static void GLAPIENTRY noopClientAttribDefaultEXT(GLbitfield mask)
{
   (void) mask;
   _mesa_noop_entrypoint("glClientAttribDefaultEXT");
}

static void GLAPIENTRY noopPushClientAttribDefaultEXT(GLbitfield mask)
{
   (void) mask;
   _mesa_noop_entrypoint("glPushClientAttribDefaultEXT");
}

static void GLAPIENTRY noopNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid*string)
{
   (void) program; (void) target; (void) format; (void) len; (void) string;
   _mesa_noop_entrypoint("glNamedProgramStringEXT");
}

static void GLAPIENTRY noopGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, GLvoid*string)
{
   (void) program; (void) target; (void) pname; (void) string;
   _mesa_noop_entrypoint("glGetNamedProgramStringEXT");
}

static void GLAPIENTRY noopNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   (void) program; (void) target; (void) index; (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glNamedProgramLocalParameter4fEXT");
}

static void GLAPIENTRY noopNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat*params)
{
   (void) program; (void) target; (void) index; (void) params;
   _mesa_noop_entrypoint("glNamedProgramLocalParameter4fvEXT");
}

static void GLAPIENTRY noopGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat*params)
{
   (void) program; (void) target; (void) index; (void) params;
   _mesa_noop_entrypoint("glGetNamedProgramLocalParameterfvEXT");
}

static void GLAPIENTRY noopNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   (void) program; (void) target; (void) index; (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glNamedProgramLocalParameter4dEXT");
}

static void GLAPIENTRY noopNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble*params)
{
   (void) program; (void) target; (void) index; (void) params;
   _mesa_noop_entrypoint("glNamedProgramLocalParameter4dvEXT");
}

static void GLAPIENTRY noopGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble*params)
{
   (void) program; (void) target; (void) index; (void) params;
   _mesa_noop_entrypoint("glGetNamedProgramLocalParameterdvEXT");
}

static void GLAPIENTRY noopGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint*params)
{
   (void) program; (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetNamedProgramivEXT");
}

static void GLAPIENTRY noopTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)
{
   (void) texture; (void) target; (void) internalformat; (void) buffer;
   _mesa_noop_entrypoint("glTextureBufferEXT");
}

static void GLAPIENTRY noopMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)
{
   (void) texunit; (void) target; (void) internalformat; (void) buffer;
   _mesa_noop_entrypoint("glMultiTexBufferEXT");
}

static void GLAPIENTRY noopTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint*params)
{
   (void) texture; (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glTextureParameterIivEXT");
}

static void GLAPIENTRY noopTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint*params)
{
   (void) texture; (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glTextureParameterIuivEXT");
}

static void GLAPIENTRY noopGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint*params)
{
   (void) texture; (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetTextureParameterIivEXT");
}

static void GLAPIENTRY noopGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint*params)
{
   (void) texture; (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetTextureParameterIuivEXT");
}

static void GLAPIENTRY noopMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint*params)
{
   (void) texunit; (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glMultiTexParameterIivEXT");
}

static void GLAPIENTRY noopMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint*params)
{
   (void) texunit; (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glMultiTexParameterIuivEXT");
}

static void GLAPIENTRY noopGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint*params)
{
   (void) texunit; (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetMultiTexParameterIivEXT");
}

static void GLAPIENTRY noopGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint*params)
{
   (void) texunit; (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetMultiTexParameterIuivEXT");
}

static void GLAPIENTRY noopNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat*params)
{
   (void) program; (void) target; (void) index; (void) count; (void) params;
   _mesa_noop_entrypoint("glNamedProgramLocalParameters4fvEXT");
}

static void GLAPIENTRY noopGenerateTextureMipmapEXT(GLuint texture, GLenum target)
{
   (void) texture; (void) target;
   _mesa_noop_entrypoint("glGenerateTextureMipmapEXT");
}

static void GLAPIENTRY noopGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target)
{
   (void) texunit; (void) target;
   _mesa_noop_entrypoint("glGenerateMultiTexMipmapEXT");
}

static void GLAPIENTRY noopNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
   (void) renderbuffer; (void) samples; (void) internalformat; (void) width; (void) height;
   _mesa_noop_entrypoint("glNamedRenderbufferStorageMultisampleEXT");
}

static void GLAPIENTRY noopNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
   (void) readBuffer; (void) writeBuffer; (void) readOffset; (void) writeOffset; (void) size;
   _mesa_noop_entrypoint("glNamedCopyBufferSubDataEXT");
}

static void GLAPIENTRY noopVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
   (void) vaobj; (void) buffer; (void) size; (void) type; (void) stride; (void) offset;
   _mesa_noop_entrypoint("glVertexArrayVertexOffsetEXT");
}

static void GLAPIENTRY noopVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
   (void) vaobj; (void) buffer; (void) size; (void) type; (void) stride; (void) offset;
   _mesa_noop_entrypoint("glVertexArrayColorOffsetEXT");
}

static void GLAPIENTRY noopVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset)
{
   (void) vaobj; (void) buffer; (void) stride; (void) offset;
   _mesa_noop_entrypoint("glVertexArrayEdgeFlagOffsetEXT");
}

static void GLAPIENTRY noopVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
{
   (void) vaobj; (void) buffer; (void) type; (void) stride; (void) offset;
   _mesa_noop_entrypoint("glVertexArrayIndexOffsetEXT");
}

static void GLAPIENTRY noopVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
{
   (void) vaobj; (void) buffer; (void) type; (void) stride; (void) offset;
   _mesa_noop_entrypoint("glVertexArrayNormalOffsetEXT");
}

static void GLAPIENTRY noopVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
   (void) vaobj; (void) buffer; (void) size; (void) type; (void) stride; (void) offset;
   _mesa_noop_entrypoint("glVertexArrayTexCoordOffsetEXT");
}

static void GLAPIENTRY noopVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
   (void) vaobj; (void) buffer; (void) texunit; (void) size; (void) type; (void) stride; (void) offset;
   _mesa_noop_entrypoint("glVertexArrayMultiTexCoordOffsetEXT");
}

static void GLAPIENTRY noopVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
{
   (void) vaobj; (void) buffer; (void) type; (void) stride; (void) offset;
   _mesa_noop_entrypoint("glVertexArrayFogCoordOffsetEXT");
}

static void GLAPIENTRY noopVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
   (void) vaobj; (void) buffer; (void) size; (void) type; (void) stride; (void) offset;
   _mesa_noop_entrypoint("glVertexArraySecondaryColorOffsetEXT");
}

static void GLAPIENTRY noopVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset)
{
   (void) vaobj; (void) buffer; (void) index; (void) size; (void) type; (void) normalized; (void) stride; (void) offset;
   _mesa_noop_entrypoint("glVertexArrayVertexAttribOffsetEXT");
}

static void GLAPIENTRY noopVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
   (void) vaobj; (void) buffer; (void) index; (void) size; (void) type; (void) stride; (void) offset;
   _mesa_noop_entrypoint("glVertexArrayVertexAttribIOffsetEXT");
}

static void GLAPIENTRY noopEnableVertexArrayEXT(GLuint vaobj, GLenum array)
{
   (void) vaobj; (void) array;
   _mesa_noop_entrypoint("glEnableVertexArrayEXT");
}

static void GLAPIENTRY noopDisableVertexArrayEXT(GLuint vaobj, GLenum array)
{
   (void) vaobj; (void) array;
   _mesa_noop_entrypoint("glDisableVertexArrayEXT");
}

static void GLAPIENTRY noopEnableVertexArrayAttribEXT(GLuint vaobj, GLuint index)
{
   (void) vaobj; (void) index;
   _mesa_noop_entrypoint("glEnableVertexArrayAttribEXT");
}

static void GLAPIENTRY noopDisableVertexArrayAttribEXT(GLuint vaobj, GLuint index)
{
   (void) vaobj; (void) index;
   _mesa_noop_entrypoint("glDisableVertexArrayAttribEXT");
}

static void GLAPIENTRY noopGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint*param)
{
   (void) vaobj; (void) pname; (void) param;
   _mesa_noop_entrypoint("glGetVertexArrayIntegervEXT");
}

static void GLAPIENTRY noopGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, GLvoid**param)
{
   (void) vaobj; (void) pname; (void) param;
   _mesa_noop_entrypoint("glGetVertexArrayPointervEXT");
}

static void GLAPIENTRY noopGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint*param)
{
   (void) vaobj; (void) index; (void) pname; (void) param;
   _mesa_noop_entrypoint("glGetVertexArrayIntegeri_vEXT");
}

static void GLAPIENTRY noopGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLvoid**param)
{
   (void) vaobj; (void) index; (void) pname; (void) param;
   _mesa_noop_entrypoint("glGetVertexArrayPointeri_vEXT");
}

static void GLAPIENTRY noopClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)
{
   (void) buffer; (void) internalformat; (void) format; (void) type; (void) data;
   _mesa_noop_entrypoint("glClearNamedBufferDataEXT");
}

static void GLAPIENTRY noopClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)
{
   (void) buffer; (void) internalformat; (void) offset; (void) size; (void) format; (void) type; (void) data;
   _mesa_noop_entrypoint("glClearNamedBufferSubDataEXT");
}

static void GLAPIENTRY noopNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param)
{
   (void) framebuffer; (void) pname; (void) param;
   _mesa_noop_entrypoint("glNamedFramebufferParameteriEXT");
}

static void GLAPIENTRY noopGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint*params)
{
   (void) framebuffer; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetNamedFramebufferParameterivEXT");
}

static void GLAPIENTRY noopVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
   (void) vaobj; (void) buffer; (void) index; (void) size; (void) type; (void) stride; (void) offset;
   _mesa_noop_entrypoint("glVertexArrayVertexAttribLOffsetEXT");
}

static void GLAPIENTRY noopVertexArrayVertexAttribDivisorEXT(GLuint vaobj, GLuint index, GLuint divisor)
{
   (void) vaobj; (void) index; (void) divisor;
   _mesa_noop_entrypoint("glVertexArrayVertexAttribDivisorEXT");
}

static void GLAPIENTRY noopTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
   (void) texture; (void) target; (void) internalformat; (void) buffer; (void) offset; (void) size;
   _mesa_noop_entrypoint("glTextureBufferRangeEXT");
}

static void GLAPIENTRY noopTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
   (void) texture; (void) target; (void) samples; (void) internalformat; (void) width; (void) height; (void) fixedsamplelocations;
   _mesa_noop_entrypoint("glTextureStorage2DMultisampleEXT");
}

static void GLAPIENTRY noopTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
   (void) texture; (void) target; (void) samples; (void) internalformat; (void) width; (void) height; (void) depth; (void) fixedsamplelocations;
   _mesa_noop_entrypoint("glTextureStorage3DMultisampleEXT");
}

static void GLAPIENTRY noopVertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
   (void) vaobj; (void) bindingindex; (void) buffer; (void) offset; (void) stride;
   _mesa_noop_entrypoint("glVertexArrayBindVertexBufferEXT");
}

static void GLAPIENTRY noopVertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
   (void) vaobj; (void) attribindex; (void) size; (void) type; (void) normalized; (void) relativeoffset;
   _mesa_noop_entrypoint("glVertexArrayVertexAttribFormatEXT");
}

static void GLAPIENTRY noopVertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
   (void) vaobj; (void) attribindex; (void) size; (void) type; (void) relativeoffset;
   _mesa_noop_entrypoint("glVertexArrayVertexAttribIFormatEXT");
}

static void GLAPIENTRY noopVertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
   (void) vaobj; (void) attribindex; (void) size; (void) type; (void) relativeoffset;
   _mesa_noop_entrypoint("glVertexArrayVertexAttribLFormatEXT");
}

static void GLAPIENTRY noopVertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex)
{
   (void) vaobj; (void) attribindex; (void) bindingindex;
   _mesa_noop_entrypoint("glVertexArrayVertexAttribBindingEXT");
}

static void GLAPIENTRY noopVertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor)
{
   (void) vaobj; (void) bindingindex; (void) divisor;
   _mesa_noop_entrypoint("glVertexArrayVertexBindingDivisorEXT");
}

static void GLAPIENTRY noopNamedBufferPageCommitmentEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)
{
   (void) buffer; (void) offset; (void) size; (void) commit;
   _mesa_noop_entrypoint("glNamedBufferPageCommitmentEXT");
}

static void GLAPIENTRY noopNamedStringARB(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string)
{
   (void) type; (void) namelen; (void) name; (void) stringlen; (void) string;
   _mesa_noop_entrypoint("glNamedStringARB");
}

static void GLAPIENTRY noopDeleteNamedStringARB(GLint namelen, const GLchar *name)
{
   (void) namelen; (void) name;
   _mesa_noop_entrypoint("glDeleteNamedStringARB");
}

static void GLAPIENTRY noopCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar * const *path, const GLint *length)
{
   (void) shader; (void) count; (void) path; (void) length;
   _mesa_noop_entrypoint("glCompileShaderIncludeARB");
}

static GLboolean GLAPIENTRY noopIsNamedStringARB(GLint namelen, const GLchar *name)
{
   (void) namelen; (void) name;
   _mesa_noop_entrypoint("glIsNamedStringARB");
   return (GLboolean) 0;
}

static void GLAPIENTRY noopGetNamedStringARB(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string)
{
   (void) namelen; (void) name; (void) bufSize; (void) stringlen; (void) string;
   _mesa_noop_entrypoint("glGetNamedStringARB");
}

static void GLAPIENTRY noopGetNamedStringivARB(GLint namelen, const GLchar *name, GLenum pname, GLint *params)
{
   (void) namelen; (void) name; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetNamedStringivARB");
}

static void GLAPIENTRY noopEGLImageTargetTexStorageEXT(GLenum target, GLvoid *image, const GLint *attrib_list)
{
   (void) target; (void) image; (void) attrib_list;
   _mesa_noop_entrypoint("glEGLImageTargetTexStorageEXT");
}

static void GLAPIENTRY noopEGLImageTargetTextureStorageEXT(GLuint texture, GLvoid *image, const GLint *attrib_list)
{
   (void) texture; (void) image; (void) attrib_list;
   _mesa_noop_entrypoint("glEGLImageTargetTextureStorageEXT");
}

static void GLAPIENTRY noopCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
{
   (void) srcName; (void) srcTarget; (void) srcLevel; (void) srcX; (void) srcY; (void) srcZ; (void) dstName; (void) dstTarget; (void) dstLevel; (void) dstX; (void) dstY; (void) dstZ; (void) width; (void) height; (void) depth;
   _mesa_noop_entrypoint("glCopyImageSubDataNV");
}

static void GLAPIENTRY noopViewportSwizzleNV(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew)
{
   (void) index; (void) swizzlex; (void) swizzley; (void) swizzlez; (void) swizzlew;
   _mesa_noop_entrypoint("glViewportSwizzleNV");
}

static void GLAPIENTRY noopAlphaToCoverageDitherControlNV(GLenum mode)
{
   (void) mode;
   _mesa_noop_entrypoint("glAlphaToCoverageDitherControlNV");
}

static void GLAPIENTRY noopInternalBufferSubDataCopyMESA(GLintptr srcBuffer, GLuint srcOffset, GLuint dstTargetOrName, GLintptr dstOffset, GLsizeiptr size, GLboolean named, GLboolean ext_dsa)
{
   (void) srcBuffer; (void) srcOffset; (void) dstTargetOrName; (void) dstOffset; (void) size; (void) named; (void) ext_dsa;
   _mesa_noop_entrypoint("glInternalBufferSubDataCopyMESA");
}

static void GLAPIENTRY noopVertex2hNV(GLhalfNV x, GLhalfNV y)
{
   (void) x; (void) y;
   _mesa_noop_entrypoint("glVertex2hNV");
}

static void GLAPIENTRY noopVertex2hvNV(const GLhalfNV *v)
{
   (void) v;
   _mesa_noop_entrypoint("glVertex2hvNV");
}

static void GLAPIENTRY noopVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z)
{
   (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glVertex3hNV");
}

static void GLAPIENTRY noopVertex3hvNV(const GLhalfNV *v)
{
   (void) v;
   _mesa_noop_entrypoint("glVertex3hvNV");
}

static void GLAPIENTRY noopVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
{
   (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glVertex4hNV");
}

static void GLAPIENTRY noopVertex4hvNV(const GLhalfNV *v)
{
   (void) v;
   _mesa_noop_entrypoint("glVertex4hvNV");
}

static void GLAPIENTRY noopNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)
{
   (void) nx; (void) ny; (void) nz;
   _mesa_noop_entrypoint("glNormal3hNV");
}

static void GLAPIENTRY noopNormal3hvNV(const GLhalfNV *v)
{
   (void) v;
   _mesa_noop_entrypoint("glNormal3hvNV");
}

static void GLAPIENTRY noopColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
{
   (void) red; (void) green; (void) blue;
   _mesa_noop_entrypoint("glColor3hNV");
}

static void GLAPIENTRY noopColor3hvNV(const GLhalfNV *v)
{
   (void) v;
   _mesa_noop_entrypoint("glColor3hvNV");
}

static void GLAPIENTRY noopColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)
{
   (void) red; (void) green; (void) blue; (void) alpha;
   _mesa_noop_entrypoint("glColor4hNV");
}

static void GLAPIENTRY noopColor4hvNV(const GLhalfNV *v)
{
   (void) v;
   _mesa_noop_entrypoint("glColor4hvNV");
}

static void GLAPIENTRY noopTexCoord1hNV(GLhalfNV s)
{
   (void) s;
   _mesa_noop_entrypoint("glTexCoord1hNV");
}

static void GLAPIENTRY noopTexCoord1hvNV(const GLhalfNV *v)
{
   (void) v;
   _mesa_noop_entrypoint("glTexCoord1hvNV");
}

static void GLAPIENTRY noopTexCoord2hNV(GLhalfNV s, GLhalfNV t)
{
   (void) s; (void) t;
   _mesa_noop_entrypoint("glTexCoord2hNV");
}

static void GLAPIENTRY noopTexCoord2hvNV(const GLhalfNV *v)
{
   (void) v;
   _mesa_noop_entrypoint("glTexCoord2hvNV");
}

static void GLAPIENTRY noopTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r)
{
   (void) s; (void) t; (void) r;
   _mesa_noop_entrypoint("glTexCoord3hNV");
}

static void GLAPIENTRY noopTexCoord3hvNV(const GLhalfNV *v)
{
   (void) v;
   _mesa_noop_entrypoint("glTexCoord3hvNV");
}

static void GLAPIENTRY noopTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
{
   (void) s; (void) t; (void) r; (void) q;
   _mesa_noop_entrypoint("glTexCoord4hNV");
}

static void GLAPIENTRY noopTexCoord4hvNV(const GLhalfNV *v)
{
   (void) v;
   _mesa_noop_entrypoint("glTexCoord4hvNV");
}

static void GLAPIENTRY noopMultiTexCoord1hNV(GLenum target, GLhalfNV s)
{
   (void) target; (void) s;
   _mesa_noop_entrypoint("glMultiTexCoord1hNV");
}

static void GLAPIENTRY noopMultiTexCoord1hvNV(GLenum target, const GLhalfNV *v)
{
   (void) target; (void) v;
   _mesa_noop_entrypoint("glMultiTexCoord1hvNV");
}

static void GLAPIENTRY noopMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t)
{
   (void) target; (void) s; (void) t;
   _mesa_noop_entrypoint("glMultiTexCoord2hNV");
}

static void GLAPIENTRY noopMultiTexCoord2hvNV(GLenum target, const GLhalfNV *v)
{
   (void) target; (void) v;
   _mesa_noop_entrypoint("glMultiTexCoord2hvNV");
}

static void GLAPIENTRY noopMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)
{
   (void) target; (void) s; (void) t; (void) r;
   _mesa_noop_entrypoint("glMultiTexCoord3hNV");
}

static void GLAPIENTRY noopMultiTexCoord3hvNV(GLenum target, const GLhalfNV *v)
{
   (void) target; (void) v;
   _mesa_noop_entrypoint("glMultiTexCoord3hvNV");
}

static void GLAPIENTRY noopMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
{
   (void) target; (void) s; (void) t; (void) r; (void) q;
   _mesa_noop_entrypoint("glMultiTexCoord4hNV");
}

static void GLAPIENTRY noopMultiTexCoord4hvNV(GLenum target, const GLhalfNV *v)
{
   (void) target; (void) v;
   _mesa_noop_entrypoint("glMultiTexCoord4hvNV");
}

static void GLAPIENTRY noopFogCoordhNV(GLhalfNV x)
{
   (void) x;
   _mesa_noop_entrypoint("glFogCoordhNV");
}

static void GLAPIENTRY noopFogCoordhvNV(const GLhalfNV *v)
{
   (void) v;
   _mesa_noop_entrypoint("glFogCoordhvNV");
}

static void GLAPIENTRY noopSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
{
   (void) red; (void) green; (void) blue;
   _mesa_noop_entrypoint("glSecondaryColor3hNV");
}

static void GLAPIENTRY noopSecondaryColor3hvNV(const GLhalfNV *v)
{
   (void) v;
   _mesa_noop_entrypoint("glSecondaryColor3hvNV");
}

static void GLAPIENTRY noopInternalSetError(GLenum error)
{
   (void) error;
   _mesa_noop_entrypoint("glInternalSetError");
}

static void GLAPIENTRY noopVertexAttrib1hNV(GLuint index, GLhalfNV x)
{
   (void) index; (void) x;
   _mesa_noop_entrypoint("glVertexAttrib1hNV");
}

static void GLAPIENTRY noopVertexAttrib1hvNV(GLuint index, const GLhalfNV *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib1hvNV");
}

static void GLAPIENTRY noopVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y)
{
   (void) index; (void) x; (void) y;
   _mesa_noop_entrypoint("glVertexAttrib2hNV");
}

static void GLAPIENTRY noopVertexAttrib2hvNV(GLuint index, const GLhalfNV *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib2hvNV");
}

static void GLAPIENTRY noopVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)
{
   (void) index; (void) x; (void) y; (void) z;
   _mesa_noop_entrypoint("glVertexAttrib3hNV");
}

static void GLAPIENTRY noopVertexAttrib3hvNV(GLuint index, const GLhalfNV *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib3hvNV");
}

static void GLAPIENTRY noopVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
{
   (void) index; (void) x; (void) y; (void) z; (void) w;
   _mesa_noop_entrypoint("glVertexAttrib4hNV");
}

static void GLAPIENTRY noopVertexAttrib4hvNV(GLuint index, const GLhalfNV *v)
{
   (void) index; (void) v;
   _mesa_noop_entrypoint("glVertexAttrib4hvNV");
}

static void GLAPIENTRY noopVertexAttribs1hvNV(GLuint index, GLsizei n, const GLhalfNV *v)
{
   (void) index; (void) n; (void) v;
   _mesa_noop_entrypoint("glVertexAttribs1hvNV");
}

static void GLAPIENTRY noopVertexAttribs2hvNV(GLuint index, GLsizei n, const GLhalfNV *v)
{
   (void) index; (void) n; (void) v;
   _mesa_noop_entrypoint("glVertexAttribs2hvNV");
}

static void GLAPIENTRY noopVertexAttribs3hvNV(GLuint index, GLsizei n, const GLhalfNV *v)
{
   (void) index; (void) n; (void) v;
   _mesa_noop_entrypoint("glVertexAttribs3hvNV");
}

static void GLAPIENTRY noopVertexAttribs4hvNV(GLuint index, GLsizei n, const GLhalfNV *v)
{
   (void) index; (void) n; (void) v;
   _mesa_noop_entrypoint("glVertexAttribs4hvNV");
}

static void GLAPIENTRY noopTexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
{
   (void) target; (void) level; (void) xoffset; (void) yoffset; (void) zoffset; (void) width; (void) height; (void) depth; (void) commit;
   _mesa_noop_entrypoint("glTexPageCommitmentARB");
}

static void GLAPIENTRY noopTexturePageCommitmentEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
{
   (void) texture; (void) level; (void) xoffset; (void) yoffset; (void) zoffset; (void) width; (void) height; (void) depth; (void) commit;
   _mesa_noop_entrypoint("glTexturePageCommitmentEXT");
}

static void GLAPIENTRY noopImportMemoryWin32HandleEXT(GLuint memory, GLuint64 size, GLenum handleType, GLvoid *handle)
{
   (void) memory; (void) size; (void) handleType; (void) handle;
   _mesa_noop_entrypoint("glImportMemoryWin32HandleEXT");
}

static void GLAPIENTRY noopImportSemaphoreWin32HandleEXT(GLuint semaphore, GLenum handleType, GLvoid *handle)
{
   (void) semaphore; (void) handleType; (void) handle;
   _mesa_noop_entrypoint("glImportSemaphoreWin32HandleEXT");
}

static void GLAPIENTRY noopImportMemoryWin32NameEXT(GLuint memory, GLuint64 size, GLenum handleType, const GLvoid *name)
{
   (void) memory; (void) size; (void) handleType; (void) name;
   _mesa_noop_entrypoint("glImportMemoryWin32NameEXT");
}

static void GLAPIENTRY noopImportSemaphoreWin32NameEXT(GLuint semaphore, GLenum handleType, const GLvoid *handle)
{
   (void) semaphore; (void) handleType; (void) handle;
   _mesa_noop_entrypoint("glImportSemaphoreWin32NameEXT");
}

static void GLAPIENTRY noopGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label)
{
   (void) type; (void) object; (void) bufSize; (void) length; (void) label;
   _mesa_noop_entrypoint("glGetObjectLabelEXT");
}

static void GLAPIENTRY noopLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar *label)
{
   (void) type; (void) object; (void) length; (void) label;
   _mesa_noop_entrypoint("glLabelObjectEXT");
}

static void GLAPIENTRY noopDrawArraysUserBuf(void)
{
      _mesa_noop_entrypoint("glDrawArraysUserBuf");
}

static void GLAPIENTRY noopDrawElementsUserBuf(const GLvoid *cmd)
{
   (void) cmd;
   _mesa_noop_entrypoint("glDrawElementsUserBuf");
}

static void GLAPIENTRY noopMultiDrawArraysUserBuf(void)
{
      _mesa_noop_entrypoint("glMultiDrawArraysUserBuf");
}

static void GLAPIENTRY noopMultiDrawElementsUserBuf(GLintptr indexBuf, GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, const GLint *basevertex)
{
   (void) indexBuf; (void) mode; (void) count; (void) type; (void) indices; (void) primcount; (void) basevertex;
   _mesa_noop_entrypoint("glMultiDrawElementsUserBuf");
}

static void GLAPIENTRY noopDrawArraysInstancedBaseInstanceDrawID(void)
{
      _mesa_noop_entrypoint("glDrawArraysInstancedBaseInstanceDrawID");
}

static void GLAPIENTRY noopDrawElementsInstancedBaseVertexBaseInstanceDrawID(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instance_count, GLint basevertex, GLuint baseinstance, GLuint drawid)
{
   (void) mode; (void) count; (void) type; (void) indices; (void) instance_count; (void) basevertex; (void) baseinstance; (void) drawid;
   _mesa_noop_entrypoint("glDrawElementsInstancedBaseVertexBaseInstanceDrawID");
}

static void GLAPIENTRY noopInternalInvalidateFramebufferAncillaryMESA(void)
{
      _mesa_noop_entrypoint("glInternalInvalidateFramebufferAncillaryMESA");
}

static void GLAPIENTRY noopDrawElementsPacked(GLenum mode, GLenum type, GLushort count, GLushort indices)
{
   (void) mode; (void) type; (void) count; (void) indices;
   _mesa_noop_entrypoint("glDrawElementsPacked");
}

static void GLAPIENTRY noopDrawElementsUserBufPacked(const GLvoid *cmd)
{
   (void) cmd;
   _mesa_noop_entrypoint("glDrawElementsUserBufPacked");
}

static void GLAPIENTRY noopTexStorageAttribs2DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, const GLint *attrib_list)
{
   (void) target; (void) levels; (void) internalFormat; (void) width; (void) height; (void) attrib_list;
   _mesa_noop_entrypoint("glTexStorageAttribs2DEXT");
}

static void GLAPIENTRY noopTexStorageAttribs3DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, const GLint *attrib_list)
{
   (void) target; (void) levels; (void) internalFormat; (void) width; (void) height; (void) depth; (void) attrib_list;
   _mesa_noop_entrypoint("glTexStorageAttribs3DEXT");
}

static void GLAPIENTRY noopFramebufferTextureMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseviewindex, GLsizei numviews)
{
   (void) target; (void) attachment; (void) texture; (void) level; (void) baseviewindex; (void) numviews;
   _mesa_noop_entrypoint("glFramebufferTextureMultiviewOVR");
}

static void GLAPIENTRY noopNamedFramebufferTextureMultiviewOVR(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint baseviewindex, GLsizei numviews)
{
   (void) framebuffer; (void) attachment; (void) texture; (void) level; (void) baseviewindex; (void) numviews;
   _mesa_noop_entrypoint("glNamedFramebufferTextureMultiviewOVR");
}

static void GLAPIENTRY noopFramebufferTextureMultisampleMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLsizei samples, GLint baseviewindex, GLsizei numviews)
{
   (void) target; (void) attachment; (void) texture; (void) level; (void) samples; (void) baseviewindex; (void) numviews;
   _mesa_noop_entrypoint("glFramebufferTextureMultisampleMultiviewOVR");
}

static void GLAPIENTRY noopColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
   (void) target; (void) internalformat; (void) width; (void) format; (void) type; (void) table;
   _mesa_noop_entrypoint("glColorTable");
}

static void GLAPIENTRY noopColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glColorTableParameterfv");
}

static void GLAPIENTRY noopColorTableParameteriv(GLenum target, GLenum pname, const GLint *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glColorTableParameteriv");
}

static void GLAPIENTRY noopCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
   (void) target; (void) internalformat; (void) x; (void) y; (void) width;
   _mesa_noop_entrypoint("glCopyColorTable");
}

static void GLAPIENTRY noopGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid *table)
{
   (void) target; (void) format; (void) type; (void) table;
   _mesa_noop_entrypoint("glGetColorTable");
}

static void GLAPIENTRY noopGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetColorTableParameterfv");
}

static void GLAPIENTRY noopGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetColorTableParameteriv");
}

static void GLAPIENTRY noopColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)
{
   (void) target; (void) start; (void) count; (void) format; (void) type; (void) data;
   _mesa_noop_entrypoint("glColorSubTable");
}

static void GLAPIENTRY noopCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
{
   (void) target; (void) start; (void) x; (void) y; (void) width;
   _mesa_noop_entrypoint("glCopyColorSubTable");
}

static void GLAPIENTRY noopConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
{
   (void) target; (void) internalformat; (void) width; (void) format; (void) type; (void) image;
   _mesa_noop_entrypoint("glConvolutionFilter1D");
}

static void GLAPIENTRY noopConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
{
   (void) target; (void) internalformat; (void) width; (void) height; (void) format; (void) type; (void) image;
   _mesa_noop_entrypoint("glConvolutionFilter2D");
}

static void GLAPIENTRY noopConvolutionParameterf(GLenum target, GLenum pname, GLfloat params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glConvolutionParameterf");
}

static void GLAPIENTRY noopConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glConvolutionParameterfv");
}

static void GLAPIENTRY noopConvolutionParameteri(GLenum target, GLenum pname, GLint params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glConvolutionParameteri");
}

static void GLAPIENTRY noopConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glConvolutionParameteriv");
}

static void GLAPIENTRY noopCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
   (void) target; (void) internalformat; (void) x; (void) y; (void) width;
   _mesa_noop_entrypoint("glCopyConvolutionFilter1D");
}

static void GLAPIENTRY noopCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
{
   (void) target; (void) internalformat; (void) x; (void) y; (void) width; (void) height;
   _mesa_noop_entrypoint("glCopyConvolutionFilter2D");
}

static void GLAPIENTRY noopGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid *image)
{
   (void) target; (void) format; (void) type; (void) image;
   _mesa_noop_entrypoint("glGetConvolutionFilter");
}

static void GLAPIENTRY noopGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetConvolutionParameterfv");
}

static void GLAPIENTRY noopGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetConvolutionParameteriv");
}

static void GLAPIENTRY noopGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
{
   (void) target; (void) format; (void) type; (void) row; (void) column; (void) span;
   _mesa_noop_entrypoint("glGetSeparableFilter");
}

static void GLAPIENTRY noopSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
{
   (void) target; (void) internalformat; (void) width; (void) height; (void) format; (void) type; (void) row; (void) column;
   _mesa_noop_entrypoint("glSeparableFilter2D");
}

static void GLAPIENTRY noopGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
   (void) target; (void) reset; (void) format; (void) type; (void) values;
   _mesa_noop_entrypoint("glGetHistogram");
}

static void GLAPIENTRY noopGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetHistogramParameterfv");
}

static void GLAPIENTRY noopGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetHistogramParameteriv");
}

static void GLAPIENTRY noopGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
   (void) target; (void) reset; (void) format; (void) type; (void) values;
   _mesa_noop_entrypoint("glGetMinmax");
}

static void GLAPIENTRY noopGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetMinmaxParameterfv");
}

static void GLAPIENTRY noopGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params)
{
   (void) target; (void) pname; (void) params;
   _mesa_noop_entrypoint("glGetMinmaxParameteriv");
}

static void GLAPIENTRY noopHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
{
   (void) target; (void) width; (void) internalformat; (void) sink;
   _mesa_noop_entrypoint("glHistogram");
}

static void GLAPIENTRY noopMinmax(GLenum target, GLenum internalformat, GLboolean sink)
{
   (void) target; (void) internalformat; (void) sink;
   _mesa_noop_entrypoint("glMinmax");
}

static void GLAPIENTRY noopResetHistogram(GLenum target)
{
   (void) target;
   _mesa_noop_entrypoint("glResetHistogram");
}

static void GLAPIENTRY noopResetMinmax(GLenum target)
{
   (void) target;
   _mesa_noop_entrypoint("glResetMinmax");
}

static void GLAPIENTRY noopGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table)
{
   (void) target; (void) format; (void) type; (void) bufSize; (void) table;
   _mesa_noop_entrypoint("glGetnColorTableARB");
}

static void GLAPIENTRY noopGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image)
{
   (void) target; (void) format; (void) type; (void) bufSize; (void) image;
   _mesa_noop_entrypoint("glGetnConvolutionFilterARB");
}

static void GLAPIENTRY noopGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
{
   (void) target; (void) reset; (void) format; (void) type; (void) bufSize; (void) values;
   _mesa_noop_entrypoint("glGetnHistogramARB");
}

static void GLAPIENTRY noopGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
{
   (void) target; (void) reset; (void) format; (void) type; (void) bufSize; (void) values;
   _mesa_noop_entrypoint("glGetnMinmaxARB");
}

static void GLAPIENTRY noopGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span)
{
   (void) target; (void) format; (void) type; (void) rowBufSize; (void) row; (void) columnBufSize; (void) column; (void) span;
   _mesa_noop_entrypoint("glGetnSeparableFilterARB");
}

const _glapi_proc table_noop_array[] = {
   (_glapi_proc) noopNewList,
   (_glapi_proc) noopEndList,
   (_glapi_proc) noopCallList,
   (_glapi_proc) noopCallLists,
   (_glapi_proc) noopDeleteLists,
   (_glapi_proc) noopGenLists,
   (_glapi_proc) noopListBase,
   (_glapi_proc) noopBegin,
   (_glapi_proc) noopBitmap,
   (_glapi_proc) noopColor3b,
   (_glapi_proc) noopColor3bv,
   (_glapi_proc) noopColor3d,
   (_glapi_proc) noopColor3dv,
   (_glapi_proc) noopColor3f,
   (_glapi_proc) noopColor3fv,
   (_glapi_proc) noopColor3i,
   (_glapi_proc) noopColor3iv,
   (_glapi_proc) noopColor3s,
   (_glapi_proc) noopColor3sv,
   (_glapi_proc) noopColor3ub,
   (_glapi_proc) noopColor3ubv,
   (_glapi_proc) noopColor3ui,
   (_glapi_proc) noopColor3uiv,
   (_glapi_proc) noopColor3us,
   (_glapi_proc) noopColor3usv,
   (_glapi_proc) noopColor4b,
   (_glapi_proc) noopColor4bv,
   (_glapi_proc) noopColor4d,
   (_glapi_proc) noopColor4dv,
   (_glapi_proc) noopColor4f,
   (_glapi_proc) noopColor4fv,
   (_glapi_proc) noopColor4i,
   (_glapi_proc) noopColor4iv,
   (_glapi_proc) noopColor4s,
   (_glapi_proc) noopColor4sv,
   (_glapi_proc) noopColor4ub,
   (_glapi_proc) noopColor4ubv,
   (_glapi_proc) noopColor4ui,
   (_glapi_proc) noopColor4uiv,
   (_glapi_proc) noopColor4us,
   (_glapi_proc) noopColor4usv,
   (_glapi_proc) noopEdgeFlag,
   (_glapi_proc) noopEdgeFlagv,
   (_glapi_proc) noopEnd,
   (_glapi_proc) noopIndexd,
   (_glapi_proc) noopIndexdv,
   (_glapi_proc) noopIndexf,
   (_glapi_proc) noopIndexfv,
   (_glapi_proc) noopIndexi,
   (_glapi_proc) noopIndexiv,
   (_glapi_proc) noopIndexs,
   (_glapi_proc) noopIndexsv,
   (_glapi_proc) noopNormal3b,
   (_glapi_proc) noopNormal3bv,
   (_glapi_proc) noopNormal3d,
   (_glapi_proc) noopNormal3dv,
   (_glapi_proc) noopNormal3f,
   (_glapi_proc) noopNormal3fv,
   (_glapi_proc) noopNormal3i,
   (_glapi_proc) noopNormal3iv,
   (_glapi_proc) noopNormal3s,
   (_glapi_proc) noopNormal3sv,
   (_glapi_proc) noopRasterPos2d,
   (_glapi_proc) noopRasterPos2dv,
   (_glapi_proc) noopRasterPos2f,
   (_glapi_proc) noopRasterPos2fv,
   (_glapi_proc) noopRasterPos2i,
   (_glapi_proc) noopRasterPos2iv,
   (_glapi_proc) noopRasterPos2s,
   (_glapi_proc) noopRasterPos2sv,
   (_glapi_proc) noopRasterPos3d,
   (_glapi_proc) noopRasterPos3dv,
   (_glapi_proc) noopRasterPos3f,
   (_glapi_proc) noopRasterPos3fv,
   (_glapi_proc) noopRasterPos3i,
   (_glapi_proc) noopRasterPos3iv,
   (_glapi_proc) noopRasterPos3s,
   (_glapi_proc) noopRasterPos3sv,
   (_glapi_proc) noopRasterPos4d,
   (_glapi_proc) noopRasterPos4dv,
   (_glapi_proc) noopRasterPos4f,
   (_glapi_proc) noopRasterPos4fv,
   (_glapi_proc) noopRasterPos4i,
   (_glapi_proc) noopRasterPos4iv,
   (_glapi_proc) noopRasterPos4s,
   (_glapi_proc) noopRasterPos4sv,
   (_glapi_proc) noopRectd,
   (_glapi_proc) noopRectdv,
   (_glapi_proc) noopRectf,
   (_glapi_proc) noopRectfv,
   (_glapi_proc) noopRecti,
   (_glapi_proc) noopRectiv,
   (_glapi_proc) noopRects,
   (_glapi_proc) noopRectsv,
   (_glapi_proc) noopTexCoord1d,
   (_glapi_proc) noopTexCoord1dv,
   (_glapi_proc) noopTexCoord1f,
   (_glapi_proc) noopTexCoord1fv,
   (_glapi_proc) noopTexCoord1i,
   (_glapi_proc) noopTexCoord1iv,
   (_glapi_proc) noopTexCoord1s,
   (_glapi_proc) noopTexCoord1sv,
   (_glapi_proc) noopTexCoord2d,
   (_glapi_proc) noopTexCoord2dv,
   (_glapi_proc) noopTexCoord2f,
   (_glapi_proc) noopTexCoord2fv,
   (_glapi_proc) noopTexCoord2i,
   (_glapi_proc) noopTexCoord2iv,
   (_glapi_proc) noopTexCoord2s,
   (_glapi_proc) noopTexCoord2sv,
   (_glapi_proc) noopTexCoord3d,
   (_glapi_proc) noopTexCoord3dv,
   (_glapi_proc) noopTexCoord3f,
   (_glapi_proc) noopTexCoord3fv,
   (_glapi_proc) noopTexCoord3i,
   (_glapi_proc) noopTexCoord3iv,
   (_glapi_proc) noopTexCoord3s,
   (_glapi_proc) noopTexCoord3sv,
   (_glapi_proc) noopTexCoord4d,
   (_glapi_proc) noopTexCoord4dv,
   (_glapi_proc) noopTexCoord4f,
   (_glapi_proc) noopTexCoord4fv,
   (_glapi_proc) noopTexCoord4i,
   (_glapi_proc) noopTexCoord4iv,
   (_glapi_proc) noopTexCoord4s,
   (_glapi_proc) noopTexCoord4sv,
   (_glapi_proc) noopVertex2d,
   (_glapi_proc) noopVertex2dv,
   (_glapi_proc) noopVertex2f,
   (_glapi_proc) noopVertex2fv,
   (_glapi_proc) noopVertex2i,
   (_glapi_proc) noopVertex2iv,
   (_glapi_proc) noopVertex2s,
   (_glapi_proc) noopVertex2sv,
   (_glapi_proc) noopVertex3d,
   (_glapi_proc) noopVertex3dv,
   (_glapi_proc) noopVertex3f,
   (_glapi_proc) noopVertex3fv,
   (_glapi_proc) noopVertex3i,
   (_glapi_proc) noopVertex3iv,
   (_glapi_proc) noopVertex3s,
   (_glapi_proc) noopVertex3sv,
   (_glapi_proc) noopVertex4d,
   (_glapi_proc) noopVertex4dv,
   (_glapi_proc) noopVertex4f,
   (_glapi_proc) noopVertex4fv,
   (_glapi_proc) noopVertex4i,
   (_glapi_proc) noopVertex4iv,
   (_glapi_proc) noopVertex4s,
   (_glapi_proc) noopVertex4sv,
   (_glapi_proc) noopClipPlane,
   (_glapi_proc) noopColorMaterial,
   (_glapi_proc) noopCullFace,
   (_glapi_proc) noopFogf,
   (_glapi_proc) noopFogfv,
   (_glapi_proc) noopFogi,
   (_glapi_proc) noopFogiv,
   (_glapi_proc) noopFrontFace,
   (_glapi_proc) noopHint,
   (_glapi_proc) noopLightf,
   (_glapi_proc) noopLightfv,
   (_glapi_proc) noopLighti,
   (_glapi_proc) noopLightiv,
   (_glapi_proc) noopLightModelf,
   (_glapi_proc) noopLightModelfv,
   (_glapi_proc) noopLightModeli,
   (_glapi_proc) noopLightModeliv,
   (_glapi_proc) noopLineStipple,
   (_glapi_proc) noopLineWidth,
   (_glapi_proc) noopMaterialf,
   (_glapi_proc) noopMaterialfv,
   (_glapi_proc) noopMateriali,
   (_glapi_proc) noopMaterialiv,
   (_glapi_proc) noopPointSize,
   (_glapi_proc) noopPolygonMode,
   (_glapi_proc) noopPolygonStipple,
   (_glapi_proc) noopScissor,
   (_glapi_proc) noopShadeModel,
   (_glapi_proc) noopTexParameterf,
   (_glapi_proc) noopTexParameterfv,
   (_glapi_proc) noopTexParameteri,
   (_glapi_proc) noopTexParameteriv,
   (_glapi_proc) noopTexImage1D,
   (_glapi_proc) noopTexImage2D,
   (_glapi_proc) noopTexEnvf,
   (_glapi_proc) noopTexEnvfv,
   (_glapi_proc) noopTexEnvi,
   (_glapi_proc) noopTexEnviv,
   (_glapi_proc) noopTexGend,
   (_glapi_proc) noopTexGendv,
   (_glapi_proc) noopTexGenf,
   (_glapi_proc) noopTexGenfv,
   (_glapi_proc) noopTexGeni,
   (_glapi_proc) noopTexGeniv,
   (_glapi_proc) noopFeedbackBuffer,
   (_glapi_proc) noopSelectBuffer,
   (_glapi_proc) noopRenderMode,
   (_glapi_proc) noopInitNames,
   (_glapi_proc) noopLoadName,
   (_glapi_proc) noopPassThrough,
   (_glapi_proc) noopPopName,
   (_glapi_proc) noopPushName,
   (_glapi_proc) noopDrawBuffer,
   (_glapi_proc) noopClear,
   (_glapi_proc) noopClearAccum,
   (_glapi_proc) noopClearIndex,
   (_glapi_proc) noopClearColor,
   (_glapi_proc) noopClearStencil,
   (_glapi_proc) noopClearDepth,
   (_glapi_proc) noopStencilMask,
   (_glapi_proc) noopColorMask,
   (_glapi_proc) noopDepthMask,
   (_glapi_proc) noopIndexMask,
   (_glapi_proc) noopAccum,
   (_glapi_proc) noopDisable,
   (_glapi_proc) noopEnable,
   (_glapi_proc) noopFinish,
   (_glapi_proc) noopFlush,
   (_glapi_proc) noopPopAttrib,
   (_glapi_proc) noopPushAttrib,
   (_glapi_proc) noopMap1d,
   (_glapi_proc) noopMap1f,
   (_glapi_proc) noopMap2d,
   (_glapi_proc) noopMap2f,
   (_glapi_proc) noopMapGrid1d,
   (_glapi_proc) noopMapGrid1f,
   (_glapi_proc) noopMapGrid2d,
   (_glapi_proc) noopMapGrid2f,
   (_glapi_proc) noopEvalCoord1d,
   (_glapi_proc) noopEvalCoord1dv,
   (_glapi_proc) noopEvalCoord1f,
   (_glapi_proc) noopEvalCoord1fv,
   (_glapi_proc) noopEvalCoord2d,
   (_glapi_proc) noopEvalCoord2dv,
   (_glapi_proc) noopEvalCoord2f,
   (_glapi_proc) noopEvalCoord2fv,
   (_glapi_proc) noopEvalMesh1,
   (_glapi_proc) noopEvalPoint1,
   (_glapi_proc) noopEvalMesh2,
   (_glapi_proc) noopEvalPoint2,
   (_glapi_proc) noopAlphaFunc,
   (_glapi_proc) noopBlendFunc,
   (_glapi_proc) noopLogicOp,
   (_glapi_proc) noopStencilFunc,
   (_glapi_proc) noopStencilOp,
   (_glapi_proc) noopDepthFunc,
   (_glapi_proc) noopPixelZoom,
   (_glapi_proc) noopPixelTransferf,
   (_glapi_proc) noopPixelTransferi,
   (_glapi_proc) noopPixelStoref,
   (_glapi_proc) noopPixelStorei,
   (_glapi_proc) noopPixelMapfv,
   (_glapi_proc) noopPixelMapuiv,
   (_glapi_proc) noopPixelMapusv,
   (_glapi_proc) noopReadBuffer,
   (_glapi_proc) noopCopyPixels,
   (_glapi_proc) noopReadPixels,
   (_glapi_proc) noopDrawPixels,
   (_glapi_proc) noopGetBooleanv,
   (_glapi_proc) noopGetClipPlane,
   (_glapi_proc) noopGetDoublev,
   (_glapi_proc) noopGetError,
   (_glapi_proc) noopGetFloatv,
   (_glapi_proc) noopGetIntegerv,
   (_glapi_proc) noopGetLightfv,
   (_glapi_proc) noopGetLightiv,
   (_glapi_proc) noopGetMapdv,
   (_glapi_proc) noopGetMapfv,
   (_glapi_proc) noopGetMapiv,
   (_glapi_proc) noopGetMaterialfv,
   (_glapi_proc) noopGetMaterialiv,
   (_glapi_proc) noopGetPixelMapfv,
   (_glapi_proc) noopGetPixelMapuiv,
   (_glapi_proc) noopGetPixelMapusv,
   (_glapi_proc) noopGetPolygonStipple,
   (_glapi_proc) noopGetString,
   (_glapi_proc) noopGetTexEnvfv,
   (_glapi_proc) noopGetTexEnviv,
   (_glapi_proc) noopGetTexGendv,
   (_glapi_proc) noopGetTexGenfv,
   (_glapi_proc) noopGetTexGeniv,
   (_glapi_proc) noopGetTexImage,
   (_glapi_proc) noopGetTexParameterfv,
   (_glapi_proc) noopGetTexParameteriv,
   (_glapi_proc) noopGetTexLevelParameterfv,
   (_glapi_proc) noopGetTexLevelParameteriv,
   (_glapi_proc) noopIsEnabled,
   (_glapi_proc) noopIsList,
   (_glapi_proc) noopDepthRange,
   (_glapi_proc) noopFrustum,
   (_glapi_proc) noopLoadIdentity,
   (_glapi_proc) noopLoadMatrixf,
   (_glapi_proc) noopLoadMatrixd,
   (_glapi_proc) noopMatrixMode,
   (_glapi_proc) noopMultMatrixf,
   (_glapi_proc) noopMultMatrixd,
   (_glapi_proc) noopOrtho,
   (_glapi_proc) noopPopMatrix,
   (_glapi_proc) noopPushMatrix,
   (_glapi_proc) noopRotated,
   (_glapi_proc) noopRotatef,
   (_glapi_proc) noopScaled,
   (_glapi_proc) noopScalef,
   (_glapi_proc) noopTranslated,
   (_glapi_proc) noopTranslatef,
   (_glapi_proc) noopViewport,
   (_glapi_proc) noopArrayElement,
   (_glapi_proc) noopBindTexture,
   (_glapi_proc) noopColorPointer,
   (_glapi_proc) noopDisableClientState,
   (_glapi_proc) noopDrawArrays,
   (_glapi_proc) noopDrawElements,
   (_glapi_proc) noopEdgeFlagPointer,
   (_glapi_proc) noopEnableClientState,
   (_glapi_proc) noopIndexPointer,
   (_glapi_proc) noopIndexub,
   (_glapi_proc) noopIndexubv,
   (_glapi_proc) noopInterleavedArrays,
   (_glapi_proc) noopNormalPointer,
   (_glapi_proc) noopPolygonOffset,
   (_glapi_proc) noopTexCoordPointer,
   (_glapi_proc) noopVertexPointer,
   (_glapi_proc) noopAreTexturesResident,
   (_glapi_proc) noopCopyTexImage1D,
   (_glapi_proc) noopCopyTexImage2D,
   (_glapi_proc) noopCopyTexSubImage1D,
   (_glapi_proc) noopCopyTexSubImage2D,
   (_glapi_proc) noopDeleteTextures,
   (_glapi_proc) noopGenTextures,
   (_glapi_proc) noopGetPointerv,
   (_glapi_proc) noopIsTexture,
   (_glapi_proc) noopPrioritizeTextures,
   (_glapi_proc) noopTexSubImage1D,
   (_glapi_proc) noopTexSubImage2D,
   (_glapi_proc) noopPopClientAttrib,
   (_glapi_proc) noopPushClientAttrib,
   (_glapi_proc) noopBlendColor,
   (_glapi_proc) noopBlendEquation,
   (_glapi_proc) noopDrawRangeElements,
   (_glapi_proc) noopTexImage3D,
   (_glapi_proc) noopTexSubImage3D,
   (_glapi_proc) noopCopyTexSubImage3D,
   (_glapi_proc) noopActiveTexture,
   (_glapi_proc) noopClientActiveTexture,
   (_glapi_proc) noopMultiTexCoord1d,
   (_glapi_proc) noopMultiTexCoord1dv,
   (_glapi_proc) noopMultiTexCoord1fARB,
   (_glapi_proc) noopMultiTexCoord1fvARB,
   (_glapi_proc) noopMultiTexCoord1i,
   (_glapi_proc) noopMultiTexCoord1iv,
   (_glapi_proc) noopMultiTexCoord1s,
   (_glapi_proc) noopMultiTexCoord1sv,
   (_glapi_proc) noopMultiTexCoord2d,
   (_glapi_proc) noopMultiTexCoord2dv,
   (_glapi_proc) noopMultiTexCoord2fARB,
   (_glapi_proc) noopMultiTexCoord2fvARB,
   (_glapi_proc) noopMultiTexCoord2i,
   (_glapi_proc) noopMultiTexCoord2iv,
   (_glapi_proc) noopMultiTexCoord2s,
   (_glapi_proc) noopMultiTexCoord2sv,
   (_glapi_proc) noopMultiTexCoord3d,
   (_glapi_proc) noopMultiTexCoord3dv,
   (_glapi_proc) noopMultiTexCoord3fARB,
   (_glapi_proc) noopMultiTexCoord3fvARB,
   (_glapi_proc) noopMultiTexCoord3i,
   (_glapi_proc) noopMultiTexCoord3iv,
   (_glapi_proc) noopMultiTexCoord3s,
   (_glapi_proc) noopMultiTexCoord3sv,
   (_glapi_proc) noopMultiTexCoord4d,
   (_glapi_proc) noopMultiTexCoord4dv,
   (_glapi_proc) noopMultiTexCoord4fARB,
   (_glapi_proc) noopMultiTexCoord4fvARB,
   (_glapi_proc) noopMultiTexCoord4i,
   (_glapi_proc) noopMultiTexCoord4iv,
   (_glapi_proc) noopMultiTexCoord4s,
   (_glapi_proc) noopMultiTexCoord4sv,
   (_glapi_proc) noopCompressedTexImage1D,
   (_glapi_proc) noopCompressedTexImage2D,
   (_glapi_proc) noopCompressedTexImage3D,
   (_glapi_proc) noopCompressedTexSubImage1D,
   (_glapi_proc) noopCompressedTexSubImage2D,
   (_glapi_proc) noopCompressedTexSubImage3D,
   (_glapi_proc) noopGetCompressedTexImage,
   (_glapi_proc) noopLoadTransposeMatrixd,
   (_glapi_proc) noopLoadTransposeMatrixf,
   (_glapi_proc) noopMultTransposeMatrixd,
   (_glapi_proc) noopMultTransposeMatrixf,
   (_glapi_proc) noopSampleCoverage,
   (_glapi_proc) noopBlendFuncSeparate,
   (_glapi_proc) noopFogCoordPointer,
   (_glapi_proc) noopFogCoordd,
   (_glapi_proc) noopFogCoorddv,
   (_glapi_proc) noopMultiDrawArrays,
   (_glapi_proc) noopPointParameterf,
   (_glapi_proc) noopPointParameterfv,
   (_glapi_proc) noopPointParameteri,
   (_glapi_proc) noopPointParameteriv,
   (_glapi_proc) noopSecondaryColor3b,
   (_glapi_proc) noopSecondaryColor3bv,
   (_glapi_proc) noopSecondaryColor3d,
   (_glapi_proc) noopSecondaryColor3dv,
   (_glapi_proc) noopSecondaryColor3i,
   (_glapi_proc) noopSecondaryColor3iv,
   (_glapi_proc) noopSecondaryColor3s,
   (_glapi_proc) noopSecondaryColor3sv,
   (_glapi_proc) noopSecondaryColor3ub,
   (_glapi_proc) noopSecondaryColor3ubv,
   (_glapi_proc) noopSecondaryColor3ui,
   (_glapi_proc) noopSecondaryColor3uiv,
   (_glapi_proc) noopSecondaryColor3us,
   (_glapi_proc) noopSecondaryColor3usv,
   (_glapi_proc) noopSecondaryColorPointer,
   (_glapi_proc) noopWindowPos2d,
   (_glapi_proc) noopWindowPos2dv,
   (_glapi_proc) noopWindowPos2f,
   (_glapi_proc) noopWindowPos2fv,
   (_glapi_proc) noopWindowPos2i,
   (_glapi_proc) noopWindowPos2iv,
   (_glapi_proc) noopWindowPos2s,
   (_glapi_proc) noopWindowPos2sv,
   (_glapi_proc) noopWindowPos3d,
   (_glapi_proc) noopWindowPos3dv,
   (_glapi_proc) noopWindowPos3f,
   (_glapi_proc) noopWindowPos3fv,
   (_glapi_proc) noopWindowPos3i,
   (_glapi_proc) noopWindowPos3iv,
   (_glapi_proc) noopWindowPos3s,
   (_glapi_proc) noopWindowPos3sv,
   (_glapi_proc) noopBeginQuery,
   (_glapi_proc) noopBindBuffer,
   (_glapi_proc) noopBufferData,
   (_glapi_proc) noopBufferSubData,
   (_glapi_proc) noopDeleteBuffers,
   (_glapi_proc) noopDeleteQueries,
   (_glapi_proc) noopEndQuery,
   (_glapi_proc) noopGenBuffers,
   (_glapi_proc) noopGenQueries,
   (_glapi_proc) noopGetBufferParameteriv,
   (_glapi_proc) noopGetBufferPointerv,
   (_glapi_proc) noopGetBufferSubData,
   (_glapi_proc) noopGetQueryObjectiv,
   (_glapi_proc) noopGetQueryObjectuiv,
   (_glapi_proc) noopGetQueryiv,
   (_glapi_proc) noopIsBuffer,
   (_glapi_proc) noopIsQuery,
   (_glapi_proc) noopMapBuffer,
   (_glapi_proc) noopUnmapBuffer,
   (_glapi_proc) noopAttachShader,
   (_glapi_proc) noopBindAttribLocation,
   (_glapi_proc) noopBlendEquationSeparate,
   (_glapi_proc) noopCompileShader,
   (_glapi_proc) noopCreateProgram,
   (_glapi_proc) noopCreateShader,
   (_glapi_proc) noopDeleteProgram,
   (_glapi_proc) noopDeleteShader,
   (_glapi_proc) noopDetachShader,
   (_glapi_proc) noopDisableVertexAttribArray,
   (_glapi_proc) noopDrawBuffers,
   (_glapi_proc) noopEnableVertexAttribArray,
   (_glapi_proc) noopGetActiveAttrib,
   (_glapi_proc) noopGetActiveUniform,
   (_glapi_proc) noopGetAttachedShaders,
   (_glapi_proc) noopGetAttribLocation,
   (_glapi_proc) noopGetProgramInfoLog,
   (_glapi_proc) noopGetProgramiv,
   (_glapi_proc) noopGetShaderInfoLog,
   (_glapi_proc) noopGetShaderSource,
   (_glapi_proc) noopGetShaderiv,
   (_glapi_proc) noopGetUniformLocation,
   (_glapi_proc) noopGetUniformfv,
   (_glapi_proc) noopGetUniformiv,
   (_glapi_proc) noopGetVertexAttribPointerv,
   (_glapi_proc) noopGetVertexAttribdv,
   (_glapi_proc) noopGetVertexAttribfv,
   (_glapi_proc) noopGetVertexAttribiv,
   (_glapi_proc) noopIsProgram,
   (_glapi_proc) noopIsShader,
   (_glapi_proc) noopLinkProgram,
   (_glapi_proc) noopShaderSource,
   (_glapi_proc) noopStencilFuncSeparate,
   (_glapi_proc) noopStencilMaskSeparate,
   (_glapi_proc) noopStencilOpSeparate,
   (_glapi_proc) noopUniform1f,
   (_glapi_proc) noopUniform1fv,
   (_glapi_proc) noopUniform1i,
   (_glapi_proc) noopUniform1iv,
   (_glapi_proc) noopUniform2f,
   (_glapi_proc) noopUniform2fv,
   (_glapi_proc) noopUniform2i,
   (_glapi_proc) noopUniform2iv,
   (_glapi_proc) noopUniform3f,
   (_glapi_proc) noopUniform3fv,
   (_glapi_proc) noopUniform3i,
   (_glapi_proc) noopUniform3iv,
   (_glapi_proc) noopUniform4f,
   (_glapi_proc) noopUniform4fv,
   (_glapi_proc) noopUniform4i,
   (_glapi_proc) noopUniform4iv,
   (_glapi_proc) noopUniformMatrix2fv,
   (_glapi_proc) noopUniformMatrix3fv,
   (_glapi_proc) noopUniformMatrix4fv,
   (_glapi_proc) noopUseProgram,
   (_glapi_proc) noopValidateProgram,
   (_glapi_proc) noopVertexAttrib1d,
   (_glapi_proc) noopVertexAttrib1dv,
   (_glapi_proc) noopVertexAttrib1s,
   (_glapi_proc) noopVertexAttrib1sv,
   (_glapi_proc) noopVertexAttrib2d,
   (_glapi_proc) noopVertexAttrib2dv,
   (_glapi_proc) noopVertexAttrib2s,
   (_glapi_proc) noopVertexAttrib2sv,
   (_glapi_proc) noopVertexAttrib3d,
   (_glapi_proc) noopVertexAttrib3dv,
   (_glapi_proc) noopVertexAttrib3s,
   (_glapi_proc) noopVertexAttrib3sv,
   (_glapi_proc) noopVertexAttrib4Nbv,
   (_glapi_proc) noopVertexAttrib4Niv,
   (_glapi_proc) noopVertexAttrib4Nsv,
   (_glapi_proc) noopVertexAttrib4Nub,
   (_glapi_proc) noopVertexAttrib4Nubv,
   (_glapi_proc) noopVertexAttrib4Nuiv,
   (_glapi_proc) noopVertexAttrib4Nusv,
   (_glapi_proc) noopVertexAttrib4bv,
   (_glapi_proc) noopVertexAttrib4d,
   (_glapi_proc) noopVertexAttrib4dv,
   (_glapi_proc) noopVertexAttrib4iv,
   (_glapi_proc) noopVertexAttrib4s,
   (_glapi_proc) noopVertexAttrib4sv,
   (_glapi_proc) noopVertexAttrib4ubv,
   (_glapi_proc) noopVertexAttrib4uiv,
   (_glapi_proc) noopVertexAttrib4usv,
   (_glapi_proc) noopVertexAttribPointer,
   (_glapi_proc) noopUniformMatrix2x3fv,
   (_glapi_proc) noopUniformMatrix2x4fv,
   (_glapi_proc) noopUniformMatrix3x2fv,
   (_glapi_proc) noopUniformMatrix3x4fv,
   (_glapi_proc) noopUniformMatrix4x2fv,
   (_glapi_proc) noopUniformMatrix4x3fv,
   (_glapi_proc) noopBeginConditionalRender,
   (_glapi_proc) noopBeginTransformFeedback,
   (_glapi_proc) noopBindBufferBase,
   (_glapi_proc) noopBindBufferRange,
   (_glapi_proc) noopBindFragDataLocation,
   (_glapi_proc) noopClampColor,
   (_glapi_proc) noopClearBufferfi,
   (_glapi_proc) noopClearBufferfv,
   (_glapi_proc) noopClearBufferiv,
   (_glapi_proc) noopClearBufferuiv,
   (_glapi_proc) noopColorMaski,
   (_glapi_proc) noopDisablei,
   (_glapi_proc) noopEnablei,
   (_glapi_proc) noopEndConditionalRender,
   (_glapi_proc) noopEndTransformFeedback,
   (_glapi_proc) noopGetBooleani_v,
   (_glapi_proc) noopGetFragDataLocation,
   (_glapi_proc) noopGetIntegeri_v,
   (_glapi_proc) noopGetStringi,
   (_glapi_proc) noopGetTexParameterIiv,
   (_glapi_proc) noopGetTexParameterIuiv,
   (_glapi_proc) noopGetTransformFeedbackVarying,
   (_glapi_proc) noopGetUniformuiv,
   (_glapi_proc) noopGetVertexAttribIiv,
   (_glapi_proc) noopGetVertexAttribIuiv,
   (_glapi_proc) noopIsEnabledi,
   (_glapi_proc) noopTexParameterIiv,
   (_glapi_proc) noopTexParameterIuiv,
   (_glapi_proc) noopTransformFeedbackVaryings,
   (_glapi_proc) noopUniform1ui,
   (_glapi_proc) noopUniform1uiv,
   (_glapi_proc) noopUniform2ui,
   (_glapi_proc) noopUniform2uiv,
   (_glapi_proc) noopUniform3ui,
   (_glapi_proc) noopUniform3uiv,
   (_glapi_proc) noopUniform4ui,
   (_glapi_proc) noopUniform4uiv,
   (_glapi_proc) noopVertexAttribI1iv,
   (_glapi_proc) noopVertexAttribI1uiv,
   (_glapi_proc) noopVertexAttribI4bv,
   (_glapi_proc) noopVertexAttribI4sv,
   (_glapi_proc) noopVertexAttribI4ubv,
   (_glapi_proc) noopVertexAttribI4usv,
   (_glapi_proc) noopVertexAttribIPointer,
   (_glapi_proc) noopPrimitiveRestartIndex,
   (_glapi_proc) noopTexBuffer,
   (_glapi_proc) noopFramebufferTexture,
   (_glapi_proc) noopGetBufferParameteri64v,
   (_glapi_proc) noopGetInteger64i_v,
   (_glapi_proc) noopVertexAttribDivisor,
   (_glapi_proc) noopMinSampleShading,
   (_glapi_proc) noopMemoryBarrierByRegion,
   (_glapi_proc) noopBindProgramARB,
   (_glapi_proc) noopDeleteProgramsARB,
   (_glapi_proc) noopGenProgramsARB,
   (_glapi_proc) noopGetProgramEnvParameterdvARB,
   (_glapi_proc) noopGetProgramEnvParameterfvARB,
   (_glapi_proc) noopGetProgramLocalParameterdvARB,
   (_glapi_proc) noopGetProgramLocalParameterfvARB,
   (_glapi_proc) noopGetProgramStringARB,
   (_glapi_proc) noopGetProgramivARB,
   (_glapi_proc) noopIsProgramARB,
   (_glapi_proc) noopProgramEnvParameter4dARB,
   (_glapi_proc) noopProgramEnvParameter4dvARB,
   (_glapi_proc) noopProgramEnvParameter4fARB,
   (_glapi_proc) noopProgramEnvParameter4fvARB,
   (_glapi_proc) noopProgramLocalParameter4dARB,
   (_glapi_proc) noopProgramLocalParameter4dvARB,
   (_glapi_proc) noopProgramLocalParameter4fARB,
   (_glapi_proc) noopProgramLocalParameter4fvARB,
   (_glapi_proc) noopProgramStringARB,
   (_glapi_proc) noopVertexAttrib1fARB,
   (_glapi_proc) noopVertexAttrib1fvARB,
   (_glapi_proc) noopVertexAttrib2fARB,
   (_glapi_proc) noopVertexAttrib2fvARB,
   (_glapi_proc) noopVertexAttrib3fARB,
   (_glapi_proc) noopVertexAttrib3fvARB,
   (_glapi_proc) noopVertexAttrib4fARB,
   (_glapi_proc) noopVertexAttrib4fvARB,
   (_glapi_proc) noopAttachObjectARB,
   (_glapi_proc) noopCreateProgramObjectARB,
   (_glapi_proc) noopCreateShaderObjectARB,
   (_glapi_proc) noopDeleteObjectARB,
   (_glapi_proc) noopDetachObjectARB,
   (_glapi_proc) noopGetAttachedObjectsARB,
   (_glapi_proc) noopGetHandleARB,
   (_glapi_proc) noopGetInfoLogARB,
   (_glapi_proc) noopGetObjectParameterfvARB,
   (_glapi_proc) noopGetObjectParameterivARB,
   (_glapi_proc) noopDrawArraysInstanced,
   (_glapi_proc) noopDrawElementsInstanced,
   (_glapi_proc) noopBindFramebuffer,
   (_glapi_proc) noopBindRenderbuffer,
   (_glapi_proc) noopBlitFramebuffer,
   (_glapi_proc) noopCheckFramebufferStatus,
   (_glapi_proc) noopDeleteFramebuffers,
   (_glapi_proc) noopDeleteRenderbuffers,
   (_glapi_proc) noopFramebufferRenderbuffer,
   (_glapi_proc) noopFramebufferTexture1D,
   (_glapi_proc) noopFramebufferTexture2D,
   (_glapi_proc) noopFramebufferTexture3D,
   (_glapi_proc) noopFramebufferTextureLayer,
   (_glapi_proc) noopGenFramebuffers,
   (_glapi_proc) noopGenRenderbuffers,
   (_glapi_proc) noopGenerateMipmap,
   (_glapi_proc) noopGetFramebufferAttachmentParameteriv,
   (_glapi_proc) noopGetRenderbufferParameteriv,
   (_glapi_proc) noopIsFramebuffer,
   (_glapi_proc) noopIsRenderbuffer,
   (_glapi_proc) noopRenderbufferStorage,
   (_glapi_proc) noopRenderbufferStorageMultisample,
   (_glapi_proc) noopFlushMappedBufferRange,
   (_glapi_proc) noopMapBufferRange,
   (_glapi_proc) noopBindVertexArray,
   (_glapi_proc) noopDeleteVertexArrays,
   (_glapi_proc) noopGenVertexArrays,
   (_glapi_proc) noopIsVertexArray,
   (_glapi_proc) noopGetActiveUniformBlockName,
   (_glapi_proc) noopGetActiveUniformBlockiv,
   (_glapi_proc) noopGetActiveUniformName,
   (_glapi_proc) noopGetActiveUniformsiv,
   (_glapi_proc) noopGetUniformBlockIndex,
   (_glapi_proc) noopGetUniformIndices,
   (_glapi_proc) noopUniformBlockBinding,
   (_glapi_proc) noopCopyBufferSubData,
   (_glapi_proc) noopClientWaitSync,
   (_glapi_proc) noopDeleteSync,
   (_glapi_proc) noopFenceSync,
   (_glapi_proc) noopGetInteger64v,
   (_glapi_proc) noopGetSynciv,
   (_glapi_proc) noopIsSync,
   (_glapi_proc) noopWaitSync,
   (_glapi_proc) noopDrawElementsBaseVertex,
   (_glapi_proc) noopDrawElementsInstancedBaseVertex,
   (_glapi_proc) noopDrawRangeElementsBaseVertex,
   (_glapi_proc) noopMultiDrawElementsBaseVertex,
   (_glapi_proc) noopProvokingVertex,
   (_glapi_proc) noopGetMultisamplefv,
   (_glapi_proc) noopSampleMaski,
   (_glapi_proc) noopTexImage2DMultisample,
   (_glapi_proc) noopTexImage3DMultisample,
   (_glapi_proc) noopBlendEquationSeparateiARB,
   (_glapi_proc) noopBlendEquationiARB,
   (_glapi_proc) noopBlendFuncSeparateiARB,
   (_glapi_proc) noopBlendFunciARB,
   (_glapi_proc) noopBindFragDataLocationIndexed,
   (_glapi_proc) noopGetFragDataIndex,
   (_glapi_proc) noopBindSampler,
   (_glapi_proc) noopDeleteSamplers,
   (_glapi_proc) noopGenSamplers,
   (_glapi_proc) noopGetSamplerParameterIiv,
   (_glapi_proc) noopGetSamplerParameterIuiv,
   (_glapi_proc) noopGetSamplerParameterfv,
   (_glapi_proc) noopGetSamplerParameteriv,
   (_glapi_proc) noopIsSampler,
   (_glapi_proc) noopSamplerParameterIiv,
   (_glapi_proc) noopSamplerParameterIuiv,
   (_glapi_proc) noopSamplerParameterf,
   (_glapi_proc) noopSamplerParameterfv,
   (_glapi_proc) noopSamplerParameteri,
   (_glapi_proc) noopSamplerParameteriv,
   (_glapi_proc) noopGetQueryObjecti64v,
   (_glapi_proc) noopGetQueryObjectui64v,
   (_glapi_proc) noopQueryCounter,
   (_glapi_proc) noopColorP3ui,
   (_glapi_proc) noopColorP3uiv,
   (_glapi_proc) noopColorP4ui,
   (_glapi_proc) noopColorP4uiv,
   (_glapi_proc) noopMultiTexCoordP1ui,
   (_glapi_proc) noopMultiTexCoordP1uiv,
   (_glapi_proc) noopMultiTexCoordP2ui,
   (_glapi_proc) noopMultiTexCoordP2uiv,
   (_glapi_proc) noopMultiTexCoordP3ui,
   (_glapi_proc) noopMultiTexCoordP3uiv,
   (_glapi_proc) noopMultiTexCoordP4ui,
   (_glapi_proc) noopMultiTexCoordP4uiv,
   (_glapi_proc) noopNormalP3ui,
   (_glapi_proc) noopNormalP3uiv,
   (_glapi_proc) noopSecondaryColorP3ui,
   (_glapi_proc) noopSecondaryColorP3uiv,
   (_glapi_proc) noopTexCoordP1ui,
   (_glapi_proc) noopTexCoordP1uiv,
   (_glapi_proc) noopTexCoordP2ui,
   (_glapi_proc) noopTexCoordP2uiv,
   (_glapi_proc) noopTexCoordP3ui,
   (_glapi_proc) noopTexCoordP3uiv,
   (_glapi_proc) noopTexCoordP4ui,
   (_glapi_proc) noopTexCoordP4uiv,
   (_glapi_proc) noopVertexAttribP1ui,
   (_glapi_proc) noopVertexAttribP1uiv,
   (_glapi_proc) noopVertexAttribP2ui,
   (_glapi_proc) noopVertexAttribP2uiv,
   (_glapi_proc) noopVertexAttribP3ui,
   (_glapi_proc) noopVertexAttribP3uiv,
   (_glapi_proc) noopVertexAttribP4ui,
   (_glapi_proc) noopVertexAttribP4uiv,
   (_glapi_proc) noopVertexP2ui,
   (_glapi_proc) noopVertexP2uiv,
   (_glapi_proc) noopVertexP3ui,
   (_glapi_proc) noopVertexP3uiv,
   (_glapi_proc) noopVertexP4ui,
   (_glapi_proc) noopVertexP4uiv,
   (_glapi_proc) noopDrawArraysIndirect,
   (_glapi_proc) noopDrawElementsIndirect,
   (_glapi_proc) noopGetUniformdv,
   (_glapi_proc) noopUniform1d,
   (_glapi_proc) noopUniform1dv,
   (_glapi_proc) noopUniform2d,
   (_glapi_proc) noopUniform2dv,
   (_glapi_proc) noopUniform3d,
   (_glapi_proc) noopUniform3dv,
   (_glapi_proc) noopUniform4d,
   (_glapi_proc) noopUniform4dv,
   (_glapi_proc) noopUniformMatrix2dv,
   (_glapi_proc) noopUniformMatrix2x3dv,
   (_glapi_proc) noopUniformMatrix2x4dv,
   (_glapi_proc) noopUniformMatrix3dv,
   (_glapi_proc) noopUniformMatrix3x2dv,
   (_glapi_proc) noopUniformMatrix3x4dv,
   (_glapi_proc) noopUniformMatrix4dv,
   (_glapi_proc) noopUniformMatrix4x2dv,
   (_glapi_proc) noopUniformMatrix4x3dv,
   (_glapi_proc) noopGetActiveSubroutineName,
   (_glapi_proc) noopGetActiveSubroutineUniformName,
   (_glapi_proc) noopGetActiveSubroutineUniformiv,
   (_glapi_proc) noopGetProgramStageiv,
   (_glapi_proc) noopGetSubroutineIndex,
   (_glapi_proc) noopGetSubroutineUniformLocation,
   (_glapi_proc) noopGetUniformSubroutineuiv,
   (_glapi_proc) noopUniformSubroutinesuiv,
   (_glapi_proc) noopPatchParameterfv,
   (_glapi_proc) noopPatchParameteri,
   (_glapi_proc) noopBindTransformFeedback,
   (_glapi_proc) noopDeleteTransformFeedbacks,
   (_glapi_proc) noopDrawTransformFeedback,
   (_glapi_proc) noopGenTransformFeedbacks,
   (_glapi_proc) noopIsTransformFeedback,
   (_glapi_proc) noopPauseTransformFeedback,
   (_glapi_proc) noopResumeTransformFeedback,
   (_glapi_proc) noopBeginQueryIndexed,
   (_glapi_proc) noopDrawTransformFeedbackStream,
   (_glapi_proc) noopEndQueryIndexed,
   (_glapi_proc) noopGetQueryIndexediv,
   (_glapi_proc) noopClearDepthf,
   (_glapi_proc) noopDepthRangef,
   (_glapi_proc) noopGetShaderPrecisionFormat,
   (_glapi_proc) noopReleaseShaderCompiler,
   (_glapi_proc) noopShaderBinary,
   (_glapi_proc) noopGetProgramBinary,
   (_glapi_proc) noopProgramBinary,
   (_glapi_proc) noopProgramParameteri,
   (_glapi_proc) noopGetVertexAttribLdv,
   (_glapi_proc) noopVertexAttribL1d,
   (_glapi_proc) noopVertexAttribL1dv,
   (_glapi_proc) noopVertexAttribL2d,
   (_glapi_proc) noopVertexAttribL2dv,
   (_glapi_proc) noopVertexAttribL3d,
   (_glapi_proc) noopVertexAttribL3dv,
   (_glapi_proc) noopVertexAttribL4d,
   (_glapi_proc) noopVertexAttribL4dv,
   (_glapi_proc) noopVertexAttribLPointer,
   (_glapi_proc) noopDepthRangeArrayv,
   (_glapi_proc) noopDepthRangeIndexed,
   (_glapi_proc) noopGetDoublei_v,
   (_glapi_proc) noopGetFloati_v,
   (_glapi_proc) noopScissorArrayv,
   (_glapi_proc) noopScissorIndexed,
   (_glapi_proc) noopScissorIndexedv,
   (_glapi_proc) noopViewportArrayv,
   (_glapi_proc) noopViewportIndexedf,
   (_glapi_proc) noopViewportIndexedfv,
   (_glapi_proc) noopGetGraphicsResetStatusARB,
   (_glapi_proc) noopGetnCompressedTexImageARB,
   (_glapi_proc) noopGetnMapdvARB,
   (_glapi_proc) noopGetnMapfvARB,
   (_glapi_proc) noopGetnMapivARB,
   (_glapi_proc) noopGetnPixelMapfvARB,
   (_glapi_proc) noopGetnPixelMapuivARB,
   (_glapi_proc) noopGetnPixelMapusvARB,
   (_glapi_proc) noopGetnPolygonStippleARB,
   (_glapi_proc) noopGetnTexImageARB,
   (_glapi_proc) noopGetnUniformdvARB,
   (_glapi_proc) noopGetnUniformfvARB,
   (_glapi_proc) noopGetnUniformivARB,
   (_glapi_proc) noopGetnUniformuivARB,
   (_glapi_proc) noopReadnPixelsARB,
   (_glapi_proc) noopDrawArraysInstancedBaseInstance,
   (_glapi_proc) noopDrawElementsInstancedBaseInstance,
   (_glapi_proc) noopDrawElementsInstancedBaseVertexBaseInstance,
   (_glapi_proc) noopDrawTransformFeedbackInstanced,
   (_glapi_proc) noopDrawTransformFeedbackStreamInstanced,
   (_glapi_proc) noopGetInternalformativ,
   (_glapi_proc) noopGetActiveAtomicCounterBufferiv,
   (_glapi_proc) noopBindImageTexture,
   (_glapi_proc) noopMemoryBarrier,
   (_glapi_proc) noopTexStorage1D,
   (_glapi_proc) noopTexStorage2D,
   (_glapi_proc) noopTexStorage3D,
   (_glapi_proc) noopTextureStorage1DEXT,
   (_glapi_proc) noopTextureStorage2DEXT,
   (_glapi_proc) noopTextureStorage3DEXT,
   (_glapi_proc) noopClearBufferData,
   (_glapi_proc) noopClearBufferSubData,
   (_glapi_proc) noopDispatchCompute,
   (_glapi_proc) noopDispatchComputeIndirect,
   (_glapi_proc) noopCopyImageSubData,
   (_glapi_proc) noopTextureView,
   (_glapi_proc) noopBindVertexBuffer,
   (_glapi_proc) noopVertexAttribBinding,
   (_glapi_proc) noopVertexAttribFormat,
   (_glapi_proc) noopVertexAttribIFormat,
   (_glapi_proc) noopVertexAttribLFormat,
   (_glapi_proc) noopVertexBindingDivisor,
   (_glapi_proc) noopFramebufferParameteri,
   (_glapi_proc) noopGetFramebufferParameteriv,
   (_glapi_proc) noopGetInternalformati64v,
   (_glapi_proc) noopMultiDrawArraysIndirect,
   (_glapi_proc) noopMultiDrawElementsIndirect,
   (_glapi_proc) noopGetProgramInterfaceiv,
   (_glapi_proc) noopGetProgramResourceIndex,
   (_glapi_proc) noopGetProgramResourceLocation,
   (_glapi_proc) noopGetProgramResourceLocationIndex,
   (_glapi_proc) noopGetProgramResourceName,
   (_glapi_proc) noopGetProgramResourceiv,
   (_glapi_proc) noopShaderStorageBlockBinding,
   (_glapi_proc) noopTexBufferRange,
   (_glapi_proc) noopTexStorage2DMultisample,
   (_glapi_proc) noopTexStorage3DMultisample,
   (_glapi_proc) noopBufferStorage,
   (_glapi_proc) noopClearTexImage,
   (_glapi_proc) noopClearTexSubImage,
   (_glapi_proc) noopBindBuffersBase,
   (_glapi_proc) noopBindBuffersRange,
   (_glapi_proc) noopBindImageTextures,
   (_glapi_proc) noopBindSamplers,
   (_glapi_proc) noopBindTextures,
   (_glapi_proc) noopBindVertexBuffers,
   (_glapi_proc) noopGetImageHandleARB,
   (_glapi_proc) noopGetTextureHandleARB,
   (_glapi_proc) noopGetTextureSamplerHandleARB,
   (_glapi_proc) noopGetVertexAttribLui64vARB,
   (_glapi_proc) noopIsImageHandleResidentARB,
   (_glapi_proc) noopIsTextureHandleResidentARB,
   (_glapi_proc) noopMakeImageHandleNonResidentARB,
   (_glapi_proc) noopMakeImageHandleResidentARB,
   (_glapi_proc) noopMakeTextureHandleNonResidentARB,
   (_glapi_proc) noopMakeTextureHandleResidentARB,
   (_glapi_proc) noopProgramUniformHandleui64ARB,
   (_glapi_proc) noopProgramUniformHandleui64vARB,
   (_glapi_proc) noopUniformHandleui64ARB,
   (_glapi_proc) noopUniformHandleui64vARB,
   (_glapi_proc) noopVertexAttribL1ui64ARB,
   (_glapi_proc) noopVertexAttribL1ui64vARB,
   (_glapi_proc) noopDispatchComputeGroupSizeARB,
   (_glapi_proc) noopMultiDrawArraysIndirectCountARB,
   (_glapi_proc) noopMultiDrawElementsIndirectCountARB,
   (_glapi_proc) noopClipControl,
   (_glapi_proc) noopBindTextureUnit,
   (_glapi_proc) noopBlitNamedFramebuffer,
   (_glapi_proc) noopCheckNamedFramebufferStatus,
   (_glapi_proc) noopClearNamedBufferData,
   (_glapi_proc) noopClearNamedBufferSubData,
   (_glapi_proc) noopClearNamedFramebufferfi,
   (_glapi_proc) noopClearNamedFramebufferfv,
   (_glapi_proc) noopClearNamedFramebufferiv,
   (_glapi_proc) noopClearNamedFramebufferuiv,
   (_glapi_proc) noopCompressedTextureSubImage1D,
   (_glapi_proc) noopCompressedTextureSubImage2D,
   (_glapi_proc) noopCompressedTextureSubImage3D,
   (_glapi_proc) noopCopyNamedBufferSubData,
   (_glapi_proc) noopCopyTextureSubImage1D,
   (_glapi_proc) noopCopyTextureSubImage2D,
   (_glapi_proc) noopCopyTextureSubImage3D,
   (_glapi_proc) noopCreateBuffers,
   (_glapi_proc) noopCreateFramebuffers,
   (_glapi_proc) noopCreateProgramPipelines,
   (_glapi_proc) noopCreateQueries,
   (_glapi_proc) noopCreateRenderbuffers,
   (_glapi_proc) noopCreateSamplers,
   (_glapi_proc) noopCreateTextures,
   (_glapi_proc) noopCreateTransformFeedbacks,
   (_glapi_proc) noopCreateVertexArrays,
   (_glapi_proc) noopDisableVertexArrayAttrib,
   (_glapi_proc) noopEnableVertexArrayAttrib,
   (_glapi_proc) noopFlushMappedNamedBufferRange,
   (_glapi_proc) noopGenerateTextureMipmap,
   (_glapi_proc) noopGetCompressedTextureImage,
   (_glapi_proc) noopGetNamedBufferParameteri64v,
   (_glapi_proc) noopGetNamedBufferParameteriv,
   (_glapi_proc) noopGetNamedBufferPointerv,
   (_glapi_proc) noopGetNamedBufferSubData,
   (_glapi_proc) noopGetNamedFramebufferAttachmentParameteriv,
   (_glapi_proc) noopGetNamedFramebufferParameteriv,
   (_glapi_proc) noopGetNamedRenderbufferParameteriv,
   (_glapi_proc) noopGetQueryBufferObjecti64v,
   (_glapi_proc) noopGetQueryBufferObjectiv,
   (_glapi_proc) noopGetQueryBufferObjectui64v,
   (_glapi_proc) noopGetQueryBufferObjectuiv,
   (_glapi_proc) noopGetTextureImage,
   (_glapi_proc) noopGetTextureLevelParameterfv,
   (_glapi_proc) noopGetTextureLevelParameteriv,
   (_glapi_proc) noopGetTextureParameterIiv,
   (_glapi_proc) noopGetTextureParameterIuiv,
   (_glapi_proc) noopGetTextureParameterfv,
   (_glapi_proc) noopGetTextureParameteriv,
   (_glapi_proc) noopGetTransformFeedbacki64_v,
   (_glapi_proc) noopGetTransformFeedbacki_v,
   (_glapi_proc) noopGetTransformFeedbackiv,
   (_glapi_proc) noopGetVertexArrayIndexed64iv,
   (_glapi_proc) noopGetVertexArrayIndexediv,
   (_glapi_proc) noopGetVertexArrayiv,
   (_glapi_proc) noopInvalidateNamedFramebufferData,
   (_glapi_proc) noopInvalidateNamedFramebufferSubData,
   (_glapi_proc) noopMapNamedBuffer,
   (_glapi_proc) noopMapNamedBufferRange,
   (_glapi_proc) noopNamedBufferData,
   (_glapi_proc) noopNamedBufferStorage,
   (_glapi_proc) noopNamedBufferSubData,
   (_glapi_proc) noopNamedFramebufferDrawBuffer,
   (_glapi_proc) noopNamedFramebufferDrawBuffers,
   (_glapi_proc) noopNamedFramebufferParameteri,
   (_glapi_proc) noopNamedFramebufferReadBuffer,
   (_glapi_proc) noopNamedFramebufferRenderbuffer,
   (_glapi_proc) noopNamedFramebufferTexture,
   (_glapi_proc) noopNamedFramebufferTextureLayer,
   (_glapi_proc) noopNamedRenderbufferStorage,
   (_glapi_proc) noopNamedRenderbufferStorageMultisample,
   (_glapi_proc) noopTextureBuffer,
   (_glapi_proc) noopTextureBufferRange,
   (_glapi_proc) noopTextureParameterIiv,
   (_glapi_proc) noopTextureParameterIuiv,
   (_glapi_proc) noopTextureParameterf,
   (_glapi_proc) noopTextureParameterfv,
   (_glapi_proc) noopTextureParameteri,
   (_glapi_proc) noopTextureParameteriv,
   (_glapi_proc) noopTextureStorage1D,
   (_glapi_proc) noopTextureStorage2D,
   (_glapi_proc) noopTextureStorage2DMultisample,
   (_glapi_proc) noopTextureStorage3D,
   (_glapi_proc) noopTextureStorage3DMultisample,
   (_glapi_proc) noopTextureSubImage1D,
   (_glapi_proc) noopTextureSubImage2D,
   (_glapi_proc) noopTextureSubImage3D,
   (_glapi_proc) noopTransformFeedbackBufferBase,
   (_glapi_proc) noopTransformFeedbackBufferRange,
   (_glapi_proc) noopUnmapNamedBufferEXT,
   (_glapi_proc) noopVertexArrayAttribBinding,
   (_glapi_proc) noopVertexArrayAttribFormat,
   (_glapi_proc) noopVertexArrayAttribIFormat,
   (_glapi_proc) noopVertexArrayAttribLFormat,
   (_glapi_proc) noopVertexArrayBindingDivisor,
   (_glapi_proc) noopVertexArrayElementBuffer,
   (_glapi_proc) noopVertexArrayVertexBuffer,
   (_glapi_proc) noopVertexArrayVertexBuffers,
   (_glapi_proc) noopGetCompressedTextureSubImage,
   (_glapi_proc) noopGetTextureSubImage,
   (_glapi_proc) noopBufferPageCommitmentARB,
   (_glapi_proc) noopNamedBufferPageCommitmentARB,
   (_glapi_proc) noopGetUniformi64vARB,
   (_glapi_proc) noopGetUniformui64vARB,
   (_glapi_proc) noopGetnUniformi64vARB,
   (_glapi_proc) noopGetnUniformui64vARB,
   (_glapi_proc) noopProgramUniform1i64ARB,
   (_glapi_proc) noopProgramUniform1i64vARB,
   (_glapi_proc) noopProgramUniform1ui64ARB,
   (_glapi_proc) noopProgramUniform1ui64vARB,
   (_glapi_proc) noopProgramUniform2i64ARB,
   (_glapi_proc) noopProgramUniform2i64vARB,
   (_glapi_proc) noopProgramUniform2ui64ARB,
   (_glapi_proc) noopProgramUniform2ui64vARB,
   (_glapi_proc) noopProgramUniform3i64ARB,
   (_glapi_proc) noopProgramUniform3i64vARB,
   (_glapi_proc) noopProgramUniform3ui64ARB,
   (_glapi_proc) noopProgramUniform3ui64vARB,
   (_glapi_proc) noopProgramUniform4i64ARB,
   (_glapi_proc) noopProgramUniform4i64vARB,
   (_glapi_proc) noopProgramUniform4ui64ARB,
   (_glapi_proc) noopProgramUniform4ui64vARB,
   (_glapi_proc) noopUniform1i64ARB,
   (_glapi_proc) noopUniform1i64vARB,
   (_glapi_proc) noopUniform1ui64ARB,
   (_glapi_proc) noopUniform1ui64vARB,
   (_glapi_proc) noopUniform2i64ARB,
   (_glapi_proc) noopUniform2i64vARB,
   (_glapi_proc) noopUniform2ui64ARB,
   (_glapi_proc) noopUniform2ui64vARB,
   (_glapi_proc) noopUniform3i64ARB,
   (_glapi_proc) noopUniform3i64vARB,
   (_glapi_proc) noopUniform3ui64ARB,
   (_glapi_proc) noopUniform3ui64vARB,
   (_glapi_proc) noopUniform4i64ARB,
   (_glapi_proc) noopUniform4i64vARB,
   (_glapi_proc) noopUniform4ui64ARB,
   (_glapi_proc) noopUniform4ui64vARB,
   (_glapi_proc) noopEvaluateDepthValuesARB,
   (_glapi_proc) noopFramebufferSampleLocationsfvARB,
   (_glapi_proc) noopNamedFramebufferSampleLocationsfvARB,
   (_glapi_proc) noopSpecializeShaderARB,
   (_glapi_proc) noopInvalidateBufferData,
   (_glapi_proc) noopInvalidateBufferSubData,
   (_glapi_proc) noopInvalidateFramebuffer,
   (_glapi_proc) noopInvalidateSubFramebuffer,
   (_glapi_proc) noopInvalidateTexImage,
   (_glapi_proc) noopInvalidateTexSubImage,
   (_glapi_proc) noopDrawTexfOES,
   (_glapi_proc) noopDrawTexfvOES,
   (_glapi_proc) noopDrawTexiOES,
   (_glapi_proc) noopDrawTexivOES,
   (_glapi_proc) noopDrawTexsOES,
   (_glapi_proc) noopDrawTexsvOES,
   (_glapi_proc) noopDrawTexxOES,
   (_glapi_proc) noopDrawTexxvOES,
   (_glapi_proc) noopPointSizePointerOES,
   (_glapi_proc) noopQueryMatrixxOES,
   (_glapi_proc) noopColorPointerEXT,
   (_glapi_proc) noopEdgeFlagPointerEXT,
   (_glapi_proc) noopIndexPointerEXT,
   (_glapi_proc) noopNormalPointerEXT,
   (_glapi_proc) noopTexCoordPointerEXT,
   (_glapi_proc) noopVertexPointerEXT,
   (_glapi_proc) noopDiscardFramebufferEXT,
   (_glapi_proc) noopActiveShaderProgram,
   (_glapi_proc) noopBindProgramPipeline,
   (_glapi_proc) noopCreateShaderProgramv,
   (_glapi_proc) noopDeleteProgramPipelines,
   (_glapi_proc) noopGenProgramPipelines,
   (_glapi_proc) noopGetProgramPipelineInfoLog,
   (_glapi_proc) noopGetProgramPipelineiv,
   (_glapi_proc) noopIsProgramPipeline,
   (_glapi_proc) noopLockArraysEXT,
   (_glapi_proc) noopProgramUniform1d,
   (_glapi_proc) noopProgramUniform1dv,
   (_glapi_proc) noopProgramUniform1f,
   (_glapi_proc) noopProgramUniform1fv,
   (_glapi_proc) noopProgramUniform1i,
   (_glapi_proc) noopProgramUniform1iv,
   (_glapi_proc) noopProgramUniform1ui,
   (_glapi_proc) noopProgramUniform1uiv,
   (_glapi_proc) noopProgramUniform2d,
   (_glapi_proc) noopProgramUniform2dv,
   (_glapi_proc) noopProgramUniform2f,
   (_glapi_proc) noopProgramUniform2fv,
   (_glapi_proc) noopProgramUniform2i,
   (_glapi_proc) noopProgramUniform2iv,
   (_glapi_proc) noopProgramUniform2ui,
   (_glapi_proc) noopProgramUniform2uiv,
   (_glapi_proc) noopProgramUniform3d,
   (_glapi_proc) noopProgramUniform3dv,
   (_glapi_proc) noopProgramUniform3f,
   (_glapi_proc) noopProgramUniform3fv,
   (_glapi_proc) noopProgramUniform3i,
   (_glapi_proc) noopProgramUniform3iv,
   (_glapi_proc) noopProgramUniform3ui,
   (_glapi_proc) noopProgramUniform3uiv,
   (_glapi_proc) noopProgramUniform4d,
   (_glapi_proc) noopProgramUniform4dv,
   (_glapi_proc) noopProgramUniform4f,
   (_glapi_proc) noopProgramUniform4fv,
   (_glapi_proc) noopProgramUniform4i,
   (_glapi_proc) noopProgramUniform4iv,
   (_glapi_proc) noopProgramUniform4ui,
   (_glapi_proc) noopProgramUniform4uiv,
   (_glapi_proc) noopProgramUniformMatrix2dv,
   (_glapi_proc) noopProgramUniformMatrix2fv,
   (_glapi_proc) noopProgramUniformMatrix2x3dv,
   (_glapi_proc) noopProgramUniformMatrix2x3fv,
   (_glapi_proc) noopProgramUniformMatrix2x4dv,
   (_glapi_proc) noopProgramUniformMatrix2x4fv,
   (_glapi_proc) noopProgramUniformMatrix3dv,
   (_glapi_proc) noopProgramUniformMatrix3fv,
   (_glapi_proc) noopProgramUniformMatrix3x2dv,
   (_glapi_proc) noopProgramUniformMatrix3x2fv,
   (_glapi_proc) noopProgramUniformMatrix3x4dv,
   (_glapi_proc) noopProgramUniformMatrix3x4fv,
   (_glapi_proc) noopProgramUniformMatrix4dv,
   (_glapi_proc) noopProgramUniformMatrix4fv,
   (_glapi_proc) noopProgramUniformMatrix4x2dv,
   (_glapi_proc) noopProgramUniformMatrix4x2fv,
   (_glapi_proc) noopProgramUniformMatrix4x3dv,
   (_glapi_proc) noopProgramUniformMatrix4x3fv,
   (_glapi_proc) noopUnlockArraysEXT,
   (_glapi_proc) noopUseProgramStages,
   (_glapi_proc) noopValidateProgramPipeline,
   (_glapi_proc) noopFramebufferTexture2DMultisampleEXT,
   (_glapi_proc) noopDebugMessageCallback,
   (_glapi_proc) noopDebugMessageControl,
   (_glapi_proc) noopDebugMessageInsert,
   (_glapi_proc) noopGetDebugMessageLog,
   (_glapi_proc) noopGetObjectLabel,
   (_glapi_proc) noopGetObjectPtrLabel,
   (_glapi_proc) noopObjectLabel,
   (_glapi_proc) noopObjectPtrLabel,
   (_glapi_proc) noopPopDebugGroup,
   (_glapi_proc) noopPushDebugGroup,
   (_glapi_proc) noopSecondaryColor3fEXT,
   (_glapi_proc) noopSecondaryColor3fvEXT,
   (_glapi_proc) noopMultiDrawElements,
   (_glapi_proc) noopFogCoordfEXT,
   (_glapi_proc) noopFogCoordfvEXT,
   (_glapi_proc) noopWindowPos4dMESA,
   (_glapi_proc) noopWindowPos4dvMESA,
   (_glapi_proc) noopWindowPos4fMESA,
   (_glapi_proc) noopWindowPos4fvMESA,
   (_glapi_proc) noopWindowPos4iMESA,
   (_glapi_proc) noopWindowPos4ivMESA,
   (_glapi_proc) noopWindowPos4sMESA,
   (_glapi_proc) noopWindowPos4svMESA,
   (_glapi_proc) noopMultiModeDrawArraysIBM,
   (_glapi_proc) noopMultiModeDrawElementsIBM,
   (_glapi_proc) noopVertexAttrib1dNV,
   (_glapi_proc) noopVertexAttrib1dvNV,
   (_glapi_proc) noopVertexAttrib1fNV,
   (_glapi_proc) noopVertexAttrib1fvNV,
   (_glapi_proc) noopVertexAttrib1sNV,
   (_glapi_proc) noopVertexAttrib1svNV,
   (_glapi_proc) noopVertexAttrib2dNV,
   (_glapi_proc) noopVertexAttrib2dvNV,
   (_glapi_proc) noopVertexAttrib2fNV,
   (_glapi_proc) noopVertexAttrib2fvNV,
   (_glapi_proc) noopVertexAttrib2sNV,
   (_glapi_proc) noopVertexAttrib2svNV,
   (_glapi_proc) noopVertexAttrib3dNV,
   (_glapi_proc) noopVertexAttrib3dvNV,
   (_glapi_proc) noopVertexAttrib3fNV,
   (_glapi_proc) noopVertexAttrib3fvNV,
   (_glapi_proc) noopVertexAttrib3sNV,
   (_glapi_proc) noopVertexAttrib3svNV,
   (_glapi_proc) noopVertexAttrib4dNV,
   (_glapi_proc) noopVertexAttrib4dvNV,
   (_glapi_proc) noopVertexAttrib4fNV,
   (_glapi_proc) noopVertexAttrib4fvNV,
   (_glapi_proc) noopVertexAttrib4sNV,
   (_glapi_proc) noopVertexAttrib4svNV,
   (_glapi_proc) noopVertexAttrib4ubNV,
   (_glapi_proc) noopVertexAttrib4ubvNV,
   (_glapi_proc) noopVertexAttribs1dvNV,
   (_glapi_proc) noopVertexAttribs1fvNV,
   (_glapi_proc) noopVertexAttribs1svNV,
   (_glapi_proc) noopVertexAttribs2dvNV,
   (_glapi_proc) noopVertexAttribs2fvNV,
   (_glapi_proc) noopVertexAttribs2svNV,
   (_glapi_proc) noopVertexAttribs3dvNV,
   (_glapi_proc) noopVertexAttribs3fvNV,
   (_glapi_proc) noopVertexAttribs3svNV,
   (_glapi_proc) noopVertexAttribs4dvNV,
   (_glapi_proc) noopVertexAttribs4fvNV,
   (_glapi_proc) noopVertexAttribs4svNV,
   (_glapi_proc) noopVertexAttribs4ubvNV,
   (_glapi_proc) noopAlphaFragmentOp1ATI,
   (_glapi_proc) noopAlphaFragmentOp2ATI,
   (_glapi_proc) noopAlphaFragmentOp3ATI,
   (_glapi_proc) noopBeginFragmentShaderATI,
   (_glapi_proc) noopBindFragmentShaderATI,
   (_glapi_proc) noopColorFragmentOp1ATI,
   (_glapi_proc) noopColorFragmentOp2ATI,
   (_glapi_proc) noopColorFragmentOp3ATI,
   (_glapi_proc) noopDeleteFragmentShaderATI,
   (_glapi_proc) noopEndFragmentShaderATI,
   (_glapi_proc) noopGenFragmentShadersATI,
   (_glapi_proc) noopPassTexCoordATI,
   (_glapi_proc) noopSampleMapATI,
   (_glapi_proc) noopSetFragmentShaderConstantATI,
   (_glapi_proc) noopDepthRangeArrayfvOES,
   (_glapi_proc) noopDepthRangeIndexedfOES,
   (_glapi_proc) noopActiveStencilFaceEXT,
   (_glapi_proc) noopPrimitiveRestartNV,
   (_glapi_proc) noopGetTexGenxvOES,
   (_glapi_proc) noopTexGenxOES,
   (_glapi_proc) noopTexGenxvOES,
   (_glapi_proc) noopDepthBoundsEXT,
   (_glapi_proc) noopBindFramebufferEXT,
   (_glapi_proc) noopBindRenderbufferEXT,
   (_glapi_proc) noopStringMarkerGREMEDY,
   (_glapi_proc) noopVertexAttribI1iEXT,
   (_glapi_proc) noopVertexAttribI1uiEXT,
   (_glapi_proc) noopVertexAttribI2iEXT,
   (_glapi_proc) noopVertexAttribI2ivEXT,
   (_glapi_proc) noopVertexAttribI2uiEXT,
   (_glapi_proc) noopVertexAttribI2uivEXT,
   (_glapi_proc) noopVertexAttribI3iEXT,
   (_glapi_proc) noopVertexAttribI3ivEXT,
   (_glapi_proc) noopVertexAttribI3uiEXT,
   (_glapi_proc) noopVertexAttribI3uivEXT,
   (_glapi_proc) noopVertexAttribI4iEXT,
   (_glapi_proc) noopVertexAttribI4ivEXT,
   (_glapi_proc) noopVertexAttribI4uiEXT,
   (_glapi_proc) noopVertexAttribI4uivEXT,
   (_glapi_proc) noopClearColorIiEXT,
   (_glapi_proc) noopClearColorIuiEXT,
   (_glapi_proc) noopBindBufferOffsetEXT,
   (_glapi_proc) noopBeginPerfMonitorAMD,
   (_glapi_proc) noopDeletePerfMonitorsAMD,
   (_glapi_proc) noopEndPerfMonitorAMD,
   (_glapi_proc) noopGenPerfMonitorsAMD,
   (_glapi_proc) noopGetPerfMonitorCounterDataAMD,
   (_glapi_proc) noopGetPerfMonitorCounterInfoAMD,
   (_glapi_proc) noopGetPerfMonitorCounterStringAMD,
   (_glapi_proc) noopGetPerfMonitorCountersAMD,
   (_glapi_proc) noopGetPerfMonitorGroupStringAMD,
   (_glapi_proc) noopGetPerfMonitorGroupsAMD,
   (_glapi_proc) noopSelectPerfMonitorCountersAMD,
   (_glapi_proc) noopTextureBarrierNV,
   (_glapi_proc) noopVDPAUFiniNV,
   (_glapi_proc) noopVDPAUGetSurfaceivNV,
   (_glapi_proc) noopVDPAUInitNV,
   (_glapi_proc) noopVDPAUIsSurfaceNV,
   (_glapi_proc) noopVDPAUMapSurfacesNV,
   (_glapi_proc) noopVDPAURegisterOutputSurfaceNV,
   (_glapi_proc) noopVDPAURegisterVideoSurfaceNV,
   (_glapi_proc) noopVDPAUSurfaceAccessNV,
   (_glapi_proc) noopVDPAUUnmapSurfacesNV,
   (_glapi_proc) noopVDPAUUnregisterSurfaceNV,
   (_glapi_proc) noopBeginPerfQueryINTEL,
   (_glapi_proc) noopCreatePerfQueryINTEL,
   (_glapi_proc) noopDeletePerfQueryINTEL,
   (_glapi_proc) noopEndPerfQueryINTEL,
   (_glapi_proc) noopGetFirstPerfQueryIdINTEL,
   (_glapi_proc) noopGetNextPerfQueryIdINTEL,
   (_glapi_proc) noopGetPerfCounterInfoINTEL,
   (_glapi_proc) noopGetPerfQueryDataINTEL,
   (_glapi_proc) noopGetPerfQueryIdByNameINTEL,
   (_glapi_proc) noopGetPerfQueryInfoINTEL,
   (_glapi_proc) noopPolygonOffsetClampEXT,
   (_glapi_proc) noopSubpixelPrecisionBiasNV,
   (_glapi_proc) noopConservativeRasterParameterfNV,
   (_glapi_proc) noopConservativeRasterParameteriNV,
   (_glapi_proc) noopWindowRectanglesEXT,
   (_glapi_proc) noopBufferStorageMemEXT,
   (_glapi_proc) noopCreateMemoryObjectsEXT,
   (_glapi_proc) noopDeleteMemoryObjectsEXT,
   (_glapi_proc) noopDeleteSemaphoresEXT,
   (_glapi_proc) noopGenSemaphoresEXT,
   (_glapi_proc) noopGetMemoryObjectParameterivEXT,
   (_glapi_proc) noopGetSemaphoreParameterui64vEXT,
   (_glapi_proc) noopGetUnsignedBytei_vEXT,
   (_glapi_proc) noopGetUnsignedBytevEXT,
   (_glapi_proc) noopIsMemoryObjectEXT,
   (_glapi_proc) noopIsSemaphoreEXT,
   (_glapi_proc) noopMemoryObjectParameterivEXT,
   (_glapi_proc) noopNamedBufferStorageMemEXT,
   (_glapi_proc) noopSemaphoreParameterui64vEXT,
   (_glapi_proc) noopSignalSemaphoreEXT,
   (_glapi_proc) noopTexStorageMem1DEXT,
   (_glapi_proc) noopTexStorageMem2DEXT,
   (_glapi_proc) noopTexStorageMem2DMultisampleEXT,
   (_glapi_proc) noopTexStorageMem3DEXT,
   (_glapi_proc) noopTexStorageMem3DMultisampleEXT,
   (_glapi_proc) noopTextureStorageMem1DEXT,
   (_glapi_proc) noopTextureStorageMem2DEXT,
   (_glapi_proc) noopTextureStorageMem2DMultisampleEXT,
   (_glapi_proc) noopTextureStorageMem3DEXT,
   (_glapi_proc) noopTextureStorageMem3DMultisampleEXT,
   (_glapi_proc) noopWaitSemaphoreEXT,
   (_glapi_proc) noopImportMemoryFdEXT,
   (_glapi_proc) noopImportSemaphoreFdEXT,
   (_glapi_proc) noopFramebufferFetchBarrierEXT,
   (_glapi_proc) noopNamedRenderbufferStorageMultisampleAdvancedAMD,
   (_glapi_proc) noopRenderbufferStorageMultisampleAdvancedAMD,
   (_glapi_proc) noopStencilFuncSeparateATI,
   (_glapi_proc) noopProgramEnvParameters4fvEXT,
   (_glapi_proc) noopProgramLocalParameters4fvEXT,
   (_glapi_proc) noopEGLImageTargetRenderbufferStorageOES,
   (_glapi_proc) noopEGLImageTargetTexture2DOES,
   (_glapi_proc) noopAlphaFuncx,
   (_glapi_proc) noopClearColorx,
   (_glapi_proc) noopClearDepthx,
   (_glapi_proc) noopColor4x,
   (_glapi_proc) noopDepthRangex,
   (_glapi_proc) noopFogx,
   (_glapi_proc) noopFogxv,
   (_glapi_proc) noopFrustumf,
   (_glapi_proc) noopFrustumx,
   (_glapi_proc) noopLightModelx,
   (_glapi_proc) noopLightModelxv,
   (_glapi_proc) noopLightx,
   (_glapi_proc) noopLightxv,
   (_glapi_proc) noopLineWidthx,
   (_glapi_proc) noopLoadMatrixx,
   (_glapi_proc) noopMaterialx,
   (_glapi_proc) noopMaterialxv,
   (_glapi_proc) noopMultMatrixx,
   (_glapi_proc) noopMultiTexCoord4x,
   (_glapi_proc) noopNormal3x,
   (_glapi_proc) noopOrthof,
   (_glapi_proc) noopOrthox,
   (_glapi_proc) noopPointSizex,
   (_glapi_proc) noopPolygonOffsetx,
   (_glapi_proc) noopRotatex,
   (_glapi_proc) noopSampleCoveragex,
   (_glapi_proc) noopScalex,
   (_glapi_proc) noopTexEnvx,
   (_glapi_proc) noopTexEnvxv,
   (_glapi_proc) noopTexParameterx,
   (_glapi_proc) noopTranslatex,
   (_glapi_proc) noopClipPlanef,
   (_glapi_proc) noopClipPlanex,
   (_glapi_proc) noopGetClipPlanef,
   (_glapi_proc) noopGetClipPlanex,
   (_glapi_proc) noopGetFixedv,
   (_glapi_proc) noopGetLightxv,
   (_glapi_proc) noopGetMaterialxv,
   (_glapi_proc) noopGetTexEnvxv,
   (_glapi_proc) noopGetTexParameterxv,
   (_glapi_proc) noopPointParameterx,
   (_glapi_proc) noopPointParameterxv,
   (_glapi_proc) noopTexParameterxv,
   (_glapi_proc) noopBlendBarrier,
   (_glapi_proc) noopPrimitiveBoundingBox,
   (_glapi_proc) noopMaxShaderCompilerThreadsKHR,
   (_glapi_proc) noopMatrixLoadfEXT,
   (_glapi_proc) noopMatrixLoaddEXT,
   (_glapi_proc) noopMatrixMultfEXT,
   (_glapi_proc) noopMatrixMultdEXT,
   (_glapi_proc) noopMatrixLoadIdentityEXT,
   (_glapi_proc) noopMatrixRotatefEXT,
   (_glapi_proc) noopMatrixRotatedEXT,
   (_glapi_proc) noopMatrixScalefEXT,
   (_glapi_proc) noopMatrixScaledEXT,
   (_glapi_proc) noopMatrixTranslatefEXT,
   (_glapi_proc) noopMatrixTranslatedEXT,
   (_glapi_proc) noopMatrixOrthoEXT,
   (_glapi_proc) noopMatrixFrustumEXT,
   (_glapi_proc) noopMatrixPushEXT,
   (_glapi_proc) noopMatrixPopEXT,
   (_glapi_proc) noopMatrixLoadTransposefEXT,
   (_glapi_proc) noopMatrixLoadTransposedEXT,
   (_glapi_proc) noopMatrixMultTransposefEXT,
   (_glapi_proc) noopMatrixMultTransposedEXT,
   (_glapi_proc) noopBindMultiTextureEXT,
   (_glapi_proc) noopNamedBufferDataEXT,
   (_glapi_proc) noopNamedBufferSubDataEXT,
   (_glapi_proc) noopNamedBufferStorageEXT,
   (_glapi_proc) noopMapNamedBufferRangeEXT,
   (_glapi_proc) noopTextureImage1DEXT,
   (_glapi_proc) noopTextureImage2DEXT,
   (_glapi_proc) noopTextureImage3DEXT,
   (_glapi_proc) noopTextureSubImage1DEXT,
   (_glapi_proc) noopTextureSubImage2DEXT,
   (_glapi_proc) noopTextureSubImage3DEXT,
   (_glapi_proc) noopCopyTextureImage1DEXT,
   (_glapi_proc) noopCopyTextureImage2DEXT,
   (_glapi_proc) noopCopyTextureSubImage1DEXT,
   (_glapi_proc) noopCopyTextureSubImage2DEXT,
   (_glapi_proc) noopCopyTextureSubImage3DEXT,
   (_glapi_proc) noopMapNamedBufferEXT,
   (_glapi_proc) noopGetTextureParameterivEXT,
   (_glapi_proc) noopGetTextureParameterfvEXT,
   (_glapi_proc) noopTextureParameteriEXT,
   (_glapi_proc) noopTextureParameterivEXT,
   (_glapi_proc) noopTextureParameterfEXT,
   (_glapi_proc) noopTextureParameterfvEXT,
   (_glapi_proc) noopGetTextureImageEXT,
   (_glapi_proc) noopGetTextureLevelParameterivEXT,
   (_glapi_proc) noopGetTextureLevelParameterfvEXT,
   (_glapi_proc) noopGetNamedBufferSubDataEXT,
   (_glapi_proc) noopGetNamedBufferPointervEXT,
   (_glapi_proc) noopGetNamedBufferParameterivEXT,
   (_glapi_proc) noopFlushMappedNamedBufferRangeEXT,
   (_glapi_proc) noopFramebufferDrawBufferEXT,
   (_glapi_proc) noopFramebufferDrawBuffersEXT,
   (_glapi_proc) noopFramebufferReadBufferEXT,
   (_glapi_proc) noopGetFramebufferParameterivEXT,
   (_glapi_proc) noopCheckNamedFramebufferStatusEXT,
   (_glapi_proc) noopNamedFramebufferTexture1DEXT,
   (_glapi_proc) noopNamedFramebufferTexture2DEXT,
   (_glapi_proc) noopNamedFramebufferTexture3DEXT,
   (_glapi_proc) noopNamedFramebufferRenderbufferEXT,
   (_glapi_proc) noopGetNamedFramebufferAttachmentParameterivEXT,
   (_glapi_proc) noopEnableClientStateiEXT,
   (_glapi_proc) noopDisableClientStateiEXT,
   (_glapi_proc) noopGetPointerIndexedvEXT,
   (_glapi_proc) noopMultiTexEnviEXT,
   (_glapi_proc) noopMultiTexEnvivEXT,
   (_glapi_proc) noopMultiTexEnvfEXT,
   (_glapi_proc) noopMultiTexEnvfvEXT,
   (_glapi_proc) noopGetMultiTexEnvivEXT,
   (_glapi_proc) noopGetMultiTexEnvfvEXT,
   (_glapi_proc) noopMultiTexParameteriEXT,
   (_glapi_proc) noopMultiTexParameterivEXT,
   (_glapi_proc) noopMultiTexParameterfEXT,
   (_glapi_proc) noopMultiTexParameterfvEXT,
   (_glapi_proc) noopGetMultiTexImageEXT,
   (_glapi_proc) noopMultiTexImage1DEXT,
   (_glapi_proc) noopMultiTexImage2DEXT,
   (_glapi_proc) noopMultiTexImage3DEXT,
   (_glapi_proc) noopMultiTexSubImage1DEXT,
   (_glapi_proc) noopMultiTexSubImage2DEXT,
   (_glapi_proc) noopMultiTexSubImage3DEXT,
   (_glapi_proc) noopGetMultiTexParameterivEXT,
   (_glapi_proc) noopGetMultiTexParameterfvEXT,
   (_glapi_proc) noopCopyMultiTexImage1DEXT,
   (_glapi_proc) noopCopyMultiTexImage2DEXT,
   (_glapi_proc) noopCopyMultiTexSubImage1DEXT,
   (_glapi_proc) noopCopyMultiTexSubImage2DEXT,
   (_glapi_proc) noopCopyMultiTexSubImage3DEXT,
   (_glapi_proc) noopMultiTexGendEXT,
   (_glapi_proc) noopMultiTexGendvEXT,
   (_glapi_proc) noopMultiTexGenfEXT,
   (_glapi_proc) noopMultiTexGenfvEXT,
   (_glapi_proc) noopMultiTexGeniEXT,
   (_glapi_proc) noopMultiTexGenivEXT,
   (_glapi_proc) noopGetMultiTexGendvEXT,
   (_glapi_proc) noopGetMultiTexGenfvEXT,
   (_glapi_proc) noopGetMultiTexGenivEXT,
   (_glapi_proc) noopMultiTexCoordPointerEXT,
   (_glapi_proc) noopBindImageTextureEXT,
   (_glapi_proc) noopCompressedTextureImage1DEXT,
   (_glapi_proc) noopCompressedTextureImage2DEXT,
   (_glapi_proc) noopCompressedTextureImage3DEXT,
   (_glapi_proc) noopCompressedTextureSubImage1DEXT,
   (_glapi_proc) noopCompressedTextureSubImage2DEXT,
   (_glapi_proc) noopCompressedTextureSubImage3DEXT,
   (_glapi_proc) noopGetCompressedTextureImageEXT,
   (_glapi_proc) noopCompressedMultiTexImage1DEXT,
   (_glapi_proc) noopCompressedMultiTexImage2DEXT,
   (_glapi_proc) noopCompressedMultiTexImage3DEXT,
   (_glapi_proc) noopCompressedMultiTexSubImage1DEXT,
   (_glapi_proc) noopCompressedMultiTexSubImage2DEXT,
   (_glapi_proc) noopCompressedMultiTexSubImage3DEXT,
   (_glapi_proc) noopGetCompressedMultiTexImageEXT,
   (_glapi_proc) noopGetMultiTexLevelParameterivEXT,
   (_glapi_proc) noopGetMultiTexLevelParameterfvEXT,
   (_glapi_proc) noopFramebufferParameteriMESA,
   (_glapi_proc) noopGetFramebufferParameterivMESA,
   (_glapi_proc) noopNamedRenderbufferStorageEXT,
   (_glapi_proc) noopGetNamedRenderbufferParameterivEXT,
   (_glapi_proc) noopClientAttribDefaultEXT,
   (_glapi_proc) noopPushClientAttribDefaultEXT,
   (_glapi_proc) noopNamedProgramStringEXT,
   (_glapi_proc) noopGetNamedProgramStringEXT,
   (_glapi_proc) noopNamedProgramLocalParameter4fEXT,
   (_glapi_proc) noopNamedProgramLocalParameter4fvEXT,
   (_glapi_proc) noopGetNamedProgramLocalParameterfvEXT,
   (_glapi_proc) noopNamedProgramLocalParameter4dEXT,
   (_glapi_proc) noopNamedProgramLocalParameter4dvEXT,
   (_glapi_proc) noopGetNamedProgramLocalParameterdvEXT,
   (_glapi_proc) noopGetNamedProgramivEXT,
   (_glapi_proc) noopTextureBufferEXT,
   (_glapi_proc) noopMultiTexBufferEXT,
   (_glapi_proc) noopTextureParameterIivEXT,
   (_glapi_proc) noopTextureParameterIuivEXT,
   (_glapi_proc) noopGetTextureParameterIivEXT,
   (_glapi_proc) noopGetTextureParameterIuivEXT,
   (_glapi_proc) noopMultiTexParameterIivEXT,
   (_glapi_proc) noopMultiTexParameterIuivEXT,
   (_glapi_proc) noopGetMultiTexParameterIivEXT,
   (_glapi_proc) noopGetMultiTexParameterIuivEXT,
   (_glapi_proc) noopNamedProgramLocalParameters4fvEXT,
   (_glapi_proc) noopGenerateTextureMipmapEXT,
   (_glapi_proc) noopGenerateMultiTexMipmapEXT,
   (_glapi_proc) noopNamedRenderbufferStorageMultisampleEXT,
   (_glapi_proc) noopNamedCopyBufferSubDataEXT,
   (_glapi_proc) noopVertexArrayVertexOffsetEXT,
   (_glapi_proc) noopVertexArrayColorOffsetEXT,
   (_glapi_proc) noopVertexArrayEdgeFlagOffsetEXT,
   (_glapi_proc) noopVertexArrayIndexOffsetEXT,
   (_glapi_proc) noopVertexArrayNormalOffsetEXT,
   (_glapi_proc) noopVertexArrayTexCoordOffsetEXT,
   (_glapi_proc) noopVertexArrayMultiTexCoordOffsetEXT,
   (_glapi_proc) noopVertexArrayFogCoordOffsetEXT,
   (_glapi_proc) noopVertexArraySecondaryColorOffsetEXT,
   (_glapi_proc) noopVertexArrayVertexAttribOffsetEXT,
   (_glapi_proc) noopVertexArrayVertexAttribIOffsetEXT,
   (_glapi_proc) noopEnableVertexArrayEXT,
   (_glapi_proc) noopDisableVertexArrayEXT,
   (_glapi_proc) noopEnableVertexArrayAttribEXT,
   (_glapi_proc) noopDisableVertexArrayAttribEXT,
   (_glapi_proc) noopGetVertexArrayIntegervEXT,
   (_glapi_proc) noopGetVertexArrayPointervEXT,
   (_glapi_proc) noopGetVertexArrayIntegeri_vEXT,
   (_glapi_proc) noopGetVertexArrayPointeri_vEXT,
   (_glapi_proc) noopClearNamedBufferDataEXT,
   (_glapi_proc) noopClearNamedBufferSubDataEXT,
   (_glapi_proc) noopNamedFramebufferParameteriEXT,
   (_glapi_proc) noopGetNamedFramebufferParameterivEXT,
   (_glapi_proc) noopVertexArrayVertexAttribLOffsetEXT,
   (_glapi_proc) noopVertexArrayVertexAttribDivisorEXT,
   (_glapi_proc) noopTextureBufferRangeEXT,
   (_glapi_proc) noopTextureStorage2DMultisampleEXT,
   (_glapi_proc) noopTextureStorage3DMultisampleEXT,
   (_glapi_proc) noopVertexArrayBindVertexBufferEXT,
   (_glapi_proc) noopVertexArrayVertexAttribFormatEXT,
   (_glapi_proc) noopVertexArrayVertexAttribIFormatEXT,
   (_glapi_proc) noopVertexArrayVertexAttribLFormatEXT,
   (_glapi_proc) noopVertexArrayVertexAttribBindingEXT,
   (_glapi_proc) noopVertexArrayVertexBindingDivisorEXT,
   (_glapi_proc) noopNamedBufferPageCommitmentEXT,
   (_glapi_proc) noopNamedStringARB,
   (_glapi_proc) noopDeleteNamedStringARB,
   (_glapi_proc) noopCompileShaderIncludeARB,
   (_glapi_proc) noopIsNamedStringARB,
   (_glapi_proc) noopGetNamedStringARB,
   (_glapi_proc) noopGetNamedStringivARB,
   (_glapi_proc) noopEGLImageTargetTexStorageEXT,
   (_glapi_proc) noopEGLImageTargetTextureStorageEXT,
   (_glapi_proc) noopCopyImageSubDataNV,
   (_glapi_proc) noopViewportSwizzleNV,
   (_glapi_proc) noopAlphaToCoverageDitherControlNV,
   (_glapi_proc) noopInternalBufferSubDataCopyMESA,
   (_glapi_proc) noopVertex2hNV,
   (_glapi_proc) noopVertex2hvNV,
   (_glapi_proc) noopVertex3hNV,
   (_glapi_proc) noopVertex3hvNV,
   (_glapi_proc) noopVertex4hNV,
   (_glapi_proc) noopVertex4hvNV,
   (_glapi_proc) noopNormal3hNV,
   (_glapi_proc) noopNormal3hvNV,
   (_glapi_proc) noopColor3hNV,
   (_glapi_proc) noopColor3hvNV,
   (_glapi_proc) noopColor4hNV,
   (_glapi_proc) noopColor4hvNV,
   (_glapi_proc) noopTexCoord1hNV,
   (_glapi_proc) noopTexCoord1hvNV,
   (_glapi_proc) noopTexCoord2hNV,
   (_glapi_proc) noopTexCoord2hvNV,
   (_glapi_proc) noopTexCoord3hNV,
   (_glapi_proc) noopTexCoord3hvNV,
   (_glapi_proc) noopTexCoord4hNV,
   (_glapi_proc) noopTexCoord4hvNV,
   (_glapi_proc) noopMultiTexCoord1hNV,
   (_glapi_proc) noopMultiTexCoord1hvNV,
   (_glapi_proc) noopMultiTexCoord2hNV,
   (_glapi_proc) noopMultiTexCoord2hvNV,
   (_glapi_proc) noopMultiTexCoord3hNV,
   (_glapi_proc) noopMultiTexCoord3hvNV,
   (_glapi_proc) noopMultiTexCoord4hNV,
   (_glapi_proc) noopMultiTexCoord4hvNV,
   (_glapi_proc) noopFogCoordhNV,
   (_glapi_proc) noopFogCoordhvNV,
   (_glapi_proc) noopSecondaryColor3hNV,
   (_glapi_proc) noopSecondaryColor3hvNV,
   (_glapi_proc) noopInternalSetError,
   (_glapi_proc) noopVertexAttrib1hNV,
   (_glapi_proc) noopVertexAttrib1hvNV,
   (_glapi_proc) noopVertexAttrib2hNV,
   (_glapi_proc) noopVertexAttrib2hvNV,
   (_glapi_proc) noopVertexAttrib3hNV,
   (_glapi_proc) noopVertexAttrib3hvNV,
   (_glapi_proc) noopVertexAttrib4hNV,
   (_glapi_proc) noopVertexAttrib4hvNV,
   (_glapi_proc) noopVertexAttribs1hvNV,
   (_glapi_proc) noopVertexAttribs2hvNV,
   (_glapi_proc) noopVertexAttribs3hvNV,
   (_glapi_proc) noopVertexAttribs4hvNV,
   (_glapi_proc) noopTexPageCommitmentARB,
   (_glapi_proc) noopTexturePageCommitmentEXT,
   (_glapi_proc) noopImportMemoryWin32HandleEXT,
   (_glapi_proc) noopImportSemaphoreWin32HandleEXT,
   (_glapi_proc) noopImportMemoryWin32NameEXT,
   (_glapi_proc) noopImportSemaphoreWin32NameEXT,
   (_glapi_proc) noopGetObjectLabelEXT,
   (_glapi_proc) noopLabelObjectEXT,
   (_glapi_proc) noopDrawArraysUserBuf,
   (_glapi_proc) noopDrawElementsUserBuf,
   (_glapi_proc) noopMultiDrawArraysUserBuf,
   (_glapi_proc) noopMultiDrawElementsUserBuf,
   (_glapi_proc) noopDrawArraysInstancedBaseInstanceDrawID,
   (_glapi_proc) noopDrawElementsInstancedBaseVertexBaseInstanceDrawID,
   (_glapi_proc) noopInternalInvalidateFramebufferAncillaryMESA,
   (_glapi_proc) noopDrawElementsPacked,
   (_glapi_proc) noopDrawElementsUserBufPacked,
   (_glapi_proc) noopTexStorageAttribs2DEXT,
   (_glapi_proc) noopTexStorageAttribs3DEXT,
   (_glapi_proc) noopFramebufferTextureMultiviewOVR,
   (_glapi_proc) noopNamedFramebufferTextureMultiviewOVR,
   (_glapi_proc) noopFramebufferTextureMultisampleMultiviewOVR,
   (_glapi_proc) noopColorTable,
   (_glapi_proc) noopColorTableParameterfv,
   (_glapi_proc) noopColorTableParameteriv,
   (_glapi_proc) noopCopyColorTable,
   (_glapi_proc) noopGetColorTable,
   (_glapi_proc) noopGetColorTableParameterfv,
   (_glapi_proc) noopGetColorTableParameteriv,
   (_glapi_proc) noopColorSubTable,
   (_glapi_proc) noopCopyColorSubTable,
   (_glapi_proc) noopConvolutionFilter1D,
   (_glapi_proc) noopConvolutionFilter2D,
   (_glapi_proc) noopConvolutionParameterf,
   (_glapi_proc) noopConvolutionParameterfv,
   (_glapi_proc) noopConvolutionParameteri,
   (_glapi_proc) noopConvolutionParameteriv,
   (_glapi_proc) noopCopyConvolutionFilter1D,
   (_glapi_proc) noopCopyConvolutionFilter2D,
   (_glapi_proc) noopGetConvolutionFilter,
   (_glapi_proc) noopGetConvolutionParameterfv,
   (_glapi_proc) noopGetConvolutionParameteriv,
   (_glapi_proc) noopGetSeparableFilter,
   (_glapi_proc) noopSeparableFilter2D,
   (_glapi_proc) noopGetHistogram,
   (_glapi_proc) noopGetHistogramParameterfv,
   (_glapi_proc) noopGetHistogramParameteriv,
   (_glapi_proc) noopGetMinmax,
   (_glapi_proc) noopGetMinmaxParameterfv,
   (_glapi_proc) noopGetMinmaxParameteriv,
   (_glapi_proc) noopHistogram,
   (_glapi_proc) noopMinmax,
   (_glapi_proc) noopResetHistogram,
   (_glapi_proc) noopResetMinmax,
   (_glapi_proc) noopGetnColorTableARB,
   (_glapi_proc) noopGetnConvolutionFilterARB,
   (_glapi_proc) noopGetnHistogramARB,
   (_glapi_proc) noopGetnMinmaxARB,
   (_glapi_proc) noopGetnSeparableFilterARB
};

#undef MAPI_TMP_NOOP_ARRAY
#endif /* MAPI_TMP_NOOP_ARRAY */

#ifdef MAPI_TMP_PUBLIC_STUBS
static const char public_string_pool[] =
   "Accum\0"
   "ActiveShaderProgram\0"
   "ActiveShaderProgramEXT\0"
   "ActiveStencilFaceEXT\0"
   "ActiveTexture\0"
   "ActiveTextureARB\0"
   "AlphaFragmentOp1ATI\0"
   "AlphaFragmentOp2ATI\0"
   "AlphaFragmentOp3ATI\0"
   "AlphaFunc\0"
   "AlphaFuncx\0"
   "AlphaFuncxOES\0"
   "AlphaToCoverageDitherControlNV\0"
   "AreTexturesResident\0"
   "AreTexturesResidentEXT\0"
   "ArrayElement\0"
   "ArrayElementEXT\0"
   "AttachObjectARB\0"
   "AttachShader\0"
   "Begin\0"
   "BeginConditionalRender\0"
   "BeginConditionalRenderNV\0"
   "BeginFragmentShaderATI\0"
   "BeginPerfMonitorAMD\0"
   "BeginPerfQueryINTEL\0"
   "BeginQuery\0"
   "BeginQueryARB\0"
   "BeginQueryEXT\0"
   "BeginQueryIndexed\0"
   "BeginTransformFeedback\0"
   "BeginTransformFeedbackEXT\0"
   "BindAttribLocation\0"
   "BindAttribLocationARB\0"
   "BindBuffer\0"
   "BindBufferARB\0"
   "BindBufferBase\0"
   "BindBufferBaseEXT\0"
   "BindBufferOffsetEXT\0"
   "BindBufferRange\0"
   "BindBufferRangeEXT\0"
   "BindBuffersBase\0"
   "BindBuffersRange\0"
   "BindFragDataLocation\0"
   "BindFragDataLocationEXT\0"
   "BindFragDataLocationIndexed\0"
   "BindFragDataLocationIndexedEXT\0"
   "BindFragmentShaderATI\0"
   "BindFramebuffer\0"
   "BindFramebufferEXT\0"
   "BindFramebufferOES\0"
   "BindImageTexture\0"
   "BindImageTextureEXT\0"
   "BindImageTextures\0"
   "BindMultiTextureEXT\0"
   "BindProgramARB\0"
   "BindProgramNV\0"
   "BindProgramPipeline\0"
   "BindProgramPipelineEXT\0"
   "BindRenderbuffer\0"
   "BindRenderbufferEXT\0"
   "BindRenderbufferOES\0"
   "BindSampler\0"
   "BindSamplers\0"
   "BindTexture\0"
   "BindTextureEXT\0"
   "BindTextureUnit\0"
   "BindTextures\0"
   "BindTransformFeedback\0"
   "BindVertexArray\0"
   "BindVertexArrayOES\0"
   "BindVertexBuffer\0"
   "BindVertexBuffers\0"
   "Bitmap\0"
   "BlendBarrier\0"
   "BlendBarrierKHR\0"
   "BlendColor\0"
   "BlendColorEXT\0"
   "BlendEquation\0"
   "BlendEquationEXT\0"
   "BlendEquationIndexedAMD\0"
   "BlendEquationOES\0"
   "BlendEquationSeparate\0"
   "BlendEquationSeparateATI\0"
   "BlendEquationSeparateEXT\0"
   "BlendEquationSeparateIndexedAMD\0"
   "BlendEquationSeparateOES\0"
   "BlendEquationSeparatei\0"
   "BlendEquationSeparateiARB\0"
   "BlendEquationSeparateiEXT\0"
   "BlendEquationSeparateiOES\0"
   "BlendEquationi\0"
   "BlendEquationiARB\0"
   "BlendEquationiEXT\0"
   "BlendEquationiOES\0"
   "BlendFunc\0"
   "BlendFuncIndexedAMD\0"
   "BlendFuncSeparate\0"
   "BlendFuncSeparateEXT\0"
   "BlendFuncSeparateINGR\0"
   "BlendFuncSeparateIndexedAMD\0"
   "BlendFuncSeparateOES\0"
   "BlendFuncSeparatei\0"
   "BlendFuncSeparateiARB\0"
   "BlendFuncSeparateiEXT\0"
   "BlendFuncSeparateiOES\0"
   "BlendFunci\0"
   "BlendFunciARB\0"
   "BlendFunciEXT\0"
   "BlendFunciOES\0"
   "BlitFramebuffer\0"
   "BlitFramebufferEXT\0"
   "BlitNamedFramebuffer\0"
   "BufferData\0"
   "BufferDataARB\0"
   "BufferPageCommitmentARB\0"
   "BufferStorage\0"
   "BufferStorageEXT\0"
   "BufferStorageMemEXT\0"
   "BufferSubData\0"
   "BufferSubDataARB\0"
   "CallList\0"
   "CallLists\0"
   "CheckFramebufferStatus\0"
   "CheckFramebufferStatusEXT\0"
   "CheckFramebufferStatusOES\0"
   "CheckNamedFramebufferStatus\0"
   "CheckNamedFramebufferStatusEXT\0"
   "ClampColor\0"
   "ClampColorARB\0"
   "Clear\0"
   "ClearAccum\0"
   "ClearBufferData\0"
   "ClearBufferSubData\0"
   "ClearBufferfi\0"
   "ClearBufferfv\0"
   "ClearBufferiv\0"
   "ClearBufferuiv\0"
   "ClearColor\0"
   "ClearColorIiEXT\0"
   "ClearColorIuiEXT\0"
   "ClearColorx\0"
   "ClearColorxOES\0"
   "ClearDepth\0"
   "ClearDepthf\0"
   "ClearDepthfOES\0"
   "ClearDepthx\0"
   "ClearDepthxOES\0"
   "ClearIndex\0"
   "ClearNamedBufferData\0"
   "ClearNamedBufferDataEXT\0"
   "ClearNamedBufferSubData\0"
   "ClearNamedBufferSubDataEXT\0"
   "ClearNamedFramebufferfi\0"
   "ClearNamedFramebufferfv\0"
   "ClearNamedFramebufferiv\0"
   "ClearNamedFramebufferuiv\0"
   "ClearStencil\0"
   "ClearTexImage\0"
   "ClearTexImageEXT\0"
   "ClearTexSubImage\0"
   "ClearTexSubImageEXT\0"
   "ClientActiveTexture\0"
   "ClientActiveTextureARB\0"
   "ClientAttribDefaultEXT\0"
   "ClientWaitSync\0"
   "ClientWaitSyncAPPLE\0"
   "ClipControl\0"
   "ClipControlEXT\0"
   "ClipPlane\0"
   "ClipPlanef\0"
   "ClipPlanefOES\0"
   "ClipPlanex\0"
   "ClipPlanexOES\0"
   "Color3b\0"
   "Color3bv\0"
   "Color3d\0"
   "Color3dv\0"
   "Color3f\0"
   "Color3fv\0"
   "Color3hNV\0"
   "Color3hvNV\0"
   "Color3i\0"
   "Color3iv\0"
   "Color3s\0"
   "Color3sv\0"
   "Color3ub\0"
   "Color3ubv\0"
   "Color3ui\0"
   "Color3uiv\0"
   "Color3us\0"
   "Color3usv\0"
   "Color4b\0"
   "Color4bv\0"
   "Color4d\0"
   "Color4dv\0"
   "Color4f\0"
   "Color4fv\0"
   "Color4hNV\0"
   "Color4hvNV\0"
   "Color4i\0"
   "Color4iv\0"
   "Color4s\0"
   "Color4sv\0"
   "Color4ub\0"
   "Color4ubv\0"
   "Color4ui\0"
   "Color4uiv\0"
   "Color4us\0"
   "Color4usv\0"
   "Color4x\0"
   "Color4xOES\0"
   "ColorFragmentOp1ATI\0"
   "ColorFragmentOp2ATI\0"
   "ColorFragmentOp3ATI\0"
   "ColorMask\0"
   "ColorMaskIndexedEXT\0"
   "ColorMaski\0"
   "ColorMaskiEXT\0"
   "ColorMaskiOES\0"
   "ColorMaterial\0"
   "ColorP3ui\0"
   "ColorP3uiv\0"
   "ColorP4ui\0"
   "ColorP4uiv\0"
   "ColorPointer\0"
   "ColorPointerEXT\0"
   "ColorSubTable\0"
   "ColorSubTableEXT\0"
   "ColorTable\0"
   "ColorTableParameterfv\0"
   "ColorTableParameteriv\0"
   "CompileShader\0"
   "CompileShaderARB\0"
   "CompileShaderIncludeARB\0"
   "CompressedMultiTexImage1DEXT\0"
   "CompressedMultiTexImage2DEXT\0"
   "CompressedMultiTexImage3DEXT\0"
   "CompressedMultiTexSubImage1DEXT\0"
   "CompressedMultiTexSubImage2DEXT\0"
   "CompressedMultiTexSubImage3DEXT\0"
   "CompressedTexImage1D\0"
   "CompressedTexImage1DARB\0"
   "CompressedTexImage2D\0"
   "CompressedTexImage2DARB\0"
   "CompressedTexImage3D\0"
   "CompressedTexImage3DARB\0"
   "CompressedTexImage3DOES\0"
   "CompressedTexSubImage1D\0"
   "CompressedTexSubImage1DARB\0"
   "CompressedTexSubImage2D\0"
   "CompressedTexSubImage2DARB\0"
   "CompressedTexSubImage3D\0"
   "CompressedTexSubImage3DARB\0"
   "CompressedTexSubImage3DOES\0"
   "CompressedTextureImage1DEXT\0"
   "CompressedTextureImage2DEXT\0"
   "CompressedTextureImage3DEXT\0"
   "CompressedTextureSubImage1D\0"
   "CompressedTextureSubImage1DEXT\0"
   "CompressedTextureSubImage2D\0"
   "CompressedTextureSubImage2DEXT\0"
   "CompressedTextureSubImage3D\0"
   "CompressedTextureSubImage3DEXT\0"
   "ConservativeRasterParameterfNV\0"
   "ConservativeRasterParameteriNV\0"
   "ConvolutionFilter1D\0"
   "ConvolutionFilter2D\0"
   "ConvolutionParameterf\0"
   "ConvolutionParameterfv\0"
   "ConvolutionParameteri\0"
   "ConvolutionParameteriv\0"
   "CopyBufferSubData\0"
   "CopyColorSubTable\0"
   "CopyColorSubTableEXT\0"
   "CopyColorTable\0"
   "CopyConvolutionFilter1D\0"
   "CopyConvolutionFilter2D\0"
   "CopyImageSubData\0"
   "CopyImageSubDataEXT\0"
   "CopyImageSubDataNV\0"
   "CopyImageSubDataOES\0"
   "CopyMultiTexImage1DEXT\0"
   "CopyMultiTexImage2DEXT\0"
   "CopyMultiTexSubImage1DEXT\0"
   "CopyMultiTexSubImage2DEXT\0"
   "CopyMultiTexSubImage3DEXT\0"
   "CopyNamedBufferSubData\0"
   "CopyPixels\0"
   "CopyTexImage1D\0"
   "CopyTexImage1DEXT\0"
   "CopyTexImage2D\0"
   "CopyTexImage2DEXT\0"
   "CopyTexSubImage1D\0"
   "CopyTexSubImage1DEXT\0"
   "CopyTexSubImage2D\0"
   "CopyTexSubImage2DEXT\0"
   "CopyTexSubImage3D\0"
   "CopyTexSubImage3DEXT\0"
   "CopyTexSubImage3DOES\0"
   "CopyTextureImage1DEXT\0"
   "CopyTextureImage2DEXT\0"
   "CopyTextureSubImage1D\0"
   "CopyTextureSubImage1DEXT\0"
   "CopyTextureSubImage2D\0"
   "CopyTextureSubImage2DEXT\0"
   "CopyTextureSubImage3D\0"
   "CopyTextureSubImage3DEXT\0"
   "CreateBuffers\0"
   "CreateFramebuffers\0"
   "CreateMemoryObjectsEXT\0"
   "CreatePerfQueryINTEL\0"
   "CreateProgram\0"
   "CreateProgramObjectARB\0"
   "CreateProgramPipelines\0"
   "CreateQueries\0"
   "CreateRenderbuffers\0"
   "CreateSamplers\0"
   "CreateShader\0"
   "CreateShaderObjectARB\0"
   "CreateShaderProgramv\0"
   "CreateShaderProgramvEXT\0"
   "CreateTextures\0"
   "CreateTransformFeedbacks\0"
   "CreateVertexArrays\0"
   "CullFace\0"
   "DebugMessageCallback\0"
   "DebugMessageCallbackARB\0"
   "DebugMessageCallbackKHR\0"
   "DebugMessageControl\0"
   "DebugMessageControlARB\0"
   "DebugMessageControlKHR\0"
   "DebugMessageInsert\0"
   "DebugMessageInsertARB\0"
   "DebugMessageInsertKHR\0"
   "DeleteBuffers\0"
   "DeleteBuffersARB\0"
   "DeleteFragmentShaderATI\0"
   "DeleteFramebuffers\0"
   "DeleteFramebuffersEXT\0"
   "DeleteFramebuffersOES\0"
   "DeleteLists\0"
   "DeleteMemoryObjectsEXT\0"
   "DeleteNamedStringARB\0"
   "DeleteObjectARB\0"
   "DeletePerfMonitorsAMD\0"
   "DeletePerfQueryINTEL\0"
   "DeleteProgram\0"
   "DeleteProgramPipelines\0"
   "DeleteProgramPipelinesEXT\0"
   "DeleteProgramsARB\0"
   "DeleteProgramsNV\0"
   "DeleteQueries\0"
   "DeleteQueriesARB\0"
   "DeleteQueriesEXT\0"
   "DeleteRenderbuffers\0"
   "DeleteRenderbuffersEXT\0"
   "DeleteRenderbuffersOES\0"
   "DeleteSamplers\0"
   "DeleteSemaphoresEXT\0"
   "DeleteShader\0"
   "DeleteSync\0"
   "DeleteSyncAPPLE\0"
   "DeleteTextures\0"
   "DeleteTexturesEXT\0"
   "DeleteTransformFeedbacks\0"
   "DeleteVertexArrays\0"
   "DeleteVertexArraysOES\0"
   "DepthBoundsEXT\0"
   "DepthFunc\0"
   "DepthMask\0"
   "DepthRange\0"
   "DepthRangeArrayfvOES\0"
   "DepthRangeArrayv\0"
   "DepthRangeIndexed\0"
   "DepthRangeIndexedfOES\0"
   "DepthRangef\0"
   "DepthRangefOES\0"
   "DepthRangex\0"
   "DepthRangexOES\0"
   "DetachObjectARB\0"
   "DetachShader\0"
   "Disable\0"
   "DisableClientState\0"
   "DisableClientStateIndexedEXT\0"
   "DisableClientStateiEXT\0"
   "DisableIndexedEXT\0"
   "DisableVertexArrayAttrib\0"
   "DisableVertexArrayAttribEXT\0"
   "DisableVertexArrayEXT\0"
   "DisableVertexAttribArray\0"
   "DisableVertexAttribArrayARB\0"
   "Disablei\0"
   "DisableiEXT\0"
   "DisableiOES\0"
   "DiscardFramebufferEXT\0"
   "DispatchCompute\0"
   "DispatchComputeGroupSizeARB\0"
   "DispatchComputeIndirect\0"
   "DrawArrays\0"
   "DrawArraysEXT\0"
   "DrawArraysIndirect\0"
   "DrawArraysInstanced\0"
   "DrawArraysInstancedARB\0"
   "DrawArraysInstancedBaseInstance\0"
   "DrawArraysInstancedBaseInstanceDrawID\0"
   "DrawArraysInstancedBaseInstanceEXT\0"
   "DrawArraysInstancedEXT\0"
   "DrawArraysUserBuf\0"
   "DrawBuffer\0"
   "DrawBuffers\0"
   "DrawBuffersARB\0"
   "DrawBuffersATI\0"
   "DrawBuffersEXT\0"
   "DrawBuffersNV\0"
   "DrawElements\0"
   "DrawElementsBaseVertex\0"
   "DrawElementsBaseVertexEXT\0"
   "DrawElementsBaseVertexOES\0"
   "DrawElementsIndirect\0"
   "DrawElementsInstanced\0"
   "DrawElementsInstancedARB\0"
   "DrawElementsInstancedBaseInstance\0"
   "DrawElementsInstancedBaseInstanceEXT\0"
   "DrawElementsInstancedBaseVertex\0"
   "DrawElementsInstancedBaseVertexBaseInstance\0"
   "DrawElementsInstancedBaseVertexBaseInstanceDrawID\0"
   "DrawElementsInstancedBaseVertexBaseInstanceEXT\0"
   "DrawElementsInstancedBaseVertexEXT\0"
   "DrawElementsInstancedBaseVertexOES\0"
   "DrawElementsInstancedEXT\0"
   "DrawElementsPacked\0"
   "DrawElementsUserBuf\0"
   "DrawElementsUserBufPacked\0"
   "DrawPixels\0"
   "DrawRangeElements\0"
   "DrawRangeElementsBaseVertex\0"
   "DrawRangeElementsBaseVertexEXT\0"
   "DrawRangeElementsBaseVertexOES\0"
   "DrawRangeElementsEXT\0"
   "DrawTexfOES\0"
   "DrawTexfvOES\0"
   "DrawTexiOES\0"
   "DrawTexivOES\0"
   "DrawTexsOES\0"
   "DrawTexsvOES\0"
   "DrawTexxOES\0"
   "DrawTexxvOES\0"
   "DrawTransformFeedback\0"
   "DrawTransformFeedbackInstanced\0"
   "DrawTransformFeedbackStream\0"
   "DrawTransformFeedbackStreamInstanced\0"
   "EGLImageTargetRenderbufferStorageOES\0"
   "EGLImageTargetTexStorageEXT\0"
   "EGLImageTargetTexture2DOES\0"
   "EGLImageTargetTextureStorageEXT\0"
   "EdgeFlag\0"
   "EdgeFlagPointer\0"
   "EdgeFlagPointerEXT\0"
   "EdgeFlagv\0"
   "Enable\0"
   "EnableClientState\0"
   "EnableClientStateIndexedEXT\0"
   "EnableClientStateiEXT\0"
   "EnableIndexedEXT\0"
   "EnableVertexArrayAttrib\0"
   "EnableVertexArrayAttribEXT\0"
   "EnableVertexArrayEXT\0"
   "EnableVertexAttribArray\0"
   "EnableVertexAttribArrayARB\0"
   "Enablei\0"
   "EnableiEXT\0"
   "EnableiOES\0"
   "End\0"
   "EndConditionalRender\0"
   "EndConditionalRenderNV\0"
   "EndFragmentShaderATI\0"
   "EndList\0"
   "EndPerfMonitorAMD\0"
   "EndPerfQueryINTEL\0"
   "EndQuery\0"
   "EndQueryARB\0"
   "EndQueryEXT\0"
   "EndQueryIndexed\0"
   "EndTransformFeedback\0"
   "EndTransformFeedbackEXT\0"
   "EvalCoord1d\0"
   "EvalCoord1dv\0"
   "EvalCoord1f\0"
   "EvalCoord1fv\0"
   "EvalCoord2d\0"
   "EvalCoord2dv\0"
   "EvalCoord2f\0"
   "EvalCoord2fv\0"
   "EvalMesh1\0"
   "EvalMesh2\0"
   "EvalPoint1\0"
   "EvalPoint2\0"
   "EvaluateDepthValuesARB\0"
   "FeedbackBuffer\0"
   "FenceSync\0"
   "FenceSyncAPPLE\0"
   "Finish\0"
   "Flush\0"
   "FlushMappedBufferRange\0"
   "FlushMappedBufferRangeEXT\0"
   "FlushMappedNamedBufferRange\0"
   "FlushMappedNamedBufferRangeEXT\0"
   "FogCoordPointer\0"
   "FogCoordPointerEXT\0"
   "FogCoordd\0"
   "FogCoorddEXT\0"
   "FogCoorddv\0"
   "FogCoorddvEXT\0"
   "FogCoordf\0"
   "FogCoordfEXT\0"
   "FogCoordfv\0"
   "FogCoordfvEXT\0"
   "FogCoordhNV\0"
   "FogCoordhvNV\0"
   "Fogf\0"
   "Fogfv\0"
   "Fogi\0"
   "Fogiv\0"
   "Fogx\0"
   "FogxOES\0"
   "Fogxv\0"
   "FogxvOES\0"
   "FramebufferDrawBufferEXT\0"
   "FramebufferDrawBuffersEXT\0"
   "FramebufferFetchBarrierEXT\0"
   "FramebufferParameteri\0"
   "FramebufferParameteriMESA\0"
   "FramebufferReadBufferEXT\0"
   "FramebufferRenderbuffer\0"
   "FramebufferRenderbufferEXT\0"
   "FramebufferRenderbufferOES\0"
   "FramebufferSampleLocationsfvARB\0"
   "FramebufferSampleLocationsfvNV\0"
   "FramebufferTexture\0"
   "FramebufferTexture1D\0"
   "FramebufferTexture1DEXT\0"
   "FramebufferTexture2D\0"
   "FramebufferTexture2DEXT\0"
   "FramebufferTexture2DMultisampleEXT\0"
   "FramebufferTexture2DOES\0"
   "FramebufferTexture3D\0"
   "FramebufferTexture3DEXT\0"
   "FramebufferTexture3DOES\0"
   "FramebufferTextureEXT\0"
   "FramebufferTextureLayer\0"
   "FramebufferTextureLayerEXT\0"
   "FramebufferTextureMultisampleMultiviewOVR\0"
   "FramebufferTextureMultiviewOVR\0"
   "FramebufferTextureOES\0"
   "FrontFace\0"
   "Frustum\0"
   "Frustumf\0"
   "FrustumfOES\0"
   "Frustumx\0"
   "FrustumxOES\0"
   "GenBuffers\0"
   "GenBuffersARB\0"
   "GenFragmentShadersATI\0"
   "GenFramebuffers\0"
   "GenFramebuffersEXT\0"
   "GenFramebuffersOES\0"
   "GenLists\0"
   "GenPerfMonitorsAMD\0"
   "GenProgramPipelines\0"
   "GenProgramPipelinesEXT\0"
   "GenProgramsARB\0"
   "GenProgramsNV\0"
   "GenQueries\0"
   "GenQueriesARB\0"
   "GenQueriesEXT\0"
   "GenRenderbuffers\0"
   "GenRenderbuffersEXT\0"
   "GenRenderbuffersOES\0"
   "GenSamplers\0"
   "GenSemaphoresEXT\0"
   "GenTextures\0"
   "GenTexturesEXT\0"
   "GenTransformFeedbacks\0"
   "GenVertexArrays\0"
   "GenVertexArraysOES\0"
   "GenerateMipmap\0"
   "GenerateMipmapEXT\0"
   "GenerateMipmapOES\0"
   "GenerateMultiTexMipmapEXT\0"
   "GenerateTextureMipmap\0"
   "GenerateTextureMipmapEXT\0"
   "GetActiveAtomicCounterBufferiv\0"
   "GetActiveAttrib\0"
   "GetActiveAttribARB\0"
   "GetActiveSubroutineName\0"
   "GetActiveSubroutineUniformName\0"
   "GetActiveSubroutineUniformiv\0"
   "GetActiveUniform\0"
   "GetActiveUniformARB\0"
   "GetActiveUniformBlockName\0"
   "GetActiveUniformBlockiv\0"
   "GetActiveUniformName\0"
   "GetActiveUniformsiv\0"
   "GetAttachedObjectsARB\0"
   "GetAttachedShaders\0"
   "GetAttribLocation\0"
   "GetAttribLocationARB\0"
   "GetBooleanIndexedvEXT\0"
   "GetBooleani_v\0"
   "GetBooleanv\0"
   "GetBufferParameteri64v\0"
   "GetBufferParameteriv\0"
   "GetBufferParameterivARB\0"
   "GetBufferPointerv\0"
   "GetBufferPointervARB\0"
   "GetBufferPointervOES\0"
   "GetBufferSubData\0"
   "GetBufferSubDataARB\0"
   "GetClipPlane\0"
   "GetClipPlanef\0"
   "GetClipPlanefOES\0"
   "GetClipPlanex\0"
   "GetClipPlanexOES\0"
   "GetColorTable\0"
   "GetColorTableParameterfv\0"
   "GetColorTableParameteriv\0"
   "GetCompressedMultiTexImageEXT\0"
   "GetCompressedTexImage\0"
   "GetCompressedTexImageARB\0"
   "GetCompressedTextureImage\0"
   "GetCompressedTextureImageEXT\0"
   "GetCompressedTextureSubImage\0"
   "GetConvolutionFilter\0"
   "GetConvolutionParameterfv\0"
   "GetConvolutionParameteriv\0"
   "GetDebugMessageLog\0"
   "GetDebugMessageLogARB\0"
   "GetDebugMessageLogKHR\0"
   "GetDoubleIndexedvEXT\0"
   "GetDoublei_v\0"
   "GetDoublei_vEXT\0"
   "GetDoublev\0"
   "GetError\0"
   "GetFirstPerfQueryIdINTEL\0"
   "GetFixedv\0"
   "GetFixedvOES\0"
   "GetFloatIndexedvEXT\0"
   "GetFloati_v\0"
   "GetFloati_vEXT\0"
   "GetFloati_vOES\0"
   "GetFloatv\0"
   "GetFragDataIndex\0"
   "GetFragDataIndexEXT\0"
   "GetFragDataLocation\0"
   "GetFragDataLocationEXT\0"
   "GetFramebufferAttachmentParameteriv\0"
   "GetFramebufferAttachmentParameterivEXT\0"
   "GetFramebufferAttachmentParameterivOES\0"
   "GetFramebufferParameteriv\0"
   "GetFramebufferParameterivEXT\0"
   "GetFramebufferParameterivMESA\0"
   "GetGraphicsResetStatus\0"
   "GetGraphicsResetStatusARB\0"
   "GetGraphicsResetStatusEXT\0"
   "GetGraphicsResetStatusKHR\0"
   "GetHandleARB\0"
   "GetHistogram\0"
   "GetHistogramParameterfv\0"
   "GetHistogramParameteriv\0"
   "GetImageHandleARB\0"
   "GetInfoLogARB\0"
   "GetInteger64i_v\0"
   "GetInteger64v\0"
   "GetInteger64vAPPLE\0"
   "GetInteger64vEXT\0"
   "GetIntegerIndexedvEXT\0"
   "GetIntegeri_v\0"
   "GetIntegerv\0"
   "GetInternalformati64v\0"
   "GetInternalformativ\0"
   "GetLightfv\0"
   "GetLightiv\0"
   "GetLightxv\0"
   "GetLightxvOES\0"
   "GetMapdv\0"
   "GetMapfv\0"
   "GetMapiv\0"
   "GetMaterialfv\0"
   "GetMaterialiv\0"
   "GetMaterialxv\0"
   "GetMaterialxvOES\0"
   "GetMemoryObjectParameterivEXT\0"
   "GetMinmax\0"
   "GetMinmaxParameterfv\0"
   "GetMinmaxParameteriv\0"
   "GetMultiTexEnvfvEXT\0"
   "GetMultiTexEnvivEXT\0"
   "GetMultiTexGendvEXT\0"
   "GetMultiTexGenfvEXT\0"
   "GetMultiTexGenivEXT\0"
   "GetMultiTexImageEXT\0"
   "GetMultiTexLevelParameterfvEXT\0"
   "GetMultiTexLevelParameterivEXT\0"
   "GetMultiTexParameterIivEXT\0"
   "GetMultiTexParameterIuivEXT\0"
   "GetMultiTexParameterfvEXT\0"
   "GetMultiTexParameterivEXT\0"
   "GetMultisamplefv\0"
   "GetNamedBufferParameteri64v\0"
   "GetNamedBufferParameteriv\0"
   "GetNamedBufferParameterivEXT\0"
   "GetNamedBufferPointerv\0"
   "GetNamedBufferPointervEXT\0"
   "GetNamedBufferSubData\0"
   "GetNamedBufferSubDataEXT\0"
   "GetNamedFramebufferAttachmentParameteriv\0"
   "GetNamedFramebufferAttachmentParameterivEXT\0"
   "GetNamedFramebufferParameteriv\0"
   "GetNamedFramebufferParameterivEXT\0"
   "GetNamedProgramLocalParameterdvEXT\0"
   "GetNamedProgramLocalParameterfvEXT\0"
   "GetNamedProgramStringEXT\0"
   "GetNamedProgramivEXT\0"
   "GetNamedRenderbufferParameteriv\0"
   "GetNamedRenderbufferParameterivEXT\0"
   "GetNamedStringARB\0"
   "GetNamedStringivARB\0"
   "GetNextPerfQueryIdINTEL\0"
   "GetObjectLabel\0"
   "GetObjectLabelEXT\0"
   "GetObjectLabelKHR\0"
   "GetObjectParameterfvARB\0"
   "GetObjectParameterivARB\0"
   "GetObjectPtrLabel\0"
   "GetObjectPtrLabelKHR\0"
   "GetPerfCounterInfoINTEL\0"
   "GetPerfMonitorCounterDataAMD\0"
   "GetPerfMonitorCounterInfoAMD\0"
   "GetPerfMonitorCounterStringAMD\0"
   "GetPerfMonitorCountersAMD\0"
   "GetPerfMonitorGroupStringAMD\0"
   "GetPerfMonitorGroupsAMD\0"
   "GetPerfQueryDataINTEL\0"
   "GetPerfQueryIdByNameINTEL\0"
   "GetPerfQueryInfoINTEL\0"
   "GetPixelMapfv\0"
   "GetPixelMapuiv\0"
   "GetPixelMapusv\0"
   "GetPointerIndexedvEXT\0"
   "GetPointeri_vEXT\0"
   "GetPointerv\0"
   "GetPointervEXT\0"
   "GetPointervKHR\0"
   "GetPolygonStipple\0"
   "GetProgramBinary\0"
   "GetProgramBinaryOES\0"
   "GetProgramEnvParameterdvARB\0"
   "GetProgramEnvParameterfvARB\0"
   "GetProgramInfoLog\0"
   "GetProgramInterfaceiv\0"
   "GetProgramLocalParameterdvARB\0"
   "GetProgramLocalParameterfvARB\0"
   "GetProgramPipelineInfoLog\0"
   "GetProgramPipelineInfoLogEXT\0"
   "GetProgramPipelineiv\0"
   "GetProgramPipelineivEXT\0"
   "GetProgramResourceIndex\0"
   "GetProgramResourceLocation\0"
   "GetProgramResourceLocationIndex\0"
   "GetProgramResourceLocationIndexEXT\0"
   "GetProgramResourceName\0"
   "GetProgramResourceiv\0"
   "GetProgramStageiv\0"
   "GetProgramStringARB\0"
   "GetProgramiv\0"
   "GetProgramivARB\0"
   "GetQueryBufferObjecti64v\0"
   "GetQueryBufferObjectiv\0"
   "GetQueryBufferObjectui64v\0"
   "GetQueryBufferObjectuiv\0"
   "GetQueryIndexediv\0"
   "GetQueryObjecti64v\0"
   "GetQueryObjecti64vEXT\0"
   "GetQueryObjectiv\0"
   "GetQueryObjectivARB\0"
   "GetQueryObjectivEXT\0"
   "GetQueryObjectui64v\0"
   "GetQueryObjectui64vEXT\0"
   "GetQueryObjectuiv\0"
   "GetQueryObjectuivARB\0"
   "GetQueryObjectuivEXT\0"
   "GetQueryiv\0"
   "GetQueryivARB\0"
   "GetQueryivEXT\0"
   "GetRenderbufferParameteriv\0"
   "GetRenderbufferParameterivEXT\0"
   "GetRenderbufferParameterivOES\0"
   "GetSamplerParameterIiv\0"
   "GetSamplerParameterIivEXT\0"
   "GetSamplerParameterIivOES\0"
   "GetSamplerParameterIuiv\0"
   "GetSamplerParameterIuivEXT\0"
   "GetSamplerParameterIuivOES\0"
   "GetSamplerParameterfv\0"
   "GetSamplerParameteriv\0"
   "GetSemaphoreParameterui64vEXT\0"
   "GetSeparableFilter\0"
   "GetShaderInfoLog\0"
   "GetShaderPrecisionFormat\0"
   "GetShaderSource\0"
   "GetShaderSourceARB\0"
   "GetShaderiv\0"
   "GetString\0"
   "GetStringi\0"
   "GetSubroutineIndex\0"
   "GetSubroutineUniformLocation\0"
   "GetSynciv\0"
   "GetSyncivAPPLE\0"
   "GetTexEnvfv\0"
   "GetTexEnviv\0"
   "GetTexEnvxv\0"
   "GetTexEnvxvOES\0"
   "GetTexGendv\0"
   "GetTexGenfv\0"
   "GetTexGenfvOES\0"
   "GetTexGeniv\0"
   "GetTexGenivOES\0"
   "GetTexGenxvOES\0"
   "GetTexImage\0"
   "GetTexLevelParameterfv\0"
   "GetTexLevelParameteriv\0"
   "GetTexParameterIiv\0"
   "GetTexParameterIivEXT\0"
   "GetTexParameterIivOES\0"
   "GetTexParameterIuiv\0"
   "GetTexParameterIuivEXT\0"
   "GetTexParameterIuivOES\0"
   "GetTexParameterfv\0"
   "GetTexParameteriv\0"
   "GetTexParameterxv\0"
   "GetTexParameterxvOES\0"
   "GetTextureHandleARB\0"
   "GetTextureImage\0"
   "GetTextureImageEXT\0"
   "GetTextureLevelParameterfv\0"
   "GetTextureLevelParameterfvEXT\0"
   "GetTextureLevelParameteriv\0"
   "GetTextureLevelParameterivEXT\0"
   "GetTextureParameterIiv\0"
   "GetTextureParameterIivEXT\0"
   "GetTextureParameterIuiv\0"
   "GetTextureParameterIuivEXT\0"
   "GetTextureParameterfv\0"
   "GetTextureParameterfvEXT\0"
   "GetTextureParameteriv\0"
   "GetTextureParameterivEXT\0"
   "GetTextureSamplerHandleARB\0"
   "GetTextureSubImage\0"
   "GetTransformFeedbackVarying\0"
   "GetTransformFeedbackVaryingEXT\0"
   "GetTransformFeedbacki64_v\0"
   "GetTransformFeedbacki_v\0"
   "GetTransformFeedbackiv\0"
   "GetUniformBlockIndex\0"
   "GetUniformIndices\0"
   "GetUniformLocation\0"
   "GetUniformLocationARB\0"
   "GetUniformSubroutineuiv\0"
   "GetUniformdv\0"
   "GetUniformfv\0"
   "GetUniformfvARB\0"
   "GetUniformi64vARB\0"
   "GetUniformi64vNV\0"
   "GetUniformiv\0"
   "GetUniformivARB\0"
   "GetUniformui64vARB\0"
   "GetUniformui64vNV\0"
   "GetUniformuiv\0"
   "GetUniformuivEXT\0"
   "GetUnsignedBytei_vEXT\0"
   "GetUnsignedBytevEXT\0"
   "GetVertexArrayIndexed64iv\0"
   "GetVertexArrayIndexediv\0"
   "GetVertexArrayIntegeri_vEXT\0"
   "GetVertexArrayIntegervEXT\0"
   "GetVertexArrayPointeri_vEXT\0"
   "GetVertexArrayPointervEXT\0"
   "GetVertexArrayiv\0"
   "GetVertexAttribIiv\0"
   "GetVertexAttribIivEXT\0"
   "GetVertexAttribIuiv\0"
   "GetVertexAttribIuivEXT\0"
   "GetVertexAttribLdv\0"
   "GetVertexAttribLdvEXT\0"
   "GetVertexAttribLui64vARB\0"
   "GetVertexAttribPointerv\0"
   "GetVertexAttribPointervARB\0"
   "GetVertexAttribPointervNV\0"
   "GetVertexAttribdv\0"
   "GetVertexAttribdvARB\0"
   "GetVertexAttribfv\0"
   "GetVertexAttribfvARB\0"
   "GetVertexAttribiv\0"
   "GetVertexAttribivARB\0"
   "GetnColorTableARB\0"
   "GetnCompressedTexImageARB\0"
   "GetnConvolutionFilterARB\0"
   "GetnHistogramARB\0"
   "GetnMapdvARB\0"
   "GetnMapfvARB\0"
   "GetnMapivARB\0"
   "GetnMinmaxARB\0"
   "GetnPixelMapfvARB\0"
   "GetnPixelMapuivARB\0"
   "GetnPixelMapusvARB\0"
   "GetnPolygonStippleARB\0"
   "GetnSeparableFilterARB\0"
   "GetnTexImageARB\0"
   "GetnUniformdvARB\0"
   "GetnUniformfv\0"
   "GetnUniformfvARB\0"
   "GetnUniformfvEXT\0"
   "GetnUniformfvKHR\0"
   "GetnUniformi64vARB\0"
   "GetnUniformiv\0"
   "GetnUniformivARB\0"
   "GetnUniformivEXT\0"
   "GetnUniformivKHR\0"
   "GetnUniformui64vARB\0"
   "GetnUniformuiv\0"
   "GetnUniformuivARB\0"
   "GetnUniformuivKHR\0"
   "Hint\0"
   "Histogram\0"
   "ImportMemoryFdEXT\0"
   "ImportMemoryWin32HandleEXT\0"
   "ImportMemoryWin32NameEXT\0"
   "ImportSemaphoreFdEXT\0"
   "ImportSemaphoreWin32HandleEXT\0"
   "ImportSemaphoreWin32NameEXT\0"
   "IndexMask\0"
   "IndexPointer\0"
   "IndexPointerEXT\0"
   "Indexd\0"
   "Indexdv\0"
   "Indexf\0"
   "Indexfv\0"
   "Indexi\0"
   "Indexiv\0"
   "Indexs\0"
   "Indexsv\0"
   "Indexub\0"
   "Indexubv\0"
   "InitNames\0"
   "InterleavedArrays\0"
   "InternalBufferSubDataCopyMESA\0"
   "InternalDrawArraysInstancedBaseInstance\0"
   "InternalDrawElementsInstancedBaseVertexBaseInstance\0"
   "InternalDrawRangeElementsBaseVertex\0"
   "InternalInvalidateFramebufferAncillaryMESA\0"
   "InternalMultiDrawElementsBaseVertex\0"
   "InternalSetError\0"
   "InvalidateBufferData\0"
   "InvalidateBufferSubData\0"
   "InvalidateFramebuffer\0"
   "InvalidateNamedFramebufferData\0"
   "InvalidateNamedFramebufferSubData\0"
   "InvalidateSubFramebuffer\0"
   "InvalidateTexImage\0"
   "InvalidateTexSubImage\0"
   "IsBuffer\0"
   "IsBufferARB\0"
   "IsEnabled\0"
   "IsEnabledIndexedEXT\0"
   "IsEnabledi\0"
   "IsEnablediEXT\0"
   "IsEnablediOES\0"
   "IsFramebuffer\0"
   "IsFramebufferEXT\0"
   "IsFramebufferOES\0"
   "IsImageHandleResidentARB\0"
   "IsList\0"
   "IsMemoryObjectEXT\0"
   "IsNamedStringARB\0"
   "IsProgram\0"
   "IsProgramARB\0"
   "IsProgramNV\0"
   "IsProgramPipeline\0"
   "IsProgramPipelineEXT\0"
   "IsQuery\0"
   "IsQueryARB\0"
   "IsQueryEXT\0"
   "IsRenderbuffer\0"
   "IsRenderbufferEXT\0"
   "IsRenderbufferOES\0"
   "IsSampler\0"
   "IsSemaphoreEXT\0"
   "IsShader\0"
   "IsSync\0"
   "IsSyncAPPLE\0"
   "IsTexture\0"
   "IsTextureEXT\0"
   "IsTextureHandleResidentARB\0"
   "IsTransformFeedback\0"
   "IsVertexArray\0"
   "IsVertexArrayOES\0"
   "LabelObjectEXT\0"
   "LightModelf\0"
   "LightModelfv\0"
   "LightModeli\0"
   "LightModeliv\0"
   "LightModelx\0"
   "LightModelxOES\0"
   "LightModelxv\0"
   "LightModelxvOES\0"
   "Lightf\0"
   "Lightfv\0"
   "Lighti\0"
   "Lightiv\0"
   "Lightx\0"
   "LightxOES\0"
   "Lightxv\0"
   "LightxvOES\0"
   "LineStipple\0"
   "LineWidth\0"
   "LineWidthx\0"
   "LineWidthxOES\0"
   "LinkProgram\0"
   "LinkProgramARB\0"
   "ListBase\0"
   "LoadIdentity\0"
   "LoadMatrixd\0"
   "LoadMatrixf\0"
   "LoadMatrixx\0"
   "LoadMatrixxOES\0"
   "LoadName\0"
   "LoadTransposeMatrixd\0"
   "LoadTransposeMatrixdARB\0"
   "LoadTransposeMatrixf\0"
   "LoadTransposeMatrixfARB\0"
   "LockArraysEXT\0"
   "LogicOp\0"
   "MakeImageHandleNonResidentARB\0"
   "MakeImageHandleResidentARB\0"
   "MakeTextureHandleNonResidentARB\0"
   "MakeTextureHandleResidentARB\0"
   "Map1d\0"
   "Map1f\0"
   "Map2d\0"
   "Map2f\0"
   "MapBuffer\0"
   "MapBufferARB\0"
   "MapBufferOES\0"
   "MapBufferRange\0"
   "MapBufferRangeEXT\0"
   "MapGrid1d\0"
   "MapGrid1f\0"
   "MapGrid2d\0"
   "MapGrid2f\0"
   "MapNamedBuffer\0"
   "MapNamedBufferEXT\0"
   "MapNamedBufferRange\0"
   "MapNamedBufferRangeEXT\0"
   "Materialf\0"
   "Materialfv\0"
   "Materiali\0"
   "Materialiv\0"
   "Materialx\0"
   "MaterialxOES\0"
   "Materialxv\0"
   "MaterialxvOES\0"
   "MatrixFrustumEXT\0"
   "MatrixLoadIdentityEXT\0"
   "MatrixLoadTransposedEXT\0"
   "MatrixLoadTransposefEXT\0"
   "MatrixLoaddEXT\0"
   "MatrixLoadfEXT\0"
   "MatrixMode\0"
   "MatrixMultTransposedEXT\0"
   "MatrixMultTransposefEXT\0"
   "MatrixMultdEXT\0"
   "MatrixMultfEXT\0"
   "MatrixOrthoEXT\0"
   "MatrixPopEXT\0"
   "MatrixPushEXT\0"
   "MatrixRotatedEXT\0"
   "MatrixRotatefEXT\0"
   "MatrixScaledEXT\0"
   "MatrixScalefEXT\0"
   "MatrixTranslatedEXT\0"
   "MatrixTranslatefEXT\0"
   "MaxShaderCompilerThreadsARB\0"
   "MaxShaderCompilerThreadsKHR\0"
   "MemoryBarrier\0"
   "MemoryBarrierByRegion\0"
   "MemoryBarrierEXT\0"
   "MemoryObjectParameterivEXT\0"
   "MinSampleShading\0"
   "MinSampleShadingARB\0"
   "MinSampleShadingOES\0"
   "Minmax\0"
   "MultMatrixd\0"
   "MultMatrixf\0"
   "MultMatrixx\0"
   "MultMatrixxOES\0"
   "MultTransposeMatrixd\0"
   "MultTransposeMatrixdARB\0"
   "MultTransposeMatrixf\0"
   "MultTransposeMatrixfARB\0"
   "MultiDrawArrays\0"
   "MultiDrawArraysEXT\0"
   "MultiDrawArraysIndirect\0"
   "MultiDrawArraysIndirectAMD\0"
   "MultiDrawArraysIndirectCount\0"
   "MultiDrawArraysIndirectCountARB\0"
   "MultiDrawArraysIndirectEXT\0"
   "MultiDrawArraysUserBuf\0"
   "MultiDrawElements\0"
   "MultiDrawElementsBaseVertex\0"
   "MultiDrawElementsBaseVertexEXT\0"
   "MultiDrawElementsEXT\0"
   "MultiDrawElementsIndirect\0"
   "MultiDrawElementsIndirectAMD\0"
   "MultiDrawElementsIndirectCount\0"
   "MultiDrawElementsIndirectCountARB\0"
   "MultiDrawElementsIndirectEXT\0"
   "MultiDrawElementsUserBuf\0"
   "MultiModeDrawArraysIBM\0"
   "MultiModeDrawElementsIBM\0"
   "MultiTexBufferEXT\0"
   "MultiTexCoord1d\0"
   "MultiTexCoord1dARB\0"
   "MultiTexCoord1dv\0"
   "MultiTexCoord1dvARB\0"
   "MultiTexCoord1f\0"
   "MultiTexCoord1fARB\0"
   "MultiTexCoord1fv\0"
   "MultiTexCoord1fvARB\0"
   "MultiTexCoord1hNV\0"
   "MultiTexCoord1hvNV\0"
   "MultiTexCoord1i\0"
   "MultiTexCoord1iARB\0"
   "MultiTexCoord1iv\0"
   "MultiTexCoord1ivARB\0"
   "MultiTexCoord1s\0"
   "MultiTexCoord1sARB\0"
   "MultiTexCoord1sv\0"
   "MultiTexCoord1svARB\0"
   "MultiTexCoord2d\0"
   "MultiTexCoord2dARB\0"
   "MultiTexCoord2dv\0"
   "MultiTexCoord2dvARB\0"
   "MultiTexCoord2f\0"
   "MultiTexCoord2fARB\0"
   "MultiTexCoord2fv\0"
   "MultiTexCoord2fvARB\0"
   "MultiTexCoord2hNV\0"
   "MultiTexCoord2hvNV\0"
   "MultiTexCoord2i\0"
   "MultiTexCoord2iARB\0"
   "MultiTexCoord2iv\0"
   "MultiTexCoord2ivARB\0"
   "MultiTexCoord2s\0"
   "MultiTexCoord2sARB\0"
   "MultiTexCoord2sv\0"
   "MultiTexCoord2svARB\0"
   "MultiTexCoord3d\0"
   "MultiTexCoord3dARB\0"
   "MultiTexCoord3dv\0"
   "MultiTexCoord3dvARB\0"
   "MultiTexCoord3f\0"
   "MultiTexCoord3fARB\0"
   "MultiTexCoord3fv\0"
   "MultiTexCoord3fvARB\0"
   "MultiTexCoord3hNV\0"
   "MultiTexCoord3hvNV\0"
   "MultiTexCoord3i\0"
   "MultiTexCoord3iARB\0"
   "MultiTexCoord3iv\0"
   "MultiTexCoord3ivARB\0"
   "MultiTexCoord3s\0"
   "MultiTexCoord3sARB\0"
   "MultiTexCoord3sv\0"
   "MultiTexCoord3svARB\0"
   "MultiTexCoord4d\0"
   "MultiTexCoord4dARB\0"
   "MultiTexCoord4dv\0"
   "MultiTexCoord4dvARB\0"
   "MultiTexCoord4f\0"
   "MultiTexCoord4fARB\0"
   "MultiTexCoord4fv\0"
   "MultiTexCoord4fvARB\0"
   "MultiTexCoord4hNV\0"
   "MultiTexCoord4hvNV\0"
   "MultiTexCoord4i\0"
   "MultiTexCoord4iARB\0"
   "MultiTexCoord4iv\0"
   "MultiTexCoord4ivARB\0"
   "MultiTexCoord4s\0"
   "MultiTexCoord4sARB\0"
   "MultiTexCoord4sv\0"
   "MultiTexCoord4svARB\0"
   "MultiTexCoord4x\0"
   "MultiTexCoord4xOES\0"
   "MultiTexCoordP1ui\0"
   "MultiTexCoordP1uiv\0"
   "MultiTexCoordP2ui\0"
   "MultiTexCoordP2uiv\0"
   "MultiTexCoordP3ui\0"
   "MultiTexCoordP3uiv\0"
   "MultiTexCoordP4ui\0"
   "MultiTexCoordP4uiv\0"
   "MultiTexCoordPointerEXT\0"
   "MultiTexEnvfEXT\0"
   "MultiTexEnvfvEXT\0"
   "MultiTexEnviEXT\0"
   "MultiTexEnvivEXT\0"
   "MultiTexGendEXT\0"
   "MultiTexGendvEXT\0"
   "MultiTexGenfEXT\0"
   "MultiTexGenfvEXT\0"
   "MultiTexGeniEXT\0"
   "MultiTexGenivEXT\0"
   "MultiTexImage1DEXT\0"
   "MultiTexImage2DEXT\0"
   "MultiTexImage3DEXT\0"
   "MultiTexParameterIivEXT\0"
   "MultiTexParameterIuivEXT\0"
   "MultiTexParameterfEXT\0"
   "MultiTexParameterfvEXT\0"
   "MultiTexParameteriEXT\0"
   "MultiTexParameterivEXT\0"
   "MultiTexSubImage1DEXT\0"
   "MultiTexSubImage2DEXT\0"
   "MultiTexSubImage3DEXT\0"
   "NamedBufferData\0"
   "NamedBufferDataEXT\0"
   "NamedBufferPageCommitmentARB\0"
   "NamedBufferPageCommitmentEXT\0"
   "NamedBufferStorage\0"
   "NamedBufferStorageEXT\0"
   "NamedBufferStorageMemEXT\0"
   "NamedBufferSubData\0"
   "NamedBufferSubDataEXT\0"
   "NamedCopyBufferSubDataEXT\0"
   "NamedFramebufferDrawBuffer\0"
   "NamedFramebufferDrawBuffers\0"
   "NamedFramebufferParameteri\0"
   "NamedFramebufferParameteriEXT\0"
   "NamedFramebufferReadBuffer\0"
   "NamedFramebufferRenderbuffer\0"
   "NamedFramebufferRenderbufferEXT\0"
   "NamedFramebufferSampleLocationsfvARB\0"
   "NamedFramebufferSampleLocationsfvNV\0"
   "NamedFramebufferTexture\0"
   "NamedFramebufferTexture1DEXT\0"
   "NamedFramebufferTexture2DEXT\0"
   "NamedFramebufferTexture3DEXT\0"
   "NamedFramebufferTextureLayer\0"
   "NamedFramebufferTextureMultiviewOVR\0"
   "NamedProgramLocalParameter4dEXT\0"
   "NamedProgramLocalParameter4dvEXT\0"
   "NamedProgramLocalParameter4fEXT\0"
   "NamedProgramLocalParameter4fvEXT\0"
   "NamedProgramLocalParameters4fvEXT\0"
   "NamedProgramStringEXT\0"
   "NamedRenderbufferStorage\0"
   "NamedRenderbufferStorageEXT\0"
   "NamedRenderbufferStorageMultisample\0"
   "NamedRenderbufferStorageMultisampleAdvancedAMD\0"
   "NamedRenderbufferStorageMultisampleEXT\0"
   "NamedStringARB\0"
   "NewList\0"
   "Normal3b\0"
   "Normal3bv\0"
   "Normal3d\0"
   "Normal3dv\0"
   "Normal3f\0"
   "Normal3fv\0"
   "Normal3hNV\0"
   "Normal3hvNV\0"
   "Normal3i\0"
   "Normal3iv\0"
   "Normal3s\0"
   "Normal3sv\0"
   "Normal3x\0"
   "Normal3xOES\0"
   "NormalP3ui\0"
   "NormalP3uiv\0"
   "NormalPointer\0"
   "NormalPointerEXT\0"
   "ObjectLabel\0"
   "ObjectLabelKHR\0"
   "ObjectPtrLabel\0"
   "ObjectPtrLabelKHR\0"
   "Ortho\0"
   "Orthof\0"
   "OrthofOES\0"
   "Orthox\0"
   "OrthoxOES\0"
   "PassTexCoordATI\0"
   "PassThrough\0"
   "PatchParameterfv\0"
   "PatchParameteri\0"
   "PatchParameteriEXT\0"
   "PatchParameteriOES\0"
   "PauseTransformFeedback\0"
   "PixelMapfv\0"
   "PixelMapuiv\0"
   "PixelMapusv\0"
   "PixelStoref\0"
   "PixelStorei\0"
   "PixelTransferf\0"
   "PixelTransferi\0"
   "PixelZoom\0"
   "PointParameterf\0"
   "PointParameterfARB\0"
   "PointParameterfEXT\0"
   "PointParameterfSGIS\0"
   "PointParameterfv\0"
   "PointParameterfvARB\0"
   "PointParameterfvEXT\0"
   "PointParameterfvSGIS\0"
   "PointParameteri\0"
   "PointParameteriNV\0"
   "PointParameteriv\0"
   "PointParameterivNV\0"
   "PointParameterx\0"
   "PointParameterxOES\0"
   "PointParameterxv\0"
   "PointParameterxvOES\0"
   "PointSize\0"
   "PointSizePointerOES\0"
   "PointSizex\0"
   "PointSizexOES\0"
   "PolygonMode\0"
   "PolygonOffset\0"
   "PolygonOffsetClamp\0"
   "PolygonOffsetClampEXT\0"
   "PolygonOffsetx\0"
   "PolygonOffsetxOES\0"
   "PolygonStipple\0"
   "PopAttrib\0"
   "PopClientAttrib\0"
   "PopDebugGroup\0"
   "PopDebugGroupKHR\0"
   "PopMatrix\0"
   "PopName\0"
   "PrimitiveBoundingBox\0"
   "PrimitiveBoundingBoxARB\0"
   "PrimitiveBoundingBoxEXT\0"
   "PrimitiveBoundingBoxOES\0"
   "PrimitiveRestartIndex\0"
   "PrimitiveRestartIndexNV\0"
   "PrimitiveRestartNV\0"
   "PrioritizeTextures\0"
   "PrioritizeTexturesEXT\0"
   "ProgramBinary\0"
   "ProgramBinaryOES\0"
   "ProgramEnvParameter4dARB\0"
   "ProgramEnvParameter4dvARB\0"
   "ProgramEnvParameter4fARB\0"
   "ProgramEnvParameter4fvARB\0"
   "ProgramEnvParameters4fvEXT\0"
   "ProgramLocalParameter4dARB\0"
   "ProgramLocalParameter4dvARB\0"
   "ProgramLocalParameter4fARB\0"
   "ProgramLocalParameter4fvARB\0"
   "ProgramLocalParameters4fvEXT\0"
   "ProgramParameter4dNV\0"
   "ProgramParameter4dvNV\0"
   "ProgramParameter4fNV\0"
   "ProgramParameter4fvNV\0"
   "ProgramParameteri\0"
   "ProgramParameteriEXT\0"
   "ProgramStringARB\0"
   "ProgramUniform1d\0"
   "ProgramUniform1dEXT\0"
   "ProgramUniform1dv\0"
   "ProgramUniform1dvEXT\0"
   "ProgramUniform1f\0"
   "ProgramUniform1fEXT\0"
   "ProgramUniform1fv\0"
   "ProgramUniform1fvEXT\0"
   "ProgramUniform1i\0"
   "ProgramUniform1i64ARB\0"
   "ProgramUniform1i64NV\0"
   "ProgramUniform1i64vARB\0"
   "ProgramUniform1i64vNV\0"
   "ProgramUniform1iEXT\0"
   "ProgramUniform1iv\0"
   "ProgramUniform1ivEXT\0"
   "ProgramUniform1ui\0"
   "ProgramUniform1ui64ARB\0"
   "ProgramUniform1ui64NV\0"
   "ProgramUniform1ui64vARB\0"
   "ProgramUniform1ui64vNV\0"
   "ProgramUniform1uiEXT\0"
   "ProgramUniform1uiv\0"
   "ProgramUniform1uivEXT\0"
   "ProgramUniform2d\0"
   "ProgramUniform2dEXT\0"
   "ProgramUniform2dv\0"
   "ProgramUniform2dvEXT\0"
   "ProgramUniform2f\0"
   "ProgramUniform2fEXT\0"
   "ProgramUniform2fv\0"
   "ProgramUniform2fvEXT\0"
   "ProgramUniform2i\0"
   "ProgramUniform2i64ARB\0"
   "ProgramUniform2i64NV\0"
   "ProgramUniform2i64vARB\0"
   "ProgramUniform2i64vNV\0"
   "ProgramUniform2iEXT\0"
   "ProgramUniform2iv\0"
   "ProgramUniform2ivEXT\0"
   "ProgramUniform2ui\0"
   "ProgramUniform2ui64ARB\0"
   "ProgramUniform2ui64NV\0"
   "ProgramUniform2ui64vARB\0"
   "ProgramUniform2ui64vNV\0"
   "ProgramUniform2uiEXT\0"
   "ProgramUniform2uiv\0"
   "ProgramUniform2uivEXT\0"
   "ProgramUniform3d\0"
   "ProgramUniform3dEXT\0"
   "ProgramUniform3dv\0"
   "ProgramUniform3dvEXT\0"
   "ProgramUniform3f\0"
   "ProgramUniform3fEXT\0"
   "ProgramUniform3fv\0"
   "ProgramUniform3fvEXT\0"
   "ProgramUniform3i\0"
   "ProgramUniform3i64ARB\0"
   "ProgramUniform3i64NV\0"
   "ProgramUniform3i64vARB\0"
   "ProgramUniform3i64vNV\0"
   "ProgramUniform3iEXT\0"
   "ProgramUniform3iv\0"
   "ProgramUniform3ivEXT\0"
   "ProgramUniform3ui\0"
   "ProgramUniform3ui64ARB\0"
   "ProgramUniform3ui64NV\0"
   "ProgramUniform3ui64vARB\0"
   "ProgramUniform3ui64vNV\0"
   "ProgramUniform3uiEXT\0"
   "ProgramUniform3uiv\0"
   "ProgramUniform3uivEXT\0"
   "ProgramUniform4d\0"
   "ProgramUniform4dEXT\0"
   "ProgramUniform4dv\0"
   "ProgramUniform4dvEXT\0"
   "ProgramUniform4f\0"
   "ProgramUniform4fEXT\0"
   "ProgramUniform4fv\0"
   "ProgramUniform4fvEXT\0"
   "ProgramUniform4i\0"
   "ProgramUniform4i64ARB\0"
   "ProgramUniform4i64NV\0"
   "ProgramUniform4i64vARB\0"
   "ProgramUniform4i64vNV\0"
   "ProgramUniform4iEXT\0"
   "ProgramUniform4iv\0"
   "ProgramUniform4ivEXT\0"
   "ProgramUniform4ui\0"
   "ProgramUniform4ui64ARB\0"
   "ProgramUniform4ui64NV\0"
   "ProgramUniform4ui64vARB\0"
   "ProgramUniform4ui64vNV\0"
   "ProgramUniform4uiEXT\0"
   "ProgramUniform4uiv\0"
   "ProgramUniform4uivEXT\0"
   "ProgramUniformHandleui64ARB\0"
   "ProgramUniformHandleui64vARB\0"
   "ProgramUniformMatrix2dv\0"
   "ProgramUniformMatrix2dvEXT\0"
   "ProgramUniformMatrix2fv\0"
   "ProgramUniformMatrix2fvEXT\0"
   "ProgramUniformMatrix2x3dv\0"
   "ProgramUniformMatrix2x3dvEXT\0"
   "ProgramUniformMatrix2x3fv\0"
   "ProgramUniformMatrix2x3fvEXT\0"
   "ProgramUniformMatrix2x4dv\0"
   "ProgramUniformMatrix2x4dvEXT\0"
   "ProgramUniformMatrix2x4fv\0"
   "ProgramUniformMatrix2x4fvEXT\0"
   "ProgramUniformMatrix3dv\0"
   "ProgramUniformMatrix3dvEXT\0"
   "ProgramUniformMatrix3fv\0"
   "ProgramUniformMatrix3fvEXT\0"
   "ProgramUniformMatrix3x2dv\0"
   "ProgramUniformMatrix3x2dvEXT\0"
   "ProgramUniformMatrix3x2fv\0"
   "ProgramUniformMatrix3x2fvEXT\0"
   "ProgramUniformMatrix3x4dv\0"
   "ProgramUniformMatrix3x4dvEXT\0"
   "ProgramUniformMatrix3x4fv\0"
   "ProgramUniformMatrix3x4fvEXT\0"
   "ProgramUniformMatrix4dv\0"
   "ProgramUniformMatrix4dvEXT\0"
   "ProgramUniformMatrix4fv\0"
   "ProgramUniformMatrix4fvEXT\0"
   "ProgramUniformMatrix4x2dv\0"
   "ProgramUniformMatrix4x2dvEXT\0"
   "ProgramUniformMatrix4x2fv\0"
   "ProgramUniformMatrix4x2fvEXT\0"
   "ProgramUniformMatrix4x3dv\0"
   "ProgramUniformMatrix4x3dvEXT\0"
   "ProgramUniformMatrix4x3fv\0"
   "ProgramUniformMatrix4x3fvEXT\0"
   "ProvokingVertex\0"
   "ProvokingVertexEXT\0"
   "PushAttrib\0"
   "PushClientAttrib\0"
   "PushClientAttribDefaultEXT\0"
   "PushDebugGroup\0"
   "PushDebugGroupKHR\0"
   "PushMatrix\0"
   "PushName\0"
   "QueryCounter\0"
   "QueryCounterEXT\0"
   "QueryMatrixxOES\0"
   "RasterPos2d\0"
   "RasterPos2dv\0"
   "RasterPos2f\0"
   "RasterPos2fv\0"
   "RasterPos2i\0"
   "RasterPos2iv\0"
   "RasterPos2s\0"
   "RasterPos2sv\0"
   "RasterPos3d\0"
   "RasterPos3dv\0"
   "RasterPos3f\0"
   "RasterPos3fv\0"
   "RasterPos3i\0"
   "RasterPos3iv\0"
   "RasterPos3s\0"
   "RasterPos3sv\0"
   "RasterPos4d\0"
   "RasterPos4dv\0"
   "RasterPos4f\0"
   "RasterPos4fv\0"
   "RasterPos4i\0"
   "RasterPos4iv\0"
   "RasterPos4s\0"
   "RasterPos4sv\0"
   "ReadBuffer\0"
   "ReadBufferNV\0"
   "ReadPixels\0"
   "ReadnPixels\0"
   "ReadnPixelsARB\0"
   "ReadnPixelsEXT\0"
   "ReadnPixelsKHR\0"
   "Rectd\0"
   "Rectdv\0"
   "Rectf\0"
   "Rectfv\0"
   "Recti\0"
   "Rectiv\0"
   "Rects\0"
   "Rectsv\0"
   "ReleaseShaderCompiler\0"
   "RenderMode\0"
   "RenderbufferStorage\0"
   "RenderbufferStorageEXT\0"
   "RenderbufferStorageMultisample\0"
   "RenderbufferStorageMultisampleAdvancedAMD\0"
   "RenderbufferStorageMultisampleEXT\0"
   "RenderbufferStorageOES\0"
   "ResetHistogram\0"
   "ResetMinmax\0"
   "ResolveDepthValuesNV\0"
   "ResumeTransformFeedback\0"
   "Rotated\0"
   "Rotatef\0"
   "Rotatex\0"
   "RotatexOES\0"
   "SampleCoverage\0"
   "SampleCoverageARB\0"
   "SampleCoveragex\0"
   "SampleCoveragexOES\0"
   "SampleMapATI\0"
   "SampleMaski\0"
   "SamplerParameterIiv\0"
   "SamplerParameterIivEXT\0"
   "SamplerParameterIivOES\0"
   "SamplerParameterIuiv\0"
   "SamplerParameterIuivEXT\0"
   "SamplerParameterIuivOES\0"
   "SamplerParameterf\0"
   "SamplerParameterfv\0"
   "SamplerParameteri\0"
   "SamplerParameteriv\0"
   "Scaled\0"
   "Scalef\0"
   "Scalex\0"
   "ScalexOES\0"
   "Scissor\0"
   "ScissorArrayv\0"
   "ScissorArrayvOES\0"
   "ScissorIndexed\0"
   "ScissorIndexedOES\0"
   "ScissorIndexedv\0"
   "ScissorIndexedvOES\0"
   "SecondaryColor3b\0"
   "SecondaryColor3bEXT\0"
   "SecondaryColor3bv\0"
   "SecondaryColor3bvEXT\0"
   "SecondaryColor3d\0"
   "SecondaryColor3dEXT\0"
   "SecondaryColor3dv\0"
   "SecondaryColor3dvEXT\0"
   "SecondaryColor3f\0"
   "SecondaryColor3fEXT\0"
   "SecondaryColor3fv\0"
   "SecondaryColor3fvEXT\0"
   "SecondaryColor3hNV\0"
   "SecondaryColor3hvNV\0"
   "SecondaryColor3i\0"
   "SecondaryColor3iEXT\0"
   "SecondaryColor3iv\0"
   "SecondaryColor3ivEXT\0"
   "SecondaryColor3s\0"
   "SecondaryColor3sEXT\0"
   "SecondaryColor3sv\0"
   "SecondaryColor3svEXT\0"
   "SecondaryColor3ub\0"
   "SecondaryColor3ubEXT\0"
   "SecondaryColor3ubv\0"
   "SecondaryColor3ubvEXT\0"
   "SecondaryColor3ui\0"
   "SecondaryColor3uiEXT\0"
   "SecondaryColor3uiv\0"
   "SecondaryColor3uivEXT\0"
   "SecondaryColor3us\0"
   "SecondaryColor3usEXT\0"
   "SecondaryColor3usv\0"
   "SecondaryColor3usvEXT\0"
   "SecondaryColorP3ui\0"
   "SecondaryColorP3uiv\0"
   "SecondaryColorPointer\0"
   "SecondaryColorPointerEXT\0"
   "SelectBuffer\0"
   "SelectPerfMonitorCountersAMD\0"
   "SemaphoreParameterui64vEXT\0"
   "SeparableFilter2D\0"
   "SetFragmentShaderConstantATI\0"
   "ShadeModel\0"
   "ShaderBinary\0"
   "ShaderSource\0"
   "ShaderSourceARB\0"
   "ShaderStorageBlockBinding\0"
   "SignalSemaphoreEXT\0"
   "SpecializeShader\0"
   "SpecializeShaderARB\0"
   "StencilFunc\0"
   "StencilFuncSeparate\0"
   "StencilFuncSeparateATI\0"
   "StencilMask\0"
   "StencilMaskSeparate\0"
   "StencilOp\0"
   "StencilOpSeparate\0"
   "StencilOpSeparateATI\0"
   "StringMarkerGREMEDY\0"
   "SubpixelPrecisionBiasNV\0"
   "TexBuffer\0"
   "TexBufferARB\0"
   "TexBufferEXT\0"
   "TexBufferOES\0"
   "TexBufferRange\0"
   "TexBufferRangeEXT\0"
   "TexBufferRangeOES\0"
   "TexCoord1d\0"
   "TexCoord1dv\0"
   "TexCoord1f\0"
   "TexCoord1fv\0"
   "TexCoord1hNV\0"
   "TexCoord1hvNV\0"
   "TexCoord1i\0"
   "TexCoord1iv\0"
   "TexCoord1s\0"
   "TexCoord1sv\0"
   "TexCoord2d\0"
   "TexCoord2dv\0"
   "TexCoord2f\0"
   "TexCoord2fv\0"
   "TexCoord2hNV\0"
   "TexCoord2hvNV\0"
   "TexCoord2i\0"
   "TexCoord2iv\0"
   "TexCoord2s\0"
   "TexCoord2sv\0"
   "TexCoord3d\0"
   "TexCoord3dv\0"
   "TexCoord3f\0"
   "TexCoord3fv\0"
   "TexCoord3hNV\0"
   "TexCoord3hvNV\0"
   "TexCoord3i\0"
   "TexCoord3iv\0"
   "TexCoord3s\0"
   "TexCoord3sv\0"
   "TexCoord4d\0"
   "TexCoord4dv\0"
   "TexCoord4f\0"
   "TexCoord4fv\0"
   "TexCoord4hNV\0"
   "TexCoord4hvNV\0"
   "TexCoord4i\0"
   "TexCoord4iv\0"
   "TexCoord4s\0"
   "TexCoord4sv\0"
   "TexCoordP1ui\0"
   "TexCoordP1uiv\0"
   "TexCoordP2ui\0"
   "TexCoordP2uiv\0"
   "TexCoordP3ui\0"
   "TexCoordP3uiv\0"
   "TexCoordP4ui\0"
   "TexCoordP4uiv\0"
   "TexCoordPointer\0"
   "TexCoordPointerEXT\0"
   "TexEnvf\0"
   "TexEnvfv\0"
   "TexEnvi\0"
   "TexEnviv\0"
   "TexEnvx\0"
   "TexEnvxOES\0"
   "TexEnvxv\0"
   "TexEnvxvOES\0"
   "TexGend\0"
   "TexGendv\0"
   "TexGenf\0"
   "TexGenfOES\0"
   "TexGenfv\0"
   "TexGenfvOES\0"
   "TexGeni\0"
   "TexGeniOES\0"
   "TexGeniv\0"
   "TexGenivOES\0"
   "TexGenxOES\0"
   "TexGenxvOES\0"
   "TexImage1D\0"
   "TexImage2D\0"
   "TexImage2DMultisample\0"
   "TexImage3D\0"
   "TexImage3DEXT\0"
   "TexImage3DMultisample\0"
   "TexImage3DOES\0"
   "TexPageCommitmentARB\0"
   "TexParameterIiv\0"
   "TexParameterIivEXT\0"
   "TexParameterIivOES\0"
   "TexParameterIuiv\0"
   "TexParameterIuivEXT\0"
   "TexParameterIuivOES\0"
   "TexParameterf\0"
   "TexParameterfv\0"
   "TexParameteri\0"
   "TexParameteriv\0"
   "TexParameterx\0"
   "TexParameterxOES\0"
   "TexParameterxv\0"
   "TexParameterxvOES\0"
   "TexStorage1D\0"
   "TexStorage1DEXT\0"
   "TexStorage2D\0"
   "TexStorage2DEXT\0"
   "TexStorage2DMultisample\0"
   "TexStorage3D\0"
   "TexStorage3DEXT\0"
   "TexStorage3DMultisample\0"
   "TexStorage3DMultisampleOES\0"
   "TexStorageAttribs2DEXT\0"
   "TexStorageAttribs3DEXT\0"
   "TexStorageMem1DEXT\0"
   "TexStorageMem2DEXT\0"
   "TexStorageMem2DMultisampleEXT\0"
   "TexStorageMem3DEXT\0"
   "TexStorageMem3DMultisampleEXT\0"
   "TexSubImage1D\0"
   "TexSubImage1DEXT\0"
   "TexSubImage2D\0"
   "TexSubImage2DEXT\0"
   "TexSubImage3D\0"
   "TexSubImage3DEXT\0"
   "TexSubImage3DOES\0"
   "TextureBarrier\0"
   "TextureBarrierNV\0"
   "TextureBuffer\0"
   "TextureBufferEXT\0"
   "TextureBufferRange\0"
   "TextureBufferRangeEXT\0"
   "TextureImage1DEXT\0"
   "TextureImage2DEXT\0"
   "TextureImage3DEXT\0"
   "TexturePageCommitmentEXT\0"
   "TextureParameterIiv\0"
   "TextureParameterIivEXT\0"
   "TextureParameterIuiv\0"
   "TextureParameterIuivEXT\0"
   "TextureParameterf\0"
   "TextureParameterfEXT\0"
   "TextureParameterfv\0"
   "TextureParameterfvEXT\0"
   "TextureParameteri\0"
   "TextureParameteriEXT\0"
   "TextureParameteriv\0"
   "TextureParameterivEXT\0"
   "TextureStorage1D\0"
   "TextureStorage1DEXT\0"
   "TextureStorage2D\0"
   "TextureStorage2DEXT\0"
   "TextureStorage2DMultisample\0"
   "TextureStorage2DMultisampleEXT\0"
   "TextureStorage3D\0"
   "TextureStorage3DEXT\0"
   "TextureStorage3DMultisample\0"
   "TextureStorage3DMultisampleEXT\0"
   "TextureStorageMem1DEXT\0"
   "TextureStorageMem2DEXT\0"
   "TextureStorageMem2DMultisampleEXT\0"
   "TextureStorageMem3DEXT\0"
   "TextureStorageMem3DMultisampleEXT\0"
   "TextureSubImage1D\0"
   "TextureSubImage1DEXT\0"
   "TextureSubImage2D\0"
   "TextureSubImage2DEXT\0"
   "TextureSubImage3D\0"
   "TextureSubImage3DEXT\0"
   "TextureView\0"
   "TextureViewEXT\0"
   "TextureViewOES\0"
   "TransformFeedbackBufferBase\0"
   "TransformFeedbackBufferRange\0"
   "TransformFeedbackVaryings\0"
   "TransformFeedbackVaryingsEXT\0"
   "Translated\0"
   "Translatef\0"
   "Translatex\0"
   "TranslatexOES\0"
   "Uniform1d\0"
   "Uniform1dv\0"
   "Uniform1f\0"
   "Uniform1fARB\0"
   "Uniform1fv\0"
   "Uniform1fvARB\0"
   "Uniform1i\0"
   "Uniform1i64ARB\0"
   "Uniform1i64NV\0"
   "Uniform1i64vARB\0"
   "Uniform1i64vNV\0"
   "Uniform1iARB\0"
   "Uniform1iv\0"
   "Uniform1ivARB\0"
   "Uniform1ui\0"
   "Uniform1ui64ARB\0"
   "Uniform1ui64NV\0"
   "Uniform1ui64vARB\0"
   "Uniform1ui64vNV\0"
   "Uniform1uiEXT\0"
   "Uniform1uiv\0"
   "Uniform1uivEXT\0"
   "Uniform2d\0"
   "Uniform2dv\0"
   "Uniform2f\0"
   "Uniform2fARB\0"
   "Uniform2fv\0"
   "Uniform2fvARB\0"
   "Uniform2i\0"
   "Uniform2i64ARB\0"
   "Uniform2i64NV\0"
   "Uniform2i64vARB\0"
   "Uniform2i64vNV\0"
   "Uniform2iARB\0"
   "Uniform2iv\0"
   "Uniform2ivARB\0"
   "Uniform2ui\0"
   "Uniform2ui64ARB\0"
   "Uniform2ui64NV\0"
   "Uniform2ui64vARB\0"
   "Uniform2ui64vNV\0"
   "Uniform2uiEXT\0"
   "Uniform2uiv\0"
   "Uniform2uivEXT\0"
   "Uniform3d\0"
   "Uniform3dv\0"
   "Uniform3f\0"
   "Uniform3fARB\0"
   "Uniform3fv\0"
   "Uniform3fvARB\0"
   "Uniform3i\0"
   "Uniform3i64ARB\0"
   "Uniform3i64NV\0"
   "Uniform3i64vARB\0"
   "Uniform3i64vNV\0"
   "Uniform3iARB\0"
   "Uniform3iv\0"
   "Uniform3ivARB\0"
   "Uniform3ui\0"
   "Uniform3ui64ARB\0"
   "Uniform3ui64NV\0"
   "Uniform3ui64vARB\0"
   "Uniform3ui64vNV\0"
   "Uniform3uiEXT\0"
   "Uniform3uiv\0"
   "Uniform3uivEXT\0"
   "Uniform4d\0"
   "Uniform4dv\0"
   "Uniform4f\0"
   "Uniform4fARB\0"
   "Uniform4fv\0"
   "Uniform4fvARB\0"
   "Uniform4i\0"
   "Uniform4i64ARB\0"
   "Uniform4i64NV\0"
   "Uniform4i64vARB\0"
   "Uniform4i64vNV\0"
   "Uniform4iARB\0"
   "Uniform4iv\0"
   "Uniform4ivARB\0"
   "Uniform4ui\0"
   "Uniform4ui64ARB\0"
   "Uniform4ui64NV\0"
   "Uniform4ui64vARB\0"
   "Uniform4ui64vNV\0"
   "Uniform4uiEXT\0"
   "Uniform4uiv\0"
   "Uniform4uivEXT\0"
   "UniformBlockBinding\0"
   "UniformHandleui64ARB\0"
   "UniformHandleui64vARB\0"
   "UniformMatrix2dv\0"
   "UniformMatrix2fv\0"
   "UniformMatrix2fvARB\0"
   "UniformMatrix2x3dv\0"
   "UniformMatrix2x3fv\0"
   "UniformMatrix2x4dv\0"
   "UniformMatrix2x4fv\0"
   "UniformMatrix3dv\0"
   "UniformMatrix3fv\0"
   "UniformMatrix3fvARB\0"
   "UniformMatrix3x2dv\0"
   "UniformMatrix3x2fv\0"
   "UniformMatrix3x4dv\0"
   "UniformMatrix3x4fv\0"
   "UniformMatrix4dv\0"
   "UniformMatrix4fv\0"
   "UniformMatrix4fvARB\0"
   "UniformMatrix4x2dv\0"
   "UniformMatrix4x2fv\0"
   "UniformMatrix4x3dv\0"
   "UniformMatrix4x3fv\0"
   "UniformSubroutinesuiv\0"
   "UnlockArraysEXT\0"
   "UnmapBuffer\0"
   "UnmapBufferARB\0"
   "UnmapBufferOES\0"
   "UnmapNamedBuffer\0"
   "UnmapNamedBufferEXT\0"
   "UseProgram\0"
   "UseProgramObjectARB\0"
   "UseProgramStages\0"
   "UseProgramStagesEXT\0"
   "VDPAUFiniNV\0"
   "VDPAUGetSurfaceivNV\0"
   "VDPAUInitNV\0"
   "VDPAUIsSurfaceNV\0"
   "VDPAUMapSurfacesNV\0"
   "VDPAURegisterOutputSurfaceNV\0"
   "VDPAURegisterVideoSurfaceNV\0"
   "VDPAUSurfaceAccessNV\0"
   "VDPAUUnmapSurfacesNV\0"
   "VDPAUUnregisterSurfaceNV\0"
   "ValidateProgram\0"
   "ValidateProgramARB\0"
   "ValidateProgramPipeline\0"
   "ValidateProgramPipelineEXT\0"
   "Vertex2d\0"
   "Vertex2dv\0"
   "Vertex2f\0"
   "Vertex2fv\0"
   "Vertex2hNV\0"
   "Vertex2hvNV\0"
   "Vertex2i\0"
   "Vertex2iv\0"
   "Vertex2s\0"
   "Vertex2sv\0"
   "Vertex3d\0"
   "Vertex3dv\0"
   "Vertex3f\0"
   "Vertex3fv\0"
   "Vertex3hNV\0"
   "Vertex3hvNV\0"
   "Vertex3i\0"
   "Vertex3iv\0"
   "Vertex3s\0"
   "Vertex3sv\0"
   "Vertex4d\0"
   "Vertex4dv\0"
   "Vertex4f\0"
   "Vertex4fv\0"
   "Vertex4hNV\0"
   "Vertex4hvNV\0"
   "Vertex4i\0"
   "Vertex4iv\0"
   "Vertex4s\0"
   "Vertex4sv\0"
   "VertexArrayAttribBinding\0"
   "VertexArrayAttribFormat\0"
   "VertexArrayAttribIFormat\0"
   "VertexArrayAttribLFormat\0"
   "VertexArrayBindVertexBufferEXT\0"
   "VertexArrayBindingDivisor\0"
   "VertexArrayColorOffsetEXT\0"
   "VertexArrayEdgeFlagOffsetEXT\0"
   "VertexArrayElementBuffer\0"
   "VertexArrayFogCoordOffsetEXT\0"
   "VertexArrayIndexOffsetEXT\0"
   "VertexArrayMultiTexCoordOffsetEXT\0"
   "VertexArrayNormalOffsetEXT\0"
   "VertexArraySecondaryColorOffsetEXT\0"
   "VertexArrayTexCoordOffsetEXT\0"
   "VertexArrayVertexAttribBindingEXT\0"
   "VertexArrayVertexAttribDivisorEXT\0"
   "VertexArrayVertexAttribFormatEXT\0"
   "VertexArrayVertexAttribIFormatEXT\0"
   "VertexArrayVertexAttribIOffsetEXT\0"
   "VertexArrayVertexAttribLFormatEXT\0"
   "VertexArrayVertexAttribLOffsetEXT\0"
   "VertexArrayVertexAttribOffsetEXT\0"
   "VertexArrayVertexBindingDivisorEXT\0"
   "VertexArrayVertexBuffer\0"
   "VertexArrayVertexBuffers\0"
   "VertexArrayVertexOffsetEXT\0"
   "VertexAttrib1d\0"
   "VertexAttrib1dARB\0"
   "VertexAttrib1dNV\0"
   "VertexAttrib1dv\0"
   "VertexAttrib1dvARB\0"
   "VertexAttrib1dvNV\0"
   "VertexAttrib1f\0"
   "VertexAttrib1fARB\0"
   "VertexAttrib1fNV\0"
   "VertexAttrib1fv\0"
   "VertexAttrib1fvARB\0"
   "VertexAttrib1fvNV\0"
   "VertexAttrib1hNV\0"
   "VertexAttrib1hvNV\0"
   "VertexAttrib1s\0"
   "VertexAttrib1sARB\0"
   "VertexAttrib1sNV\0"
   "VertexAttrib1sv\0"
   "VertexAttrib1svARB\0"
   "VertexAttrib1svNV\0"
   "VertexAttrib2d\0"
   "VertexAttrib2dARB\0"
   "VertexAttrib2dNV\0"
   "VertexAttrib2dv\0"
   "VertexAttrib2dvARB\0"
   "VertexAttrib2dvNV\0"
   "VertexAttrib2f\0"
   "VertexAttrib2fARB\0"
   "VertexAttrib2fNV\0"
   "VertexAttrib2fv\0"
   "VertexAttrib2fvARB\0"
   "VertexAttrib2fvNV\0"
   "VertexAttrib2hNV\0"
   "VertexAttrib2hvNV\0"
   "VertexAttrib2s\0"
   "VertexAttrib2sARB\0"
   "VertexAttrib2sNV\0"
   "VertexAttrib2sv\0"
   "VertexAttrib2svARB\0"
   "VertexAttrib2svNV\0"
   "VertexAttrib3d\0"
   "VertexAttrib3dARB\0"
   "VertexAttrib3dNV\0"
   "VertexAttrib3dv\0"
   "VertexAttrib3dvARB\0"
   "VertexAttrib3dvNV\0"
   "VertexAttrib3f\0"
   "VertexAttrib3fARB\0"
   "VertexAttrib3fNV\0"
   "VertexAttrib3fv\0"
   "VertexAttrib3fvARB\0"
   "VertexAttrib3fvNV\0"
   "VertexAttrib3hNV\0"
   "VertexAttrib3hvNV\0"
   "VertexAttrib3s\0"
   "VertexAttrib3sARB\0"
   "VertexAttrib3sNV\0"
   "VertexAttrib3sv\0"
   "VertexAttrib3svARB\0"
   "VertexAttrib3svNV\0"
   "VertexAttrib4Nbv\0"
   "VertexAttrib4NbvARB\0"
   "VertexAttrib4Niv\0"
   "VertexAttrib4NivARB\0"
   "VertexAttrib4Nsv\0"
   "VertexAttrib4NsvARB\0"
   "VertexAttrib4Nub\0"
   "VertexAttrib4NubARB\0"
   "VertexAttrib4Nubv\0"
   "VertexAttrib4NubvARB\0"
   "VertexAttrib4Nuiv\0"
   "VertexAttrib4NuivARB\0"
   "VertexAttrib4Nusv\0"
   "VertexAttrib4NusvARB\0"
   "VertexAttrib4bv\0"
   "VertexAttrib4bvARB\0"
   "VertexAttrib4d\0"
   "VertexAttrib4dARB\0"
   "VertexAttrib4dNV\0"
   "VertexAttrib4dv\0"
   "VertexAttrib4dvARB\0"
   "VertexAttrib4dvNV\0"
   "VertexAttrib4f\0"
   "VertexAttrib4fARB\0"
   "VertexAttrib4fNV\0"
   "VertexAttrib4fv\0"
   "VertexAttrib4fvARB\0"
   "VertexAttrib4fvNV\0"
   "VertexAttrib4hNV\0"
   "VertexAttrib4hvNV\0"
   "VertexAttrib4iv\0"
   "VertexAttrib4ivARB\0"
   "VertexAttrib4s\0"
   "VertexAttrib4sARB\0"
   "VertexAttrib4sNV\0"
   "VertexAttrib4sv\0"
   "VertexAttrib4svARB\0"
   "VertexAttrib4svNV\0"
   "VertexAttrib4ubNV\0"
   "VertexAttrib4ubv\0"
   "VertexAttrib4ubvARB\0"
   "VertexAttrib4ubvNV\0"
   "VertexAttrib4uiv\0"
   "VertexAttrib4uivARB\0"
   "VertexAttrib4usv\0"
   "VertexAttrib4usvARB\0"
   "VertexAttribBinding\0"
   "VertexAttribDivisor\0"
   "VertexAttribDivisorARB\0"
   "VertexAttribDivisorEXT\0"
   "VertexAttribFormat\0"
   "VertexAttribI1i\0"
   "VertexAttribI1iEXT\0"
   "VertexAttribI1iv\0"
   "VertexAttribI1ivEXT\0"
   "VertexAttribI1ui\0"
   "VertexAttribI1uiEXT\0"
   "VertexAttribI1uiv\0"
   "VertexAttribI1uivEXT\0"
   "VertexAttribI2i\0"
   "VertexAttribI2iEXT\0"
   "VertexAttribI2iv\0"
   "VertexAttribI2ivEXT\0"
   "VertexAttribI2ui\0"
   "VertexAttribI2uiEXT\0"
   "VertexAttribI2uiv\0"
   "VertexAttribI2uivEXT\0"
   "VertexAttribI3i\0"
   "VertexAttribI3iEXT\0"
   "VertexAttribI3iv\0"
   "VertexAttribI3ivEXT\0"
   "VertexAttribI3ui\0"
   "VertexAttribI3uiEXT\0"
   "VertexAttribI3uiv\0"
   "VertexAttribI3uivEXT\0"
   "VertexAttribI4bv\0"
   "VertexAttribI4bvEXT\0"
   "VertexAttribI4i\0"
   "VertexAttribI4iEXT\0"
   "VertexAttribI4iv\0"
   "VertexAttribI4ivEXT\0"
   "VertexAttribI4sv\0"
   "VertexAttribI4svEXT\0"
   "VertexAttribI4ubv\0"
   "VertexAttribI4ubvEXT\0"
   "VertexAttribI4ui\0"
   "VertexAttribI4uiEXT\0"
   "VertexAttribI4uiv\0"
   "VertexAttribI4uivEXT\0"
   "VertexAttribI4usv\0"
   "VertexAttribI4usvEXT\0"
   "VertexAttribIFormat\0"
   "VertexAttribIPointer\0"
   "VertexAttribIPointerEXT\0"
   "VertexAttribL1d\0"
   "VertexAttribL1dEXT\0"
   "VertexAttribL1dv\0"
   "VertexAttribL1dvEXT\0"
   "VertexAttribL1ui64ARB\0"
   "VertexAttribL1ui64vARB\0"
   "VertexAttribL2d\0"
   "VertexAttribL2dEXT\0"
   "VertexAttribL2dv\0"
   "VertexAttribL2dvEXT\0"
   "VertexAttribL3d\0"
   "VertexAttribL3dEXT\0"
   "VertexAttribL3dv\0"
   "VertexAttribL3dvEXT\0"
   "VertexAttribL4d\0"
   "VertexAttribL4dEXT\0"
   "VertexAttribL4dv\0"
   "VertexAttribL4dvEXT\0"
   "VertexAttribLFormat\0"
   "VertexAttribLPointer\0"
   "VertexAttribLPointerEXT\0"
   "VertexAttribP1ui\0"
   "VertexAttribP1uiv\0"
   "VertexAttribP2ui\0"
   "VertexAttribP2uiv\0"
   "VertexAttribP3ui\0"
   "VertexAttribP3uiv\0"
   "VertexAttribP4ui\0"
   "VertexAttribP4uiv\0"
   "VertexAttribPointer\0"
   "VertexAttribPointerARB\0"
   "VertexAttribs1dvNV\0"
   "VertexAttribs1fvNV\0"
   "VertexAttribs1hvNV\0"
   "VertexAttribs1svNV\0"
   "VertexAttribs2dvNV\0"
   "VertexAttribs2fvNV\0"
   "VertexAttribs2hvNV\0"
   "VertexAttribs2svNV\0"
   "VertexAttribs3dvNV\0"
   "VertexAttribs3fvNV\0"
   "VertexAttribs3hvNV\0"
   "VertexAttribs3svNV\0"
   "VertexAttribs4dvNV\0"
   "VertexAttribs4fvNV\0"
   "VertexAttribs4hvNV\0"
   "VertexAttribs4svNV\0"
   "VertexAttribs4ubvNV\0"
   "VertexBindingDivisor\0"
   "VertexP2ui\0"
   "VertexP2uiv\0"
   "VertexP3ui\0"
   "VertexP3uiv\0"
   "VertexP4ui\0"
   "VertexP4uiv\0"
   "VertexPointer\0"
   "VertexPointerEXT\0"
   "Viewport\0"
   "ViewportArrayv\0"
   "ViewportArrayvOES\0"
   "ViewportIndexedf\0"
   "ViewportIndexedfOES\0"
   "ViewportIndexedfv\0"
   "ViewportIndexedfvOES\0"
   "ViewportSwizzleNV\0"
   "WaitSemaphoreEXT\0"
   "WaitSync\0"
   "WaitSyncAPPLE\0"
   "WindowPos2d\0"
   "WindowPos2dARB\0"
   "WindowPos2dMESA\0"
   "WindowPos2dv\0"
   "WindowPos2dvARB\0"
   "WindowPos2dvMESA\0"
   "WindowPos2f\0"
   "WindowPos2fARB\0"
   "WindowPos2fMESA\0"
   "WindowPos2fv\0"
   "WindowPos2fvARB\0"
   "WindowPos2fvMESA\0"
   "WindowPos2i\0"
   "WindowPos2iARB\0"
   "WindowPos2iMESA\0"
   "WindowPos2iv\0"
   "WindowPos2ivARB\0"
   "WindowPos2ivMESA\0"
   "WindowPos2s\0"
   "WindowPos2sARB\0"
   "WindowPos2sMESA\0"
   "WindowPos2sv\0"
   "WindowPos2svARB\0"
   "WindowPos2svMESA\0"
   "WindowPos3d\0"
   "WindowPos3dARB\0"
   "WindowPos3dMESA\0"
   "WindowPos3dv\0"
   "WindowPos3dvARB\0"
   "WindowPos3dvMESA\0"
   "WindowPos3f\0"
   "WindowPos3fARB\0"
   "WindowPos3fMESA\0"
   "WindowPos3fv\0"
   "WindowPos3fvARB\0"
   "WindowPos3fvMESA\0"
   "WindowPos3i\0"
   "WindowPos3iARB\0"
   "WindowPos3iMESA\0"
   "WindowPos3iv\0"
   "WindowPos3ivARB\0"
   "WindowPos3ivMESA\0"
   "WindowPos3s\0"
   "WindowPos3sARB\0"
   "WindowPos3sMESA\0"
   "WindowPos3sv\0"
   "WindowPos3svARB\0"
   "WindowPos3svMESA\0"
   "WindowPos4dMESA\0"
   "WindowPos4dvMESA\0"
   "WindowPos4fMESA\0"
   "WindowPos4fvMESA\0"
   "WindowPos4iMESA\0"
   "WindowPos4ivMESA\0"
   "WindowPos4sMESA\0"
   "WindowPos4svMESA\0"
   "WindowRectanglesEXT";

static const struct mapi_stub public_stubs[] = {
   { 0, 213 },
   { 6, 1059 },
   { 26, 1059 },
   { 49, 1202 },
   { 70, 342 },
   { 84, 342 },
   { 101, 1186 },
   { 121, 1187 },
   { 141, 1188 },
   { 161, 240 },
   { 171, 1301 },
   { 182, 1301 },
   { 196, 1535 },
   { 227, 322 },
   { 247, 322 },
   { 270, 306 },
   { 283, 306 },
   { 299, 617 },
   { 315, 447 },
   { 328, 7 },
   { 334, 538 },
   { 357, 538 },
   { 382, 1189 },
   { 405, 1228 },
   { 425, 1250 },
   { 445, 428 },
   { 456, 428 },
   { 470, 428 },
   { 484, 777 },
   { 502, 539 },
   { 525, 539 },
   { 551, 448 },
   { 570, 448 },
   { 592, 429 },
   { 603, 429 },
   { 617, 540 },
   { 632, 540 },
   { 650, 1227 },
   { 670, 541 },
   { 686, 541 },
   { 705, 869 },
   { 721, 870 },
   { 738, 542 },
   { 759, 542 },
   { 783, 683 },
   { 811, 683 },
   { 842, 1190 },
   { 864, 629 },
   { 880, 1208 },
   { 899, 629 },
   { 918, 831 },
   { 935, 1443 },
   { 955, 871 },
   { 973, 1366 },
   { 993, 590 },
   { 1008, 590 },
   { 1022, 1060 },
   { 1042, 1060 },
   { 1065, 630 },
   { 1082, 1209 },
   { 1102, 630 },
   { 1122, 685 },
   { 1134, 872 },
   { 1147, 307 },
   { 1159, 307 },
   { 1174, 895 },
   { 1190, 873 },
   { 1203, 770 },
   { 1225, 651 },
   { 1241, 651 },
   { 1260, 845 },
   { 1277, 874 },
   { 1295, 8 },
   { 1302, 1344 },
   { 1315, 1344 },
   { 1331, 336 },
   { 1342, 336 },
   { 1356, 337 },
   { 1370, 337 },
   { 1387, 680 },
   { 1411, 337 },
   { 1428, 449 },
   { 1450, 449 },
   { 1475, 449 },
   { 1500, 679 },
   { 1532, 449 },
   { 1557, 679 },
   { 1580, 679 },
   { 1606, 679 },
   { 1632, 679 },
   { 1658, 680 },
   { 1673, 680 },
   { 1691, 680 },
   { 1709, 680 },
   { 1727, 241 },
   { 1737, 682 },
   { 1757, 388 },
   { 1775, 388 },
   { 1796, 388 },
   { 1818, 681 },
   { 1846, 388 },
   { 1867, 681 },
   { 1886, 681 },
   { 1908, 681 },
   { 1930, 681 },
   { 1952, 682 },
   { 1963, 682 },
   { 1977, 682 },
   { 1991, 682 },
   { 2005, 631 },
   { 2021, 631 },
   { 2040, 896 },
   { 2061, 430 },
   { 2072, 430 },
   { 2086, 994 },
   { 2110, 866 },
   { 2124, 866 },
   { 2141, 1265 },
   { 2161, 431 },
   { 2175, 431 },
   { 2192, 2 },
   { 2201, 3 },
   { 2211, 632 },
   { 2234, 632 },
   { 2260, 632 },
   { 2286, 897 },
   { 2314, 1400 },
   { 2345, 543 },
   { 2356, 543 },
   { 2370, 203 },
   { 2376, 204 },
   { 2387, 839 },
   { 2403, 840 },
   { 2422, 544 },
   { 2436, 545 },
   { 2450, 546 },
   { 2464, 547 },
   { 2479, 206 },
   { 2490, 1225 },
   { 2506, 1226 },
   { 2523, 1302 },
   { 2535, 1302 },
   { 2550, 208 },
   { 2561, 781 },
   { 2573, 781 },
   { 2588, 1303 },
   { 2600, 1303 },
   { 2615, 205 },
   { 2626, 898 },
   { 2647, 1509 },
   { 2671, 899 },
   { 2695, 1510 },
   { 2722, 900 },
   { 2746, 901 },
   { 2770, 902 },
   { 2794, 903 },
   { 2819, 207 },
   { 2832, 867 },
   { 2846, 867 },
   { 2863, 868 },
   { 2880, 868 },
   { 2900, 343 },
   { 2920, 343 },
   { 2943, 1464 },
   { 2966, 663 },
   { 2981, 663 },
   { 3001, 894 },
   { 3013, 894 },
   { 3028, 150 },
   { 3038, 1332 },
   { 3049, 1332 },
   { 3063, 1333 },
   { 3074, 1333 },
   { 3088, 9 },
   { 3096, 10 },
   { 3105, 11 },
   { 3113, 12 },
   { 3122, 13 },
   { 3130, 14 },
   { 3139, 1545 },
   { 3149, 1546 },
   { 3160, 15 },
   { 3168, 16 },
   { 3177, 17 },
   { 3185, 18 },
   { 3194, 19 },
   { 3203, 20 },
   { 3213, 21 },
   { 3222, 22 },
   { 3232, 23 },
   { 3241, 24 },
   { 3251, 25 },
   { 3259, 26 },
   { 3268, 27 },
   { 3276, 28 },
   { 3285, 29 },
   { 3293, 30 },
   { 3302, 1547 },
   { 3312, 1548 },
   { 3323, 31 },
   { 3331, 32 },
   { 3340, 33 },
   { 3348, 34 },
   { 3357, 35 },
   { 3366, 36 },
   { 3376, 37 },
   { 3385, 38 },
   { 3395, 39 },
   { 3404, 40 },
   { 3414, 1304 },
   { 3422, 1304 },
   { 3433, 1191 },
   { 3453, 1192 },
   { 3473, 1193 },
   { 3493, 210 },
   { 3503, 548 },
   { 3523, 548 },
   { 3534, 548 },
   { 3548, 548 },
   { 3562, 151 },
   { 3576, 702 },
   { 3586, 703 },
   { 3597, 704 },
   { 3607, 705 },
   { 3618, 308 },
   { 3631, 1052 },
   { 3647, 1611 },
   { 3661, 1611 },
   { 3678, 1604 },
   { 3689, 1605 },
   { 3711, 1606 },
   { 3733, 450 },
   { 3747, 450 },
   { 3764, 1527 },
   { 3788, 1451 },
   { 3817, 1452 },
   { 3846, 1453 },
   { 3875, 1454 },
   { 3907, 1455 },
   { 3939, 1456 },
   { 3971, 376 },
   { 3992, 376 },
   { 4016, 377 },
   { 4037, 377 },
   { 4061, 378 },
   { 4082, 378 },
   { 4106, 378 },
   { 4130, 379 },
   { 4154, 379 },
   { 4181, 380 },
   { 4205, 380 },
   { 4232, 381 },
   { 4256, 381 },
   { 4283, 381 },
   { 4310, 1444 },
   { 4338, 1445 },
   { 4366, 1446 },
   { 4394, 904 },
   { 4422, 1447 },
   { 4453, 905 },
   { 4481, 1448 },
   { 4512, 906 },
   { 4540, 1449 },
   { 4571, 1262 },
   { 4602, 1263 },
   { 4633, 1613 },
   { 4653, 1614 },
   { 4673, 1615 },
   { 4695, 1616 },
   { 4718, 1617 },
   { 4740, 1618 },
   { 4763, 662 },
   { 4781, 1612 },
   { 4799, 1612 },
   { 4820, 1607 },
   { 4835, 1619 },
   { 4859, 1620 },
   { 4883, 843 },
   { 4900, 843 },
   { 4920, 1533 },
   { 4939, 843 },
   { 4959, 1428 },
   { 4982, 1429 },
   { 5005, 1430 },
   { 5031, 1431 },
   { 5057, 1432 },
   { 5083, 907 },
   { 5106, 255 },
   { 5117, 323 },
   { 5132, 323 },
   { 5150, 324 },
   { 5165, 324 },
   { 5183, 325 },
   { 5201, 325 },
   { 5222, 326 },
   { 5240, 326 },
   { 5261, 341 },
   { 5279, 341 },
   { 5300, 341 },
   { 5321, 1377 },
   { 5343, 1378 },
   { 5365, 908 },
   { 5387, 1379 },
   { 5412, 909 },
   { 5434, 1380 },
   { 5459, 910 },
   { 5481, 1381 },
   { 5506, 911 },
   { 5520, 912 },
   { 5539, 1266 },
   { 5562, 1251 },
   { 5583, 451 },
   { 5597, 618 },
   { 5620, 913 },
   { 5643, 914 },
   { 5657, 915 },
   { 5677, 916 },
   { 5692, 452 },
   { 5705, 619 },
   { 5727, 1061 },
   { 5748, 1061 },
   { 5772, 917 },
   { 5787, 918 },
   { 5812, 919 },
   { 5831, 152 },
   { 5840, 1122 },
   { 5861, 1122 },
   { 5885, 1122 },
   { 5909, 1123 },
   { 5929, 1123 },
   { 5952, 1123 },
   { 5975, 1124 },
   { 5994, 1124 },
   { 6016, 1124 },
   { 6038, 432 },
   { 6052, 432 },
   { 6069, 1194 },
   { 6093, 633 },
   { 6112, 633 },
   { 6134, 633 },
   { 6156, 4 },
   { 6168, 1267 },
   { 6191, 1526 },
   { 6212, 620 },
   { 6228, 1229 },
   { 6250, 1252 },
   { 6271, 453 },
   { 6285, 1062 },
   { 6308, 1062 },
   { 6334, 591 },
   { 6352, 591 },
   { 6369, 433 },
   { 6383, 433 },
   { 6400, 433 },
   { 6417, 634 },
   { 6437, 634 },
   { 6460, 634 },
   { 6483, 686 },
   { 6498, 1268 },
   { 6518, 454 },
   { 6531, 664 },
   { 6542, 664 },
   { 6558, 327 },
   { 6573, 327 },
   { 6591, 771 },
   { 6616, 652 },
   { 6635, 652 },
   { 6657, 1207 },
   { 6672, 245 },
   { 6682, 211 },
   { 6692, 288 },
   { 6703, 1200 },
   { 6724, 799 },
   { 6741, 800 },
   { 6759, 1201 },
   { 6781, 782 },
   { 6793, 782 },
   { 6808, 1305 },
   { 6820, 1305 },
   { 6835, 621 },
   { 6851, 455 },
   { 6864, 214 },
   { 6872, 309 },
   { 6891, 1407 },
   { 6920, 1407 },
   { 6943, 549 },
   { 6961, 920 },
   { 6986, 1504 },
   { 7014, 1502 },
   { 7036, 456 },
   { 7061, 456 },
   { 7089, 549 },
   { 7098, 549 },
   { 7110, 549 },
   { 7122, 1058 },
   { 7144, 841 },
   { 7160, 891 },
   { 7188, 842 },
   { 7212, 310 },
   { 7223, 310 },
   { 7237, 740 },
   { 7256, 627 },
   { 7276, 627 },
   { 7299, 824 },
   { 7331, 1594 },
   { 7369, 824 },
   { 7404, 627 },
   { 7427, 1590 },
   { 7445, 202 },
   { 7456, 457 },
   { 7468, 457 },
   { 7483, 457 },
   { 7498, 457 },
   { 7513, 457 },
   { 7527, 311 },
   { 7540, 670 },
   { 7563, 670 },
   { 7589, 670 },
   { 7615, 741 },
   { 7636, 628 },
   { 7658, 628 },
   { 7683, 825 },
   { 7717, 825 },
   { 7754, 671 },
   { 7786, 826 },
   { 7830, 1595 },
   { 7880, 826 },
   { 7927, 671 },
   { 7962, 671 },
   { 7997, 628 },
   { 8022, 1597 },
   { 8041, 1591 },
   { 8061, 1598 },
   { 8087, 257 },
   { 8098, 338 },
   { 8116, 672 },
   { 8144, 672 },
   { 8175, 672 },
   { 8206, 338 },
   { 8227, 1042 },
   { 8239, 1043 },
   { 8252, 1044 },
   { 8264, 1045 },
   { 8277, 1046 },
   { 8289, 1047 },
   { 8302, 1048 },
   { 8314, 1049 },
   { 8327, 772 },
   { 8349, 827 },
   { 8380, 778 },
   { 8408, 828 },
   { 8445, 1299 },
   { 8482, 1531 },
   { 8510, 1300 },
   { 8537, 1532 },
   { 8569, 41 },
   { 8578, 312 },
   { 8594, 1053 },
   { 8613, 42 },
   { 8623, 215 },
   { 8630, 313 },
   { 8648, 1406 },
   { 8676, 1406 },
   { 8698, 550 },
   { 8715, 921 },
   { 8739, 1503 },
   { 8766, 1501 },
   { 8787, 458 },
   { 8811, 458 },
   { 8838, 550 },
   { 8846, 550 },
   { 8857, 550 },
   { 8868, 43 },
   { 8872, 551 },
   { 8893, 551 },
   { 8916, 1195 },
   { 8937, 1 },
   { 8945, 1230 },
   { 8963, 1253 },
   { 8981, 434 },
   { 8990, 434 },
   { 9002, 434 },
   { 9014, 779 },
   { 9030, 552 },
   { 9051, 552 },
   { 9075, 228 },
   { 9087, 229 },
   { 9100, 230 },
   { 9112, 231 },
   { 9125, 232 },
   { 9137, 233 },
   { 9150, 234 },
   { 9162, 235 },
   { 9175, 236 },
   { 9185, 238 },
   { 9195, 237 },
   { 9206, 239 },
   { 9217, 1032 },
   { 9240, 194 },
   { 9255, 665 },
   { 9265, 665 },
   { 9280, 216 },
   { 9287, 217 },
   { 9293, 649 },
   { 9316, 649 },
   { 9342, 922 },
   { 9370, 1395 },
   { 9401, 389 },
   { 9417, 389 },
   { 9436, 390 },
   { 9446, 390 },
   { 9459, 391 },
   { 9470, 391 },
   { 9484, 1135 },
   { 9494, 1135 },
   { 9507, 1136 },
   { 9518, 1136 },
   { 9532, 1565 },
   { 9544, 1566 },
   { 9557, 153 },
   { 9562, 154 },
   { 9568, 155 },
   { 9573, 156 },
   { 9579, 1306 },
   { 9584, 1306 },
   { 9592, 1307 },
   { 9598, 1307 },
   { 9607, 1396 },
   { 9632, 1397 },
   { 9658, 1293 },
   { 9685, 851 },
   { 9707, 1460 },
   { 9733, 1398 },
   { 9758, 635 },
   { 9782, 635 },
   { 9809, 635 },
   { 9836, 1033 },
   { 9868, 1033 },
   { 9899, 584 },
   { 9918, 636 },
   { 9939, 636 },
   { 9963, 637 },
   { 9984, 637 },
   { 10008, 1121 },
   { 10043, 637 },
   { 10067, 638 },
   { 10088, 638 },
   { 10112, 638 },
   { 10136, 584 },
   { 10158, 639 },
   { 10182, 639 },
   { 10209, 1603 },
   { 10251, 1601 },
   { 10282, 584 },
   { 10304, 157 },
   { 10314, 289 },
   { 10322, 1308 },
   { 10331, 1308 },
   { 10343, 1309 },
   { 10352, 1309 },
   { 10364, 435 },
   { 10375, 435 },
   { 10389, 1196 },
   { 10411, 640 },
   { 10427, 640 },
   { 10446, 640 },
   { 10465, 5 },
   { 10474, 1231 },
   { 10493, 1063 },
   { 10513, 1063 },
   { 10536, 592 },
   { 10551, 592 },
   { 10565, 436 },
   { 10576, 436 },
   { 10590, 436 },
   { 10604, 641 },
   { 10621, 641 },
   { 10641, 641 },
   { 10661, 687 },
   { 10673, 1269 },
   { 10690, 328 },
   { 10702, 328 },
   { 10717, 773 },
   { 10739, 653 },
   { 10755, 653 },
   { 10774, 642 },
   { 10789, 642 },
   { 10807, 642 },
   { 10825, 1487 },
   { 10851, 923 },
   { 10873, 1486 },
   { 10898, 830 },
   { 10929, 459 },
   { 10945, 459 },
   { 10964, 760 },
   { 10988, 761 },
   { 11019, 762 },
   { 11048, 460 },
   { 11065, 460 },
   { 11085, 655 },
   { 11111, 656 },
   { 11135, 657 },
   { 11156, 658 },
   { 11176, 622 },
   { 11198, 461 },
   { 11217, 462 },
   { 11235, 462 },
   { 11256, 553 },
   { 11278, 553 },
   { 11292, 258 },
   { 11304, 585 },
   { 11327, 437 },
   { 11348, 437 },
   { 11372, 438 },
   { 11390, 438 },
   { 11411, 438 },
   { 11432, 439 },
   { 11449, 439 },
   { 11469, 259 },
   { 11482, 1334 },
   { 11496, 1334 },
   { 11513, 1335 },
   { 11527, 1335 },
   { 11544, 1608 },
   { 11558, 1609 },
   { 11583, 1610 },
   { 11608, 1457 },
   { 11638, 382 },
   { 11660, 382 },
   { 11685, 924 },
   { 11711, 1450 },
   { 11740, 992 },
   { 11769, 1621 },
   { 11790, 1622 },
   { 11816, 1623 },
   { 11842, 1125 },
   { 11861, 1125 },
   { 11883, 1125 },
   { 11905, 801 },
   { 11926, 801 },
   { 11939, 801 },
   { 11955, 260 },
   { 11966, 261 },
   { 11975, 1254 },
   { 12000, 1336 },
   { 12010, 1336 },
   { 12023, 802 },
   { 12043, 802 },
   { 12055, 802 },
   { 12070, 802 },
   { 12085, 262 },
   { 12095, 684 },
   { 12112, 684 },
   { 12132, 554 },
   { 12152, 554 },
   { 12175, 643 },
   { 12211, 643 },
   { 12250, 643 },
   { 12289, 852 },
   { 12315, 1399 },
   { 12344, 1461 },
   { 12374, 809 },
   { 12397, 809 },
   { 12423, 809 },
   { 12449, 809 },
   { 12475, 623 },
   { 12488, 1626 },
   { 12501, 1627 },
   { 12525, 1628 },
   { 12549, 875 },
   { 12567, 624 },
   { 12581, 586 },
   { 12597, 666 },
   { 12611, 666 },
   { 12630, 666 },
   { 12647, 555 },
   { 12669, 555 },
   { 12683, 263 },
   { 12695, 853 },
   { 12717, 829 },
   { 12737, 264 },
   { 12748, 265 },
   { 12759, 1337 },
   { 12770, 1337 },
   { 12784, 266 },
   { 12793, 267 },
   { 12802, 268 },
   { 12811, 269 },
   { 12825, 270 },
   { 12839, 1338 },
   { 12853, 1338 },
   { 12870, 1270 },
   { 12900, 1629 },
   { 12910, 1630 },
   { 12931, 1631 },
   { 12952, 1414 },
   { 12972, 1413 },
   { 12992, 1439 },
   { 13012, 1440 },
   { 13032, 1441 },
   { 13052, 1419 },
   { 13072, 1459 },
   { 13103, 1458 },
   { 13134, 1483 },
   { 13161, 1484 },
   { 13189, 1427 },
   { 13215, 1426 },
   { 13241, 675 },
   { 13258, 925 },
   { 13286, 926 },
   { 13312, 1394 },
   { 13341, 927 },
   { 13364, 1393 },
   { 13390, 928 },
   { 13412, 1392 },
   { 13437, 929 },
   { 13478, 1405 },
   { 13522, 930 },
   { 13553, 1512 },
   { 13587, 1473 },
   { 13622, 1470 },
   { 13657, 1467 },
   { 13682, 1474 },
   { 13703, 931 },
   { 13735, 1463 },
   { 13770, 1529 },
   { 13788, 1530 },
   { 13808, 1255 },
   { 13832, 1126 },
   { 13847, 1588 },
   { 13865, 1126 },
   { 13883, 625 },
   { 13907, 626 },
   { 13931, 1127 },
   { 13949, 1127 },
   { 13970, 1256 },
   { 13994, 1232 },
   { 14023, 1233 },
   { 14052, 1234 },
   { 14083, 1235 },
   { 14109, 1236 },
   { 14138, 1237 },
   { 14162, 1257 },
   { 14184, 1258 },
   { 14210, 1259 },
   { 14232, 271 },
   { 14246, 272 },
   { 14261, 273 },
   { 14276, 1408 },
   { 14298, 1408 },
   { 14315, 329 },
   { 14327, 329 },
   { 14342, 329 },
   { 14357, 274 },
   { 14375, 786 },
   { 14392, 786 },
   { 14412, 593 },
   { 14440, 594 },
   { 14468, 463 },
   { 14486, 856 },
   { 14508, 595 },
   { 14538, 596 },
   { 14568, 1064 },
   { 14594, 1064 },
   { 14623, 1065 },
   { 14644, 1065 },
   { 14668, 857 },
   { 14692, 858 },
   { 14719, 859 },
   { 14751, 859 },
   { 14786, 860 },
   { 14809, 861 },
   { 14830, 763 },
   { 14848, 597 },
   { 14868, 464 },
   { 14881, 598 },
   { 14897, 932 },
   { 14922, 933 },
   { 14945, 934 },
   { 14971, 935 },
   { 14995, 780 },
   { 15013, 699 },
   { 15032, 699 },
   { 15054, 440 },
   { 15071, 440 },
   { 15091, 440 },
   { 15111, 700 },
   { 15131, 700 },
   { 15154, 441 },
   { 15172, 441 },
   { 15193, 441 },
   { 15214, 442 },
   { 15225, 442 },
   { 15239, 442 },
   { 15253, 644 },
   { 15280, 644 },
   { 15310, 644 },
   { 15340, 688 },
   { 15363, 688 },
   { 15389, 688 },
   { 15415, 689 },
   { 15439, 689 },
   { 15466, 689 },
   { 15493, 690 },
   { 15515, 691 },
   { 15537, 1271 },
   { 15567, 1624 },
   { 15586, 465 },
   { 15603, 783 },
   { 15628, 466 },
   { 15644, 466 },
   { 15663, 467 },
   { 15675, 275 },
   { 15685, 556 },
   { 15696, 764 },
   { 15715, 765 },
   { 15744, 667 },
   { 15754, 667 },
   { 15769, 276 },
   { 15781, 277 },
   { 15793, 1339 },
   { 15805, 1339 },
   { 15820, 278 },
   { 15832, 279 },
   { 15844, 279 },
   { 15859, 280 },
   { 15871, 280 },
   { 15886, 1204 },
   { 15901, 281 },
   { 15913, 284 },
   { 15936, 285 },
   { 15959, 557 },
   { 15978, 557 },
   { 16000, 557 },
   { 16022, 558 },
   { 16042, 558 },
   { 16065, 558 },
   { 16088, 282 },
   { 16106, 283 },
   { 16124, 1340 },
   { 16142, 1340 },
   { 16163, 876 },
   { 16183, 936 },
   { 16199, 1389 },
   { 16218, 937 },
   { 16245, 1391 },
   { 16275, 938 },
   { 16302, 1390 },
   { 16332, 939 },
   { 16355, 1479 },
   { 16381, 940 },
   { 16405, 1480 },
   { 16432, 941 },
   { 16454, 1384 },
   { 16479, 942 },
   { 16501, 1383 },
   { 16526, 877 },
   { 16553, 993 },
   { 16572, 559 },
   { 16600, 559 },
   { 16631, 943 },
   { 16657, 944 },
   { 16681, 945 },
   { 16704, 659 },
   { 16725, 660 },
   { 16743, 468 },
   { 16762, 468 },
   { 16784, 766 },
   { 16808, 742 },
   { 16821, 469 },
   { 16834, 469 },
   { 16850, 996 },
   { 16868, 996 },
   { 16885, 470 },
   { 16898, 470 },
   { 16914, 997 },
   { 16933, 997 },
   { 16951, 560 },
   { 16965, 560 },
   { 16982, 1272 },
   { 17004, 1273 },
   { 17024, 946 },
   { 17050, 947 },
   { 17074, 1507 },
   { 17102, 1505 },
   { 17128, 1508 },
   { 17156, 1506 },
   { 17182, 948 },
   { 17199, 561 },
   { 17218, 561 },
   { 17240, 562 },
   { 17260, 562 },
   { 17283, 789 },
   { 17302, 789 },
   { 17324, 878 },
   { 17349, 471 },
   { 17373, 471 },
   { 17400, 471 },
   { 17426, 472 },
   { 17444, 472 },
   { 17465, 473 },
   { 17483, 473 },
   { 17504, 474 },
   { 17522, 474 },
   { 17543, 1636 },
   { 17561, 810 },
   { 17587, 1637 },
   { 17612, 1638 },
   { 17629, 811 },
   { 17642, 812 },
   { 17655, 813 },
   { 17668, 1639 },
   { 17682, 814 },
   { 17700, 815 },
   { 17719, 816 },
   { 17738, 817 },
   { 17760, 1640 },
   { 17783, 818 },
   { 17799, 819 },
   { 17816, 820 },
   { 17830, 820 },
   { 17847, 820 },
   { 17864, 820 },
   { 17881, 998 },
   { 17900, 821 },
   { 17914, 821 },
   { 17931, 821 },
   { 17948, 821 },
   { 17965, 999 },
   { 17985, 822 },
   { 18000, 822 },
   { 18018, 822 },
   { 18036, 158 },
   { 18041, 1632 },
   { 18051, 1291 },
   { 18069, 1584 },
   { 18096, 1586 },
   { 18121, 1292 },
   { 18142, 1585 },
   { 18172, 1587 },
   { 18200, 212 },
   { 18210, 314 },
   { 18223, 1054 },
   { 18239, 44 },
   { 18246, 45 },
   { 18254, 46 },
   { 18261, 47 },
   { 18269, 48 },
   { 18276, 49 },
   { 18284, 50 },
   { 18291, 51 },
   { 18299, 315 },
   { 18307, 316 },
   { 18316, 197 },
   { 18326, 317 },
   { 18344, 1536 },
   { 18374, 824 },
   { 18414, 826 },
   { 18466, 672 },
   { 18502, 1596 },
   { 18545, 673 },
   { 18581, 1569 },
   { 18598, 1036 },
   { 18619, 1037 },
   { 18643, 1038 },
   { 18665, 949 },
   { 18696, 950 },
   { 18730, 1039 },
   { 18755, 1040 },
   { 18774, 1041 },
   { 18796, 443 },
   { 18805, 443 },
   { 18817, 286 },
   { 18827, 563 },
   { 18847, 563 },
   { 18858, 563 },
   { 18872, 563 },
   { 18886, 645 },
   { 18900, 645 },
   { 18917, 645 },
   { 18934, 879 },
   { 18959, 287 },
   { 18966, 1274 },
   { 18984, 1528 },
   { 19001, 475 },
   { 19011, 599 },
   { 19024, 599 },
   { 19036, 1066 },
   { 19054, 1066 },
   { 19075, 444 },
   { 19083, 444 },
   { 19094, 444 },
   { 19105, 646 },
   { 19120, 646 },
   { 19138, 646 },
   { 19156, 692 },
   { 19166, 1275 },
   { 19181, 476 },
   { 19190, 668 },
   { 19197, 668 },
   { 19209, 330 },
   { 19219, 330 },
   { 19232, 880 },
   { 19259, 774 },
   { 19279, 654 },
   { 19293, 654 },
   { 19310, 1589 },
   { 19325, 163 },
   { 19337, 164 },
   { 19350, 165 },
   { 19362, 166 },
   { 19375, 1310 },
   { 19387, 1310 },
   { 19402, 1311 },
   { 19415, 1311 },
   { 19431, 159 },
   { 19438, 160 },
   { 19446, 161 },
   { 19453, 162 },
   { 19461, 1312 },
   { 19468, 1312 },
   { 19478, 1313 },
   { 19486, 1313 },
   { 19497, 167 },
   { 19509, 168 },
   { 19519, 1314 },
   { 19530, 1314 },
   { 19544, 477 },
   { 19556, 477 },
   { 19571, 6 },
   { 19580, 290 },
   { 19593, 292 },
   { 19605, 291 },
   { 19617, 1315 },
   { 19629, 1315 },
   { 19644, 198 },
   { 19653, 383 },
   { 19674, 383 },
   { 19698, 384 },
   { 19719, 384 },
   { 19743, 1067 },
   { 19757, 242 },
   { 19765, 881 },
   { 19795, 882 },
   { 19822, 883 },
   { 19854, 884 },
   { 19883, 220 },
   { 19889, 221 },
   { 19895, 222 },
   { 19901, 223 },
   { 19907, 445 },
   { 19917, 445 },
   { 19930, 445 },
   { 19943, 650 },
   { 19958, 650 },
   { 19976, 224 },
   { 19986, 225 },
   { 19996, 226 },
   { 20006, 227 },
   { 20016, 951 },
   { 20031, 1382 },
   { 20049, 952 },
   { 20069, 1370 },
   { 20092, 169 },
   { 20102, 170 },
   { 20113, 171 },
   { 20123, 172 },
   { 20134, 1316 },
   { 20144, 1316 },
   { 20157, 1317 },
   { 20168, 1317 },
   { 20182, 1359 },
   { 20199, 1351 },
   { 20221, 1363 },
   { 20245, 1362 },
   { 20269, 1348 },
   { 20284, 1347 },
   { 20299, 293 },
   { 20310, 1365 },
   { 20334, 1364 },
   { 20358, 1350 },
   { 20373, 1349 },
   { 20388, 1358 },
   { 20403, 1361 },
   { 20416, 1360 },
   { 20430, 1353 },
   { 20447, 1352 },
   { 20464, 1355 },
   { 20480, 1354 },
   { 20496, 1357 },
   { 20516, 1356 },
   { 20536, 1346 },
   { 20564, 1346 },
   { 20592, 832 },
   { 20606, 589 },
   { 20628, 832 },
   { 20645, 1276 },
   { 20672, 588 },
   { 20689, 588 },
   { 20709, 588 },
   { 20729, 1633 },
   { 20736, 295 },
   { 20748, 294 },
   { 20760, 1318 },
   { 20772, 1318 },
   { 20787, 385 },
   { 20808, 385 },
   { 20832, 386 },
   { 20853, 386 },
   { 20877, 392 },
   { 20893, 392 },
   { 20912, 854 },
   { 20936, 854 },
   { 20963, 892 },
   { 20992, 892 },
   { 21024, 854 },
   { 21051, 1592 },
   { 21074, 1134 },
   { 21092, 673 },
   { 21120, 673 },
   { 21151, 1134 },
   { 21172, 855 },
   { 21198, 855 },
   { 21227, 893 },
   { 21258, 893 },
   { 21292, 855 },
   { 21321, 1593 },
   { 21346, 1145 },
   { 21369, 1146 },
   { 21394, 1476 },
   { 21412, 344 },
   { 21428, 344 },
   { 21447, 345 },
   { 21464, 345 },
   { 21484, 346 },
   { 21500, 346 },
   { 21519, 347 },
   { 21536, 347 },
   { 21556, 1557 },
   { 21574, 1558 },
   { 21593, 348 },
   { 21609, 348 },
   { 21628, 349 },
   { 21645, 349 },
   { 21665, 350 },
   { 21681, 350 },
   { 21700, 351 },
   { 21717, 351 },
   { 21737, 352 },
   { 21753, 352 },
   { 21772, 353 },
   { 21789, 353 },
   { 21809, 354 },
   { 21825, 354 },
   { 21844, 355 },
   { 21861, 355 },
   { 21881, 1559 },
   { 21899, 1560 },
   { 21918, 356 },
   { 21934, 356 },
   { 21953, 357 },
   { 21970, 357 },
   { 21990, 358 },
   { 22006, 358 },
   { 22025, 359 },
   { 22042, 359 },
   { 22062, 360 },
   { 22078, 360 },
   { 22097, 361 },
   { 22114, 361 },
   { 22134, 362 },
   { 22150, 362 },
   { 22169, 363 },
   { 22186, 363 },
   { 22206, 1561 },
   { 22224, 1562 },
   { 22243, 364 },
   { 22259, 364 },
   { 22278, 365 },
   { 22295, 365 },
   { 22315, 366 },
   { 22331, 366 },
   { 22350, 367 },
   { 22367, 367 },
   { 22387, 368 },
   { 22403, 368 },
   { 22422, 369 },
   { 22439, 369 },
   { 22459, 370 },
   { 22475, 370 },
   { 22494, 371 },
   { 22511, 371 },
   { 22531, 1563 },
   { 22549, 1564 },
   { 22568, 372 },
   { 22584, 372 },
   { 22603, 373 },
   { 22620, 373 },
   { 22640, 374 },
   { 22656, 374 },
   { 22675, 375 },
   { 22692, 375 },
   { 22712, 1319 },
   { 22728, 1319 },
   { 22747, 706 },
   { 22765, 707 },
   { 22784, 708 },
   { 22802, 709 },
   { 22821, 710 },
   { 22839, 711 },
   { 22858, 712 },
   { 22876, 713 },
   { 22895, 1442 },
   { 22919, 1411 },
   { 22935, 1412 },
   { 22952, 1409 },
   { 22968, 1410 },
   { 22985, 1433 },
   { 23001, 1434 },
   { 23018, 1435 },
   { 23034, 1436 },
   { 23051, 1437 },
   { 23067, 1438 },
   { 23084, 1420 },
   { 23103, 1421 },
   { 23122, 1422 },
   { 23141, 1481 },
   { 23165, 1482 },
   { 23190, 1417 },
   { 23212, 1418 },
   { 23235, 1415 },
   { 23257, 1416 },
   { 23280, 1423 },
   { 23302, 1424 },
   { 23324, 1425 },
   { 23346, 953 },
   { 23362, 1367 },
   { 23381, 995 },
   { 23410, 1524 },
   { 23439, 954 },
   { 23458, 1369 },
   { 23480, 1277 },
   { 23505, 955 },
   { 23524, 1368 },
   { 23546, 1489 },
   { 23572, 956 },
   { 23599, 957 },
   { 23627, 958 },
   { 23654, 1511 },
   { 23684, 959 },
   { 23711, 960 },
   { 23740, 1404 },
   { 23772, 1034 },
   { 23809, 1034 },
   { 23845, 961 },
   { 23869, 1401 },
   { 23898, 1402 },
   { 23927, 1403 },
   { 23956, 962 },
   { 23985, 1602 },
   { 24021, 1471 },
   { 24053, 1472 },
   { 24086, 1468 },
   { 24118, 1469 },
   { 24151, 1485 },
   { 24185, 1466 },
   { 24207, 963 },
   { 24232, 1462 },
   { 24260, 964 },
   { 24296, 1294 },
   { 24343, 1488 },
   { 24382, 1525 },
   { 24397, 0 },
   { 24405, 52 },
   { 24414, 53 },
   { 24424, 54 },
   { 24433, 55 },
   { 24443, 56 },
   { 24452, 57 },
   { 24462, 1543 },
   { 24473, 1544 },
   { 24485, 58 },
   { 24494, 59 },
   { 24504, 60 },
   { 24513, 61 },
   { 24523, 1320 },
   { 24532, 1320 },
   { 24544, 714 },
   { 24555, 715 },
   { 24567, 318 },
   { 24581, 1055 },
   { 24598, 1128 },
   { 24610, 1128 },
   { 24625, 1129 },
   { 24640, 1129 },
   { 24658, 296 },
   { 24664, 1321 },
   { 24671, 1321 },
   { 24681, 1322 },
   { 24688, 1322 },
   { 24698, 1197 },
   { 24714, 199 },
   { 24726, 768 },
   { 24743, 769 },
   { 24759, 769 },
   { 24778, 769 },
   { 24797, 775 },
   { 24820, 251 },
   { 24831, 252 },
   { 24843, 253 },
   { 24855, 249 },
   { 24867, 250 },
   { 24879, 247 },
   { 24894, 248 },
   { 24909, 246 },
   { 24919, 393 },
   { 24935, 393 },
   { 24954, 393 },
   { 24973, 393 },
   { 24993, 394 },
   { 25010, 394 },
   { 25030, 394 },
   { 25050, 394 },
   { 25071, 395 },
   { 25087, 395 },
   { 25105, 396 },
   { 25122, 396 },
   { 25141, 1341 },
   { 25157, 1341 },
   { 25176, 1342 },
   { 25193, 1342 },
   { 25213, 173 },
   { 25223, 1050 },
   { 25243, 1323 },
   { 25254, 1323 },
   { 25268, 174 },
   { 25280, 319 },
   { 25294, 1260 },
   { 25313, 1260 },
   { 25335, 1324 },
   { 25350, 1324 },
   { 25368, 175 },
   { 25383, 218 },
   { 25393, 334 },
   { 25409, 1130 },
   { 25423, 1130 },
   { 25440, 297 },
   { 25450, 200 },
   { 25458, 1345 },
   { 25479, 1345 },
   { 25503, 1345 },
   { 25527, 1345 },
   { 25551, 582 },
   { 25573, 582 },
   { 25597, 1203 },
   { 25616, 331 },
   { 25635, 331 },
   { 25657, 787 },
   { 25671, 787 },
   { 25688, 600 },
   { 25713, 601 },
   { 25739, 602 },
   { 25764, 603 },
   { 25790, 1297 },
   { 25817, 604 },
   { 25844, 605 },
   { 25872, 606 },
   { 25899, 607 },
   { 25927, 1298 },
   { 25956, 600 },
   { 25977, 601 },
   { 25999, 602 },
   { 26020, 603 },
   { 26042, 788 },
   { 26060, 788 },
   { 26081, 608 },
   { 26098, 1068 },
   { 26115, 1068 },
   { 26135, 1069 },
   { 26153, 1069 },
   { 26174, 1070 },
   { 26191, 1070 },
   { 26211, 1071 },
   { 26229, 1071 },
   { 26250, 1072 },
   { 26267, 1000 },
   { 26289, 1000 },
   { 26310, 1001 },
   { 26333, 1001 },
   { 26355, 1072 },
   { 26375, 1073 },
   { 26393, 1073 },
   { 26414, 1074 },
   { 26432, 1002 },
   { 26455, 1002 },
   { 26477, 1003 },
   { 26501, 1003 },
   { 26524, 1074 },
   { 26545, 1075 },
   { 26564, 1075 },
   { 26586, 1076 },
   { 26603, 1076 },
   { 26623, 1077 },
   { 26641, 1077 },
   { 26662, 1078 },
   { 26679, 1078 },
   { 26699, 1079 },
   { 26717, 1079 },
   { 26738, 1080 },
   { 26755, 1004 },
   { 26777, 1004 },
   { 26798, 1005 },
   { 26821, 1005 },
   { 26843, 1080 },
   { 26863, 1081 },
   { 26881, 1081 },
   { 26902, 1082 },
   { 26920, 1006 },
   { 26943, 1006 },
   { 26965, 1007 },
   { 26989, 1007 },
   { 27012, 1082 },
   { 27033, 1083 },
   { 27052, 1083 },
   { 27074, 1084 },
   { 27091, 1084 },
   { 27111, 1085 },
   { 27129, 1085 },
   { 27150, 1086 },
   { 27167, 1086 },
   { 27187, 1087 },
   { 27205, 1087 },
   { 27226, 1088 },
   { 27243, 1008 },
   { 27265, 1008 },
   { 27286, 1009 },
   { 27309, 1009 },
   { 27331, 1088 },
   { 27351, 1089 },
   { 27369, 1089 },
   { 27390, 1090 },
   { 27408, 1010 },
   { 27431, 1010 },
   { 27453, 1011 },
   { 27477, 1011 },
   { 27500, 1090 },
   { 27521, 1091 },
   { 27540, 1091 },
   { 27562, 1092 },
   { 27579, 1092 },
   { 27599, 1093 },
   { 27617, 1093 },
   { 27638, 1094 },
   { 27655, 1094 },
   { 27675, 1095 },
   { 27693, 1095 },
   { 27714, 1096 },
   { 27731, 1012 },
   { 27753, 1012 },
   { 27774, 1013 },
   { 27797, 1013 },
   { 27819, 1096 },
   { 27839, 1097 },
   { 27857, 1097 },
   { 27878, 1098 },
   { 27896, 1014 },
   { 27919, 1014 },
   { 27941, 1015 },
   { 27965, 1015 },
   { 27988, 1098 },
   { 28009, 1099 },
   { 28028, 1099 },
   { 28050, 885 },
   { 28078, 886 },
   { 28107, 1100 },
   { 28131, 1100 },
   { 28158, 1101 },
   { 28182, 1101 },
   { 28209, 1102 },
   { 28235, 1102 },
   { 28264, 1103 },
   { 28290, 1103 },
   { 28319, 1104 },
   { 28345, 1104 },
   { 28374, 1105 },
   { 28400, 1105 },
   { 28429, 1106 },
   { 28453, 1106 },
   { 28480, 1107 },
   { 28504, 1107 },
   { 28531, 1108 },
   { 28557, 1108 },
   { 28586, 1109 },
   { 28612, 1109 },
   { 28641, 1110 },
   { 28667, 1110 },
   { 28696, 1111 },
   { 28722, 1111 },
   { 28751, 1112 },
   { 28775, 1112 },
   { 28802, 1113 },
   { 28826, 1113 },
   { 28853, 1114 },
   { 28879, 1114 },
   { 28908, 1115 },
   { 28934, 1115 },
   { 28963, 1116 },
   { 28989, 1116 },
   { 29018, 1117 },
   { 29044, 1117 },
   { 29073, 674 },
   { 29089, 674 },
   { 29108, 219 },
   { 29119, 335 },
   { 29136, 1465 },
   { 29163, 1131 },
   { 29178, 1131 },
   { 29196, 298 },
   { 29207, 201 },
   { 29216, 701 },
   { 29229, 701 },
   { 29245, 1051 },
   { 29261, 62 },
   { 29273, 63 },
   { 29286, 64 },
   { 29298, 65 },
   { 29311, 66 },
   { 29323, 67 },
   { 29336, 68 },
   { 29348, 69 },
   { 29361, 70 },
   { 29373, 71 },
   { 29386, 72 },
   { 29398, 73 },
   { 29411, 74 },
   { 29423, 75 },
   { 29436, 76 },
   { 29448, 77 },
   { 29461, 78 },
   { 29473, 79 },
   { 29486, 80 },
   { 29498, 81 },
   { 29511, 82 },
   { 29523, 83 },
   { 29536, 84 },
   { 29548, 85 },
   { 29561, 254 },
   { 29572, 254 },
   { 29585, 256 },
   { 29596, 823 },
   { 29608, 823 },
   { 29623, 823 },
   { 29638, 823 },
   { 29653, 86 },
   { 29659, 87 },
   { 29666, 88 },
   { 29672, 89 },
   { 29679, 90 },
   { 29685, 91 },
   { 29692, 92 },
   { 29698, 93 },
   { 29705, 784 },
   { 29727, 196 },
   { 29738, 647 },
   { 29758, 647 },
   { 29781, 648 },
   { 29812, 1295 },
   { 29854, 648 },
   { 29888, 647 },
   { 29911, 1634 },
   { 29926, 1635 },
   { 29938, 1032 },
   { 29959, 776 },
   { 29983, 299 },
   { 29991, 300 },
   { 29999, 1325 },
   { 30007, 1325 },
   { 30018, 387 },
   { 30033, 387 },
   { 30051, 1326 },
   { 30067, 1326 },
   { 30086, 1198 },
   { 30099, 676 },
   { 30111, 693 },
   { 30131, 693 },
   { 30154, 693 },
   { 30177, 694 },
   { 30198, 694 },
   { 30222, 694 },
   { 30246, 695 },
   { 30264, 696 },
   { 30283, 697 },
   { 30301, 698 },
   { 30320, 301 },
   { 30327, 302 },
   { 30334, 1327 },
   { 30341, 1327 },
   { 30351, 176 },
   { 30359, 803 },
   { 30373, 803 },
   { 30390, 804 },
   { 30405, 804 },
   { 30423, 805 },
   { 30439, 805 },
   { 30458, 397 },
   { 30475, 397 },
   { 30495, 398 },
   { 30513, 398 },
   { 30534, 399 },
   { 30551, 399 },
   { 30571, 400 },
   { 30589, 400 },
   { 30610, 1132 },
   { 30627, 1132 },
   { 30647, 1133 },
   { 30665, 1133 },
   { 30686, 1567 },
   { 30705, 1568 },
   { 30725, 401 },
   { 30742, 401 },
   { 30762, 402 },
   { 30780, 402 },
   { 30801, 403 },
   { 30818, 403 },
   { 30838, 404 },
   { 30856, 404 },
   { 30877, 405 },
   { 30895, 405 },
   { 30916, 406 },
   { 30935, 406 },
   { 30957, 407 },
   { 30975, 407 },
   { 30996, 408 },
   { 31015, 408 },
   { 31037, 409 },
   { 31055, 409 },
   { 31076, 410 },
   { 31095, 410 },
   { 31117, 716 },
   { 31136, 717 },
   { 31156, 411 },
   { 31178, 411 },
   { 31203, 195 },
   { 31216, 1238 },
   { 31245, 1278 },
   { 31272, 1625 },
   { 31290, 1199 },
   { 31319, 177 },
   { 31330, 785 },
   { 31343, 478 },
   { 31356, 478 },
   { 31372, 862 },
   { 31398, 1279 },
   { 31417, 1035 },
   { 31434, 1035 },
   { 31454, 243 },
   { 31466, 479 },
   { 31486, 1296 },
   { 31509, 209 },
   { 31521, 480 },
   { 31541, 244 },
   { 31551, 481 },
   { 31569, 481 },
   { 31590, 1210 },
   { 31610, 1261 },
   { 31634, 583 },
   { 31644, 583 },
   { 31657, 583 },
   { 31670, 583 },
   { 31683, 863 },
   { 31698, 863 },
   { 31716, 863 },
   { 31734, 94 },
   { 31745, 95 },
   { 31757, 96 },
   { 31768, 97 },
   { 31780, 1549 },
   { 31793, 1550 },
   { 31807, 98 },
   { 31818, 99 },
   { 31830, 100 },
   { 31841, 101 },
   { 31853, 102 },
   { 31864, 103 },
   { 31876, 104 },
   { 31887, 105 },
   { 31899, 1551 },
   { 31912, 1552 },
   { 31926, 106 },
   { 31937, 107 },
   { 31949, 108 },
   { 31960, 109 },
   { 31972, 110 },
   { 31983, 111 },
   { 31995, 112 },
   { 32006, 113 },
   { 32018, 1553 },
   { 32031, 1554 },
   { 32045, 114 },
   { 32056, 115 },
   { 32068, 116 },
   { 32079, 117 },
   { 32091, 118 },
   { 32102, 119 },
   { 32114, 120 },
   { 32125, 121 },
   { 32137, 1555 },
   { 32150, 1556 },
   { 32164, 122 },
   { 32175, 123 },
   { 32187, 124 },
   { 32198, 125 },
   { 32210, 718 },
   { 32223, 719 },
   { 32237, 720 },
   { 32250, 721 },
   { 32264, 722 },
   { 32277, 723 },
   { 32291, 724 },
   { 32304, 725 },
   { 32318, 320 },
   { 32334, 1056 },
   { 32353, 184 },
   { 32361, 185 },
   { 32370, 186 },
   { 32378, 187 },
   { 32387, 1328 },
   { 32395, 1328 },
   { 32406, 1329 },
   { 32415, 1329 },
   { 32427, 188 },
   { 32435, 189 },
   { 32444, 190 },
   { 32452, 190 },
   { 32463, 191 },
   { 32472, 191 },
   { 32484, 192 },
   { 32492, 192 },
   { 32503, 193 },
   { 32512, 193 },
   { 32524, 1205 },
   { 32535, 1206 },
   { 32547, 182 },
   { 32558, 183 },
   { 32569, 677 },
   { 32591, 339 },
   { 32602, 339 },
   { 32616, 678 },
   { 32638, 339 },
   { 32652, 1582 },
   { 32673, 564 },
   { 32689, 564 },
   { 32708, 564 },
   { 32727, 565 },
   { 32744, 565 },
   { 32764, 565 },
   { 32784, 178 },
   { 32798, 179 },
   { 32813, 180 },
   { 32827, 181 },
   { 32842, 1330 },
   { 32856, 1330 },
   { 32873, 1343 },
   { 32888, 1343 },
   { 32906, 833 },
   { 32919, 833 },
   { 32935, 834 },
   { 32948, 834 },
   { 32964, 864 },
   { 32988, 835 },
   { 33001, 835 },
   { 33017, 865 },
   { 33041, 865 },
   { 33068, 1599 },
   { 33091, 1600 },
   { 33114, 1280 },
   { 33133, 1281 },
   { 33152, 1282 },
   { 33182, 1283 },
   { 33201, 1284 },
   { 33231, 332 },
   { 33245, 332 },
   { 33262, 333 },
   { 33276, 333 },
   { 33293, 340 },
   { 33307, 340 },
   { 33324, 340 },
   { 33341, 1239 },
   { 33356, 1239 },
   { 33373, 965 },
   { 33387, 1475 },
   { 33404, 966 },
   { 33423, 1515 },
   { 33445, 1371 },
   { 33463, 1372 },
   { 33481, 1373 },
   { 33499, 1583 },
   { 33524, 967 },
   { 33544, 1477 },
   { 33567, 968 },
   { 33588, 1478 },
   { 33612, 969 },
   { 33630, 1387 },
   { 33651, 970 },
   { 33670, 1388 },
   { 33692, 971 },
   { 33710, 1385 },
   { 33731, 972 },
   { 33750, 1386 },
   { 33772, 973 },
   { 33789, 836 },
   { 33809, 974 },
   { 33826, 837 },
   { 33846, 975 },
   { 33874, 1516 },
   { 33905, 976 },
   { 33922, 838 },
   { 33942, 977 },
   { 33970, 1517 },
   { 34001, 1285 },
   { 34024, 1286 },
   { 34047, 1287 },
   { 34081, 1288 },
   { 34104, 1289 },
   { 34138, 978 },
   { 34156, 1374 },
   { 34177, 979 },
   { 34195, 1375 },
   { 34216, 980 },
   { 34234, 1376 },
   { 34255, 844 },
   { 34267, 844 },
   { 34282, 844 },
   { 34297, 981 },
   { 34325, 982 },
   { 34354, 566 },
   { 34380, 566 },
   { 34409, 303 },
   { 34420, 304 },
   { 34431, 1331 },
   { 34442, 1331 },
   { 34456, 743 },
   { 34466, 744 },
   { 34477, 482 },
   { 34487, 482 },
   { 34500, 483 },
   { 34511, 483 },
   { 34525, 484 },
   { 34535, 1016 },
   { 34550, 1016 },
   { 34564, 1017 },
   { 34580, 1017 },
   { 34595, 484 },
   { 34608, 485 },
   { 34619, 485 },
   { 34633, 567 },
   { 34644, 1018 },
   { 34660, 1018 },
   { 34675, 1019 },
   { 34692, 1019 },
   { 34708, 567 },
   { 34722, 568 },
   { 34734, 568 },
   { 34749, 745 },
   { 34759, 746 },
   { 34770, 486 },
   { 34780, 486 },
   { 34793, 487 },
   { 34804, 487 },
   { 34818, 488 },
   { 34828, 1020 },
   { 34843, 1020 },
   { 34857, 1021 },
   { 34873, 1021 },
   { 34888, 488 },
   { 34901, 489 },
   { 34912, 489 },
   { 34926, 569 },
   { 34937, 1022 },
   { 34953, 1022 },
   { 34968, 1023 },
   { 34985, 1023 },
   { 35001, 569 },
   { 35015, 570 },
   { 35027, 570 },
   { 35042, 747 },
   { 35052, 748 },
   { 35063, 490 },
   { 35073, 490 },
   { 35086, 491 },
   { 35097, 491 },
   { 35111, 492 },
   { 35121, 1024 },
   { 35136, 1024 },
   { 35150, 1025 },
   { 35166, 1025 },
   { 35181, 492 },
   { 35194, 493 },
   { 35205, 493 },
   { 35219, 571 },
   { 35230, 1026 },
   { 35246, 1026 },
   { 35261, 1027 },
   { 35278, 1027 },
   { 35294, 571 },
   { 35308, 572 },
   { 35320, 572 },
   { 35335, 749 },
   { 35345, 750 },
   { 35356, 494 },
   { 35366, 494 },
   { 35379, 495 },
   { 35390, 495 },
   { 35404, 496 },
   { 35414, 1028 },
   { 35429, 1028 },
   { 35443, 1029 },
   { 35459, 1029 },
   { 35474, 496 },
   { 35487, 497 },
   { 35498, 497 },
   { 35512, 573 },
   { 35523, 1030 },
   { 35539, 1030 },
   { 35554, 1031 },
   { 35571, 1031 },
   { 35587, 573 },
   { 35601, 574 },
   { 35613, 574 },
   { 35628, 661 },
   { 35648, 887 },
   { 35669, 888 },
   { 35691, 751 },
   { 35708, 498 },
   { 35725, 498 },
   { 35745, 752 },
   { 35764, 532 },
   { 35783, 753 },
   { 35802, 533 },
   { 35821, 754 },
   { 35838, 499 },
   { 35855, 499 },
   { 35875, 755 },
   { 35894, 534 },
   { 35913, 756 },
   { 35932, 535 },
   { 35951, 757 },
   { 35968, 500 },
   { 35985, 500 },
   { 36005, 758 },
   { 36024, 536 },
   { 36043, 759 },
   { 36062, 537 },
   { 36081, 767 },
   { 36103, 1118 },
   { 36119, 446 },
   { 36131, 446 },
   { 36146, 446 },
   { 36161, 983 },
   { 36178, 983 },
   { 36198, 501 },
   { 36209, 501 },
   { 36229, 1119 },
   { 36246, 1119 },
   { 36266, 1240 },
   { 36278, 1241 },
   { 36298, 1242 },
   { 36310, 1243 },
   { 36327, 1244 },
   { 36346, 1245 },
   { 36375, 1246 },
   { 36403, 1247 },
   { 36424, 1248 },
   { 36445, 1249 },
   { 36470, 502 },
   { 36486, 502 },
   { 36505, 1120 },
   { 36529, 1120 },
   { 36556, 126 },
   { 36565, 127 },
   { 36575, 128 },
   { 36584, 129 },
   { 36594, 1537 },
   { 36605, 1538 },
   { 36617, 130 },
   { 36626, 131 },
   { 36636, 132 },
   { 36645, 133 },
   { 36655, 134 },
   { 36664, 135 },
   { 36674, 136 },
   { 36683, 137 },
   { 36693, 1539 },
   { 36704, 1540 },
   { 36716, 138 },
   { 36725, 139 },
   { 36735, 140 },
   { 36744, 141 },
   { 36754, 142 },
   { 36763, 143 },
   { 36773, 144 },
   { 36782, 145 },
   { 36792, 1541 },
   { 36803, 1542 },
   { 36815, 146 },
   { 36824, 147 },
   { 36834, 148 },
   { 36843, 149 },
   { 36853, 984 },
   { 36878, 985 },
   { 36902, 986 },
   { 36927, 987 },
   { 36952, 1518 },
   { 36983, 988 },
   { 37009, 1491 },
   { 37035, 1492 },
   { 37064, 989 },
   { 37089, 1497 },
   { 37118, 1493 },
   { 37144, 1496 },
   { 37178, 1494 },
   { 37205, 1498 },
   { 37240, 1495 },
   { 37269, 1522 },
   { 37303, 1514 },
   { 37337, 1519 },
   { 37370, 1520 },
   { 37404, 1500 },
   { 37438, 1521 },
   { 37472, 1513 },
   { 37506, 1499 },
   { 37539, 1523 },
   { 37574, 990 },
   { 37598, 991 },
   { 37623, 1490 },
   { 37650, 503 },
   { 37665, 503 },
   { 37683, 1147 },
   { 37700, 504 },
   { 37716, 504 },
   { 37735, 1148 },
   { 37753, 609 },
   { 37768, 609 },
   { 37786, 1149 },
   { 37803, 610 },
   { 37819, 610 },
   { 37838, 1150 },
   { 37856, 1570 },
   { 37873, 1571 },
   { 37891, 505 },
   { 37906, 505 },
   { 37924, 1151 },
   { 37941, 506 },
   { 37957, 506 },
   { 37976, 1152 },
   { 37994, 507 },
   { 38009, 507 },
   { 38027, 1153 },
   { 38044, 508 },
   { 38060, 508 },
   { 38079, 1154 },
   { 38097, 611 },
   { 38112, 611 },
   { 38130, 1155 },
   { 38147, 612 },
   { 38163, 612 },
   { 38182, 1156 },
   { 38200, 1572 },
   { 38217, 1573 },
   { 38235, 509 },
   { 38250, 509 },
   { 38268, 1157 },
   { 38285, 510 },
   { 38301, 510 },
   { 38320, 1158 },
   { 38338, 511 },
   { 38353, 511 },
   { 38371, 1159 },
   { 38388, 512 },
   { 38404, 512 },
   { 38423, 1160 },
   { 38441, 613 },
   { 38456, 613 },
   { 38474, 1161 },
   { 38491, 614 },
   { 38507, 614 },
   { 38526, 1162 },
   { 38544, 1574 },
   { 38561, 1575 },
   { 38579, 513 },
   { 38594, 513 },
   { 38612, 1163 },
   { 38629, 514 },
   { 38645, 514 },
   { 38664, 1164 },
   { 38682, 515 },
   { 38699, 515 },
   { 38719, 516 },
   { 38736, 516 },
   { 38756, 517 },
   { 38773, 517 },
   { 38793, 518 },
   { 38810, 518 },
   { 38830, 519 },
   { 38848, 519 },
   { 38869, 520 },
   { 38887, 520 },
   { 38908, 521 },
   { 38926, 521 },
   { 38947, 522 },
   { 38963, 522 },
   { 38982, 523 },
   { 38997, 523 },
   { 39015, 1165 },
   { 39032, 524 },
   { 39048, 524 },
   { 39067, 1166 },
   { 39085, 615 },
   { 39100, 615 },
   { 39118, 1167 },
   { 39135, 616 },
   { 39151, 616 },
   { 39170, 1168 },
   { 39188, 1576 },
   { 39205, 1577 },
   { 39223, 525 },
   { 39239, 525 },
   { 39258, 526 },
   { 39273, 526 },
   { 39291, 1169 },
   { 39308, 527 },
   { 39324, 527 },
   { 39343, 1170 },
   { 39361, 1171 },
   { 39379, 528 },
   { 39396, 528 },
   { 39416, 1172 },
   { 39435, 529 },
   { 39452, 529 },
   { 39472, 530 },
   { 39489, 530 },
   { 39509, 846 },
   { 39529, 587 },
   { 39549, 587 },
   { 39572, 587 },
   { 39595, 847 },
   { 39614, 1211 },
   { 39630, 1211 },
   { 39649, 575 },
   { 39666, 575 },
   { 39686, 1212 },
   { 39703, 1212 },
   { 39723, 576 },
   { 39741, 576 },
   { 39762, 1213 },
   { 39778, 1213 },
   { 39797, 1214 },
   { 39814, 1214 },
   { 39834, 1215 },
   { 39851, 1215 },
   { 39871, 1216 },
   { 39889, 1216 },
   { 39910, 1217 },
   { 39926, 1217 },
   { 39945, 1218 },
   { 39962, 1218 },
   { 39982, 1219 },
   { 39999, 1219 },
   { 40019, 1220 },
   { 40037, 1220 },
   { 40058, 577 },
   { 40075, 577 },
   { 40095, 1221 },
   { 40111, 1221 },
   { 40130, 1222 },
   { 40147, 1222 },
   { 40167, 578 },
   { 40184, 578 },
   { 40204, 579 },
   { 40222, 579 },
   { 40243, 1223 },
   { 40260, 1223 },
   { 40280, 1224 },
   { 40298, 1224 },
   { 40319, 580 },
   { 40337, 580 },
   { 40358, 848 },
   { 40378, 581 },
   { 40399, 581 },
   { 40423, 790 },
   { 40439, 790 },
   { 40458, 791 },
   { 40475, 791 },
   { 40495, 889 },
   { 40517, 890 },
   { 40540, 792 },
   { 40556, 792 },
   { 40575, 793 },
   { 40592, 793 },
   { 40612, 794 },
   { 40628, 794 },
   { 40647, 795 },
   { 40664, 795 },
   { 40684, 796 },
   { 40700, 796 },
   { 40719, 797 },
   { 40736, 797 },
   { 40756, 849 },
   { 40776, 798 },
   { 40797, 798 },
   { 40821, 726 },
   { 40838, 727 },
   { 40856, 728 },
   { 40873, 729 },
   { 40891, 730 },
   { 40908, 731 },
   { 40926, 732 },
   { 40943, 733 },
   { 40961, 531 },
   { 40981, 531 },
   { 41004, 1173 },
   { 41023, 1174 },
   { 41042, 1578 },
   { 41061, 1175 },
   { 41080, 1176 },
   { 41099, 1177 },
   { 41118, 1579 },
   { 41137, 1178 },
   { 41156, 1179 },
   { 41175, 1180 },
   { 41194, 1580 },
   { 41213, 1181 },
   { 41232, 1182 },
   { 41251, 1183 },
   { 41270, 1581 },
   { 41289, 1184 },
   { 41308, 1185 },
   { 41328, 850 },
   { 41349, 734 },
   { 41360, 735 },
   { 41372, 736 },
   { 41383, 737 },
   { 41395, 738 },
   { 41406, 739 },
   { 41418, 321 },
   { 41432, 1057 },
   { 41449, 305 },
   { 41458, 806 },
   { 41473, 806 },
   { 41491, 807 },
   { 41508, 807 },
   { 41528, 808 },
   { 41546, 808 },
   { 41567, 1534 },
   { 41585, 1290 },
   { 41602, 669 },
   { 41611, 669 },
   { 41625, 412 },
   { 41637, 412 },
   { 41652, 412 },
   { 41668, 413 },
   { 41681, 413 },
   { 41697, 413 },
   { 41714, 414 },
   { 41726, 414 },
   { 41741, 414 },
   { 41757, 415 },
   { 41770, 415 },
   { 41786, 415 },
   { 41803, 416 },
   { 41815, 416 },
   { 41830, 416 },
   { 41846, 417 },
   { 41859, 417 },
   { 41875, 417 },
   { 41892, 418 },
   { 41904, 418 },
   { 41919, 418 },
   { 41935, 419 },
   { 41948, 419 },
   { 41964, 419 },
   { 41981, 420 },
   { 41993, 420 },
   { 42008, 420 },
   { 42024, 421 },
   { 42037, 421 },
   { 42053, 421 },
   { 42070, 422 },
   { 42082, 422 },
   { 42097, 422 },
   { 42113, 423 },
   { 42126, 423 },
   { 42142, 423 },
   { 42159, 424 },
   { 42171, 424 },
   { 42186, 424 },
   { 42202, 425 },
   { 42215, 425 },
   { 42231, 425 },
   { 42248, 426 },
   { 42260, 426 },
   { 42275, 426 },
   { 42291, 427 },
   { 42304, 427 },
   { 42320, 427 },
   { 42337, 1137 },
   { 42353, 1138 },
   { 42370, 1139 },
   { 42386, 1140 },
   { 42403, 1141 },
   { 42419, 1142 },
   { 42436, 1143 },
   { 42452, 1144 },
   { 42469, 1264 }
};
#undef MAPI_TMP_PUBLIC_STUBS
#endif /* MAPI_TMP_PUBLIC_STUBS */

#ifdef MAPI_TMP_PUBLIC_ENTRIES
void GLAPIENTRY _dispatch_stub_NewList(GLuint list, GLenum mode)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[0];
   ((void (GLAPIENTRY *)(GLuint list, GLenum mode)) _func)(list, mode);
}

void GLAPIENTRY _dispatch_stub_EndList(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_CallList(GLuint list)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[2];
   ((void (GLAPIENTRY *)(GLuint list)) _func)(list);
}

void GLAPIENTRY _dispatch_stub_CallLists(GLsizei n, GLenum type, const GLvoid *lists)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[3];
   ((void (GLAPIENTRY *)(GLsizei n, GLenum type, const GLvoid *lists)) _func)(n, type, lists);
}

void GLAPIENTRY _dispatch_stub_DeleteLists(GLuint list, GLsizei range)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[4];
   ((void (GLAPIENTRY *)(GLuint list, GLsizei range)) _func)(list, range);
}

GLuint GLAPIENTRY _dispatch_stub_GenLists(GLsizei range)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[5];
   return ((GLuint (GLAPIENTRY *)(GLsizei range)) _func)(range);
}

void GLAPIENTRY _dispatch_stub_ListBase(GLuint base)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[6];
   ((void (GLAPIENTRY *)(GLuint base)) _func)(base);
}

void GLAPIENTRY _dispatch_stub_Begin(GLenum mode)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[7];
   ((void (GLAPIENTRY *)(GLenum mode)) _func)(mode);
}

void GLAPIENTRY _dispatch_stub_Bitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[8];
   ((void (GLAPIENTRY *)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)) _func)(width, height, xorig, yorig, xmove, ymove, bitmap);
}

void GLAPIENTRY _dispatch_stub_Color3b(GLbyte red, GLbyte green, GLbyte blue)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[9];
   ((void (GLAPIENTRY *)(GLbyte red, GLbyte green, GLbyte blue)) _func)(red, green, blue);
}

void GLAPIENTRY _dispatch_stub_Color3bv(const GLbyte *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[10];
   ((void (GLAPIENTRY *)(const GLbyte *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Color3d(GLdouble red, GLdouble green, GLdouble blue)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[11];
   ((void (GLAPIENTRY *)(GLdouble red, GLdouble green, GLdouble blue)) _func)(red, green, blue);
}

void GLAPIENTRY _dispatch_stub_Color3dv(const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[12];
   ((void (GLAPIENTRY *)(const GLdouble *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Color3f(GLfloat red, GLfloat green, GLfloat blue)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[13];
   ((void (GLAPIENTRY *)(GLfloat red, GLfloat green, GLfloat blue)) _func)(red, green, blue);
}

void GLAPIENTRY _dispatch_stub_Color3fv(const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[14];
   ((void (GLAPIENTRY *)(const GLfloat *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Color3i(GLint red, GLint green, GLint blue)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[15];
   ((void (GLAPIENTRY *)(GLint red, GLint green, GLint blue)) _func)(red, green, blue);
}

void GLAPIENTRY _dispatch_stub_Color3iv(const GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[16];
   ((void (GLAPIENTRY *)(const GLint *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Color3s(GLshort red, GLshort green, GLshort blue)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[17];
   ((void (GLAPIENTRY *)(GLshort red, GLshort green, GLshort blue)) _func)(red, green, blue);
}

void GLAPIENTRY _dispatch_stub_Color3sv(const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[18];
   ((void (GLAPIENTRY *)(const GLshort *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Color3ub(GLubyte red, GLubyte green, GLubyte blue)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[19];
   ((void (GLAPIENTRY *)(GLubyte red, GLubyte green, GLubyte blue)) _func)(red, green, blue);
}

void GLAPIENTRY _dispatch_stub_Color3ubv(const GLubyte *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[20];
   ((void (GLAPIENTRY *)(const GLubyte *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Color3ui(GLuint red, GLuint green, GLuint blue)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[21];
   ((void (GLAPIENTRY *)(GLuint red, GLuint green, GLuint blue)) _func)(red, green, blue);
}

void GLAPIENTRY _dispatch_stub_Color3uiv(const GLuint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[22];
   ((void (GLAPIENTRY *)(const GLuint *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Color3us(GLushort red, GLushort green, GLushort blue)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[23];
   ((void (GLAPIENTRY *)(GLushort red, GLushort green, GLushort blue)) _func)(red, green, blue);
}

void GLAPIENTRY _dispatch_stub_Color3usv(const GLushort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[24];
   ((void (GLAPIENTRY *)(const GLushort *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Color4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[25];
   ((void (GLAPIENTRY *)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)) _func)(red, green, blue, alpha);
}

void GLAPIENTRY _dispatch_stub_Color4bv(const GLbyte *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[26];
   ((void (GLAPIENTRY *)(const GLbyte *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Color4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[27];
   ((void (GLAPIENTRY *)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)) _func)(red, green, blue, alpha);
}

void GLAPIENTRY _dispatch_stub_Color4dv(const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[28];
   ((void (GLAPIENTRY *)(const GLdouble *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Color4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[29];
   ((void (GLAPIENTRY *)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)) _func)(red, green, blue, alpha);
}

void GLAPIENTRY _dispatch_stub_Color4fv(const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[30];
   ((void (GLAPIENTRY *)(const GLfloat *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Color4i(GLint red, GLint green, GLint blue, GLint alpha)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[31];
   ((void (GLAPIENTRY *)(GLint red, GLint green, GLint blue, GLint alpha)) _func)(red, green, blue, alpha);
}

void GLAPIENTRY _dispatch_stub_Color4iv(const GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[32];
   ((void (GLAPIENTRY *)(const GLint *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Color4s(GLshort red, GLshort green, GLshort blue, GLshort alpha)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[33];
   ((void (GLAPIENTRY *)(GLshort red, GLshort green, GLshort blue, GLshort alpha)) _func)(red, green, blue, alpha);
}

void GLAPIENTRY _dispatch_stub_Color4sv(const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[34];
   ((void (GLAPIENTRY *)(const GLshort *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Color4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[35];
   ((void (GLAPIENTRY *)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)) _func)(red, green, blue, alpha);
}

void GLAPIENTRY _dispatch_stub_Color4ubv(const GLubyte *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[36];
   ((void (GLAPIENTRY *)(const GLubyte *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Color4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[37];
   ((void (GLAPIENTRY *)(GLuint red, GLuint green, GLuint blue, GLuint alpha)) _func)(red, green, blue, alpha);
}

void GLAPIENTRY _dispatch_stub_Color4uiv(const GLuint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[38];
   ((void (GLAPIENTRY *)(const GLuint *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Color4us(GLushort red, GLushort green, GLushort blue, GLushort alpha)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[39];
   ((void (GLAPIENTRY *)(GLushort red, GLushort green, GLushort blue, GLushort alpha)) _func)(red, green, blue, alpha);
}

void GLAPIENTRY _dispatch_stub_Color4usv(const GLushort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[40];
   ((void (GLAPIENTRY *)(const GLushort *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_EdgeFlag(GLboolean flag)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[41];
   ((void (GLAPIENTRY *)(GLboolean flag)) _func)(flag);
}

void GLAPIENTRY _dispatch_stub_EdgeFlagv(const GLboolean *flag)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[42];
   ((void (GLAPIENTRY *)(const GLboolean *flag)) _func)(flag);
}

void GLAPIENTRY _dispatch_stub_End(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[43];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_Indexd(GLdouble c)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[44];
   ((void (GLAPIENTRY *)(GLdouble c)) _func)(c);
}

void GLAPIENTRY _dispatch_stub_Indexdv(const GLdouble *c)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[45];
   ((void (GLAPIENTRY *)(const GLdouble *c)) _func)(c);
}

void GLAPIENTRY _dispatch_stub_Indexf(GLfloat c)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[46];
   ((void (GLAPIENTRY *)(GLfloat c)) _func)(c);
}

void GLAPIENTRY _dispatch_stub_Indexfv(const GLfloat *c)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[47];
   ((void (GLAPIENTRY *)(const GLfloat *c)) _func)(c);
}

void GLAPIENTRY _dispatch_stub_Indexi(GLint c)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[48];
   ((void (GLAPIENTRY *)(GLint c)) _func)(c);
}

void GLAPIENTRY _dispatch_stub_Indexiv(const GLint *c)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[49];
   ((void (GLAPIENTRY *)(const GLint *c)) _func)(c);
}

void GLAPIENTRY _dispatch_stub_Indexs(GLshort c)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[50];
   ((void (GLAPIENTRY *)(GLshort c)) _func)(c);
}

void GLAPIENTRY _dispatch_stub_Indexsv(const GLshort *c)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[51];
   ((void (GLAPIENTRY *)(const GLshort *c)) _func)(c);
}

void GLAPIENTRY _dispatch_stub_Normal3b(GLbyte nx, GLbyte ny, GLbyte nz)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[52];
   ((void (GLAPIENTRY *)(GLbyte nx, GLbyte ny, GLbyte nz)) _func)(nx, ny, nz);
}

void GLAPIENTRY _dispatch_stub_Normal3bv(const GLbyte *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[53];
   ((void (GLAPIENTRY *)(const GLbyte *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Normal3d(GLdouble nx, GLdouble ny, GLdouble nz)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[54];
   ((void (GLAPIENTRY *)(GLdouble nx, GLdouble ny, GLdouble nz)) _func)(nx, ny, nz);
}

void GLAPIENTRY _dispatch_stub_Normal3dv(const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[55];
   ((void (GLAPIENTRY *)(const GLdouble *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Normal3f(GLfloat nx, GLfloat ny, GLfloat nz)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[56];
   ((void (GLAPIENTRY *)(GLfloat nx, GLfloat ny, GLfloat nz)) _func)(nx, ny, nz);
}

void GLAPIENTRY _dispatch_stub_Normal3fv(const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[57];
   ((void (GLAPIENTRY *)(const GLfloat *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Normal3i(GLint nx, GLint ny, GLint nz)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[58];
   ((void (GLAPIENTRY *)(GLint nx, GLint ny, GLint nz)) _func)(nx, ny, nz);
}

void GLAPIENTRY _dispatch_stub_Normal3iv(const GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[59];
   ((void (GLAPIENTRY *)(const GLint *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Normal3s(GLshort nx, GLshort ny, GLshort nz)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[60];
   ((void (GLAPIENTRY *)(GLshort nx, GLshort ny, GLshort nz)) _func)(nx, ny, nz);
}

void GLAPIENTRY _dispatch_stub_Normal3sv(const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[61];
   ((void (GLAPIENTRY *)(const GLshort *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_RasterPos2d(GLdouble x, GLdouble y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[62];
   ((void (GLAPIENTRY *)(GLdouble x, GLdouble y)) _func)(x, y);
}

void GLAPIENTRY _dispatch_stub_RasterPos2dv(const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[63];
   ((void (GLAPIENTRY *)(const GLdouble *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_RasterPos2f(GLfloat x, GLfloat y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[64];
   ((void (GLAPIENTRY *)(GLfloat x, GLfloat y)) _func)(x, y);
}

void GLAPIENTRY _dispatch_stub_RasterPos2fv(const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[65];
   ((void (GLAPIENTRY *)(const GLfloat *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_RasterPos2i(GLint x, GLint y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[66];
   ((void (GLAPIENTRY *)(GLint x, GLint y)) _func)(x, y);
}

void GLAPIENTRY _dispatch_stub_RasterPos2iv(const GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[67];
   ((void (GLAPIENTRY *)(const GLint *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_RasterPos2s(GLshort x, GLshort y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[68];
   ((void (GLAPIENTRY *)(GLshort x, GLshort y)) _func)(x, y);
}

void GLAPIENTRY _dispatch_stub_RasterPos2sv(const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[69];
   ((void (GLAPIENTRY *)(const GLshort *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_RasterPos3d(GLdouble x, GLdouble y, GLdouble z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[70];
   ((void (GLAPIENTRY *)(GLdouble x, GLdouble y, GLdouble z)) _func)(x, y, z);
}

void GLAPIENTRY _dispatch_stub_RasterPos3dv(const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[71];
   ((void (GLAPIENTRY *)(const GLdouble *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_RasterPos3f(GLfloat x, GLfloat y, GLfloat z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[72];
   ((void (GLAPIENTRY *)(GLfloat x, GLfloat y, GLfloat z)) _func)(x, y, z);
}

void GLAPIENTRY _dispatch_stub_RasterPos3fv(const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[73];
   ((void (GLAPIENTRY *)(const GLfloat *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_RasterPos3i(GLint x, GLint y, GLint z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[74];
   ((void (GLAPIENTRY *)(GLint x, GLint y, GLint z)) _func)(x, y, z);
}

void GLAPIENTRY _dispatch_stub_RasterPos3iv(const GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[75];
   ((void (GLAPIENTRY *)(const GLint *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_RasterPos3s(GLshort x, GLshort y, GLshort z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[76];
   ((void (GLAPIENTRY *)(GLshort x, GLshort y, GLshort z)) _func)(x, y, z);
}

void GLAPIENTRY _dispatch_stub_RasterPos3sv(const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[77];
   ((void (GLAPIENTRY *)(const GLshort *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_RasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[78];
   ((void (GLAPIENTRY *)(GLdouble x, GLdouble y, GLdouble z, GLdouble w)) _func)(x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_RasterPos4dv(const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[79];
   ((void (GLAPIENTRY *)(const GLdouble *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_RasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[80];
   ((void (GLAPIENTRY *)(GLfloat x, GLfloat y, GLfloat z, GLfloat w)) _func)(x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_RasterPos4fv(const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[81];
   ((void (GLAPIENTRY *)(const GLfloat *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_RasterPos4i(GLint x, GLint y, GLint z, GLint w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[82];
   ((void (GLAPIENTRY *)(GLint x, GLint y, GLint z, GLint w)) _func)(x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_RasterPos4iv(const GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[83];
   ((void (GLAPIENTRY *)(const GLint *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_RasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[84];
   ((void (GLAPIENTRY *)(GLshort x, GLshort y, GLshort z, GLshort w)) _func)(x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_RasterPos4sv(const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[85];
   ((void (GLAPIENTRY *)(const GLshort *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Rectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[86];
   ((void (GLAPIENTRY *)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)) _func)(x1, y1, x2, y2);
}

void GLAPIENTRY _dispatch_stub_Rectdv(const GLdouble *v1, const GLdouble *v2)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[87];
   ((void (GLAPIENTRY *)(const GLdouble *v1, const GLdouble *v2)) _func)(v1, v2);
}

void GLAPIENTRY _dispatch_stub_Rectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[88];
   ((void (GLAPIENTRY *)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)) _func)(x1, y1, x2, y2);
}

void GLAPIENTRY _dispatch_stub_Rectfv(const GLfloat *v1, const GLfloat *v2)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[89];
   ((void (GLAPIENTRY *)(const GLfloat *v1, const GLfloat *v2)) _func)(v1, v2);
}

void GLAPIENTRY _dispatch_stub_Recti(GLint x1, GLint y1, GLint x2, GLint y2)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[90];
   ((void (GLAPIENTRY *)(GLint x1, GLint y1, GLint x2, GLint y2)) _func)(x1, y1, x2, y2);
}

void GLAPIENTRY _dispatch_stub_Rectiv(const GLint *v1, const GLint *v2)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[91];
   ((void (GLAPIENTRY *)(const GLint *v1, const GLint *v2)) _func)(v1, v2);
}

void GLAPIENTRY _dispatch_stub_Rects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[92];
   ((void (GLAPIENTRY *)(GLshort x1, GLshort y1, GLshort x2, GLshort y2)) _func)(x1, y1, x2, y2);
}

void GLAPIENTRY _dispatch_stub_Rectsv(const GLshort *v1, const GLshort *v2)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[93];
   ((void (GLAPIENTRY *)(const GLshort *v1, const GLshort *v2)) _func)(v1, v2);
}

void GLAPIENTRY _dispatch_stub_TexCoord1d(GLdouble s)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[94];
   ((void (GLAPIENTRY *)(GLdouble s)) _func)(s);
}

void GLAPIENTRY _dispatch_stub_TexCoord1dv(const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[95];
   ((void (GLAPIENTRY *)(const GLdouble *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_TexCoord1f(GLfloat s)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[96];
   ((void (GLAPIENTRY *)(GLfloat s)) _func)(s);
}

void GLAPIENTRY _dispatch_stub_TexCoord1fv(const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[97];
   ((void (GLAPIENTRY *)(const GLfloat *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_TexCoord1i(GLint s)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[98];
   ((void (GLAPIENTRY *)(GLint s)) _func)(s);
}

void GLAPIENTRY _dispatch_stub_TexCoord1iv(const GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[99];
   ((void (GLAPIENTRY *)(const GLint *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_TexCoord1s(GLshort s)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[100];
   ((void (GLAPIENTRY *)(GLshort s)) _func)(s);
}

void GLAPIENTRY _dispatch_stub_TexCoord1sv(const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[101];
   ((void (GLAPIENTRY *)(const GLshort *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_TexCoord2d(GLdouble s, GLdouble t)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[102];
   ((void (GLAPIENTRY *)(GLdouble s, GLdouble t)) _func)(s, t);
}

void GLAPIENTRY _dispatch_stub_TexCoord2dv(const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[103];
   ((void (GLAPIENTRY *)(const GLdouble *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_TexCoord2f(GLfloat s, GLfloat t)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[104];
   ((void (GLAPIENTRY *)(GLfloat s, GLfloat t)) _func)(s, t);
}

void GLAPIENTRY _dispatch_stub_TexCoord2fv(const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[105];
   ((void (GLAPIENTRY *)(const GLfloat *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_TexCoord2i(GLint s, GLint t)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[106];
   ((void (GLAPIENTRY *)(GLint s, GLint t)) _func)(s, t);
}

void GLAPIENTRY _dispatch_stub_TexCoord2iv(const GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[107];
   ((void (GLAPIENTRY *)(const GLint *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_TexCoord2s(GLshort s, GLshort t)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[108];
   ((void (GLAPIENTRY *)(GLshort s, GLshort t)) _func)(s, t);
}

void GLAPIENTRY _dispatch_stub_TexCoord2sv(const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[109];
   ((void (GLAPIENTRY *)(const GLshort *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_TexCoord3d(GLdouble s, GLdouble t, GLdouble r)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[110];
   ((void (GLAPIENTRY *)(GLdouble s, GLdouble t, GLdouble r)) _func)(s, t, r);
}

void GLAPIENTRY _dispatch_stub_TexCoord3dv(const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[111];
   ((void (GLAPIENTRY *)(const GLdouble *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_TexCoord3f(GLfloat s, GLfloat t, GLfloat r)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[112];
   ((void (GLAPIENTRY *)(GLfloat s, GLfloat t, GLfloat r)) _func)(s, t, r);
}

void GLAPIENTRY _dispatch_stub_TexCoord3fv(const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[113];
   ((void (GLAPIENTRY *)(const GLfloat *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_TexCoord3i(GLint s, GLint t, GLint r)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[114];
   ((void (GLAPIENTRY *)(GLint s, GLint t, GLint r)) _func)(s, t, r);
}

void GLAPIENTRY _dispatch_stub_TexCoord3iv(const GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[115];
   ((void (GLAPIENTRY *)(const GLint *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_TexCoord3s(GLshort s, GLshort t, GLshort r)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[116];
   ((void (GLAPIENTRY *)(GLshort s, GLshort t, GLshort r)) _func)(s, t, r);
}

void GLAPIENTRY _dispatch_stub_TexCoord3sv(const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[117];
   ((void (GLAPIENTRY *)(const GLshort *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_TexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[118];
   ((void (GLAPIENTRY *)(GLdouble s, GLdouble t, GLdouble r, GLdouble q)) _func)(s, t, r, q);
}

void GLAPIENTRY _dispatch_stub_TexCoord4dv(const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[119];
   ((void (GLAPIENTRY *)(const GLdouble *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_TexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[120];
   ((void (GLAPIENTRY *)(GLfloat s, GLfloat t, GLfloat r, GLfloat q)) _func)(s, t, r, q);
}

void GLAPIENTRY _dispatch_stub_TexCoord4fv(const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[121];
   ((void (GLAPIENTRY *)(const GLfloat *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_TexCoord4i(GLint s, GLint t, GLint r, GLint q)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[122];
   ((void (GLAPIENTRY *)(GLint s, GLint t, GLint r, GLint q)) _func)(s, t, r, q);
}

void GLAPIENTRY _dispatch_stub_TexCoord4iv(const GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[123];
   ((void (GLAPIENTRY *)(const GLint *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_TexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[124];
   ((void (GLAPIENTRY *)(GLshort s, GLshort t, GLshort r, GLshort q)) _func)(s, t, r, q);
}

void GLAPIENTRY _dispatch_stub_TexCoord4sv(const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[125];
   ((void (GLAPIENTRY *)(const GLshort *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Vertex2d(GLdouble x, GLdouble y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[126];
   ((void (GLAPIENTRY *)(GLdouble x, GLdouble y)) _func)(x, y);
}

void GLAPIENTRY _dispatch_stub_Vertex2dv(const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[127];
   ((void (GLAPIENTRY *)(const GLdouble *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Vertex2f(GLfloat x, GLfloat y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[128];
   ((void (GLAPIENTRY *)(GLfloat x, GLfloat y)) _func)(x, y);
}

void GLAPIENTRY _dispatch_stub_Vertex2fv(const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[129];
   ((void (GLAPIENTRY *)(const GLfloat *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Vertex2i(GLint x, GLint y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[130];
   ((void (GLAPIENTRY *)(GLint x, GLint y)) _func)(x, y);
}

void GLAPIENTRY _dispatch_stub_Vertex2iv(const GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[131];
   ((void (GLAPIENTRY *)(const GLint *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Vertex2s(GLshort x, GLshort y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[132];
   ((void (GLAPIENTRY *)(GLshort x, GLshort y)) _func)(x, y);
}

void GLAPIENTRY _dispatch_stub_Vertex2sv(const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[133];
   ((void (GLAPIENTRY *)(const GLshort *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Vertex3d(GLdouble x, GLdouble y, GLdouble z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[134];
   ((void (GLAPIENTRY *)(GLdouble x, GLdouble y, GLdouble z)) _func)(x, y, z);
}

void GLAPIENTRY _dispatch_stub_Vertex3dv(const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[135];
   ((void (GLAPIENTRY *)(const GLdouble *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Vertex3f(GLfloat x, GLfloat y, GLfloat z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[136];
   ((void (GLAPIENTRY *)(GLfloat x, GLfloat y, GLfloat z)) _func)(x, y, z);
}

void GLAPIENTRY _dispatch_stub_Vertex3fv(const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[137];
   ((void (GLAPIENTRY *)(const GLfloat *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Vertex3i(GLint x, GLint y, GLint z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[138];
   ((void (GLAPIENTRY *)(GLint x, GLint y, GLint z)) _func)(x, y, z);
}

void GLAPIENTRY _dispatch_stub_Vertex3iv(const GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[139];
   ((void (GLAPIENTRY *)(const GLint *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Vertex3s(GLshort x, GLshort y, GLshort z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[140];
   ((void (GLAPIENTRY *)(GLshort x, GLshort y, GLshort z)) _func)(x, y, z);
}

void GLAPIENTRY _dispatch_stub_Vertex3sv(const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[141];
   ((void (GLAPIENTRY *)(const GLshort *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Vertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[142];
   ((void (GLAPIENTRY *)(GLdouble x, GLdouble y, GLdouble z, GLdouble w)) _func)(x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_Vertex4dv(const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[143];
   ((void (GLAPIENTRY *)(const GLdouble *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Vertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[144];
   ((void (GLAPIENTRY *)(GLfloat x, GLfloat y, GLfloat z, GLfloat w)) _func)(x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_Vertex4fv(const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[145];
   ((void (GLAPIENTRY *)(const GLfloat *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Vertex4i(GLint x, GLint y, GLint z, GLint w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[146];
   ((void (GLAPIENTRY *)(GLint x, GLint y, GLint z, GLint w)) _func)(x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_Vertex4iv(const GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[147];
   ((void (GLAPIENTRY *)(const GLint *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Vertex4s(GLshort x, GLshort y, GLshort z, GLshort w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[148];
   ((void (GLAPIENTRY *)(GLshort x, GLshort y, GLshort z, GLshort w)) _func)(x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_Vertex4sv(const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[149];
   ((void (GLAPIENTRY *)(const GLshort *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_ClipPlane(GLenum plane, const GLdouble *equation)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[150];
   ((void (GLAPIENTRY *)(GLenum plane, const GLdouble *equation)) _func)(plane, equation);
}

void GLAPIENTRY _dispatch_stub_ColorMaterial(GLenum face, GLenum mode)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[151];
   ((void (GLAPIENTRY *)(GLenum face, GLenum mode)) _func)(face, mode);
}

void GLAPIENTRY _dispatch_stub_CullFace(GLenum mode)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[152];
   ((void (GLAPIENTRY *)(GLenum mode)) _func)(mode);
}

void GLAPIENTRY _dispatch_stub_Fogf(GLenum pname, GLfloat param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[153];
   ((void (GLAPIENTRY *)(GLenum pname, GLfloat param)) _func)(pname, param);
}

void GLAPIENTRY _dispatch_stub_Fogfv(GLenum pname, const GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[154];
   ((void (GLAPIENTRY *)(GLenum pname, const GLfloat *params)) _func)(pname, params);
}

void GLAPIENTRY _dispatch_stub_Fogi(GLenum pname, GLint param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[155];
   ((void (GLAPIENTRY *)(GLenum pname, GLint param)) _func)(pname, param);
}

void GLAPIENTRY _dispatch_stub_Fogiv(GLenum pname, const GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[156];
   ((void (GLAPIENTRY *)(GLenum pname, const GLint *params)) _func)(pname, params);
}

void GLAPIENTRY _dispatch_stub_FrontFace(GLenum mode)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[157];
   ((void (GLAPIENTRY *)(GLenum mode)) _func)(mode);
}

void GLAPIENTRY _dispatch_stub_Hint(GLenum target, GLenum mode)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[158];
   ((void (GLAPIENTRY *)(GLenum target, GLenum mode)) _func)(target, mode);
}

void GLAPIENTRY _dispatch_stub_Lightf(GLenum light, GLenum pname, GLfloat param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[159];
   ((void (GLAPIENTRY *)(GLenum light, GLenum pname, GLfloat param)) _func)(light, pname, param);
}

void GLAPIENTRY _dispatch_stub_Lightfv(GLenum light, GLenum pname, const GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[160];
   ((void (GLAPIENTRY *)(GLenum light, GLenum pname, const GLfloat *params)) _func)(light, pname, params);
}

void GLAPIENTRY _dispatch_stub_Lighti(GLenum light, GLenum pname, GLint param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[161];
   ((void (GLAPIENTRY *)(GLenum light, GLenum pname, GLint param)) _func)(light, pname, param);
}

void GLAPIENTRY _dispatch_stub_Lightiv(GLenum light, GLenum pname, const GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[162];
   ((void (GLAPIENTRY *)(GLenum light, GLenum pname, const GLint *params)) _func)(light, pname, params);
}

void GLAPIENTRY _dispatch_stub_LightModelf(GLenum pname, GLfloat param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[163];
   ((void (GLAPIENTRY *)(GLenum pname, GLfloat param)) _func)(pname, param);
}

void GLAPIENTRY _dispatch_stub_LightModelfv(GLenum pname, const GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[164];
   ((void (GLAPIENTRY *)(GLenum pname, const GLfloat *params)) _func)(pname, params);
}

void GLAPIENTRY _dispatch_stub_LightModeli(GLenum pname, GLint param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[165];
   ((void (GLAPIENTRY *)(GLenum pname, GLint param)) _func)(pname, param);
}

void GLAPIENTRY _dispatch_stub_LightModeliv(GLenum pname, const GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[166];
   ((void (GLAPIENTRY *)(GLenum pname, const GLint *params)) _func)(pname, params);
}

void GLAPIENTRY _dispatch_stub_LineStipple(GLint factor, GLushort pattern)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[167];
   ((void (GLAPIENTRY *)(GLint factor, GLushort pattern)) _func)(factor, pattern);
}

void GLAPIENTRY _dispatch_stub_LineWidth(GLfloat width)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[168];
   ((void (GLAPIENTRY *)(GLfloat width)) _func)(width);
}

void GLAPIENTRY _dispatch_stub_Materialf(GLenum face, GLenum pname, GLfloat param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[169];
   ((void (GLAPIENTRY *)(GLenum face, GLenum pname, GLfloat param)) _func)(face, pname, param);
}

void GLAPIENTRY _dispatch_stub_Materialfv(GLenum face, GLenum pname, const GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[170];
   ((void (GLAPIENTRY *)(GLenum face, GLenum pname, const GLfloat *params)) _func)(face, pname, params);
}

void GLAPIENTRY _dispatch_stub_Materiali(GLenum face, GLenum pname, GLint param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[171];
   ((void (GLAPIENTRY *)(GLenum face, GLenum pname, GLint param)) _func)(face, pname, param);
}

void GLAPIENTRY _dispatch_stub_Materialiv(GLenum face, GLenum pname, const GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[172];
   ((void (GLAPIENTRY *)(GLenum face, GLenum pname, const GLint *params)) _func)(face, pname, params);
}

void GLAPIENTRY _dispatch_stub_PointSize(GLfloat size)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[173];
   ((void (GLAPIENTRY *)(GLfloat size)) _func)(size);
}

void GLAPIENTRY _dispatch_stub_PolygonMode(GLenum face, GLenum mode)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[174];
   ((void (GLAPIENTRY *)(GLenum face, GLenum mode)) _func)(face, mode);
}

void GLAPIENTRY _dispatch_stub_PolygonStipple(const GLubyte *mask)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[175];
   ((void (GLAPIENTRY *)(const GLubyte *mask)) _func)(mask);
}

void GLAPIENTRY _dispatch_stub_Scissor(GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[176];
   ((void (GLAPIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height)) _func)(x, y, width, height);
}

void GLAPIENTRY _dispatch_stub_ShadeModel(GLenum mode)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[177];
   ((void (GLAPIENTRY *)(GLenum mode)) _func)(mode);
}

void GLAPIENTRY _dispatch_stub_TexParameterf(GLenum target, GLenum pname, GLfloat param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[178];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLfloat param)) _func)(target, pname, param);
}

void GLAPIENTRY _dispatch_stub_TexParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[179];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, const GLfloat *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_TexParameteri(GLenum target, GLenum pname, GLint param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[180];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLint param)) _func)(target, pname, param);
}

void GLAPIENTRY _dispatch_stub_TexParameteriv(GLenum target, GLenum pname, const GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[181];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, const GLint *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_TexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[182];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)) _func)(target, level, internalformat, width, border, format, type, pixels);
}

void GLAPIENTRY _dispatch_stub_TexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[183];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)) _func)(target, level, internalformat, width, height, border, format, type, pixels);
}

void GLAPIENTRY _dispatch_stub_TexEnvf(GLenum target, GLenum pname, GLfloat param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[184];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLfloat param)) _func)(target, pname, param);
}

void GLAPIENTRY _dispatch_stub_TexEnvfv(GLenum target, GLenum pname, const GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[185];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, const GLfloat *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_TexEnvi(GLenum target, GLenum pname, GLint param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[186];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLint param)) _func)(target, pname, param);
}

void GLAPIENTRY _dispatch_stub_TexEnviv(GLenum target, GLenum pname, const GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[187];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, const GLint *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_TexGend(GLenum coord, GLenum pname, GLdouble param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[188];
   ((void (GLAPIENTRY *)(GLenum coord, GLenum pname, GLdouble param)) _func)(coord, pname, param);
}

void GLAPIENTRY _dispatch_stub_TexGendv(GLenum coord, GLenum pname, const GLdouble *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[189];
   ((void (GLAPIENTRY *)(GLenum coord, GLenum pname, const GLdouble *params)) _func)(coord, pname, params);
}

void GLAPIENTRY _dispatch_stub_TexGenf(GLenum coord, GLenum pname, GLfloat param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[190];
   ((void (GLAPIENTRY *)(GLenum coord, GLenum pname, GLfloat param)) _func)(coord, pname, param);
}

void GLAPIENTRY _dispatch_stub_TexGenfv(GLenum coord, GLenum pname, const GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[191];
   ((void (GLAPIENTRY *)(GLenum coord, GLenum pname, const GLfloat *params)) _func)(coord, pname, params);
}

void GLAPIENTRY _dispatch_stub_TexGeni(GLenum coord, GLenum pname, GLint param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[192];
   ((void (GLAPIENTRY *)(GLenum coord, GLenum pname, GLint param)) _func)(coord, pname, param);
}

void GLAPIENTRY _dispatch_stub_TexGeniv(GLenum coord, GLenum pname, const GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[193];
   ((void (GLAPIENTRY *)(GLenum coord, GLenum pname, const GLint *params)) _func)(coord, pname, params);
}

void GLAPIENTRY _dispatch_stub_FeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[194];
   ((void (GLAPIENTRY *)(GLsizei size, GLenum type, GLfloat *buffer)) _func)(size, type, buffer);
}

void GLAPIENTRY _dispatch_stub_SelectBuffer(GLsizei size, GLuint *buffer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[195];
   ((void (GLAPIENTRY *)(GLsizei size, GLuint *buffer)) _func)(size, buffer);
}

GLint GLAPIENTRY _dispatch_stub_RenderMode(GLenum mode)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[196];
   return ((GLint (GLAPIENTRY *)(GLenum mode)) _func)(mode);
}

void GLAPIENTRY _dispatch_stub_InitNames(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[197];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_LoadName(GLuint name)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[198];
   ((void (GLAPIENTRY *)(GLuint name)) _func)(name);
}

void GLAPIENTRY _dispatch_stub_PassThrough(GLfloat token)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[199];
   ((void (GLAPIENTRY *)(GLfloat token)) _func)(token);
}

void GLAPIENTRY _dispatch_stub_PopName(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[200];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_PushName(GLuint name)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[201];
   ((void (GLAPIENTRY *)(GLuint name)) _func)(name);
}

void GLAPIENTRY _dispatch_stub_DrawBuffer(GLenum mode)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[202];
   ((void (GLAPIENTRY *)(GLenum mode)) _func)(mode);
}

void GLAPIENTRY _dispatch_stub_Clear(GLbitfield mask)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[203];
   ((void (GLAPIENTRY *)(GLbitfield mask)) _func)(mask);
}

void GLAPIENTRY _dispatch_stub_ClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[204];
   ((void (GLAPIENTRY *)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)) _func)(red, green, blue, alpha);
}

void GLAPIENTRY _dispatch_stub_ClearIndex(GLfloat c)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[205];
   ((void (GLAPIENTRY *)(GLfloat c)) _func)(c);
}

void GLAPIENTRY _dispatch_stub_ClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[206];
   ((void (GLAPIENTRY *)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)) _func)(red, green, blue, alpha);
}

void GLAPIENTRY _dispatch_stub_ClearStencil(GLint s)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[207];
   ((void (GLAPIENTRY *)(GLint s)) _func)(s);
}

void GLAPIENTRY _dispatch_stub_ClearDepth(GLclampd depth)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[208];
   ((void (GLAPIENTRY *)(GLclampd depth)) _func)(depth);
}

void GLAPIENTRY _dispatch_stub_StencilMask(GLuint mask)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[209];
   ((void (GLAPIENTRY *)(GLuint mask)) _func)(mask);
}

void GLAPIENTRY _dispatch_stub_ColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[210];
   ((void (GLAPIENTRY *)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)) _func)(red, green, blue, alpha);
}

void GLAPIENTRY _dispatch_stub_DepthMask(GLboolean flag)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[211];
   ((void (GLAPIENTRY *)(GLboolean flag)) _func)(flag);
}

void GLAPIENTRY _dispatch_stub_IndexMask(GLuint mask)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[212];
   ((void (GLAPIENTRY *)(GLuint mask)) _func)(mask);
}

void GLAPIENTRY _dispatch_stub_Accum(GLenum op, GLfloat value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[213];
   ((void (GLAPIENTRY *)(GLenum op, GLfloat value)) _func)(op, value);
}

void GLAPIENTRY _dispatch_stub_Disable(GLenum cap)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[214];
   ((void (GLAPIENTRY *)(GLenum cap)) _func)(cap);
}

void GLAPIENTRY _dispatch_stub_Enable(GLenum cap)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[215];
   ((void (GLAPIENTRY *)(GLenum cap)) _func)(cap);
}

void GLAPIENTRY _dispatch_stub_Finish(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[216];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_Flush(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[217];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_PopAttrib(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[218];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_PushAttrib(GLbitfield mask)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[219];
   ((void (GLAPIENTRY *)(GLbitfield mask)) _func)(mask);
}

void GLAPIENTRY _dispatch_stub_Map1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[220];
   ((void (GLAPIENTRY *)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)) _func)(target, u1, u2, stride, order, points);
}

void GLAPIENTRY _dispatch_stub_Map1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[221];
   ((void (GLAPIENTRY *)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)) _func)(target, u1, u2, stride, order, points);
}

void GLAPIENTRY _dispatch_stub_Map2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[222];
   ((void (GLAPIENTRY *)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)) _func)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

void GLAPIENTRY _dispatch_stub_Map2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[223];
   ((void (GLAPIENTRY *)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)) _func)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}

void GLAPIENTRY _dispatch_stub_MapGrid1d(GLint un, GLdouble u1, GLdouble u2)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[224];
   ((void (GLAPIENTRY *)(GLint un, GLdouble u1, GLdouble u2)) _func)(un, u1, u2);
}

void GLAPIENTRY _dispatch_stub_MapGrid1f(GLint un, GLfloat u1, GLfloat u2)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[225];
   ((void (GLAPIENTRY *)(GLint un, GLfloat u1, GLfloat u2)) _func)(un, u1, u2);
}

void GLAPIENTRY _dispatch_stub_MapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[226];
   ((void (GLAPIENTRY *)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)) _func)(un, u1, u2, vn, v1, v2);
}

void GLAPIENTRY _dispatch_stub_MapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[227];
   ((void (GLAPIENTRY *)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)) _func)(un, u1, u2, vn, v1, v2);
}

void GLAPIENTRY _dispatch_stub_EvalCoord1d(GLdouble u)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[228];
   ((void (GLAPIENTRY *)(GLdouble u)) _func)(u);
}

void GLAPIENTRY _dispatch_stub_EvalCoord1dv(const GLdouble *u)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[229];
   ((void (GLAPIENTRY *)(const GLdouble *u)) _func)(u);
}

void GLAPIENTRY _dispatch_stub_EvalCoord1f(GLfloat u)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[230];
   ((void (GLAPIENTRY *)(GLfloat u)) _func)(u);
}

void GLAPIENTRY _dispatch_stub_EvalCoord1fv(const GLfloat *u)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[231];
   ((void (GLAPIENTRY *)(const GLfloat *u)) _func)(u);
}

void GLAPIENTRY _dispatch_stub_EvalCoord2d(GLdouble u, GLdouble v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[232];
   ((void (GLAPIENTRY *)(GLdouble u, GLdouble v)) _func)(u, v);
}

void GLAPIENTRY _dispatch_stub_EvalCoord2dv(const GLdouble *u)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[233];
   ((void (GLAPIENTRY *)(const GLdouble *u)) _func)(u);
}

void GLAPIENTRY _dispatch_stub_EvalCoord2f(GLfloat u, GLfloat v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[234];
   ((void (GLAPIENTRY *)(GLfloat u, GLfloat v)) _func)(u, v);
}

void GLAPIENTRY _dispatch_stub_EvalCoord2fv(const GLfloat *u)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[235];
   ((void (GLAPIENTRY *)(const GLfloat *u)) _func)(u);
}

void GLAPIENTRY _dispatch_stub_EvalMesh1(GLenum mode, GLint i1, GLint i2)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[236];
   ((void (GLAPIENTRY *)(GLenum mode, GLint i1, GLint i2)) _func)(mode, i1, i2);
}

void GLAPIENTRY _dispatch_stub_EvalPoint1(GLint i)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[237];
   ((void (GLAPIENTRY *)(GLint i)) _func)(i);
}

void GLAPIENTRY _dispatch_stub_EvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[238];
   ((void (GLAPIENTRY *)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)) _func)(mode, i1, i2, j1, j2);
}

void GLAPIENTRY _dispatch_stub_EvalPoint2(GLint i, GLint j)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[239];
   ((void (GLAPIENTRY *)(GLint i, GLint j)) _func)(i, j);
}

void GLAPIENTRY _dispatch_stub_AlphaFunc(GLenum func, GLclampf ref)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[240];
   ((void (GLAPIENTRY *)(GLenum func, GLclampf ref)) _func)(func, ref);
}

void GLAPIENTRY _dispatch_stub_BlendFunc(GLenum sfactor, GLenum dfactor)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[241];
   ((void (GLAPIENTRY *)(GLenum sfactor, GLenum dfactor)) _func)(sfactor, dfactor);
}

void GLAPIENTRY _dispatch_stub_LogicOp(GLenum opcode)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[242];
   ((void (GLAPIENTRY *)(GLenum opcode)) _func)(opcode);
}

void GLAPIENTRY _dispatch_stub_StencilFunc(GLenum func, GLint ref, GLuint mask)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[243];
   ((void (GLAPIENTRY *)(GLenum func, GLint ref, GLuint mask)) _func)(func, ref, mask);
}

void GLAPIENTRY _dispatch_stub_StencilOp(GLenum fail, GLenum zfail, GLenum zpass)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[244];
   ((void (GLAPIENTRY *)(GLenum fail, GLenum zfail, GLenum zpass)) _func)(fail, zfail, zpass);
}

void GLAPIENTRY _dispatch_stub_DepthFunc(GLenum func)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[245];
   ((void (GLAPIENTRY *)(GLenum func)) _func)(func);
}

void GLAPIENTRY _dispatch_stub_PixelZoom(GLfloat xfactor, GLfloat yfactor)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[246];
   ((void (GLAPIENTRY *)(GLfloat xfactor, GLfloat yfactor)) _func)(xfactor, yfactor);
}

void GLAPIENTRY _dispatch_stub_PixelTransferf(GLenum pname, GLfloat param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[247];
   ((void (GLAPIENTRY *)(GLenum pname, GLfloat param)) _func)(pname, param);
}

void GLAPIENTRY _dispatch_stub_PixelTransferi(GLenum pname, GLint param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[248];
   ((void (GLAPIENTRY *)(GLenum pname, GLint param)) _func)(pname, param);
}

void GLAPIENTRY _dispatch_stub_PixelStoref(GLenum pname, GLfloat param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[249];
   ((void (GLAPIENTRY *)(GLenum pname, GLfloat param)) _func)(pname, param);
}

void GLAPIENTRY _dispatch_stub_PixelStorei(GLenum pname, GLint param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[250];
   ((void (GLAPIENTRY *)(GLenum pname, GLint param)) _func)(pname, param);
}

void GLAPIENTRY _dispatch_stub_PixelMapfv(GLenum map, GLsizei mapsize, const GLfloat *values)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[251];
   ((void (GLAPIENTRY *)(GLenum map, GLsizei mapsize, const GLfloat *values)) _func)(map, mapsize, values);
}

void GLAPIENTRY _dispatch_stub_PixelMapuiv(GLenum map, GLsizei mapsize, const GLuint *values)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[252];
   ((void (GLAPIENTRY *)(GLenum map, GLsizei mapsize, const GLuint *values)) _func)(map, mapsize, values);
}

void GLAPIENTRY _dispatch_stub_PixelMapusv(GLenum map, GLsizei mapsize, const GLushort *values)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[253];
   ((void (GLAPIENTRY *)(GLenum map, GLsizei mapsize, const GLushort *values)) _func)(map, mapsize, values);
}

void GLAPIENTRY _dispatch_stub_ReadBuffer(GLenum mode)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[254];
   ((void (GLAPIENTRY *)(GLenum mode)) _func)(mode);
}

void GLAPIENTRY _dispatch_stub_CopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[255];
   ((void (GLAPIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)) _func)(x, y, width, height, type);
}

void GLAPIENTRY _dispatch_stub_ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[256];
   ((void (GLAPIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)) _func)(x, y, width, height, format, type, pixels);
}

void GLAPIENTRY _dispatch_stub_DrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[257];
   ((void (GLAPIENTRY *)(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)) _func)(width, height, format, type, pixels);
}

void GLAPIENTRY _dispatch_stub_GetBooleanv(GLenum pname, GLboolean *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[258];
   ((void (GLAPIENTRY *)(GLenum pname, GLboolean *params)) _func)(pname, params);
}

void GLAPIENTRY _dispatch_stub_GetClipPlane(GLenum plane, GLdouble *equation)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[259];
   ((void (GLAPIENTRY *)(GLenum plane, GLdouble *equation)) _func)(plane, equation);
}

void GLAPIENTRY _dispatch_stub_GetDoublev(GLenum pname, GLdouble *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[260];
   ((void (GLAPIENTRY *)(GLenum pname, GLdouble *params)) _func)(pname, params);
}

GLenum GLAPIENTRY _dispatch_stub_GetError(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[261];
   return ((GLenum (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_GetFloatv(GLenum pname, GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[262];
   ((void (GLAPIENTRY *)(GLenum pname, GLfloat *params)) _func)(pname, params);
}

void GLAPIENTRY _dispatch_stub_GetIntegerv(GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[263];
   ((void (GLAPIENTRY *)(GLenum pname, GLint *params)) _func)(pname, params);
}

void GLAPIENTRY _dispatch_stub_GetLightfv(GLenum light, GLenum pname, GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[264];
   ((void (GLAPIENTRY *)(GLenum light, GLenum pname, GLfloat *params)) _func)(light, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetLightiv(GLenum light, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[265];
   ((void (GLAPIENTRY *)(GLenum light, GLenum pname, GLint *params)) _func)(light, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetMapdv(GLenum target, GLenum query, GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[266];
   ((void (GLAPIENTRY *)(GLenum target, GLenum query, GLdouble *v)) _func)(target, query, v);
}

void GLAPIENTRY _dispatch_stub_GetMapfv(GLenum target, GLenum query, GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[267];
   ((void (GLAPIENTRY *)(GLenum target, GLenum query, GLfloat *v)) _func)(target, query, v);
}

void GLAPIENTRY _dispatch_stub_GetMapiv(GLenum target, GLenum query, GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[268];
   ((void (GLAPIENTRY *)(GLenum target, GLenum query, GLint *v)) _func)(target, query, v);
}

void GLAPIENTRY _dispatch_stub_GetMaterialfv(GLenum face, GLenum pname, GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[269];
   ((void (GLAPIENTRY *)(GLenum face, GLenum pname, GLfloat *params)) _func)(face, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetMaterialiv(GLenum face, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[270];
   ((void (GLAPIENTRY *)(GLenum face, GLenum pname, GLint *params)) _func)(face, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetPixelMapfv(GLenum map, GLfloat *values)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[271];
   ((void (GLAPIENTRY *)(GLenum map, GLfloat *values)) _func)(map, values);
}

void GLAPIENTRY _dispatch_stub_GetPixelMapuiv(GLenum map, GLuint *values)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[272];
   ((void (GLAPIENTRY *)(GLenum map, GLuint *values)) _func)(map, values);
}

void GLAPIENTRY _dispatch_stub_GetPixelMapusv(GLenum map, GLushort *values)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[273];
   ((void (GLAPIENTRY *)(GLenum map, GLushort *values)) _func)(map, values);
}

void GLAPIENTRY _dispatch_stub_GetPolygonStipple(GLubyte *mask)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[274];
   ((void (GLAPIENTRY *)(GLubyte *mask)) _func)(mask);
}

const GLubyte * GLAPIENTRY _dispatch_stub_GetString(GLenum name)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[275];
   return ((const GLubyte * (GLAPIENTRY *)(GLenum name)) _func)(name);
}

void GLAPIENTRY _dispatch_stub_GetTexEnvfv(GLenum target, GLenum pname, GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[276];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLfloat *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetTexEnviv(GLenum target, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[277];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetTexGendv(GLenum coord, GLenum pname, GLdouble *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[278];
   ((void (GLAPIENTRY *)(GLenum coord, GLenum pname, GLdouble *params)) _func)(coord, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetTexGenfv(GLenum coord, GLenum pname, GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[279];
   ((void (GLAPIENTRY *)(GLenum coord, GLenum pname, GLfloat *params)) _func)(coord, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetTexGeniv(GLenum coord, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[280];
   ((void (GLAPIENTRY *)(GLenum coord, GLenum pname, GLint *params)) _func)(coord, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[281];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)) _func)(target, level, format, type, pixels);
}

void GLAPIENTRY _dispatch_stub_GetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[282];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLfloat *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetTexParameteriv(GLenum target, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[283];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[284];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLenum pname, GLfloat *params)) _func)(target, level, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[285];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLenum pname, GLint *params)) _func)(target, level, pname, params);
}

GLboolean GLAPIENTRY _dispatch_stub_IsEnabled(GLenum cap)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[286];
   return ((GLboolean (GLAPIENTRY *)(GLenum cap)) _func)(cap);
}

GLboolean GLAPIENTRY _dispatch_stub_IsList(GLuint list)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[287];
   return ((GLboolean (GLAPIENTRY *)(GLuint list)) _func)(list);
}

void GLAPIENTRY _dispatch_stub_DepthRange(GLclampd zNear, GLclampd zFar)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[288];
   ((void (GLAPIENTRY *)(GLclampd zNear, GLclampd zFar)) _func)(zNear, zFar);
}

void GLAPIENTRY _dispatch_stub_Frustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[289];
   ((void (GLAPIENTRY *)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)) _func)(left, right, bottom, top, zNear, zFar);
}

void GLAPIENTRY _dispatch_stub_LoadIdentity(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[290];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_LoadMatrixf(const GLfloat *m)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[291];
   ((void (GLAPIENTRY *)(const GLfloat *m)) _func)(m);
}

void GLAPIENTRY _dispatch_stub_LoadMatrixd(const GLdouble *m)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[292];
   ((void (GLAPIENTRY *)(const GLdouble *m)) _func)(m);
}

void GLAPIENTRY _dispatch_stub_MatrixMode(GLenum mode)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[293];
   ((void (GLAPIENTRY *)(GLenum mode)) _func)(mode);
}

void GLAPIENTRY _dispatch_stub_MultMatrixf(const GLfloat *m)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[294];
   ((void (GLAPIENTRY *)(const GLfloat *m)) _func)(m);
}

void GLAPIENTRY _dispatch_stub_MultMatrixd(const GLdouble *m)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[295];
   ((void (GLAPIENTRY *)(const GLdouble *m)) _func)(m);
}

void GLAPIENTRY _dispatch_stub_Ortho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[296];
   ((void (GLAPIENTRY *)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)) _func)(left, right, bottom, top, zNear, zFar);
}

void GLAPIENTRY _dispatch_stub_PopMatrix(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[297];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_PushMatrix(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[298];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_Rotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[299];
   ((void (GLAPIENTRY *)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)) _func)(angle, x, y, z);
}

void GLAPIENTRY _dispatch_stub_Rotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[300];
   ((void (GLAPIENTRY *)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)) _func)(angle, x, y, z);
}

void GLAPIENTRY _dispatch_stub_Scaled(GLdouble x, GLdouble y, GLdouble z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[301];
   ((void (GLAPIENTRY *)(GLdouble x, GLdouble y, GLdouble z)) _func)(x, y, z);
}

void GLAPIENTRY _dispatch_stub_Scalef(GLfloat x, GLfloat y, GLfloat z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[302];
   ((void (GLAPIENTRY *)(GLfloat x, GLfloat y, GLfloat z)) _func)(x, y, z);
}

void GLAPIENTRY _dispatch_stub_Translated(GLdouble x, GLdouble y, GLdouble z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[303];
   ((void (GLAPIENTRY *)(GLdouble x, GLdouble y, GLdouble z)) _func)(x, y, z);
}

void GLAPIENTRY _dispatch_stub_Translatef(GLfloat x, GLfloat y, GLfloat z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[304];
   ((void (GLAPIENTRY *)(GLfloat x, GLfloat y, GLfloat z)) _func)(x, y, z);
}

void GLAPIENTRY _dispatch_stub_Viewport(GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[305];
   ((void (GLAPIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height)) _func)(x, y, width, height);
}

void GLAPIENTRY _dispatch_stub_ArrayElement(GLint i)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[306];
   ((void (GLAPIENTRY *)(GLint i)) _func)(i);
}

void GLAPIENTRY _dispatch_stub_BindTexture(GLenum target, GLuint texture)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[307];
   ((void (GLAPIENTRY *)(GLenum target, GLuint texture)) _func)(target, texture);
}

void GLAPIENTRY _dispatch_stub_ColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[308];
   ((void (GLAPIENTRY *)(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)) _func)(size, type, stride, pointer);
}

void GLAPIENTRY _dispatch_stub_DisableClientState(GLenum array)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[309];
   ((void (GLAPIENTRY *)(GLenum array)) _func)(array);
}

void GLAPIENTRY _dispatch_stub_DrawArrays(GLenum mode, GLint first, GLsizei count)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[310];
   ((void (GLAPIENTRY *)(GLenum mode, GLint first, GLsizei count)) _func)(mode, first, count);
}

void GLAPIENTRY _dispatch_stub_DrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[311];
   ((void (GLAPIENTRY *)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)) _func)(mode, count, type, indices);
}

void GLAPIENTRY _dispatch_stub_EdgeFlagPointer(GLsizei stride, const GLvoid *pointer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[312];
   ((void (GLAPIENTRY *)(GLsizei stride, const GLvoid *pointer)) _func)(stride, pointer);
}

void GLAPIENTRY _dispatch_stub_EnableClientState(GLenum array)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[313];
   ((void (GLAPIENTRY *)(GLenum array)) _func)(array);
}

void GLAPIENTRY _dispatch_stub_IndexPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[314];
   ((void (GLAPIENTRY *)(GLenum type, GLsizei stride, const GLvoid *pointer)) _func)(type, stride, pointer);
}

void GLAPIENTRY _dispatch_stub_Indexub(GLubyte c)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[315];
   ((void (GLAPIENTRY *)(GLubyte c)) _func)(c);
}

void GLAPIENTRY _dispatch_stub_Indexubv(const GLubyte *c)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[316];
   ((void (GLAPIENTRY *)(const GLubyte *c)) _func)(c);
}

void GLAPIENTRY _dispatch_stub_InterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[317];
   ((void (GLAPIENTRY *)(GLenum format, GLsizei stride, const GLvoid *pointer)) _func)(format, stride, pointer);
}

void GLAPIENTRY _dispatch_stub_NormalPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[318];
   ((void (GLAPIENTRY *)(GLenum type, GLsizei stride, const GLvoid *pointer)) _func)(type, stride, pointer);
}

void GLAPIENTRY _dispatch_stub_PolygonOffset(GLfloat factor, GLfloat units)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[319];
   ((void (GLAPIENTRY *)(GLfloat factor, GLfloat units)) _func)(factor, units);
}

void GLAPIENTRY _dispatch_stub_TexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[320];
   ((void (GLAPIENTRY *)(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)) _func)(size, type, stride, pointer);
}

void GLAPIENTRY _dispatch_stub_VertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[321];
   ((void (GLAPIENTRY *)(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)) _func)(size, type, stride, pointer);
}

GLboolean GLAPIENTRY _dispatch_stub_AreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[322];
   return ((GLboolean (GLAPIENTRY *)(GLsizei n, const GLuint *textures, GLboolean *residences)) _func)(n, textures, residences);
}

void GLAPIENTRY _dispatch_stub_CopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[323];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)) _func)(target, level, internalformat, x, y, width, border);
}

void GLAPIENTRY _dispatch_stub_CopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[324];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)) _func)(target, level, internalformat, x, y, width, height, border);
}

void GLAPIENTRY _dispatch_stub_CopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[325];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)) _func)(target, level, xoffset, x, y, width);
}

void GLAPIENTRY _dispatch_stub_CopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[326];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)) _func)(target, level, xoffset, yoffset, x, y, width, height);
}

void GLAPIENTRY _dispatch_stub_DeleteTextures(GLsizei n, const GLuint *textures)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[327];
   ((void (GLAPIENTRY *)(GLsizei n, const GLuint *textures)) _func)(n, textures);
}

void GLAPIENTRY _dispatch_stub_GenTextures(GLsizei n, GLuint *textures)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[328];
   ((void (GLAPIENTRY *)(GLsizei n, GLuint *textures)) _func)(n, textures);
}

void GLAPIENTRY _dispatch_stub_GetPointerv(GLenum pname, GLvoid **params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[329];
   ((void (GLAPIENTRY *)(GLenum pname, GLvoid **params)) _func)(pname, params);
}

GLboolean GLAPIENTRY _dispatch_stub_IsTexture(GLuint texture)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[330];
   return ((GLboolean (GLAPIENTRY *)(GLuint texture)) _func)(texture);
}

void GLAPIENTRY _dispatch_stub_PrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[331];
   ((void (GLAPIENTRY *)(GLsizei n, const GLuint *textures, const GLclampf *priorities)) _func)(n, textures, priorities);
}

void GLAPIENTRY _dispatch_stub_TexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[332];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)) _func)(target, level, xoffset, width, format, type, pixels);
}

void GLAPIENTRY _dispatch_stub_TexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[333];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)) _func)(target, level, xoffset, yoffset, width, height, format, type, pixels);
}

void GLAPIENTRY _dispatch_stub_PopClientAttrib(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[334];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_PushClientAttrib(GLbitfield mask)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[335];
   ((void (GLAPIENTRY *)(GLbitfield mask)) _func)(mask);
}

void GLAPIENTRY _dispatch_stub_BlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[336];
   ((void (GLAPIENTRY *)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)) _func)(red, green, blue, alpha);
}

void GLAPIENTRY _dispatch_stub_BlendEquation(GLenum mode)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[337];
   ((void (GLAPIENTRY *)(GLenum mode)) _func)(mode);
}

void GLAPIENTRY _dispatch_stub_DrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[338];
   ((void (GLAPIENTRY *)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)) _func)(mode, start, end, count, type, indices);
}

void GLAPIENTRY _dispatch_stub_TexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[339];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)) _func)(target, level, internalformat, width, height, depth, border, format, type, pixels);
}

void GLAPIENTRY _dispatch_stub_TexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[340];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)) _func)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

void GLAPIENTRY _dispatch_stub_CopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[341];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)) _func)(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

void GLAPIENTRY _dispatch_stub_ActiveTexture(GLenum texture)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[342];
   ((void (GLAPIENTRY *)(GLenum texture)) _func)(texture);
}

void GLAPIENTRY _dispatch_stub_ClientActiveTexture(GLenum texture)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[343];
   ((void (GLAPIENTRY *)(GLenum texture)) _func)(texture);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord1d(GLenum target, GLdouble s)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[344];
   ((void (GLAPIENTRY *)(GLenum target, GLdouble s)) _func)(target, s);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord1dv(GLenum target, const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[345];
   ((void (GLAPIENTRY *)(GLenum target, const GLdouble *v)) _func)(target, v);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord1fARB(GLenum target, GLfloat s)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[346];
   ((void (GLAPIENTRY *)(GLenum target, GLfloat s)) _func)(target, s);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord1fvARB(GLenum target, const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[347];
   ((void (GLAPIENTRY *)(GLenum target, const GLfloat *v)) _func)(target, v);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord1i(GLenum target, GLint s)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[348];
   ((void (GLAPIENTRY *)(GLenum target, GLint s)) _func)(target, s);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord1iv(GLenum target, const GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[349];
   ((void (GLAPIENTRY *)(GLenum target, const GLint *v)) _func)(target, v);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord1s(GLenum target, GLshort s)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[350];
   ((void (GLAPIENTRY *)(GLenum target, GLshort s)) _func)(target, s);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord1sv(GLenum target, const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[351];
   ((void (GLAPIENTRY *)(GLenum target, const GLshort *v)) _func)(target, v);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[352];
   ((void (GLAPIENTRY *)(GLenum target, GLdouble s, GLdouble t)) _func)(target, s, t);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord2dv(GLenum target, const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[353];
   ((void (GLAPIENTRY *)(GLenum target, const GLdouble *v)) _func)(target, v);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[354];
   ((void (GLAPIENTRY *)(GLenum target, GLfloat s, GLfloat t)) _func)(target, s, t);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord2fvARB(GLenum target, const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[355];
   ((void (GLAPIENTRY *)(GLenum target, const GLfloat *v)) _func)(target, v);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord2i(GLenum target, GLint s, GLint t)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[356];
   ((void (GLAPIENTRY *)(GLenum target, GLint s, GLint t)) _func)(target, s, t);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord2iv(GLenum target, const GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[357];
   ((void (GLAPIENTRY *)(GLenum target, const GLint *v)) _func)(target, v);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord2s(GLenum target, GLshort s, GLshort t)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[358];
   ((void (GLAPIENTRY *)(GLenum target, GLshort s, GLshort t)) _func)(target, s, t);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord2sv(GLenum target, const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[359];
   ((void (GLAPIENTRY *)(GLenum target, const GLshort *v)) _func)(target, v);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[360];
   ((void (GLAPIENTRY *)(GLenum target, GLdouble s, GLdouble t, GLdouble r)) _func)(target, s, t, r);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord3dv(GLenum target, const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[361];
   ((void (GLAPIENTRY *)(GLenum target, const GLdouble *v)) _func)(target, v);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[362];
   ((void (GLAPIENTRY *)(GLenum target, GLfloat s, GLfloat t, GLfloat r)) _func)(target, s, t, r);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord3fvARB(GLenum target, const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[363];
   ((void (GLAPIENTRY *)(GLenum target, const GLfloat *v)) _func)(target, v);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[364];
   ((void (GLAPIENTRY *)(GLenum target, GLint s, GLint t, GLint r)) _func)(target, s, t, r);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord3iv(GLenum target, const GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[365];
   ((void (GLAPIENTRY *)(GLenum target, const GLint *v)) _func)(target, v);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[366];
   ((void (GLAPIENTRY *)(GLenum target, GLshort s, GLshort t, GLshort r)) _func)(target, s, t, r);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord3sv(GLenum target, const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[367];
   ((void (GLAPIENTRY *)(GLenum target, const GLshort *v)) _func)(target, v);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[368];
   ((void (GLAPIENTRY *)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)) _func)(target, s, t, r, q);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord4dv(GLenum target, const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[369];
   ((void (GLAPIENTRY *)(GLenum target, const GLdouble *v)) _func)(target, v);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[370];
   ((void (GLAPIENTRY *)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)) _func)(target, s, t, r, q);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord4fvARB(GLenum target, const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[371];
   ((void (GLAPIENTRY *)(GLenum target, const GLfloat *v)) _func)(target, v);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[372];
   ((void (GLAPIENTRY *)(GLenum target, GLint s, GLint t, GLint r, GLint q)) _func)(target, s, t, r, q);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord4iv(GLenum target, const GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[373];
   ((void (GLAPIENTRY *)(GLenum target, const GLint *v)) _func)(target, v);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[374];
   ((void (GLAPIENTRY *)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)) _func)(target, s, t, r, q);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord4sv(GLenum target, const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[375];
   ((void (GLAPIENTRY *)(GLenum target, const GLshort *v)) _func)(target, v);
}

void GLAPIENTRY _dispatch_stub_CompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[376];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)) _func)(target, level, internalformat, width, border, imageSize, data);
}

void GLAPIENTRY _dispatch_stub_CompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[377];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)) _func)(target, level, internalformat, width, height, border, imageSize, data);
}

void GLAPIENTRY _dispatch_stub_CompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[378];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)) _func)(target, level, internalformat, width, height, depth, border, imageSize, data);
}

void GLAPIENTRY _dispatch_stub_CompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[379];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)) _func)(target, level, xoffset, width, format, imageSize, data);
}

void GLAPIENTRY _dispatch_stub_CompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[380];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)) _func)(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

void GLAPIENTRY _dispatch_stub_CompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[381];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)) _func)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

void GLAPIENTRY _dispatch_stub_GetCompressedTexImage(GLenum target, GLint level, GLvoid *img)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[382];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLvoid *img)) _func)(target, level, img);
}

void GLAPIENTRY _dispatch_stub_LoadTransposeMatrixd(const GLdouble *m)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[383];
   ((void (GLAPIENTRY *)(const GLdouble *m)) _func)(m);
}

void GLAPIENTRY _dispatch_stub_LoadTransposeMatrixf(const GLfloat *m)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[384];
   ((void (GLAPIENTRY *)(const GLfloat *m)) _func)(m);
}

void GLAPIENTRY _dispatch_stub_MultTransposeMatrixd(const GLdouble *m)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[385];
   ((void (GLAPIENTRY *)(const GLdouble *m)) _func)(m);
}

void GLAPIENTRY _dispatch_stub_MultTransposeMatrixf(const GLfloat *m)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[386];
   ((void (GLAPIENTRY *)(const GLfloat *m)) _func)(m);
}

void GLAPIENTRY _dispatch_stub_SampleCoverage(GLclampf value, GLboolean invert)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[387];
   ((void (GLAPIENTRY *)(GLclampf value, GLboolean invert)) _func)(value, invert);
}

void GLAPIENTRY _dispatch_stub_BlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[388];
   ((void (GLAPIENTRY *)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)) _func)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

void GLAPIENTRY _dispatch_stub_FogCoordPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[389];
   ((void (GLAPIENTRY *)(GLenum type, GLsizei stride, const GLvoid *pointer)) _func)(type, stride, pointer);
}

void GLAPIENTRY _dispatch_stub_FogCoordd(GLdouble coord)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[390];
   ((void (GLAPIENTRY *)(GLdouble coord)) _func)(coord);
}

void GLAPIENTRY _dispatch_stub_FogCoorddv(const GLdouble *coord)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[391];
   ((void (GLAPIENTRY *)(const GLdouble *coord)) _func)(coord);
}

void GLAPIENTRY _dispatch_stub_MultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[392];
   ((void (GLAPIENTRY *)(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)) _func)(mode, first, count, primcount);
}

void GLAPIENTRY _dispatch_stub_PointParameterf(GLenum pname, GLfloat param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[393];
   ((void (GLAPIENTRY *)(GLenum pname, GLfloat param)) _func)(pname, param);
}

void GLAPIENTRY _dispatch_stub_PointParameterfv(GLenum pname, const GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[394];
   ((void (GLAPIENTRY *)(GLenum pname, const GLfloat *params)) _func)(pname, params);
}

void GLAPIENTRY _dispatch_stub_PointParameteri(GLenum pname, GLint param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[395];
   ((void (GLAPIENTRY *)(GLenum pname, GLint param)) _func)(pname, param);
}

void GLAPIENTRY _dispatch_stub_PointParameteriv(GLenum pname, const GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[396];
   ((void (GLAPIENTRY *)(GLenum pname, const GLint *params)) _func)(pname, params);
}

void GLAPIENTRY _dispatch_stub_SecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[397];
   ((void (GLAPIENTRY *)(GLbyte red, GLbyte green, GLbyte blue)) _func)(red, green, blue);
}

void GLAPIENTRY _dispatch_stub_SecondaryColor3bv(const GLbyte *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[398];
   ((void (GLAPIENTRY *)(const GLbyte *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_SecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[399];
   ((void (GLAPIENTRY *)(GLdouble red, GLdouble green, GLdouble blue)) _func)(red, green, blue);
}

void GLAPIENTRY _dispatch_stub_SecondaryColor3dv(const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[400];
   ((void (GLAPIENTRY *)(const GLdouble *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_SecondaryColor3i(GLint red, GLint green, GLint blue)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[401];
   ((void (GLAPIENTRY *)(GLint red, GLint green, GLint blue)) _func)(red, green, blue);
}

void GLAPIENTRY _dispatch_stub_SecondaryColor3iv(const GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[402];
   ((void (GLAPIENTRY *)(const GLint *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_SecondaryColor3s(GLshort red, GLshort green, GLshort blue)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[403];
   ((void (GLAPIENTRY *)(GLshort red, GLshort green, GLshort blue)) _func)(red, green, blue);
}

void GLAPIENTRY _dispatch_stub_SecondaryColor3sv(const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[404];
   ((void (GLAPIENTRY *)(const GLshort *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_SecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[405];
   ((void (GLAPIENTRY *)(GLubyte red, GLubyte green, GLubyte blue)) _func)(red, green, blue);
}

void GLAPIENTRY _dispatch_stub_SecondaryColor3ubv(const GLubyte *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[406];
   ((void (GLAPIENTRY *)(const GLubyte *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_SecondaryColor3ui(GLuint red, GLuint green, GLuint blue)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[407];
   ((void (GLAPIENTRY *)(GLuint red, GLuint green, GLuint blue)) _func)(red, green, blue);
}

void GLAPIENTRY _dispatch_stub_SecondaryColor3uiv(const GLuint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[408];
   ((void (GLAPIENTRY *)(const GLuint *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_SecondaryColor3us(GLushort red, GLushort green, GLushort blue)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[409];
   ((void (GLAPIENTRY *)(GLushort red, GLushort green, GLushort blue)) _func)(red, green, blue);
}

void GLAPIENTRY _dispatch_stub_SecondaryColor3usv(const GLushort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[410];
   ((void (GLAPIENTRY *)(const GLushort *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_SecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[411];
   ((void (GLAPIENTRY *)(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)) _func)(size, type, stride, pointer);
}

void GLAPIENTRY _dispatch_stub_WindowPos2d(GLdouble x, GLdouble y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[412];
   ((void (GLAPIENTRY *)(GLdouble x, GLdouble y)) _func)(x, y);
}

void GLAPIENTRY _dispatch_stub_WindowPos2dv(const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[413];
   ((void (GLAPIENTRY *)(const GLdouble *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_WindowPos2f(GLfloat x, GLfloat y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[414];
   ((void (GLAPIENTRY *)(GLfloat x, GLfloat y)) _func)(x, y);
}

void GLAPIENTRY _dispatch_stub_WindowPos2fv(const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[415];
   ((void (GLAPIENTRY *)(const GLfloat *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_WindowPos2i(GLint x, GLint y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[416];
   ((void (GLAPIENTRY *)(GLint x, GLint y)) _func)(x, y);
}

void GLAPIENTRY _dispatch_stub_WindowPos2iv(const GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[417];
   ((void (GLAPIENTRY *)(const GLint *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_WindowPos2s(GLshort x, GLshort y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[418];
   ((void (GLAPIENTRY *)(GLshort x, GLshort y)) _func)(x, y);
}

void GLAPIENTRY _dispatch_stub_WindowPos2sv(const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[419];
   ((void (GLAPIENTRY *)(const GLshort *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_WindowPos3d(GLdouble x, GLdouble y, GLdouble z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[420];
   ((void (GLAPIENTRY *)(GLdouble x, GLdouble y, GLdouble z)) _func)(x, y, z);
}

void GLAPIENTRY _dispatch_stub_WindowPos3dv(const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[421];
   ((void (GLAPIENTRY *)(const GLdouble *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_WindowPos3f(GLfloat x, GLfloat y, GLfloat z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[422];
   ((void (GLAPIENTRY *)(GLfloat x, GLfloat y, GLfloat z)) _func)(x, y, z);
}

void GLAPIENTRY _dispatch_stub_WindowPos3fv(const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[423];
   ((void (GLAPIENTRY *)(const GLfloat *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_WindowPos3i(GLint x, GLint y, GLint z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[424];
   ((void (GLAPIENTRY *)(GLint x, GLint y, GLint z)) _func)(x, y, z);
}

void GLAPIENTRY _dispatch_stub_WindowPos3iv(const GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[425];
   ((void (GLAPIENTRY *)(const GLint *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_WindowPos3s(GLshort x, GLshort y, GLshort z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[426];
   ((void (GLAPIENTRY *)(GLshort x, GLshort y, GLshort z)) _func)(x, y, z);
}

void GLAPIENTRY _dispatch_stub_WindowPos3sv(const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[427];
   ((void (GLAPIENTRY *)(const GLshort *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_BeginQuery(GLenum target, GLuint id)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[428];
   ((void (GLAPIENTRY *)(GLenum target, GLuint id)) _func)(target, id);
}

void GLAPIENTRY _dispatch_stub_BindBuffer(GLenum target, GLuint buffer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[429];
   ((void (GLAPIENTRY *)(GLenum target, GLuint buffer)) _func)(target, buffer);
}

void GLAPIENTRY _dispatch_stub_BufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[430];
   ((void (GLAPIENTRY *)(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)) _func)(target, size, data, usage);
}

void GLAPIENTRY _dispatch_stub_BufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[431];
   ((void (GLAPIENTRY *)(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)) _func)(target, offset, size, data);
}

void GLAPIENTRY _dispatch_stub_DeleteBuffers(GLsizei n, const GLuint *buffer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[432];
   ((void (GLAPIENTRY *)(GLsizei n, const GLuint *buffer)) _func)(n, buffer);
}

void GLAPIENTRY _dispatch_stub_DeleteQueries(GLsizei n, const GLuint *ids)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[433];
   ((void (GLAPIENTRY *)(GLsizei n, const GLuint *ids)) _func)(n, ids);
}

void GLAPIENTRY _dispatch_stub_EndQuery(GLenum target)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[434];
   ((void (GLAPIENTRY *)(GLenum target)) _func)(target);
}

void GLAPIENTRY _dispatch_stub_GenBuffers(GLsizei n, GLuint *buffer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[435];
   ((void (GLAPIENTRY *)(GLsizei n, GLuint *buffer)) _func)(n, buffer);
}

void GLAPIENTRY _dispatch_stub_GenQueries(GLsizei n, GLuint *ids)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[436];
   ((void (GLAPIENTRY *)(GLsizei n, GLuint *ids)) _func)(n, ids);
}

void GLAPIENTRY _dispatch_stub_GetBufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[437];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetBufferPointerv(GLenum target, GLenum pname, GLvoid **params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[438];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLvoid **params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[439];
   ((void (GLAPIENTRY *)(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)) _func)(target, offset, size, data);
}

void GLAPIENTRY _dispatch_stub_GetQueryObjectiv(GLuint id, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[440];
   ((void (GLAPIENTRY *)(GLuint id, GLenum pname, GLint *params)) _func)(id, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[441];
   ((void (GLAPIENTRY *)(GLuint id, GLenum pname, GLuint *params)) _func)(id, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetQueryiv(GLenum target, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[442];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

GLboolean GLAPIENTRY _dispatch_stub_IsBuffer(GLuint buffer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[443];
   return ((GLboolean (GLAPIENTRY *)(GLuint buffer)) _func)(buffer);
}

GLboolean GLAPIENTRY _dispatch_stub_IsQuery(GLuint id)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[444];
   return ((GLboolean (GLAPIENTRY *)(GLuint id)) _func)(id);
}

GLvoid * GLAPIENTRY _dispatch_stub_MapBuffer(GLenum target, GLenum access)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[445];
   return ((GLvoid * (GLAPIENTRY *)(GLenum target, GLenum access)) _func)(target, access);
}

GLboolean GLAPIENTRY _dispatch_stub_UnmapBuffer(GLenum target)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[446];
   return ((GLboolean (GLAPIENTRY *)(GLenum target)) _func)(target);
}

void GLAPIENTRY _dispatch_stub_AttachShader(GLuint program, GLuint shader)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[447];
   ((void (GLAPIENTRY *)(GLuint program, GLuint shader)) _func)(program, shader);
}

void GLAPIENTRY _dispatch_stub_BindAttribLocation(GLuint program, GLuint index, const GLchar *name)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[448];
   ((void (GLAPIENTRY *)(GLuint program, GLuint index, const GLchar *name)) _func)(program, index, name);
}

void GLAPIENTRY _dispatch_stub_BlendEquationSeparate(GLenum modeRGB, GLenum modeA)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[449];
   ((void (GLAPIENTRY *)(GLenum modeRGB, GLenum modeA)) _func)(modeRGB, modeA);
}

void GLAPIENTRY _dispatch_stub_CompileShader(GLuint shader)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[450];
   ((void (GLAPIENTRY *)(GLuint shader)) _func)(shader);
}

GLuint GLAPIENTRY _dispatch_stub_CreateProgram(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[451];
   return ((GLuint (GLAPIENTRY *)(void)) _func)();
}

GLuint GLAPIENTRY _dispatch_stub_CreateShader(GLenum type)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[452];
   return ((GLuint (GLAPIENTRY *)(GLenum type)) _func)(type);
}

void GLAPIENTRY _dispatch_stub_DeleteProgram(GLuint program)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[453];
   ((void (GLAPIENTRY *)(GLuint program)) _func)(program);
}

void GLAPIENTRY _dispatch_stub_DeleteShader(GLuint program)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[454];
   ((void (GLAPIENTRY *)(GLuint program)) _func)(program);
}

void GLAPIENTRY _dispatch_stub_DetachShader(GLuint program, GLuint shader)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[455];
   ((void (GLAPIENTRY *)(GLuint program, GLuint shader)) _func)(program, shader);
}

void GLAPIENTRY _dispatch_stub_DisableVertexAttribArray(GLuint index)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[456];
   ((void (GLAPIENTRY *)(GLuint index)) _func)(index);
}

void GLAPIENTRY _dispatch_stub_DrawBuffers(GLsizei n, const GLenum *bufs)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[457];
   ((void (GLAPIENTRY *)(GLsizei n, const GLenum *bufs)) _func)(n, bufs);
}

void GLAPIENTRY _dispatch_stub_EnableVertexAttribArray(GLuint index)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[458];
   ((void (GLAPIENTRY *)(GLuint index)) _func)(index);
}

void GLAPIENTRY _dispatch_stub_GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[459];
   ((void (GLAPIENTRY *)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)) _func)(program, index, bufSize, length, size, type, name);
}

void GLAPIENTRY _dispatch_stub_GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[460];
   ((void (GLAPIENTRY *)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)) _func)(program, index, bufSize, length, size, type, name);
}

void GLAPIENTRY _dispatch_stub_GetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[461];
   ((void (GLAPIENTRY *)(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj)) _func)(program, maxCount, count, obj);
}

GLint GLAPIENTRY _dispatch_stub_GetAttribLocation(GLuint program, const GLchar *name)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[462];
   return ((GLint (GLAPIENTRY *)(GLuint program, const GLchar *name)) _func)(program, name);
}

void GLAPIENTRY _dispatch_stub_GetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[463];
   ((void (GLAPIENTRY *)(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)) _func)(program, bufSize, length, infoLog);
}

void GLAPIENTRY _dispatch_stub_GetProgramiv(GLuint program, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[464];
   ((void (GLAPIENTRY *)(GLuint program, GLenum pname, GLint *params)) _func)(program, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[465];
   ((void (GLAPIENTRY *)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)) _func)(shader, bufSize, length, infoLog);
}

void GLAPIENTRY _dispatch_stub_GetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[466];
   ((void (GLAPIENTRY *)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)) _func)(shader, bufSize, length, source);
}

void GLAPIENTRY _dispatch_stub_GetShaderiv(GLuint shader, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[467];
   ((void (GLAPIENTRY *)(GLuint shader, GLenum pname, GLint *params)) _func)(shader, pname, params);
}

GLint GLAPIENTRY _dispatch_stub_GetUniformLocation(GLuint program, const GLchar *name)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[468];
   return ((GLint (GLAPIENTRY *)(GLuint program, const GLchar *name)) _func)(program, name);
}

void GLAPIENTRY _dispatch_stub_GetUniformfv(GLuint program, GLint location, GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[469];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLfloat *params)) _func)(program, location, params);
}

void GLAPIENTRY _dispatch_stub_GetUniformiv(GLuint program, GLint location, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[470];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLint *params)) _func)(program, location, params);
}

void GLAPIENTRY _dispatch_stub_GetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid **pointer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[471];
   ((void (GLAPIENTRY *)(GLuint index, GLenum pname, GLvoid **pointer)) _func)(index, pname, pointer);
}

void GLAPIENTRY _dispatch_stub_GetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[472];
   ((void (GLAPIENTRY *)(GLuint index, GLenum pname, GLdouble *params)) _func)(index, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[473];
   ((void (GLAPIENTRY *)(GLuint index, GLenum pname, GLfloat *params)) _func)(index, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetVertexAttribiv(GLuint index, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[474];
   ((void (GLAPIENTRY *)(GLuint index, GLenum pname, GLint *params)) _func)(index, pname, params);
}

GLboolean GLAPIENTRY _dispatch_stub_IsProgram(GLuint program)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[475];
   return ((GLboolean (GLAPIENTRY *)(GLuint program)) _func)(program);
}

GLboolean GLAPIENTRY _dispatch_stub_IsShader(GLuint shader)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[476];
   return ((GLboolean (GLAPIENTRY *)(GLuint shader)) _func)(shader);
}

void GLAPIENTRY _dispatch_stub_LinkProgram(GLuint program)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[477];
   ((void (GLAPIENTRY *)(GLuint program)) _func)(program);
}

void GLAPIENTRY _dispatch_stub_ShaderSource(GLuint shader, GLsizei count, const GLchar * const *string, const GLint *length)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[478];
   ((void (GLAPIENTRY *)(GLuint shader, GLsizei count, const GLchar * const *string, const GLint *length)) _func)(shader, count, string, length);
}

void GLAPIENTRY _dispatch_stub_StencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[479];
   ((void (GLAPIENTRY *)(GLenum face, GLenum func, GLint ref, GLuint mask)) _func)(face, func, ref, mask);
}

void GLAPIENTRY _dispatch_stub_StencilMaskSeparate(GLenum face, GLuint mask)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[480];
   ((void (GLAPIENTRY *)(GLenum face, GLuint mask)) _func)(face, mask);
}

void GLAPIENTRY _dispatch_stub_StencilOpSeparate(GLenum face, GLenum sfail, GLenum zfail, GLenum zpass)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[481];
   ((void (GLAPIENTRY *)(GLenum face, GLenum sfail, GLenum zfail, GLenum zpass)) _func)(face, sfail, zfail, zpass);
}

void GLAPIENTRY _dispatch_stub_Uniform1f(GLint location, GLfloat v0)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[482];
   ((void (GLAPIENTRY *)(GLint location, GLfloat v0)) _func)(location, v0);
}

void GLAPIENTRY _dispatch_stub_Uniform1fv(GLint location, GLsizei count, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[483];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, const GLfloat *value)) _func)(location, count, value);
}

void GLAPIENTRY _dispatch_stub_Uniform1i(GLint location, GLint v0)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[484];
   ((void (GLAPIENTRY *)(GLint location, GLint v0)) _func)(location, v0);
}

void GLAPIENTRY _dispatch_stub_Uniform1iv(GLint location, GLsizei count, const GLint *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[485];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, const GLint *value)) _func)(location, count, value);
}

void GLAPIENTRY _dispatch_stub_Uniform2f(GLint location, GLfloat v0, GLfloat v1)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[486];
   ((void (GLAPIENTRY *)(GLint location, GLfloat v0, GLfloat v1)) _func)(location, v0, v1);
}

void GLAPIENTRY _dispatch_stub_Uniform2fv(GLint location, GLsizei count, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[487];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, const GLfloat *value)) _func)(location, count, value);
}

void GLAPIENTRY _dispatch_stub_Uniform2i(GLint location, GLint v0, GLint v1)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[488];
   ((void (GLAPIENTRY *)(GLint location, GLint v0, GLint v1)) _func)(location, v0, v1);
}

void GLAPIENTRY _dispatch_stub_Uniform2iv(GLint location, GLsizei count, const GLint *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[489];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, const GLint *value)) _func)(location, count, value);
}

void GLAPIENTRY _dispatch_stub_Uniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[490];
   ((void (GLAPIENTRY *)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)) _func)(location, v0, v1, v2);
}

void GLAPIENTRY _dispatch_stub_Uniform3fv(GLint location, GLsizei count, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[491];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, const GLfloat *value)) _func)(location, count, value);
}

void GLAPIENTRY _dispatch_stub_Uniform3i(GLint location, GLint v0, GLint v1, GLint v2)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[492];
   ((void (GLAPIENTRY *)(GLint location, GLint v0, GLint v1, GLint v2)) _func)(location, v0, v1, v2);
}

void GLAPIENTRY _dispatch_stub_Uniform3iv(GLint location, GLsizei count, const GLint *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[493];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, const GLint *value)) _func)(location, count, value);
}

void GLAPIENTRY _dispatch_stub_Uniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[494];
   ((void (GLAPIENTRY *)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)) _func)(location, v0, v1, v2, v3);
}

void GLAPIENTRY _dispatch_stub_Uniform4fv(GLint location, GLsizei count, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[495];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, const GLfloat *value)) _func)(location, count, value);
}

void GLAPIENTRY _dispatch_stub_Uniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[496];
   ((void (GLAPIENTRY *)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)) _func)(location, v0, v1, v2, v3);
}

void GLAPIENTRY _dispatch_stub_Uniform4iv(GLint location, GLsizei count, const GLint *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[497];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, const GLint *value)) _func)(location, count, value);
}

void GLAPIENTRY _dispatch_stub_UniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[498];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_UniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[499];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_UniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[500];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_UseProgram(GLuint program)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[501];
   ((void (GLAPIENTRY *)(GLuint program)) _func)(program);
}

void GLAPIENTRY _dispatch_stub_ValidateProgram(GLuint program)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[502];
   ((void (GLAPIENTRY *)(GLuint program)) _func)(program);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib1d(GLuint index, GLdouble x)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[503];
   ((void (GLAPIENTRY *)(GLuint index, GLdouble x)) _func)(index, x);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib1dv(GLuint index, const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[504];
   ((void (GLAPIENTRY *)(GLuint index, const GLdouble *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib1s(GLuint index, GLshort x)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[505];
   ((void (GLAPIENTRY *)(GLuint index, GLshort x)) _func)(index, x);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib1sv(GLuint index, const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[506];
   ((void (GLAPIENTRY *)(GLuint index, const GLshort *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib2d(GLuint index, GLdouble x, GLdouble y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[507];
   ((void (GLAPIENTRY *)(GLuint index, GLdouble x, GLdouble y)) _func)(index, x, y);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib2dv(GLuint index, const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[508];
   ((void (GLAPIENTRY *)(GLuint index, const GLdouble *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib2s(GLuint index, GLshort x, GLshort y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[509];
   ((void (GLAPIENTRY *)(GLuint index, GLshort x, GLshort y)) _func)(index, x, y);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib2sv(GLuint index, const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[510];
   ((void (GLAPIENTRY *)(GLuint index, const GLshort *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[511];
   ((void (GLAPIENTRY *)(GLuint index, GLdouble x, GLdouble y, GLdouble z)) _func)(index, x, y, z);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib3dv(GLuint index, const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[512];
   ((void (GLAPIENTRY *)(GLuint index, const GLdouble *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[513];
   ((void (GLAPIENTRY *)(GLuint index, GLshort x, GLshort y, GLshort z)) _func)(index, x, y, z);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib3sv(GLuint index, const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[514];
   ((void (GLAPIENTRY *)(GLuint index, const GLshort *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib4Nbv(GLuint index, const GLbyte *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[515];
   ((void (GLAPIENTRY *)(GLuint index, const GLbyte *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib4Niv(GLuint index, const GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[516];
   ((void (GLAPIENTRY *)(GLuint index, const GLint *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib4Nsv(GLuint index, const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[517];
   ((void (GLAPIENTRY *)(GLuint index, const GLshort *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[518];
   ((void (GLAPIENTRY *)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)) _func)(index, x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib4Nubv(GLuint index, const GLubyte *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[519];
   ((void (GLAPIENTRY *)(GLuint index, const GLubyte *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib4Nuiv(GLuint index, const GLuint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[520];
   ((void (GLAPIENTRY *)(GLuint index, const GLuint *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib4Nusv(GLuint index, const GLushort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[521];
   ((void (GLAPIENTRY *)(GLuint index, const GLushort *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib4bv(GLuint index, const GLbyte *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[522];
   ((void (GLAPIENTRY *)(GLuint index, const GLbyte *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[523];
   ((void (GLAPIENTRY *)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)) _func)(index, x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib4dv(GLuint index, const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[524];
   ((void (GLAPIENTRY *)(GLuint index, const GLdouble *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib4iv(GLuint index, const GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[525];
   ((void (GLAPIENTRY *)(GLuint index, const GLint *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[526];
   ((void (GLAPIENTRY *)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)) _func)(index, x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib4sv(GLuint index, const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[527];
   ((void (GLAPIENTRY *)(GLuint index, const GLshort *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib4ubv(GLuint index, const GLubyte *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[528];
   ((void (GLAPIENTRY *)(GLuint index, const GLubyte *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib4uiv(GLuint index, const GLuint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[529];
   ((void (GLAPIENTRY *)(GLuint index, const GLuint *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib4usv(GLuint index, const GLushort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[530];
   ((void (GLAPIENTRY *)(GLuint index, const GLushort *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[531];
   ((void (GLAPIENTRY *)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)) _func)(index, size, type, normalized, stride, pointer);
}

void GLAPIENTRY _dispatch_stub_UniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[532];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_UniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[533];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_UniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[534];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_UniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[535];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_UniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[536];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_UniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[537];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_BeginConditionalRender(GLuint query, GLenum mode)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[538];
   ((void (GLAPIENTRY *)(GLuint query, GLenum mode)) _func)(query, mode);
}

void GLAPIENTRY _dispatch_stub_BeginTransformFeedback(GLenum mode)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[539];
   ((void (GLAPIENTRY *)(GLenum mode)) _func)(mode);
}

void GLAPIENTRY _dispatch_stub_BindBufferBase(GLenum target, GLuint index, GLuint buffer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[540];
   ((void (GLAPIENTRY *)(GLenum target, GLuint index, GLuint buffer)) _func)(target, index, buffer);
}

void GLAPIENTRY _dispatch_stub_BindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[541];
   ((void (GLAPIENTRY *)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)) _func)(target, index, buffer, offset, size);
}

void GLAPIENTRY _dispatch_stub_BindFragDataLocation(GLuint program, GLuint colorNumber, const GLchar *name)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[542];
   ((void (GLAPIENTRY *)(GLuint program, GLuint colorNumber, const GLchar *name)) _func)(program, colorNumber, name);
}

void GLAPIENTRY _dispatch_stub_ClampColor(GLenum target, GLenum clamp)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[543];
   ((void (GLAPIENTRY *)(GLenum target, GLenum clamp)) _func)(target, clamp);
}

void GLAPIENTRY _dispatch_stub_ClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[544];
   ((void (GLAPIENTRY *)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)) _func)(buffer, drawbuffer, depth, stencil);
}

void GLAPIENTRY _dispatch_stub_ClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[545];
   ((void (GLAPIENTRY *)(GLenum buffer, GLint drawbuffer, const GLfloat *value)) _func)(buffer, drawbuffer, value);
}

void GLAPIENTRY _dispatch_stub_ClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[546];
   ((void (GLAPIENTRY *)(GLenum buffer, GLint drawbuffer, const GLint *value)) _func)(buffer, drawbuffer, value);
}

void GLAPIENTRY _dispatch_stub_ClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[547];
   ((void (GLAPIENTRY *)(GLenum buffer, GLint drawbuffer, const GLuint *value)) _func)(buffer, drawbuffer, value);
}

void GLAPIENTRY _dispatch_stub_ColorMaski(GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[548];
   ((void (GLAPIENTRY *)(GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a)) _func)(buf, r, g, b, a);
}

void GLAPIENTRY _dispatch_stub_Disablei(GLenum target, GLuint index)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[549];
   ((void (GLAPIENTRY *)(GLenum target, GLuint index)) _func)(target, index);
}

void GLAPIENTRY _dispatch_stub_Enablei(GLenum target, GLuint index)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[550];
   ((void (GLAPIENTRY *)(GLenum target, GLuint index)) _func)(target, index);
}

void GLAPIENTRY _dispatch_stub_EndConditionalRender(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[551];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_EndTransformFeedback(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[552];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_GetBooleani_v(GLenum value, GLuint index, GLboolean *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[553];
   ((void (GLAPIENTRY *)(GLenum value, GLuint index, GLboolean *data)) _func)(value, index, data);
}

GLint GLAPIENTRY _dispatch_stub_GetFragDataLocation(GLuint program, const GLchar *name)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[554];
   return ((GLint (GLAPIENTRY *)(GLuint program, const GLchar *name)) _func)(program, name);
}

void GLAPIENTRY _dispatch_stub_GetIntegeri_v(GLenum value, GLuint index, GLint *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[555];
   ((void (GLAPIENTRY *)(GLenum value, GLuint index, GLint *data)) _func)(value, index, data);
}

const GLubyte * GLAPIENTRY _dispatch_stub_GetStringi(GLenum name, GLuint index)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[556];
   return ((const GLubyte * (GLAPIENTRY *)(GLenum name, GLuint index)) _func)(name, index);
}

void GLAPIENTRY _dispatch_stub_GetTexParameterIiv(GLenum target, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[557];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[558];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLuint *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[559];
   ((void (GLAPIENTRY *)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)) _func)(program, index, bufSize, length, size, type, name);
}

void GLAPIENTRY _dispatch_stub_GetUniformuiv(GLuint program, GLint location, GLuint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[560];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLuint *params)) _func)(program, location, params);
}

void GLAPIENTRY _dispatch_stub_GetVertexAttribIiv(GLuint index, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[561];
   ((void (GLAPIENTRY *)(GLuint index, GLenum pname, GLint *params)) _func)(index, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[562];
   ((void (GLAPIENTRY *)(GLuint index, GLenum pname, GLuint *params)) _func)(index, pname, params);
}

GLboolean GLAPIENTRY _dispatch_stub_IsEnabledi(GLenum target, GLuint index)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[563];
   return ((GLboolean (GLAPIENTRY *)(GLenum target, GLuint index)) _func)(target, index);
}

void GLAPIENTRY _dispatch_stub_TexParameterIiv(GLenum target, GLenum pname, const GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[564];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, const GLint *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_TexParameterIuiv(GLenum target, GLenum pname, const GLuint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[565];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, const GLuint *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_TransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar * const *varyings, GLenum bufferMode)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[566];
   ((void (GLAPIENTRY *)(GLuint program, GLsizei count, const GLchar * const *varyings, GLenum bufferMode)) _func)(program, count, varyings, bufferMode);
}

void GLAPIENTRY _dispatch_stub_Uniform1ui(GLint location, GLuint x)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[567];
   ((void (GLAPIENTRY *)(GLint location, GLuint x)) _func)(location, x);
}

void GLAPIENTRY _dispatch_stub_Uniform1uiv(GLint location, GLsizei count, const GLuint *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[568];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, const GLuint *value)) _func)(location, count, value);
}

void GLAPIENTRY _dispatch_stub_Uniform2ui(GLint location, GLuint x, GLuint y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[569];
   ((void (GLAPIENTRY *)(GLint location, GLuint x, GLuint y)) _func)(location, x, y);
}

void GLAPIENTRY _dispatch_stub_Uniform2uiv(GLint location, GLsizei count, const GLuint *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[570];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, const GLuint *value)) _func)(location, count, value);
}

void GLAPIENTRY _dispatch_stub_Uniform3ui(GLint location, GLuint x, GLuint y, GLuint z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[571];
   ((void (GLAPIENTRY *)(GLint location, GLuint x, GLuint y, GLuint z)) _func)(location, x, y, z);
}

void GLAPIENTRY _dispatch_stub_Uniform3uiv(GLint location, GLsizei count, const GLuint *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[572];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, const GLuint *value)) _func)(location, count, value);
}

void GLAPIENTRY _dispatch_stub_Uniform4ui(GLint location, GLuint x, GLuint y, GLuint z, GLuint w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[573];
   ((void (GLAPIENTRY *)(GLint location, GLuint x, GLuint y, GLuint z, GLuint w)) _func)(location, x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_Uniform4uiv(GLint location, GLsizei count, const GLuint *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[574];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, const GLuint *value)) _func)(location, count, value);
}

void GLAPIENTRY _dispatch_stub_VertexAttribI1iv(GLuint index, const GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[575];
   ((void (GLAPIENTRY *)(GLuint index, const GLint *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribI1uiv(GLuint index, const GLuint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[576];
   ((void (GLAPIENTRY *)(GLuint index, const GLuint *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribI4bv(GLuint index, const GLbyte *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[577];
   ((void (GLAPIENTRY *)(GLuint index, const GLbyte *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribI4sv(GLuint index, const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[578];
   ((void (GLAPIENTRY *)(GLuint index, const GLshort *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribI4ubv(GLuint index, const GLubyte *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[579];
   ((void (GLAPIENTRY *)(GLuint index, const GLubyte *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribI4usv(GLuint index, const GLushort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[580];
   ((void (GLAPIENTRY *)(GLuint index, const GLushort *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[581];
   ((void (GLAPIENTRY *)(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)) _func)(index, size, type, stride, pointer);
}

void GLAPIENTRY _dispatch_stub_PrimitiveRestartIndex(GLuint index)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[582];
   ((void (GLAPIENTRY *)(GLuint index)) _func)(index);
}

void GLAPIENTRY _dispatch_stub_TexBuffer(GLenum target, GLenum internalFormat, GLuint buffer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[583];
   ((void (GLAPIENTRY *)(GLenum target, GLenum internalFormat, GLuint buffer)) _func)(target, internalFormat, buffer);
}

void GLAPIENTRY _dispatch_stub_FramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[584];
   ((void (GLAPIENTRY *)(GLenum target, GLenum attachment, GLuint texture, GLint level)) _func)(target, attachment, texture, level);
}

void GLAPIENTRY _dispatch_stub_GetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[585];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLint64 *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetInteger64i_v(GLenum cap, GLuint index, GLint64 *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[586];
   ((void (GLAPIENTRY *)(GLenum cap, GLuint index, GLint64 *data)) _func)(cap, index, data);
}

void GLAPIENTRY _dispatch_stub_VertexAttribDivisor(GLuint index, GLuint divisor)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[587];
   ((void (GLAPIENTRY *)(GLuint index, GLuint divisor)) _func)(index, divisor);
}

void GLAPIENTRY _dispatch_stub_MinSampleShading(GLfloat value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[588];
   ((void (GLAPIENTRY *)(GLfloat value)) _func)(value);
}

void GLAPIENTRY _dispatch_stub_MemoryBarrierByRegion(GLbitfield barriers)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[589];
   ((void (GLAPIENTRY *)(GLbitfield barriers)) _func)(barriers);
}

void GLAPIENTRY _dispatch_stub_BindProgramARB(GLenum target, GLuint program)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[590];
   ((void (GLAPIENTRY *)(GLenum target, GLuint program)) _func)(target, program);
}

void GLAPIENTRY _dispatch_stub_DeleteProgramsARB(GLsizei n, const GLuint *programs)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[591];
   ((void (GLAPIENTRY *)(GLsizei n, const GLuint *programs)) _func)(n, programs);
}

void GLAPIENTRY _dispatch_stub_GenProgramsARB(GLsizei n, GLuint *programs)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[592];
   ((void (GLAPIENTRY *)(GLsizei n, GLuint *programs)) _func)(n, programs);
}

void GLAPIENTRY _dispatch_stub_GetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[593];
   ((void (GLAPIENTRY *)(GLenum target, GLuint index, GLdouble *params)) _func)(target, index, params);
}

void GLAPIENTRY _dispatch_stub_GetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[594];
   ((void (GLAPIENTRY *)(GLenum target, GLuint index, GLfloat *params)) _func)(target, index, params);
}

void GLAPIENTRY _dispatch_stub_GetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[595];
   ((void (GLAPIENTRY *)(GLenum target, GLuint index, GLdouble *params)) _func)(target, index, params);
}

void GLAPIENTRY _dispatch_stub_GetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[596];
   ((void (GLAPIENTRY *)(GLenum target, GLuint index, GLfloat *params)) _func)(target, index, params);
}

void GLAPIENTRY _dispatch_stub_GetProgramStringARB(GLenum target, GLenum pname, GLvoid *string)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[597];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLvoid *string)) _func)(target, pname, string);
}

void GLAPIENTRY _dispatch_stub_GetProgramivARB(GLenum target, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[598];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

GLboolean GLAPIENTRY _dispatch_stub_IsProgramARB(GLuint program)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[599];
   return ((GLboolean (GLAPIENTRY *)(GLuint program)) _func)(program);
}

void GLAPIENTRY _dispatch_stub_ProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[600];
   ((void (GLAPIENTRY *)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)) _func)(target, index, x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_ProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[601];
   ((void (GLAPIENTRY *)(GLenum target, GLuint index, const GLdouble *params)) _func)(target, index, params);
}

void GLAPIENTRY _dispatch_stub_ProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[602];
   ((void (GLAPIENTRY *)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)) _func)(target, index, x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_ProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[603];
   ((void (GLAPIENTRY *)(GLenum target, GLuint index, const GLfloat *params)) _func)(target, index, params);
}

void GLAPIENTRY _dispatch_stub_ProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[604];
   ((void (GLAPIENTRY *)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)) _func)(target, index, x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_ProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[605];
   ((void (GLAPIENTRY *)(GLenum target, GLuint index, const GLdouble *params)) _func)(target, index, params);
}

void GLAPIENTRY _dispatch_stub_ProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[606];
   ((void (GLAPIENTRY *)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)) _func)(target, index, x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_ProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[607];
   ((void (GLAPIENTRY *)(GLenum target, GLuint index, const GLfloat *params)) _func)(target, index, params);
}

void GLAPIENTRY _dispatch_stub_ProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid *string)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[608];
   ((void (GLAPIENTRY *)(GLenum target, GLenum format, GLsizei len, const GLvoid *string)) _func)(target, format, len, string);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib1fARB(GLuint index, GLfloat x)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[609];
   ((void (GLAPIENTRY *)(GLuint index, GLfloat x)) _func)(index, x);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib1fvARB(GLuint index, const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[610];
   ((void (GLAPIENTRY *)(GLuint index, const GLfloat *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[611];
   ((void (GLAPIENTRY *)(GLuint index, GLfloat x, GLfloat y)) _func)(index, x, y);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib2fvARB(GLuint index, const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[612];
   ((void (GLAPIENTRY *)(GLuint index, const GLfloat *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[613];
   ((void (GLAPIENTRY *)(GLuint index, GLfloat x, GLfloat y, GLfloat z)) _func)(index, x, y, z);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib3fvARB(GLuint index, const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[614];
   ((void (GLAPIENTRY *)(GLuint index, const GLfloat *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[615];
   ((void (GLAPIENTRY *)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)) _func)(index, x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib4fvARB(GLuint index, const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[616];
   ((void (GLAPIENTRY *)(GLuint index, const GLfloat *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_AttachObjectARB(GLhandleARB containerObj, GLhandleARB obj)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[617];
   ((void (GLAPIENTRY *)(GLhandleARB containerObj, GLhandleARB obj)) _func)(containerObj, obj);
}

GLhandleARB GLAPIENTRY _dispatch_stub_CreateProgramObjectARB(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[618];
   return ((GLhandleARB (GLAPIENTRY *)(void)) _func)();
}

GLhandleARB GLAPIENTRY _dispatch_stub_CreateShaderObjectARB(GLenum shaderType)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[619];
   return ((GLhandleARB (GLAPIENTRY *)(GLenum shaderType)) _func)(shaderType);
}

void GLAPIENTRY _dispatch_stub_DeleteObjectARB(GLhandleARB obj)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[620];
   ((void (GLAPIENTRY *)(GLhandleARB obj)) _func)(obj);
}

void GLAPIENTRY _dispatch_stub_DetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[621];
   ((void (GLAPIENTRY *)(GLhandleARB containerObj, GLhandleARB attachedObj)) _func)(containerObj, attachedObj);
}

void GLAPIENTRY _dispatch_stub_GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxLength, GLsizei *length, GLhandleARB *infoLog)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[622];
   ((void (GLAPIENTRY *)(GLhandleARB containerObj, GLsizei maxLength, GLsizei *length, GLhandleARB *infoLog)) _func)(containerObj, maxLength, length, infoLog);
}

GLhandleARB GLAPIENTRY _dispatch_stub_GetHandleARB(GLenum pname)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[623];
   return ((GLhandleARB (GLAPIENTRY *)(GLenum pname)) _func)(pname);
}

void GLAPIENTRY _dispatch_stub_GetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[624];
   ((void (GLAPIENTRY *)(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)) _func)(obj, maxLength, length, infoLog);
}

void GLAPIENTRY _dispatch_stub_GetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[625];
   ((void (GLAPIENTRY *)(GLhandleARB obj, GLenum pname, GLfloat *params)) _func)(obj, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[626];
   ((void (GLAPIENTRY *)(GLhandleARB obj, GLenum pname, GLint *params)) _func)(obj, pname, params);
}

void GLAPIENTRY _dispatch_stub_DrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei primcount)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[627];
   ((void (GLAPIENTRY *)(GLenum mode, GLint first, GLsizei count, GLsizei primcount)) _func)(mode, first, count, primcount);
}

void GLAPIENTRY _dispatch_stub_DrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instance_count)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[628];
   ((void (GLAPIENTRY *)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instance_count)) _func)(mode, count, type, indices, instance_count);
}

void GLAPIENTRY _dispatch_stub_BindFramebuffer(GLenum target, GLuint framebuffer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[629];
   ((void (GLAPIENTRY *)(GLenum target, GLuint framebuffer)) _func)(target, framebuffer);
}

void GLAPIENTRY _dispatch_stub_BindRenderbuffer(GLenum target, GLuint renderbuffer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[630];
   ((void (GLAPIENTRY *)(GLenum target, GLuint renderbuffer)) _func)(target, renderbuffer);
}

void GLAPIENTRY _dispatch_stub_BlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[631];
   ((void (GLAPIENTRY *)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)) _func)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

GLenum GLAPIENTRY _dispatch_stub_CheckFramebufferStatus(GLenum target)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[632];
   return ((GLenum (GLAPIENTRY *)(GLenum target)) _func)(target);
}

void GLAPIENTRY _dispatch_stub_DeleteFramebuffers(GLsizei n, const GLuint *framebuffers)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[633];
   ((void (GLAPIENTRY *)(GLsizei n, const GLuint *framebuffers)) _func)(n, framebuffers);
}

void GLAPIENTRY _dispatch_stub_DeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[634];
   ((void (GLAPIENTRY *)(GLsizei n, const GLuint *renderbuffers)) _func)(n, renderbuffers);
}

void GLAPIENTRY _dispatch_stub_FramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[635];
   ((void (GLAPIENTRY *)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)) _func)(target, attachment, renderbuffertarget, renderbuffer);
}

void GLAPIENTRY _dispatch_stub_FramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[636];
   ((void (GLAPIENTRY *)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)) _func)(target, attachment, textarget, texture, level);
}

void GLAPIENTRY _dispatch_stub_FramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[637];
   ((void (GLAPIENTRY *)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)) _func)(target, attachment, textarget, texture, level);
}

void GLAPIENTRY _dispatch_stub_FramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[638];
   ((void (GLAPIENTRY *)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer)) _func)(target, attachment, textarget, texture, level, layer);
}

void GLAPIENTRY _dispatch_stub_FramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[639];
   ((void (GLAPIENTRY *)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)) _func)(target, attachment, texture, level, layer);
}

void GLAPIENTRY _dispatch_stub_GenFramebuffers(GLsizei n, GLuint *framebuffers)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[640];
   ((void (GLAPIENTRY *)(GLsizei n, GLuint *framebuffers)) _func)(n, framebuffers);
}

void GLAPIENTRY _dispatch_stub_GenRenderbuffers(GLsizei n, GLuint *renderbuffers)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[641];
   ((void (GLAPIENTRY *)(GLsizei n, GLuint *renderbuffers)) _func)(n, renderbuffers);
}

void GLAPIENTRY _dispatch_stub_GenerateMipmap(GLenum target)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[642];
   ((void (GLAPIENTRY *)(GLenum target)) _func)(target);
}

void GLAPIENTRY _dispatch_stub_GetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[643];
   ((void (GLAPIENTRY *)(GLenum target, GLenum attachment, GLenum pname, GLint *params)) _func)(target, attachment, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[644];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

GLboolean GLAPIENTRY _dispatch_stub_IsFramebuffer(GLuint framebuffer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[645];
   return ((GLboolean (GLAPIENTRY *)(GLuint framebuffer)) _func)(framebuffer);
}

GLboolean GLAPIENTRY _dispatch_stub_IsRenderbuffer(GLuint renderbuffer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[646];
   return ((GLboolean (GLAPIENTRY *)(GLuint renderbuffer)) _func)(renderbuffer);
}

void GLAPIENTRY _dispatch_stub_RenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[647];
   ((void (GLAPIENTRY *)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)) _func)(target, internalformat, width, height);
}

void GLAPIENTRY _dispatch_stub_RenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[648];
   ((void (GLAPIENTRY *)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)) _func)(target, samples, internalformat, width, height);
}

void GLAPIENTRY _dispatch_stub_FlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[649];
   ((void (GLAPIENTRY *)(GLenum target, GLintptr offset, GLsizeiptr length)) _func)(target, offset, length);
}

GLvoid * GLAPIENTRY _dispatch_stub_MapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[650];
   return ((GLvoid * (GLAPIENTRY *)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)) _func)(target, offset, length, access);
}

void GLAPIENTRY _dispatch_stub_BindVertexArray(GLuint array)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[651];
   ((void (GLAPIENTRY *)(GLuint array)) _func)(array);
}

void GLAPIENTRY _dispatch_stub_DeleteVertexArrays(GLsizei n, const GLuint *arrays)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[652];
   ((void (GLAPIENTRY *)(GLsizei n, const GLuint *arrays)) _func)(n, arrays);
}

void GLAPIENTRY _dispatch_stub_GenVertexArrays(GLsizei n, GLuint *arrays)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[653];
   ((void (GLAPIENTRY *)(GLsizei n, GLuint *arrays)) _func)(n, arrays);
}

GLboolean GLAPIENTRY _dispatch_stub_IsVertexArray(GLuint array)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[654];
   return ((GLboolean (GLAPIENTRY *)(GLuint array)) _func)(array);
}

void GLAPIENTRY _dispatch_stub_GetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[655];
   ((void (GLAPIENTRY *)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)) _func)(program, uniformBlockIndex, bufSize, length, uniformBlockName);
}

void GLAPIENTRY _dispatch_stub_GetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[656];
   ((void (GLAPIENTRY *)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)) _func)(program, uniformBlockIndex, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[657];
   ((void (GLAPIENTRY *)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)) _func)(program, uniformIndex, bufSize, length, uniformName);
}

void GLAPIENTRY _dispatch_stub_GetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[658];
   ((void (GLAPIENTRY *)(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)) _func)(program, uniformCount, uniformIndices, pname, params);
}

GLuint GLAPIENTRY _dispatch_stub_GetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[659];
   return ((GLuint (GLAPIENTRY *)(GLuint program, const GLchar *uniformBlockName)) _func)(program, uniformBlockName);
}

void GLAPIENTRY _dispatch_stub_GetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar * const *uniformNames, GLuint *uniformIndices)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[660];
   ((void (GLAPIENTRY *)(GLuint program, GLsizei uniformCount, const GLchar * const *uniformNames, GLuint *uniformIndices)) _func)(program, uniformCount, uniformNames, uniformIndices);
}

void GLAPIENTRY _dispatch_stub_UniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[661];
   ((void (GLAPIENTRY *)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)) _func)(program, uniformBlockIndex, uniformBlockBinding);
}

void GLAPIENTRY _dispatch_stub_CopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[662];
   ((void (GLAPIENTRY *)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)) _func)(readTarget, writeTarget, readOffset, writeOffset, size);
}

GLenum GLAPIENTRY _dispatch_stub_ClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[663];
   return ((GLenum (GLAPIENTRY *)(GLsync sync, GLbitfield flags, GLuint64 timeout)) _func)(sync, flags, timeout);
}

void GLAPIENTRY _dispatch_stub_DeleteSync(GLsync sync)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[664];
   ((void (GLAPIENTRY *)(GLsync sync)) _func)(sync);
}

GLsync GLAPIENTRY _dispatch_stub_FenceSync(GLenum condition, GLbitfield flags)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[665];
   return ((GLsync (GLAPIENTRY *)(GLenum condition, GLbitfield flags)) _func)(condition, flags);
}

void GLAPIENTRY _dispatch_stub_GetInteger64v(GLenum pname, GLint64 *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[666];
   ((void (GLAPIENTRY *)(GLenum pname, GLint64 *params)) _func)(pname, params);
}

void GLAPIENTRY _dispatch_stub_GetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[667];
   ((void (GLAPIENTRY *)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)) _func)(sync, pname, bufSize, length, values);
}

GLboolean GLAPIENTRY _dispatch_stub_IsSync(GLsync sync)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[668];
   return ((GLboolean (GLAPIENTRY *)(GLsync sync)) _func)(sync);
}

void GLAPIENTRY _dispatch_stub_WaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[669];
   ((void (GLAPIENTRY *)(GLsync sync, GLbitfield flags, GLuint64 timeout)) _func)(sync, flags, timeout);
}

void GLAPIENTRY _dispatch_stub_DrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[670];
   ((void (GLAPIENTRY *)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)) _func)(mode, count, type, indices, basevertex);
}

void GLAPIENTRY _dispatch_stub_DrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[671];
   ((void (GLAPIENTRY *)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex)) _func)(mode, count, type, indices, primcount, basevertex);
}

void GLAPIENTRY _dispatch_stub_DrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[672];
   ((void (GLAPIENTRY *)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex)) _func)(mode, start, end, count, type, indices, basevertex);
}

void GLAPIENTRY _dispatch_stub_MultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, const GLint *basevertex)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[673];
   ((void (GLAPIENTRY *)(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, const GLint *basevertex)) _func)(mode, count, type, indices, primcount, basevertex);
}

void GLAPIENTRY _dispatch_stub_ProvokingVertex(GLenum mode)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[674];
   ((void (GLAPIENTRY *)(GLenum mode)) _func)(mode);
}

void GLAPIENTRY _dispatch_stub_GetMultisamplefv(GLenum pname, GLuint index, GLfloat *val)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[675];
   ((void (GLAPIENTRY *)(GLenum pname, GLuint index, GLfloat *val)) _func)(pname, index, val);
}

void GLAPIENTRY _dispatch_stub_SampleMaski(GLuint index, GLbitfield mask)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[676];
   ((void (GLAPIENTRY *)(GLuint index, GLbitfield mask)) _func)(index, mask);
}

void GLAPIENTRY _dispatch_stub_TexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[677];
   ((void (GLAPIENTRY *)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)) _func)(target, samples, internalformat, width, height, fixedsamplelocations);
}

void GLAPIENTRY _dispatch_stub_TexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[678];
   ((void (GLAPIENTRY *)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)) _func)(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

void GLAPIENTRY _dispatch_stub_BlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeA)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[679];
   ((void (GLAPIENTRY *)(GLuint buf, GLenum modeRGB, GLenum modeA)) _func)(buf, modeRGB, modeA);
}

void GLAPIENTRY _dispatch_stub_BlendEquationiARB(GLuint buf, GLenum mode)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[680];
   ((void (GLAPIENTRY *)(GLuint buf, GLenum mode)) _func)(buf, mode);
}

void GLAPIENTRY _dispatch_stub_BlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcA, GLenum dstA)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[681];
   ((void (GLAPIENTRY *)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcA, GLenum dstA)) _func)(buf, srcRGB, dstRGB, srcA, dstA);
}

void GLAPIENTRY _dispatch_stub_BlendFunciARB(GLuint buf, GLenum src, GLenum dst)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[682];
   ((void (GLAPIENTRY *)(GLuint buf, GLenum src, GLenum dst)) _func)(buf, src, dst);
}

void GLAPIENTRY _dispatch_stub_BindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[683];
   ((void (GLAPIENTRY *)(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)) _func)(program, colorNumber, index, name);
}

GLint GLAPIENTRY _dispatch_stub_GetFragDataIndex(GLuint program, const GLchar *name)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[684];
   return ((GLint (GLAPIENTRY *)(GLuint program, const GLchar *name)) _func)(program, name);
}

void GLAPIENTRY _dispatch_stub_BindSampler(GLuint unit, GLuint sampler)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[685];
   ((void (GLAPIENTRY *)(GLuint unit, GLuint sampler)) _func)(unit, sampler);
}

void GLAPIENTRY _dispatch_stub_DeleteSamplers(GLsizei count, const GLuint *samplers)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[686];
   ((void (GLAPIENTRY *)(GLsizei count, const GLuint *samplers)) _func)(count, samplers);
}

void GLAPIENTRY _dispatch_stub_GenSamplers(GLsizei count, GLuint *samplers)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[687];
   ((void (GLAPIENTRY *)(GLsizei count, GLuint *samplers)) _func)(count, samplers);
}

void GLAPIENTRY _dispatch_stub_GetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[688];
   ((void (GLAPIENTRY *)(GLuint sampler, GLenum pname, GLint *params)) _func)(sampler, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[689];
   ((void (GLAPIENTRY *)(GLuint sampler, GLenum pname, GLuint *params)) _func)(sampler, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[690];
   ((void (GLAPIENTRY *)(GLuint sampler, GLenum pname, GLfloat *params)) _func)(sampler, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[691];
   ((void (GLAPIENTRY *)(GLuint sampler, GLenum pname, GLint *params)) _func)(sampler, pname, params);
}

GLboolean GLAPIENTRY _dispatch_stub_IsSampler(GLuint sampler)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[692];
   return ((GLboolean (GLAPIENTRY *)(GLuint sampler)) _func)(sampler);
}

void GLAPIENTRY _dispatch_stub_SamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[693];
   ((void (GLAPIENTRY *)(GLuint sampler, GLenum pname, const GLint *params)) _func)(sampler, pname, params);
}

void GLAPIENTRY _dispatch_stub_SamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[694];
   ((void (GLAPIENTRY *)(GLuint sampler, GLenum pname, const GLuint *params)) _func)(sampler, pname, params);
}

void GLAPIENTRY _dispatch_stub_SamplerParameterf(GLuint sampler, GLenum pname, GLfloat param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[695];
   ((void (GLAPIENTRY *)(GLuint sampler, GLenum pname, GLfloat param)) _func)(sampler, pname, param);
}

void GLAPIENTRY _dispatch_stub_SamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[696];
   ((void (GLAPIENTRY *)(GLuint sampler, GLenum pname, const GLfloat *params)) _func)(sampler, pname, params);
}

void GLAPIENTRY _dispatch_stub_SamplerParameteri(GLuint sampler, GLenum pname, GLint param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[697];
   ((void (GLAPIENTRY *)(GLuint sampler, GLenum pname, GLint param)) _func)(sampler, pname, param);
}

void GLAPIENTRY _dispatch_stub_SamplerParameteriv(GLuint sampler, GLenum pname, const GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[698];
   ((void (GLAPIENTRY *)(GLuint sampler, GLenum pname, const GLint *params)) _func)(sampler, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[699];
   ((void (GLAPIENTRY *)(GLuint id, GLenum pname, GLint64 *params)) _func)(id, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[700];
   ((void (GLAPIENTRY *)(GLuint id, GLenum pname, GLuint64 *params)) _func)(id, pname, params);
}

void GLAPIENTRY _dispatch_stub_QueryCounter(GLuint id, GLenum target)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[701];
   ((void (GLAPIENTRY *)(GLuint id, GLenum target)) _func)(id, target);
}

void GLAPIENTRY _dispatch_stub_ColorP3ui(GLenum type, GLuint color)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[702];
   ((void (GLAPIENTRY *)(GLenum type, GLuint color)) _func)(type, color);
}

void GLAPIENTRY _dispatch_stub_ColorP3uiv(GLenum type, const GLuint *color)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[703];
   ((void (GLAPIENTRY *)(GLenum type, const GLuint *color)) _func)(type, color);
}

void GLAPIENTRY _dispatch_stub_ColorP4ui(GLenum type, GLuint color)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[704];
   ((void (GLAPIENTRY *)(GLenum type, GLuint color)) _func)(type, color);
}

void GLAPIENTRY _dispatch_stub_ColorP4uiv(GLenum type, const GLuint *color)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[705];
   ((void (GLAPIENTRY *)(GLenum type, const GLuint *color)) _func)(type, color);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[706];
   ((void (GLAPIENTRY *)(GLenum texture, GLenum type, GLuint coords)) _func)(texture, type, coords);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[707];
   ((void (GLAPIENTRY *)(GLenum texture, GLenum type, const GLuint *coords)) _func)(texture, type, coords);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[708];
   ((void (GLAPIENTRY *)(GLenum texture, GLenum type, GLuint coords)) _func)(texture, type, coords);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[709];
   ((void (GLAPIENTRY *)(GLenum texture, GLenum type, const GLuint *coords)) _func)(texture, type, coords);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[710];
   ((void (GLAPIENTRY *)(GLenum texture, GLenum type, GLuint coords)) _func)(texture, type, coords);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[711];
   ((void (GLAPIENTRY *)(GLenum texture, GLenum type, const GLuint *coords)) _func)(texture, type, coords);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[712];
   ((void (GLAPIENTRY *)(GLenum texture, GLenum type, GLuint coords)) _func)(texture, type, coords);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[713];
   ((void (GLAPIENTRY *)(GLenum texture, GLenum type, const GLuint *coords)) _func)(texture, type, coords);
}

void GLAPIENTRY _dispatch_stub_NormalP3ui(GLenum type, GLuint coords)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[714];
   ((void (GLAPIENTRY *)(GLenum type, GLuint coords)) _func)(type, coords);
}

void GLAPIENTRY _dispatch_stub_NormalP3uiv(GLenum type, const GLuint *coords)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[715];
   ((void (GLAPIENTRY *)(GLenum type, const GLuint *coords)) _func)(type, coords);
}

void GLAPIENTRY _dispatch_stub_SecondaryColorP3ui(GLenum type, GLuint color)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[716];
   ((void (GLAPIENTRY *)(GLenum type, GLuint color)) _func)(type, color);
}

void GLAPIENTRY _dispatch_stub_SecondaryColorP3uiv(GLenum type, const GLuint *color)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[717];
   ((void (GLAPIENTRY *)(GLenum type, const GLuint *color)) _func)(type, color);
}

void GLAPIENTRY _dispatch_stub_TexCoordP1ui(GLenum type, GLuint coords)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[718];
   ((void (GLAPIENTRY *)(GLenum type, GLuint coords)) _func)(type, coords);
}

void GLAPIENTRY _dispatch_stub_TexCoordP1uiv(GLenum type, const GLuint *coords)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[719];
   ((void (GLAPIENTRY *)(GLenum type, const GLuint *coords)) _func)(type, coords);
}

void GLAPIENTRY _dispatch_stub_TexCoordP2ui(GLenum type, GLuint coords)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[720];
   ((void (GLAPIENTRY *)(GLenum type, GLuint coords)) _func)(type, coords);
}

void GLAPIENTRY _dispatch_stub_TexCoordP2uiv(GLenum type, const GLuint *coords)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[721];
   ((void (GLAPIENTRY *)(GLenum type, const GLuint *coords)) _func)(type, coords);
}

void GLAPIENTRY _dispatch_stub_TexCoordP3ui(GLenum type, GLuint coords)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[722];
   ((void (GLAPIENTRY *)(GLenum type, GLuint coords)) _func)(type, coords);
}

void GLAPIENTRY _dispatch_stub_TexCoordP3uiv(GLenum type, const GLuint *coords)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[723];
   ((void (GLAPIENTRY *)(GLenum type, const GLuint *coords)) _func)(type, coords);
}

void GLAPIENTRY _dispatch_stub_TexCoordP4ui(GLenum type, GLuint coords)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[724];
   ((void (GLAPIENTRY *)(GLenum type, GLuint coords)) _func)(type, coords);
}

void GLAPIENTRY _dispatch_stub_TexCoordP4uiv(GLenum type, const GLuint *coords)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[725];
   ((void (GLAPIENTRY *)(GLenum type, const GLuint *coords)) _func)(type, coords);
}

void GLAPIENTRY _dispatch_stub_VertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[726];
   ((void (GLAPIENTRY *)(GLuint index, GLenum type, GLboolean normalized, GLuint value)) _func)(index, type, normalized, value);
}

void GLAPIENTRY _dispatch_stub_VertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[727];
   ((void (GLAPIENTRY *)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)) _func)(index, type, normalized, value);
}

void GLAPIENTRY _dispatch_stub_VertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[728];
   ((void (GLAPIENTRY *)(GLuint index, GLenum type, GLboolean normalized, GLuint value)) _func)(index, type, normalized, value);
}

void GLAPIENTRY _dispatch_stub_VertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[729];
   ((void (GLAPIENTRY *)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)) _func)(index, type, normalized, value);
}

void GLAPIENTRY _dispatch_stub_VertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[730];
   ((void (GLAPIENTRY *)(GLuint index, GLenum type, GLboolean normalized, GLuint value)) _func)(index, type, normalized, value);
}

void GLAPIENTRY _dispatch_stub_VertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[731];
   ((void (GLAPIENTRY *)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)) _func)(index, type, normalized, value);
}

void GLAPIENTRY _dispatch_stub_VertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[732];
   ((void (GLAPIENTRY *)(GLuint index, GLenum type, GLboolean normalized, GLuint value)) _func)(index, type, normalized, value);
}

void GLAPIENTRY _dispatch_stub_VertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[733];
   ((void (GLAPIENTRY *)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)) _func)(index, type, normalized, value);
}

void GLAPIENTRY _dispatch_stub_VertexP2ui(GLenum type, GLuint value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[734];
   ((void (GLAPIENTRY *)(GLenum type, GLuint value)) _func)(type, value);
}

void GLAPIENTRY _dispatch_stub_VertexP2uiv(GLenum type, const GLuint *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[735];
   ((void (GLAPIENTRY *)(GLenum type, const GLuint *value)) _func)(type, value);
}

void GLAPIENTRY _dispatch_stub_VertexP3ui(GLenum type, GLuint value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[736];
   ((void (GLAPIENTRY *)(GLenum type, GLuint value)) _func)(type, value);
}

void GLAPIENTRY _dispatch_stub_VertexP3uiv(GLenum type, const GLuint *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[737];
   ((void (GLAPIENTRY *)(GLenum type, const GLuint *value)) _func)(type, value);
}

void GLAPIENTRY _dispatch_stub_VertexP4ui(GLenum type, GLuint value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[738];
   ((void (GLAPIENTRY *)(GLenum type, GLuint value)) _func)(type, value);
}

void GLAPIENTRY _dispatch_stub_VertexP4uiv(GLenum type, const GLuint *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[739];
   ((void (GLAPIENTRY *)(GLenum type, const GLuint *value)) _func)(type, value);
}

void GLAPIENTRY _dispatch_stub_DrawArraysIndirect(GLenum mode, const GLvoid *indirect)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[740];
   ((void (GLAPIENTRY *)(GLenum mode, const GLvoid *indirect)) _func)(mode, indirect);
}

void GLAPIENTRY _dispatch_stub_DrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[741];
   ((void (GLAPIENTRY *)(GLenum mode, GLenum type, const GLvoid *indirect)) _func)(mode, type, indirect);
}

void GLAPIENTRY _dispatch_stub_GetUniformdv(GLuint program, GLint location, GLdouble *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[742];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLdouble *params)) _func)(program, location, params);
}

void GLAPIENTRY _dispatch_stub_Uniform1d(GLint location, GLdouble x)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[743];
   ((void (GLAPIENTRY *)(GLint location, GLdouble x)) _func)(location, x);
}

void GLAPIENTRY _dispatch_stub_Uniform1dv(GLint location, GLsizei count, const GLdouble *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[744];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, const GLdouble *value)) _func)(location, count, value);
}

void GLAPIENTRY _dispatch_stub_Uniform2d(GLint location, GLdouble x, GLdouble y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[745];
   ((void (GLAPIENTRY *)(GLint location, GLdouble x, GLdouble y)) _func)(location, x, y);
}

void GLAPIENTRY _dispatch_stub_Uniform2dv(GLint location, GLsizei count, const GLdouble *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[746];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, const GLdouble *value)) _func)(location, count, value);
}

void GLAPIENTRY _dispatch_stub_Uniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[747];
   ((void (GLAPIENTRY *)(GLint location, GLdouble x, GLdouble y, GLdouble z)) _func)(location, x, y, z);
}

void GLAPIENTRY _dispatch_stub_Uniform3dv(GLint location, GLsizei count, const GLdouble *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[748];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, const GLdouble *value)) _func)(location, count, value);
}

void GLAPIENTRY _dispatch_stub_Uniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[749];
   ((void (GLAPIENTRY *)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)) _func)(location, x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_Uniform4dv(GLint location, GLsizei count, const GLdouble *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[750];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, const GLdouble *value)) _func)(location, count, value);
}

void GLAPIENTRY _dispatch_stub_UniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[751];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)) _func)(location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_UniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[752];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)) _func)(location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_UniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[753];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)) _func)(location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_UniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[754];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)) _func)(location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_UniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[755];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)) _func)(location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_UniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[756];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)) _func)(location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_UniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[757];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)) _func)(location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_UniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[758];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)) _func)(location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_UniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[759];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)) _func)(location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_GetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[760];
   ((void (GLAPIENTRY *)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name)) _func)(program, shadertype, index, bufsize, length, name);
}

void GLAPIENTRY _dispatch_stub_GetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[761];
   ((void (GLAPIENTRY *)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name)) _func)(program, shadertype, index, bufsize, length, name);
}

void GLAPIENTRY _dispatch_stub_GetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[762];
   ((void (GLAPIENTRY *)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values)) _func)(program, shadertype, index, pname, values);
}

void GLAPIENTRY _dispatch_stub_GetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[763];
   ((void (GLAPIENTRY *)(GLuint program, GLenum shadertype, GLenum pname, GLint *values)) _func)(program, shadertype, pname, values);
}

GLuint GLAPIENTRY _dispatch_stub_GetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar *name)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[764];
   return ((GLuint (GLAPIENTRY *)(GLuint program, GLenum shadertype, const GLchar *name)) _func)(program, shadertype, name);
}

GLint GLAPIENTRY _dispatch_stub_GetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar *name)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[765];
   return ((GLint (GLAPIENTRY *)(GLuint program, GLenum shadertype, const GLchar *name)) _func)(program, shadertype, name);
}

void GLAPIENTRY _dispatch_stub_GetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[766];
   ((void (GLAPIENTRY *)(GLenum shadertype, GLint location, GLuint *params)) _func)(shadertype, location, params);
}

void GLAPIENTRY _dispatch_stub_UniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint *indices)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[767];
   ((void (GLAPIENTRY *)(GLenum shadertype, GLsizei count, const GLuint *indices)) _func)(shadertype, count, indices);
}

void GLAPIENTRY _dispatch_stub_PatchParameterfv(GLenum pname, const GLfloat *values)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[768];
   ((void (GLAPIENTRY *)(GLenum pname, const GLfloat *values)) _func)(pname, values);
}

void GLAPIENTRY _dispatch_stub_PatchParameteri(GLenum pname, GLint value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[769];
   ((void (GLAPIENTRY *)(GLenum pname, GLint value)) _func)(pname, value);
}

void GLAPIENTRY _dispatch_stub_BindTransformFeedback(GLenum target, GLuint id)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[770];
   ((void (GLAPIENTRY *)(GLenum target, GLuint id)) _func)(target, id);
}

void GLAPIENTRY _dispatch_stub_DeleteTransformFeedbacks(GLsizei n, const GLuint *ids)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[771];
   ((void (GLAPIENTRY *)(GLsizei n, const GLuint *ids)) _func)(n, ids);
}

void GLAPIENTRY _dispatch_stub_DrawTransformFeedback(GLenum mode, GLuint id)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[772];
   ((void (GLAPIENTRY *)(GLenum mode, GLuint id)) _func)(mode, id);
}

void GLAPIENTRY _dispatch_stub_GenTransformFeedbacks(GLsizei n, GLuint *ids)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[773];
   ((void (GLAPIENTRY *)(GLsizei n, GLuint *ids)) _func)(n, ids);
}

GLboolean GLAPIENTRY _dispatch_stub_IsTransformFeedback(GLuint id)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[774];
   return ((GLboolean (GLAPIENTRY *)(GLuint id)) _func)(id);
}

void GLAPIENTRY _dispatch_stub_PauseTransformFeedback(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[775];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_ResumeTransformFeedback(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[776];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_BeginQueryIndexed(GLenum target, GLuint index, GLuint id)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[777];
   ((void (GLAPIENTRY *)(GLenum target, GLuint index, GLuint id)) _func)(target, index, id);
}

void GLAPIENTRY _dispatch_stub_DrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[778];
   ((void (GLAPIENTRY *)(GLenum mode, GLuint id, GLuint stream)) _func)(mode, id, stream);
}

void GLAPIENTRY _dispatch_stub_EndQueryIndexed(GLenum target, GLuint index)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[779];
   ((void (GLAPIENTRY *)(GLenum target, GLuint index)) _func)(target, index);
}

void GLAPIENTRY _dispatch_stub_GetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[780];
   ((void (GLAPIENTRY *)(GLenum target, GLuint index, GLenum pname, GLint *params)) _func)(target, index, pname, params);
}

void GLAPIENTRY _dispatch_stub_ClearDepthf(GLclampf depth)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[781];
   ((void (GLAPIENTRY *)(GLclampf depth)) _func)(depth);
}

void GLAPIENTRY _dispatch_stub_DepthRangef(GLclampf zNear, GLclampf zFar)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[782];
   ((void (GLAPIENTRY *)(GLclampf zNear, GLclampf zFar)) _func)(zNear, zFar);
}

void GLAPIENTRY _dispatch_stub_GetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[783];
   ((void (GLAPIENTRY *)(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)) _func)(shadertype, precisiontype, range, precision);
}

void GLAPIENTRY _dispatch_stub_ReleaseShaderCompiler(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[784];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_ShaderBinary(GLsizei n, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[785];
   ((void (GLAPIENTRY *)(GLsizei n, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length)) _func)(n, shaders, binaryformat, binary, length);
}

void GLAPIENTRY _dispatch_stub_GetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[786];
   ((void (GLAPIENTRY *)(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary)) _func)(program, bufSize, length, binaryFormat, binary);
}

void GLAPIENTRY _dispatch_stub_ProgramBinary(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[787];
   ((void (GLAPIENTRY *)(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length)) _func)(program, binaryFormat, binary, length);
}

void GLAPIENTRY _dispatch_stub_ProgramParameteri(GLuint program, GLenum pname, GLint value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[788];
   ((void (GLAPIENTRY *)(GLuint program, GLenum pname, GLint value)) _func)(program, pname, value);
}

void GLAPIENTRY _dispatch_stub_GetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[789];
   ((void (GLAPIENTRY *)(GLuint index, GLenum pname, GLdouble *params)) _func)(index, pname, params);
}

void GLAPIENTRY _dispatch_stub_VertexAttribL1d(GLuint index, GLdouble x)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[790];
   ((void (GLAPIENTRY *)(GLuint index, GLdouble x)) _func)(index, x);
}

void GLAPIENTRY _dispatch_stub_VertexAttribL1dv(GLuint index, const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[791];
   ((void (GLAPIENTRY *)(GLuint index, const GLdouble *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribL2d(GLuint index, GLdouble x, GLdouble y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[792];
   ((void (GLAPIENTRY *)(GLuint index, GLdouble x, GLdouble y)) _func)(index, x, y);
}

void GLAPIENTRY _dispatch_stub_VertexAttribL2dv(GLuint index, const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[793];
   ((void (GLAPIENTRY *)(GLuint index, const GLdouble *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[794];
   ((void (GLAPIENTRY *)(GLuint index, GLdouble x, GLdouble y, GLdouble z)) _func)(index, x, y, z);
}

void GLAPIENTRY _dispatch_stub_VertexAttribL3dv(GLuint index, const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[795];
   ((void (GLAPIENTRY *)(GLuint index, const GLdouble *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[796];
   ((void (GLAPIENTRY *)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)) _func)(index, x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_VertexAttribL4dv(GLuint index, const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[797];
   ((void (GLAPIENTRY *)(GLuint index, const GLdouble *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[798];
   ((void (GLAPIENTRY *)(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)) _func)(index, size, type, stride, pointer);
}

void GLAPIENTRY _dispatch_stub_DepthRangeArrayv(GLuint first, GLsizei count, const GLclampd *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[799];
   ((void (GLAPIENTRY *)(GLuint first, GLsizei count, const GLclampd *v)) _func)(first, count, v);
}

void GLAPIENTRY _dispatch_stub_DepthRangeIndexed(GLuint index, GLclampd n, GLclampd f)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[800];
   ((void (GLAPIENTRY *)(GLuint index, GLclampd n, GLclampd f)) _func)(index, n, f);
}

void GLAPIENTRY _dispatch_stub_GetDoublei_v(GLenum target, GLuint index, GLdouble *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[801];
   ((void (GLAPIENTRY *)(GLenum target, GLuint index, GLdouble *data)) _func)(target, index, data);
}

void GLAPIENTRY _dispatch_stub_GetFloati_v(GLenum target, GLuint index, GLfloat *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[802];
   ((void (GLAPIENTRY *)(GLenum target, GLuint index, GLfloat *data)) _func)(target, index, data);
}

void GLAPIENTRY _dispatch_stub_ScissorArrayv(GLuint first, GLsizei count, const int *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[803];
   ((void (GLAPIENTRY *)(GLuint first, GLsizei count, const int *v)) _func)(first, count, v);
}

void GLAPIENTRY _dispatch_stub_ScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[804];
   ((void (GLAPIENTRY *)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)) _func)(index, left, bottom, width, height);
}

void GLAPIENTRY _dispatch_stub_ScissorIndexedv(GLuint index, const GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[805];
   ((void (GLAPIENTRY *)(GLuint index, const GLint *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_ViewportArrayv(GLuint first, GLsizei count, const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[806];
   ((void (GLAPIENTRY *)(GLuint first, GLsizei count, const GLfloat *v)) _func)(first, count, v);
}

void GLAPIENTRY _dispatch_stub_ViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[807];
   ((void (GLAPIENTRY *)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)) _func)(index, x, y, w, h);
}

void GLAPIENTRY _dispatch_stub_ViewportIndexedfv(GLuint index, const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[808];
   ((void (GLAPIENTRY *)(GLuint index, const GLfloat *v)) _func)(index, v);
}

GLenum GLAPIENTRY _dispatch_stub_GetGraphicsResetStatusARB(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[809];
   return ((GLenum (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_GetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, GLvoid *img)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[810];
   ((void (GLAPIENTRY *)(GLenum target, GLint lod, GLsizei bufSize, GLvoid *img)) _func)(target, lod, bufSize, img);
}

void GLAPIENTRY _dispatch_stub_GetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[811];
   ((void (GLAPIENTRY *)(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)) _func)(target, query, bufSize, v);
}

void GLAPIENTRY _dispatch_stub_GetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[812];
   ((void (GLAPIENTRY *)(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)) _func)(target, query, bufSize, v);
}

void GLAPIENTRY _dispatch_stub_GetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[813];
   ((void (GLAPIENTRY *)(GLenum target, GLenum query, GLsizei bufSize, GLint *v)) _func)(target, query, bufSize, v);
}

void GLAPIENTRY _dispatch_stub_GetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat *values)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[814];
   ((void (GLAPIENTRY *)(GLenum map, GLsizei bufSize, GLfloat *values)) _func)(map, bufSize, values);
}

void GLAPIENTRY _dispatch_stub_GetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint *values)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[815];
   ((void (GLAPIENTRY *)(GLenum map, GLsizei bufSize, GLuint *values)) _func)(map, bufSize, values);
}

void GLAPIENTRY _dispatch_stub_GetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort *values)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[816];
   ((void (GLAPIENTRY *)(GLenum map, GLsizei bufSize, GLushort *values)) _func)(map, bufSize, values);
}

void GLAPIENTRY _dispatch_stub_GetnPolygonStippleARB(GLsizei bufSize, GLubyte *pattern)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[817];
   ((void (GLAPIENTRY *)(GLsizei bufSize, GLubyte *pattern)) _func)(bufSize, pattern);
}

void GLAPIENTRY _dispatch_stub_GetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[818];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img)) _func)(target, level, format, type, bufSize, img);
}

void GLAPIENTRY _dispatch_stub_GetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[819];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei bufSize, GLdouble *params)) _func)(program, location, bufSize, params);
}

void GLAPIENTRY _dispatch_stub_GetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[820];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)) _func)(program, location, bufSize, params);
}

void GLAPIENTRY _dispatch_stub_GetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[821];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei bufSize, GLint *params)) _func)(program, location, bufSize, params);
}

void GLAPIENTRY _dispatch_stub_GetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[822];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei bufSize, GLuint *params)) _func)(program, location, bufSize, params);
}

void GLAPIENTRY _dispatch_stub_ReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[823];
   ((void (GLAPIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data)) _func)(x, y, width, height, format, type, bufSize, data);
}

void GLAPIENTRY _dispatch_stub_DrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instance_count, GLuint baseinstance)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[824];
   ((void (GLAPIENTRY *)(GLenum mode, GLint first, GLsizei count, GLsizei instance_count, GLuint baseinstance)) _func)(mode, first, count, instance_count, baseinstance);
}

void GLAPIENTRY _dispatch_stub_DrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLuint baseinstance)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[825];
   ((void (GLAPIENTRY *)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLuint baseinstance)) _func)(mode, count, type, indices, primcount, baseinstance);
}

void GLAPIENTRY _dispatch_stub_DrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instance_count, GLint basevertex, GLuint baseinstance)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[826];
   ((void (GLAPIENTRY *)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instance_count, GLint basevertex, GLuint baseinstance)) _func)(mode, count, type, indices, instance_count, basevertex, baseinstance);
}

void GLAPIENTRY _dispatch_stub_DrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei primcount)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[827];
   ((void (GLAPIENTRY *)(GLenum mode, GLuint id, GLsizei primcount)) _func)(mode, id, primcount);
}

void GLAPIENTRY _dispatch_stub_DrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei primcount)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[828];
   ((void (GLAPIENTRY *)(GLenum mode, GLuint id, GLuint stream, GLsizei primcount)) _func)(mode, id, stream, primcount);
}

void GLAPIENTRY _dispatch_stub_GetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[829];
   ((void (GLAPIENTRY *)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)) _func)(target, internalformat, pname, bufSize, params);
}

void GLAPIENTRY _dispatch_stub_GetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[830];
   ((void (GLAPIENTRY *)(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params)) _func)(program, bufferIndex, pname, params);
}

void GLAPIENTRY _dispatch_stub_BindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[831];
   ((void (GLAPIENTRY *)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)) _func)(unit, texture, level, layered, layer, access, format);
}

void GLAPIENTRY _dispatch_stub_MemoryBarrier(GLbitfield barriers)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[832];
   ((void (GLAPIENTRY *)(GLbitfield barriers)) _func)(barriers);
}

void GLAPIENTRY _dispatch_stub_TexStorage1D(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[833];
   ((void (GLAPIENTRY *)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width)) _func)(target, levels, internalFormat, width);
}

void GLAPIENTRY _dispatch_stub_TexStorage2D(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[834];
   ((void (GLAPIENTRY *)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height)) _func)(target, levels, internalFormat, width, height);
}

void GLAPIENTRY _dispatch_stub_TexStorage3D(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[835];
   ((void (GLAPIENTRY *)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth)) _func)(target, levels, internalFormat, width, height, depth);
}

void GLAPIENTRY _dispatch_stub_TextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[836];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width)) _func)(texture, target, levels, internalFormat, width);
}

void GLAPIENTRY _dispatch_stub_TextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[837];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height)) _func)(texture, target, levels, internalFormat, width, height);
}

void GLAPIENTRY _dispatch_stub_TextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[838];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth)) _func)(texture, target, levels, internalFormat, width, height, depth);
}

void GLAPIENTRY _dispatch_stub_ClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[839];
   ((void (GLAPIENTRY *)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)) _func)(target, internalformat, format, type, data);
}

void GLAPIENTRY _dispatch_stub_ClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[840];
   ((void (GLAPIENTRY *)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)) _func)(target, internalformat, offset, size, format, type, data);
}

void GLAPIENTRY _dispatch_stub_DispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[841];
   ((void (GLAPIENTRY *)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)) _func)(num_groups_x, num_groups_y, num_groups_z);
}

void GLAPIENTRY _dispatch_stub_DispatchComputeIndirect(GLintptr indirect)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[842];
   ((void (GLAPIENTRY *)(GLintptr indirect)) _func)(indirect);
}

void GLAPIENTRY _dispatch_stub_CopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[843];
   ((void (GLAPIENTRY *)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)) _func)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}

void GLAPIENTRY _dispatch_stub_TextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[844];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)) _func)(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
}

void GLAPIENTRY _dispatch_stub_BindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[845];
   ((void (GLAPIENTRY *)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)) _func)(bindingindex, buffer, offset, stride);
}

void GLAPIENTRY _dispatch_stub_VertexAttribBinding(GLuint attribindex, GLuint bindingindex)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[846];
   ((void (GLAPIENTRY *)(GLuint attribindex, GLuint bindingindex)) _func)(attribindex, bindingindex);
}

void GLAPIENTRY _dispatch_stub_VertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[847];
   ((void (GLAPIENTRY *)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)) _func)(attribindex, size, type, normalized, relativeoffset);
}

void GLAPIENTRY _dispatch_stub_VertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[848];
   ((void (GLAPIENTRY *)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)) _func)(attribindex, size, type, relativeoffset);
}

void GLAPIENTRY _dispatch_stub_VertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[849];
   ((void (GLAPIENTRY *)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)) _func)(attribindex, size, type, relativeoffset);
}

void GLAPIENTRY _dispatch_stub_VertexBindingDivisor(GLuint bindingindex, GLuint divisor)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[850];
   ((void (GLAPIENTRY *)(GLuint bindingindex, GLuint divisor)) _func)(bindingindex, divisor);
}

void GLAPIENTRY _dispatch_stub_FramebufferParameteri(GLenum target, GLenum pname, GLint param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[851];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLint param)) _func)(target, pname, param);
}

void GLAPIENTRY _dispatch_stub_GetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[852];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[853];
   ((void (GLAPIENTRY *)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params)) _func)(target, internalformat, pname, bufSize, params);
}

void GLAPIENTRY _dispatch_stub_MultiDrawArraysIndirect(GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[854];
   ((void (GLAPIENTRY *)(GLenum mode, const GLvoid *indirect, GLsizei primcount, GLsizei stride)) _func)(mode, indirect, primcount, stride);
}

void GLAPIENTRY _dispatch_stub_MultiDrawElementsIndirect(GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[855];
   ((void (GLAPIENTRY *)(GLenum mode, GLenum type, const GLvoid *indirect, GLsizei primcount, GLsizei stride)) _func)(mode, type, indirect, primcount, stride);
}

void GLAPIENTRY _dispatch_stub_GetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[856];
   ((void (GLAPIENTRY *)(GLuint program, GLenum programInterface, GLenum pname, GLint *params)) _func)(program, programInterface, pname, params);
}

GLuint GLAPIENTRY _dispatch_stub_GetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[857];
   return ((GLuint (GLAPIENTRY *)(GLuint program, GLenum programInterface, const GLchar *name)) _func)(program, programInterface, name);
}

GLint GLAPIENTRY _dispatch_stub_GetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[858];
   return ((GLint (GLAPIENTRY *)(GLuint program, GLenum programInterface, const GLchar *name)) _func)(program, programInterface, name);
}

GLint GLAPIENTRY _dispatch_stub_GetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[859];
   return ((GLint (GLAPIENTRY *)(GLuint program, GLenum programInterface, const GLchar *name)) _func)(program, programInterface, name);
}

void GLAPIENTRY _dispatch_stub_GetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[860];
   ((void (GLAPIENTRY *)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)) _func)(program, programInterface, index, bufSize, length, name);
}

void GLAPIENTRY _dispatch_stub_GetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[861];
   ((void (GLAPIENTRY *)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params)) _func)(program, programInterface, index, propCount, props, bufSize, length, params);
}

void GLAPIENTRY _dispatch_stub_ShaderStorageBlockBinding(GLuint program, GLuint shaderStorageBlockIndex, GLuint shaderStorageBlockBinding)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[862];
   ((void (GLAPIENTRY *)(GLuint program, GLuint shaderStorageBlockIndex, GLuint shaderStorageBlockBinding)) _func)(program, shaderStorageBlockIndex, shaderStorageBlockBinding);
}

void GLAPIENTRY _dispatch_stub_TexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[863];
   ((void (GLAPIENTRY *)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)) _func)(target, internalformat, buffer, offset, size);
}

void GLAPIENTRY _dispatch_stub_TexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[864];
   ((void (GLAPIENTRY *)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)) _func)(target, samples, internalformat, width, height, fixedsamplelocations);
}

void GLAPIENTRY _dispatch_stub_TexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[865];
   ((void (GLAPIENTRY *)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)) _func)(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

void GLAPIENTRY _dispatch_stub_BufferStorage(GLenum target, GLsizeiptr size, const GLvoid *data, GLbitfield flags)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[866];
   ((void (GLAPIENTRY *)(GLenum target, GLsizeiptr size, const GLvoid *data, GLbitfield flags)) _func)(target, size, data, flags);
}

void GLAPIENTRY _dispatch_stub_ClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[867];
   ((void (GLAPIENTRY *)(GLuint texture, GLint level, GLenum format, GLenum type, const GLvoid *data)) _func)(texture, level, format, type, data);
}

void GLAPIENTRY _dispatch_stub_ClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[868];
   ((void (GLAPIENTRY *)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *data)) _func)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
}

void GLAPIENTRY _dispatch_stub_BindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint *buffers)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[869];
   ((void (GLAPIENTRY *)(GLenum target, GLuint first, GLsizei count, const GLuint *buffers)) _func)(target, first, count, buffers);
}

void GLAPIENTRY _dispatch_stub_BindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[870];
   ((void (GLAPIENTRY *)(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes)) _func)(target, first, count, buffers, offsets, sizes);
}

void GLAPIENTRY _dispatch_stub_BindImageTextures(GLuint first, GLsizei count, const GLuint *textures)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[871];
   ((void (GLAPIENTRY *)(GLuint first, GLsizei count, const GLuint *textures)) _func)(first, count, textures);
}

void GLAPIENTRY _dispatch_stub_BindSamplers(GLuint first, GLsizei count, const GLuint *samplers)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[872];
   ((void (GLAPIENTRY *)(GLuint first, GLsizei count, const GLuint *samplers)) _func)(first, count, samplers);
}

void GLAPIENTRY _dispatch_stub_BindTextures(GLuint first, GLsizei count, const GLuint *textures)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[873];
   ((void (GLAPIENTRY *)(GLuint first, GLsizei count, const GLuint *textures)) _func)(first, count, textures);
}

void GLAPIENTRY _dispatch_stub_BindVertexBuffers(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[874];
   ((void (GLAPIENTRY *)(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)) _func)(first, count, buffers, offsets, strides);
}

GLuint64 GLAPIENTRY _dispatch_stub_GetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[875];
   return ((GLuint64 (GLAPIENTRY *)(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)) _func)(texture, level, layered, layer, format);
}

GLuint64 GLAPIENTRY _dispatch_stub_GetTextureHandleARB(GLuint texture)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[876];
   return ((GLuint64 (GLAPIENTRY *)(GLuint texture)) _func)(texture);
}

GLuint64 GLAPIENTRY _dispatch_stub_GetTextureSamplerHandleARB(GLuint texture, GLuint sampler)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[877];
   return ((GLuint64 (GLAPIENTRY *)(GLuint texture, GLuint sampler)) _func)(texture, sampler);
}

void GLAPIENTRY _dispatch_stub_GetVertexAttribLui64vARB(GLuint index, GLenum pname, GLuint64EXT *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[878];
   ((void (GLAPIENTRY *)(GLuint index, GLenum pname, GLuint64EXT *params)) _func)(index, pname, params);
}

GLboolean GLAPIENTRY _dispatch_stub_IsImageHandleResidentARB(GLuint64 handle)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[879];
   return ((GLboolean (GLAPIENTRY *)(GLuint64 handle)) _func)(handle);
}

GLboolean GLAPIENTRY _dispatch_stub_IsTextureHandleResidentARB(GLuint64 handle)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[880];
   return ((GLboolean (GLAPIENTRY *)(GLuint64 handle)) _func)(handle);
}

void GLAPIENTRY _dispatch_stub_MakeImageHandleNonResidentARB(GLuint64 handle)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[881];
   ((void (GLAPIENTRY *)(GLuint64 handle)) _func)(handle);
}

void GLAPIENTRY _dispatch_stub_MakeImageHandleResidentARB(GLuint64 handle, GLenum access)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[882];
   ((void (GLAPIENTRY *)(GLuint64 handle, GLenum access)) _func)(handle, access);
}

void GLAPIENTRY _dispatch_stub_MakeTextureHandleNonResidentARB(GLuint64 handle)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[883];
   ((void (GLAPIENTRY *)(GLuint64 handle)) _func)(handle);
}

void GLAPIENTRY _dispatch_stub_MakeTextureHandleResidentARB(GLuint64 handle)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[884];
   ((void (GLAPIENTRY *)(GLuint64 handle)) _func)(handle);
}

void GLAPIENTRY _dispatch_stub_ProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[885];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLuint64 value)) _func)(program, location, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[886];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, const GLuint64 *value)) _func)(program, location, count, value);
}

void GLAPIENTRY _dispatch_stub_UniformHandleui64ARB(GLint location, GLuint64 value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[887];
   ((void (GLAPIENTRY *)(GLint location, GLuint64 value)) _func)(location, value);
}

void GLAPIENTRY _dispatch_stub_UniformHandleui64vARB(GLint location, GLsizei count, const GLuint64 *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[888];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, const GLuint64 *value)) _func)(location, count, value);
}

void GLAPIENTRY _dispatch_stub_VertexAttribL1ui64ARB(GLuint index, GLuint64EXT x)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[889];
   ((void (GLAPIENTRY *)(GLuint index, GLuint64EXT x)) _func)(index, x);
}

void GLAPIENTRY _dispatch_stub_VertexAttribL1ui64vARB(GLuint index, const GLuint64EXT *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[890];
   ((void (GLAPIENTRY *)(GLuint index, const GLuint64EXT *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_DispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[891];
   ((void (GLAPIENTRY *)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)) _func)(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
}

void GLAPIENTRY _dispatch_stub_MultiDrawArraysIndirectCountARB(GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[892];
   ((void (GLAPIENTRY *)(GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)) _func)(mode, indirect, drawcount, maxdrawcount, stride);
}

void GLAPIENTRY _dispatch_stub_MultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[893];
   ((void (GLAPIENTRY *)(GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)) _func)(mode, type, indirect, drawcount, maxdrawcount, stride);
}

void GLAPIENTRY _dispatch_stub_ClipControl(GLenum origin, GLenum depth)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[894];
   ((void (GLAPIENTRY *)(GLenum origin, GLenum depth)) _func)(origin, depth);
}

void GLAPIENTRY _dispatch_stub_BindTextureUnit(GLuint unit, GLuint texture)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[895];
   ((void (GLAPIENTRY *)(GLuint unit, GLuint texture)) _func)(unit, texture);
}

void GLAPIENTRY _dispatch_stub_BlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[896];
   ((void (GLAPIENTRY *)(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)) _func)(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}

GLenum GLAPIENTRY _dispatch_stub_CheckNamedFramebufferStatus(GLuint framebuffer, GLenum target)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[897];
   return ((GLenum (GLAPIENTRY *)(GLuint framebuffer, GLenum target)) _func)(framebuffer, target);
}

void GLAPIENTRY _dispatch_stub_ClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[898];
   ((void (GLAPIENTRY *)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)) _func)(buffer, internalformat, format, type, data);
}

void GLAPIENTRY _dispatch_stub_ClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[899];
   ((void (GLAPIENTRY *)(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)) _func)(buffer, internalformat, offset, size, format, type, data);
}

void GLAPIENTRY _dispatch_stub_ClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[900];
   ((void (GLAPIENTRY *)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)) _func)(framebuffer, buffer, drawbuffer, depth, stencil);
}

void GLAPIENTRY _dispatch_stub_ClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[901];
   ((void (GLAPIENTRY *)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value)) _func)(framebuffer, buffer, drawbuffer, value);
}

void GLAPIENTRY _dispatch_stub_ClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[902];
   ((void (GLAPIENTRY *)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value)) _func)(framebuffer, buffer, drawbuffer, value);
}

void GLAPIENTRY _dispatch_stub_ClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[903];
   ((void (GLAPIENTRY *)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value)) _func)(framebuffer, buffer, drawbuffer, value);
}

void GLAPIENTRY _dispatch_stub_CompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[904];
   ((void (GLAPIENTRY *)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)) _func)(texture, level, xoffset, width, format, imageSize, data);
}

void GLAPIENTRY _dispatch_stub_CompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[905];
   ((void (GLAPIENTRY *)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)) _func)(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
}

void GLAPIENTRY _dispatch_stub_CompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[906];
   ((void (GLAPIENTRY *)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)) _func)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

void GLAPIENTRY _dispatch_stub_CopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[907];
   ((void (GLAPIENTRY *)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)) _func)(readBuffer, writeBuffer, readOffset, writeOffset, size);
}

void GLAPIENTRY _dispatch_stub_CopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[908];
   ((void (GLAPIENTRY *)(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)) _func)(texture, level, xoffset, x, y, width);
}

void GLAPIENTRY _dispatch_stub_CopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[909];
   ((void (GLAPIENTRY *)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)) _func)(texture, level, xoffset, yoffset, x, y, width, height);
}

void GLAPIENTRY _dispatch_stub_CopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[910];
   ((void (GLAPIENTRY *)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)) _func)(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
}

void GLAPIENTRY _dispatch_stub_CreateBuffers(GLsizei n, GLuint *buffers)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[911];
   ((void (GLAPIENTRY *)(GLsizei n, GLuint *buffers)) _func)(n, buffers);
}

void GLAPIENTRY _dispatch_stub_CreateFramebuffers(GLsizei n, GLuint *framebuffers)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[912];
   ((void (GLAPIENTRY *)(GLsizei n, GLuint *framebuffers)) _func)(n, framebuffers);
}

void GLAPIENTRY _dispatch_stub_CreateProgramPipelines(GLsizei n, GLuint *pipelines)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[913];
   ((void (GLAPIENTRY *)(GLsizei n, GLuint *pipelines)) _func)(n, pipelines);
}

void GLAPIENTRY _dispatch_stub_CreateQueries(GLenum target, GLsizei n, GLuint *ids)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[914];
   ((void (GLAPIENTRY *)(GLenum target, GLsizei n, GLuint *ids)) _func)(target, n, ids);
}

void GLAPIENTRY _dispatch_stub_CreateRenderbuffers(GLsizei n, GLuint *renderbuffers)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[915];
   ((void (GLAPIENTRY *)(GLsizei n, GLuint *renderbuffers)) _func)(n, renderbuffers);
}

void GLAPIENTRY _dispatch_stub_CreateSamplers(GLsizei n, GLuint *samplers)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[916];
   ((void (GLAPIENTRY *)(GLsizei n, GLuint *samplers)) _func)(n, samplers);
}

void GLAPIENTRY _dispatch_stub_CreateTextures(GLenum target, GLsizei n, GLuint *textures)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[917];
   ((void (GLAPIENTRY *)(GLenum target, GLsizei n, GLuint *textures)) _func)(target, n, textures);
}

void GLAPIENTRY _dispatch_stub_CreateTransformFeedbacks(GLsizei n, GLuint *ids)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[918];
   ((void (GLAPIENTRY *)(GLsizei n, GLuint *ids)) _func)(n, ids);
}

void GLAPIENTRY _dispatch_stub_CreateVertexArrays(GLsizei n, GLuint *arrays)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[919];
   ((void (GLAPIENTRY *)(GLsizei n, GLuint *arrays)) _func)(n, arrays);
}

void GLAPIENTRY _dispatch_stub_DisableVertexArrayAttrib(GLuint vaobj, GLuint index)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[920];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint index)) _func)(vaobj, index);
}

void GLAPIENTRY _dispatch_stub_EnableVertexArrayAttrib(GLuint vaobj, GLuint index)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[921];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint index)) _func)(vaobj, index);
}

void GLAPIENTRY _dispatch_stub_FlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[922];
   ((void (GLAPIENTRY *)(GLuint buffer, GLintptr offset, GLsizeiptr length)) _func)(buffer, offset, length);
}

void GLAPIENTRY _dispatch_stub_GenerateTextureMipmap(GLuint texture)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[923];
   ((void (GLAPIENTRY *)(GLuint texture)) _func)(texture);
}

void GLAPIENTRY _dispatch_stub_GetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, GLvoid *pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[924];
   ((void (GLAPIENTRY *)(GLuint texture, GLint level, GLsizei bufSize, GLvoid *pixels)) _func)(texture, level, bufSize, pixels);
}

void GLAPIENTRY _dispatch_stub_GetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[925];
   ((void (GLAPIENTRY *)(GLuint buffer, GLenum pname, GLint64 *params)) _func)(buffer, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[926];
   ((void (GLAPIENTRY *)(GLuint buffer, GLenum pname, GLint *params)) _func)(buffer, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetNamedBufferPointerv(GLuint buffer, GLenum pname, GLvoid **params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[927];
   ((void (GLAPIENTRY *)(GLuint buffer, GLenum pname, GLvoid **params)) _func)(buffer, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[928];
   ((void (GLAPIENTRY *)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data)) _func)(buffer, offset, size, data);
}

void GLAPIENTRY _dispatch_stub_GetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[929];
   ((void (GLAPIENTRY *)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)) _func)(framebuffer, attachment, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint *param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[930];
   ((void (GLAPIENTRY *)(GLuint framebuffer, GLenum pname, GLint *param)) _func)(framebuffer, pname, param);
}

void GLAPIENTRY _dispatch_stub_GetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[931];
   ((void (GLAPIENTRY *)(GLuint renderbuffer, GLenum pname, GLint *params)) _func)(renderbuffer, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[932];
   ((void (GLAPIENTRY *)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)) _func)(id, buffer, pname, offset);
}

void GLAPIENTRY _dispatch_stub_GetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[933];
   ((void (GLAPIENTRY *)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)) _func)(id, buffer, pname, offset);
}

void GLAPIENTRY _dispatch_stub_GetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[934];
   ((void (GLAPIENTRY *)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)) _func)(id, buffer, pname, offset);
}

void GLAPIENTRY _dispatch_stub_GetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[935];
   ((void (GLAPIENTRY *)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)) _func)(id, buffer, pname, offset);
}

void GLAPIENTRY _dispatch_stub_GetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[936];
   ((void (GLAPIENTRY *)(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *pixels)) _func)(texture, level, format, type, bufSize, pixels);
}

void GLAPIENTRY _dispatch_stub_GetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[937];
   ((void (GLAPIENTRY *)(GLuint texture, GLint level, GLenum pname, GLfloat *params)) _func)(texture, level, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[938];
   ((void (GLAPIENTRY *)(GLuint texture, GLint level, GLenum pname, GLint *params)) _func)(texture, level, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetTextureParameterIiv(GLuint texture, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[939];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum pname, GLint *params)) _func)(texture, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[940];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum pname, GLuint *params)) _func)(texture, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetTextureParameterfv(GLuint texture, GLenum pname, GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[941];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum pname, GLfloat *params)) _func)(texture, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetTextureParameteriv(GLuint texture, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[942];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum pname, GLint *params)) _func)(texture, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 *param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[943];
   ((void (GLAPIENTRY *)(GLuint xfb, GLenum pname, GLuint index, GLint64 *param)) _func)(xfb, pname, index, param);
}

void GLAPIENTRY _dispatch_stub_GetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint *param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[944];
   ((void (GLAPIENTRY *)(GLuint xfb, GLenum pname, GLuint index, GLint *param)) _func)(xfb, pname, index, param);
}

void GLAPIENTRY _dispatch_stub_GetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint *param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[945];
   ((void (GLAPIENTRY *)(GLuint xfb, GLenum pname, GLint *param)) _func)(xfb, pname, param);
}

void GLAPIENTRY _dispatch_stub_GetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[946];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param)) _func)(vaobj, index, pname, param);
}

void GLAPIENTRY _dispatch_stub_GetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint *param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[947];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint index, GLenum pname, GLint *param)) _func)(vaobj, index, pname, param);
}

void GLAPIENTRY _dispatch_stub_GetVertexArrayiv(GLuint vaobj, GLenum pname, GLint *param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[948];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLenum pname, GLint *param)) _func)(vaobj, pname, param);
}

void GLAPIENTRY _dispatch_stub_InvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[949];
   ((void (GLAPIENTRY *)(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments)) _func)(framebuffer, numAttachments, attachments);
}

void GLAPIENTRY _dispatch_stub_InvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[950];
   ((void (GLAPIENTRY *)(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)) _func)(framebuffer, numAttachments, attachments, x, y, width, height);
}

GLvoid * GLAPIENTRY _dispatch_stub_MapNamedBuffer(GLuint buffer, GLenum access)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[951];
   return ((GLvoid * (GLAPIENTRY *)(GLuint buffer, GLenum access)) _func)(buffer, access);
}

GLvoid * GLAPIENTRY _dispatch_stub_MapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[952];
   return ((GLvoid * (GLAPIENTRY *)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)) _func)(buffer, offset, length, access);
}

void GLAPIENTRY _dispatch_stub_NamedBufferData(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[953];
   ((void (GLAPIENTRY *)(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage)) _func)(buffer, size, data, usage);
}

void GLAPIENTRY _dispatch_stub_NamedBufferStorage(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLbitfield flags)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[954];
   ((void (GLAPIENTRY *)(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLbitfield flags)) _func)(buffer, size, data, flags);
}

void GLAPIENTRY _dispatch_stub_NamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[955];
   ((void (GLAPIENTRY *)(GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data)) _func)(buffer, offset, size, data);
}

void GLAPIENTRY _dispatch_stub_NamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[956];
   ((void (GLAPIENTRY *)(GLuint framebuffer, GLenum buf)) _func)(framebuffer, buf);
}

void GLAPIENTRY _dispatch_stub_NamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum *bufs)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[957];
   ((void (GLAPIENTRY *)(GLuint framebuffer, GLsizei n, const GLenum *bufs)) _func)(framebuffer, n, bufs);
}

void GLAPIENTRY _dispatch_stub_NamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[958];
   ((void (GLAPIENTRY *)(GLuint framebuffer, GLenum pname, GLint param)) _func)(framebuffer, pname, param);
}

void GLAPIENTRY _dispatch_stub_NamedFramebufferReadBuffer(GLuint framebuffer, GLenum buf)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[959];
   ((void (GLAPIENTRY *)(GLuint framebuffer, GLenum buf)) _func)(framebuffer, buf);
}

void GLAPIENTRY _dispatch_stub_NamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[960];
   ((void (GLAPIENTRY *)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)) _func)(framebuffer, attachment, renderbuffertarget, renderbuffer);
}

void GLAPIENTRY _dispatch_stub_NamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[961];
   ((void (GLAPIENTRY *)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)) _func)(framebuffer, attachment, texture, level);
}

void GLAPIENTRY _dispatch_stub_NamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[962];
   ((void (GLAPIENTRY *)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)) _func)(framebuffer, attachment, texture, level, layer);
}

void GLAPIENTRY _dispatch_stub_NamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[963];
   ((void (GLAPIENTRY *)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)) _func)(renderbuffer, internalformat, width, height);
}

void GLAPIENTRY _dispatch_stub_NamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[964];
   ((void (GLAPIENTRY *)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)) _func)(renderbuffer, samples, internalformat, width, height);
}

void GLAPIENTRY _dispatch_stub_TextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[965];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum internalformat, GLuint buffer)) _func)(texture, internalformat, buffer);
}

void GLAPIENTRY _dispatch_stub_TextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[966];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)) _func)(texture, internalformat, buffer, offset, size);
}

void GLAPIENTRY _dispatch_stub_TextureParameterIiv(GLuint texture, GLenum pname, const GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[967];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum pname, const GLint *params)) _func)(texture, pname, params);
}

void GLAPIENTRY _dispatch_stub_TextureParameterIuiv(GLuint texture, GLenum pname, const GLuint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[968];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum pname, const GLuint *params)) _func)(texture, pname, params);
}

void GLAPIENTRY _dispatch_stub_TextureParameterf(GLuint texture, GLenum pname, GLfloat param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[969];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum pname, GLfloat param)) _func)(texture, pname, param);
}

void GLAPIENTRY _dispatch_stub_TextureParameterfv(GLuint texture, GLenum pname, const GLfloat *param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[970];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum pname, const GLfloat *param)) _func)(texture, pname, param);
}

void GLAPIENTRY _dispatch_stub_TextureParameteri(GLuint texture, GLenum pname, GLint param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[971];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum pname, GLint param)) _func)(texture, pname, param);
}

void GLAPIENTRY _dispatch_stub_TextureParameteriv(GLuint texture, GLenum pname, const GLint *param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[972];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum pname, const GLint *param)) _func)(texture, pname, param);
}

void GLAPIENTRY _dispatch_stub_TextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[973];
   ((void (GLAPIENTRY *)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width)) _func)(texture, levels, internalformat, width);
}

void GLAPIENTRY _dispatch_stub_TextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[974];
   ((void (GLAPIENTRY *)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)) _func)(texture, levels, internalformat, width, height);
}

void GLAPIENTRY _dispatch_stub_TextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[975];
   ((void (GLAPIENTRY *)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)) _func)(texture, samples, internalformat, width, height, fixedsamplelocations);
}

void GLAPIENTRY _dispatch_stub_TextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[976];
   ((void (GLAPIENTRY *)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)) _func)(texture, levels, internalformat, width, height, depth);
}

void GLAPIENTRY _dispatch_stub_TextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[977];
   ((void (GLAPIENTRY *)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)) _func)(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
}

void GLAPIENTRY _dispatch_stub_TextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[978];
   ((void (GLAPIENTRY *)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)) _func)(texture, level, xoffset, width, format, type, pixels);
}

void GLAPIENTRY _dispatch_stub_TextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[979];
   ((void (GLAPIENTRY *)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)) _func)(texture, level, xoffset, yoffset, width, height, format, type, pixels);
}

void GLAPIENTRY _dispatch_stub_TextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[980];
   ((void (GLAPIENTRY *)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)) _func)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

void GLAPIENTRY _dispatch_stub_TransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[981];
   ((void (GLAPIENTRY *)(GLuint xfb, GLuint index, GLuint buffer)) _func)(xfb, index, buffer);
}

void GLAPIENTRY _dispatch_stub_TransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[982];
   ((void (GLAPIENTRY *)(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)) _func)(xfb, index, buffer, offset, size);
}

GLboolean GLAPIENTRY _dispatch_stub_UnmapNamedBufferEXT(GLuint buffer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[983];
   return ((GLboolean (GLAPIENTRY *)(GLuint buffer)) _func)(buffer);
}

void GLAPIENTRY _dispatch_stub_VertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[984];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint attribindex, GLuint bindingindex)) _func)(vaobj, attribindex, bindingindex);
}

void GLAPIENTRY _dispatch_stub_VertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[985];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)) _func)(vaobj, attribindex, size, type, normalized, relativeoffset);
}

void GLAPIENTRY _dispatch_stub_VertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[986];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)) _func)(vaobj, attribindex, size, type, relativeoffset);
}

void GLAPIENTRY _dispatch_stub_VertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[987];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)) _func)(vaobj, attribindex, size, type, relativeoffset);
}

void GLAPIENTRY _dispatch_stub_VertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[988];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint bindingindex, GLuint divisor)) _func)(vaobj, bindingindex, divisor);
}

void GLAPIENTRY _dispatch_stub_VertexArrayElementBuffer(GLuint vaobj, GLuint buffer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[989];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint buffer)) _func)(vaobj, buffer);
}

void GLAPIENTRY _dispatch_stub_VertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[990];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)) _func)(vaobj, bindingindex, buffer, offset, stride);
}

void GLAPIENTRY _dispatch_stub_VertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[991];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)) _func)(vaobj, first, count, buffers, offsets, strides);
}

void GLAPIENTRY _dispatch_stub_GetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, GLvoid *pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[992];
   ((void (GLAPIENTRY *)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, GLvoid *pixels)) _func)(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
}

void GLAPIENTRY _dispatch_stub_GetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, GLvoid *pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[993];
   ((void (GLAPIENTRY *)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, GLvoid *pixels)) _func)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
}

void GLAPIENTRY _dispatch_stub_BufferPageCommitmentARB(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[994];
   ((void (GLAPIENTRY *)(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit)) _func)(target, offset, size, commit);
}

void GLAPIENTRY _dispatch_stub_NamedBufferPageCommitmentARB(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[995];
   ((void (GLAPIENTRY *)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)) _func)(buffer, offset, size, commit);
}

void GLAPIENTRY _dispatch_stub_GetUniformi64vARB(GLuint program, GLint location, GLint64 *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[996];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLint64 *params)) _func)(program, location, params);
}

void GLAPIENTRY _dispatch_stub_GetUniformui64vARB(GLuint program, GLint location, GLuint64 *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[997];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLuint64 *params)) _func)(program, location, params);
}

void GLAPIENTRY _dispatch_stub_GetnUniformi64vARB(GLuint program, GLint location, GLsizei bufSize, GLint64 *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[998];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei bufSize, GLint64 *params)) _func)(program, location, bufSize, params);
}

void GLAPIENTRY _dispatch_stub_GetnUniformui64vARB(GLuint program, GLint location, GLsizei bufSize, GLuint64 *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[999];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei bufSize, GLuint64 *params)) _func)(program, location, bufSize, params);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform1i64ARB(GLuint program, GLint location, GLint64 x)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1000];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLint64 x)) _func)(program, location, x);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform1i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1001];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, const GLint64 *value)) _func)(program, location, count, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform1ui64ARB(GLuint program, GLint location, GLuint64 x)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1002];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLuint64 x)) _func)(program, location, x);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform1ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1003];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, const GLuint64 *value)) _func)(program, location, count, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform2i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1004];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLint64 x, GLint64 y)) _func)(program, location, x, y);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform2i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1005];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, const GLint64 *value)) _func)(program, location, count, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform2ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1006];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLuint64 x, GLuint64 y)) _func)(program, location, x, y);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform2ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1007];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, const GLuint64 *value)) _func)(program, location, count, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform3i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1008];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z)) _func)(program, location, x, y, z);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform3i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1009];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, const GLint64 *value)) _func)(program, location, count, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform3ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1010];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z)) _func)(program, location, x, y, z);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform3ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1011];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, const GLuint64 *value)) _func)(program, location, count, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform4i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1012];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w)) _func)(program, location, x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform4i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1013];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, const GLint64 *value)) _func)(program, location, count, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform4ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1014];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)) _func)(program, location, x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform4ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1015];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, const GLuint64 *value)) _func)(program, location, count, value);
}

void GLAPIENTRY _dispatch_stub_Uniform1i64ARB(GLint location, GLint64 x)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1016];
   ((void (GLAPIENTRY *)(GLint location, GLint64 x)) _func)(location, x);
}

void GLAPIENTRY _dispatch_stub_Uniform1i64vARB(GLint location, GLsizei count, const GLint64 *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1017];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, const GLint64 *value)) _func)(location, count, value);
}

void GLAPIENTRY _dispatch_stub_Uniform1ui64ARB(GLint location, GLuint64 x)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1018];
   ((void (GLAPIENTRY *)(GLint location, GLuint64 x)) _func)(location, x);
}

void GLAPIENTRY _dispatch_stub_Uniform1ui64vARB(GLint location, GLsizei count, const GLuint64 *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1019];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, const GLuint64 *value)) _func)(location, count, value);
}

void GLAPIENTRY _dispatch_stub_Uniform2i64ARB(GLint location, GLint64 x, GLint64 y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1020];
   ((void (GLAPIENTRY *)(GLint location, GLint64 x, GLint64 y)) _func)(location, x, y);
}

void GLAPIENTRY _dispatch_stub_Uniform2i64vARB(GLint location, GLsizei count, const GLint64 *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1021];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, const GLint64 *value)) _func)(location, count, value);
}

void GLAPIENTRY _dispatch_stub_Uniform2ui64ARB(GLint location, GLuint64 x, GLuint64 y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1022];
   ((void (GLAPIENTRY *)(GLint location, GLuint64 x, GLuint64 y)) _func)(location, x, y);
}

void GLAPIENTRY _dispatch_stub_Uniform2ui64vARB(GLint location, GLsizei count, const GLuint64 *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1023];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, const GLuint64 *value)) _func)(location, count, value);
}

void GLAPIENTRY _dispatch_stub_Uniform3i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1024];
   ((void (GLAPIENTRY *)(GLint location, GLint64 x, GLint64 y, GLint64 z)) _func)(location, x, y, z);
}

void GLAPIENTRY _dispatch_stub_Uniform3i64vARB(GLint location, GLsizei count, const GLint64 *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1025];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, const GLint64 *value)) _func)(location, count, value);
}

void GLAPIENTRY _dispatch_stub_Uniform3ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1026];
   ((void (GLAPIENTRY *)(GLint location, GLuint64 x, GLuint64 y, GLuint64 z)) _func)(location, x, y, z);
}

void GLAPIENTRY _dispatch_stub_Uniform3ui64vARB(GLint location, GLsizei count, const GLuint64 *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1027];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, const GLuint64 *value)) _func)(location, count, value);
}

void GLAPIENTRY _dispatch_stub_Uniform4i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1028];
   ((void (GLAPIENTRY *)(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w)) _func)(location, x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_Uniform4i64vARB(GLint location, GLsizei count, const GLint64 *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1029];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, const GLint64 *value)) _func)(location, count, value);
}

void GLAPIENTRY _dispatch_stub_Uniform4ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1030];
   ((void (GLAPIENTRY *)(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)) _func)(location, x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_Uniform4ui64vARB(GLint location, GLsizei count, const GLuint64 *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1031];
   ((void (GLAPIENTRY *)(GLint location, GLsizei count, const GLuint64 *value)) _func)(location, count, value);
}

void GLAPIENTRY _dispatch_stub_EvaluateDepthValuesARB(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1032];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_FramebufferSampleLocationsfvARB(GLenum target, GLuint start, GLsizei count, const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1033];
   ((void (GLAPIENTRY *)(GLenum target, GLuint start, GLsizei count, const GLfloat *v)) _func)(target, start, count, v);
}

void GLAPIENTRY _dispatch_stub_NamedFramebufferSampleLocationsfvARB(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1034];
   ((void (GLAPIENTRY *)(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v)) _func)(framebuffer, start, count, v);
}

void GLAPIENTRY _dispatch_stub_SpecializeShaderARB(GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1035];
   ((void (GLAPIENTRY *)(GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue)) _func)(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
}

void GLAPIENTRY _dispatch_stub_InvalidateBufferData(GLuint buffer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1036];
   ((void (GLAPIENTRY *)(GLuint buffer)) _func)(buffer);
}

void GLAPIENTRY _dispatch_stub_InvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1037];
   ((void (GLAPIENTRY *)(GLuint buffer, GLintptr offset, GLsizeiptr length)) _func)(buffer, offset, length);
}

void GLAPIENTRY _dispatch_stub_InvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1038];
   ((void (GLAPIENTRY *)(GLenum target, GLsizei numAttachments, const GLenum *attachments)) _func)(target, numAttachments, attachments);
}

void GLAPIENTRY _dispatch_stub_InvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1039];
   ((void (GLAPIENTRY *)(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)) _func)(target, numAttachments, attachments, x, y, width, height);
}

void GLAPIENTRY _dispatch_stub_InvalidateTexImage(GLuint texture, GLint level)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1040];
   ((void (GLAPIENTRY *)(GLuint texture, GLint level)) _func)(texture, level);
}

void GLAPIENTRY _dispatch_stub_InvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1041];
   ((void (GLAPIENTRY *)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)) _func)(texture, level, xoffset, yoffset, zoffset, width, height, depth);
}

void GLAPIENTRY _dispatch_stub_DrawTexfOES(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1042];
   ((void (GLAPIENTRY *)(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height)) _func)(x, y, z, width, height);
}

void GLAPIENTRY _dispatch_stub_DrawTexfvOES(const GLfloat *coords)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1043];
   ((void (GLAPIENTRY *)(const GLfloat *coords)) _func)(coords);
}

void GLAPIENTRY _dispatch_stub_DrawTexiOES(GLint x, GLint y, GLint z, GLint width, GLint height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1044];
   ((void (GLAPIENTRY *)(GLint x, GLint y, GLint z, GLint width, GLint height)) _func)(x, y, z, width, height);
}

void GLAPIENTRY _dispatch_stub_DrawTexivOES(const GLint *coords)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1045];
   ((void (GLAPIENTRY *)(const GLint *coords)) _func)(coords);
}

void GLAPIENTRY _dispatch_stub_DrawTexsOES(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1046];
   ((void (GLAPIENTRY *)(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height)) _func)(x, y, z, width, height);
}

void GLAPIENTRY _dispatch_stub_DrawTexsvOES(const GLshort *coords)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1047];
   ((void (GLAPIENTRY *)(const GLshort *coords)) _func)(coords);
}

void GLAPIENTRY _dispatch_stub_DrawTexxOES(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1048];
   ((void (GLAPIENTRY *)(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height)) _func)(x, y, z, width, height);
}

void GLAPIENTRY _dispatch_stub_DrawTexxvOES(const GLfixed *coords)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1049];
   ((void (GLAPIENTRY *)(const GLfixed *coords)) _func)(coords);
}

void GLAPIENTRY _dispatch_stub_PointSizePointerOES(GLenum type, GLsizei stride, const GLvoid *pointer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1050];
   ((void (GLAPIENTRY *)(GLenum type, GLsizei stride, const GLvoid *pointer)) _func)(type, stride, pointer);
}

GLbitfield GLAPIENTRY _dispatch_stub_QueryMatrixxOES(GLfixed *mantissa, GLint *exponent)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1051];
   return ((GLbitfield (GLAPIENTRY *)(GLfixed *mantissa, GLint *exponent)) _func)(mantissa, exponent);
}

void GLAPIENTRY _dispatch_stub_ColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1052];
   ((void (GLAPIENTRY *)(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)) _func)(size, type, stride, count, pointer);
}

void GLAPIENTRY _dispatch_stub_EdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean *pointer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1053];
   ((void (GLAPIENTRY *)(GLsizei stride, GLsizei count, const GLboolean *pointer)) _func)(stride, count, pointer);
}

void GLAPIENTRY _dispatch_stub_IndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1054];
   ((void (GLAPIENTRY *)(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)) _func)(type, stride, count, pointer);
}

void GLAPIENTRY _dispatch_stub_NormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1055];
   ((void (GLAPIENTRY *)(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)) _func)(type, stride, count, pointer);
}

void GLAPIENTRY _dispatch_stub_TexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1056];
   ((void (GLAPIENTRY *)(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)) _func)(size, type, stride, count, pointer);
}

void GLAPIENTRY _dispatch_stub_VertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1057];
   ((void (GLAPIENTRY *)(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)) _func)(size, type, stride, count, pointer);
}

void GLAPIENTRY _dispatch_stub_DiscardFramebufferEXT(GLenum target, GLsizei numAttachments, const GLenum *attachments)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1058];
   ((void (GLAPIENTRY *)(GLenum target, GLsizei numAttachments, const GLenum *attachments)) _func)(target, numAttachments, attachments);
}

void GLAPIENTRY _dispatch_stub_ActiveShaderProgram(GLuint pipeline, GLuint program)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1059];
   ((void (GLAPIENTRY *)(GLuint pipeline, GLuint program)) _func)(pipeline, program);
}

void GLAPIENTRY _dispatch_stub_BindProgramPipeline(GLuint pipeline)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1060];
   ((void (GLAPIENTRY *)(GLuint pipeline)) _func)(pipeline);
}

GLuint GLAPIENTRY _dispatch_stub_CreateShaderProgramv(GLenum type, GLsizei count, const GLchar * const *strings)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1061];
   return ((GLuint (GLAPIENTRY *)(GLenum type, GLsizei count, const GLchar * const *strings)) _func)(type, count, strings);
}

void GLAPIENTRY _dispatch_stub_DeleteProgramPipelines(GLsizei n, const GLuint *pipelines)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1062];
   ((void (GLAPIENTRY *)(GLsizei n, const GLuint *pipelines)) _func)(n, pipelines);
}

void GLAPIENTRY _dispatch_stub_GenProgramPipelines(GLsizei n, GLuint *pipelines)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1063];
   ((void (GLAPIENTRY *)(GLsizei n, GLuint *pipelines)) _func)(n, pipelines);
}

void GLAPIENTRY _dispatch_stub_GetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1064];
   ((void (GLAPIENTRY *)(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)) _func)(pipeline, bufSize, length, infoLog);
}

void GLAPIENTRY _dispatch_stub_GetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1065];
   ((void (GLAPIENTRY *)(GLuint pipeline, GLenum pname, GLint *params)) _func)(pipeline, pname, params);
}

GLboolean GLAPIENTRY _dispatch_stub_IsProgramPipeline(GLuint pipeline)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1066];
   return ((GLboolean (GLAPIENTRY *)(GLuint pipeline)) _func)(pipeline);
}

void GLAPIENTRY _dispatch_stub_LockArraysEXT(GLint first, GLsizei count)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1067];
   ((void (GLAPIENTRY *)(GLint first, GLsizei count)) _func)(first, count);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform1d(GLuint program, GLint location, GLdouble x)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1068];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLdouble x)) _func)(program, location, x);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1069];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, const GLdouble *value)) _func)(program, location, count, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform1f(GLuint program, GLint location, GLfloat x)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1070];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLfloat x)) _func)(program, location, x);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1071];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, const GLfloat *value)) _func)(program, location, count, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform1i(GLuint program, GLint location, GLint x)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1072];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLint x)) _func)(program, location, x);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1073];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, const GLint *value)) _func)(program, location, count, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform1ui(GLuint program, GLint location, GLuint x)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1074];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLuint x)) _func)(program, location, x);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1075];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, const GLuint *value)) _func)(program, location, count, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform2d(GLuint program, GLint location, GLdouble x, GLdouble y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1076];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLdouble x, GLdouble y)) _func)(program, location, x, y);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1077];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, const GLdouble *value)) _func)(program, location, count, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform2f(GLuint program, GLint location, GLfloat x, GLfloat y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1078];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLfloat x, GLfloat y)) _func)(program, location, x, y);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1079];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, const GLfloat *value)) _func)(program, location, count, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform2i(GLuint program, GLint location, GLint x, GLint y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1080];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLint x, GLint y)) _func)(program, location, x, y);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1081];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, const GLint *value)) _func)(program, location, count, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform2ui(GLuint program, GLint location, GLuint x, GLuint y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1082];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLuint x, GLuint y)) _func)(program, location, x, y);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1083];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, const GLuint *value)) _func)(program, location, count, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform3d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1084];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)) _func)(program, location, x, y, z);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1085];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, const GLdouble *value)) _func)(program, location, count, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform3f(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1086];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z)) _func)(program, location, x, y, z);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1087];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, const GLfloat *value)) _func)(program, location, count, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform3i(GLuint program, GLint location, GLint x, GLint y, GLint z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1088];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLint x, GLint y, GLint z)) _func)(program, location, x, y, z);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1089];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, const GLint *value)) _func)(program, location, count, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform3ui(GLuint program, GLint location, GLuint x, GLuint y, GLuint z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1090];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLuint x, GLuint y, GLuint z)) _func)(program, location, x, y, z);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1091];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, const GLuint *value)) _func)(program, location, count, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform4d(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1092];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)) _func)(program, location, x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1093];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, const GLdouble *value)) _func)(program, location, count, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform4f(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1094];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)) _func)(program, location, x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1095];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, const GLfloat *value)) _func)(program, location, count, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform4i(GLuint program, GLint location, GLint x, GLint y, GLint z, GLint w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1096];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLint x, GLint y, GLint z, GLint w)) _func)(program, location, x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1097];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, const GLint *value)) _func)(program, location, count, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform4ui(GLuint program, GLint location, GLuint x, GLuint y, GLuint z, GLuint w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1098];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLuint x, GLuint y, GLuint z, GLuint w)) _func)(program, location, x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_ProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1099];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, const GLuint *value)) _func)(program, location, count, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1100];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)) _func)(program, location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1101];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(program, location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1102];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)) _func)(program, location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1103];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(program, location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1104];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)) _func)(program, location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1105];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(program, location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1106];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)) _func)(program, location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1107];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(program, location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1108];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)) _func)(program, location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1109];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(program, location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1110];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)) _func)(program, location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1111];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(program, location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1112];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)) _func)(program, location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1113];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(program, location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1114];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)) _func)(program, location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1115];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(program, location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1116];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)) _func)(program, location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_ProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1117];
   ((void (GLAPIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)) _func)(program, location, count, transpose, value);
}

void GLAPIENTRY _dispatch_stub_UnlockArraysEXT(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1118];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_UseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1119];
   ((void (GLAPIENTRY *)(GLuint pipeline, GLbitfield stages, GLuint program)) _func)(pipeline, stages, program);
}

void GLAPIENTRY _dispatch_stub_ValidateProgramPipeline(GLuint pipeline)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1120];
   ((void (GLAPIENTRY *)(GLuint pipeline)) _func)(pipeline);
}

void GLAPIENTRY _dispatch_stub_FramebufferTexture2DMultisampleEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1121];
   ((void (GLAPIENTRY *)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples)) _func)(target, attachment, textarget, texture, level, samples);
}

void GLAPIENTRY _dispatch_stub_DebugMessageCallback(GLDEBUGPROC callback, const GLvoid *userParam)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1122];
   ((void (GLAPIENTRY *)(GLDEBUGPROC callback, const GLvoid *userParam)) _func)(callback, userParam);
}

void GLAPIENTRY _dispatch_stub_DebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1123];
   ((void (GLAPIENTRY *)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)) _func)(source, type, severity, count, ids, enabled);
}

void GLAPIENTRY _dispatch_stub_DebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1124];
   ((void (GLAPIENTRY *)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)) _func)(source, type, id, severity, length, buf);
}

GLuint GLAPIENTRY _dispatch_stub_GetDebugMessageLog(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1125];
   return ((GLuint (GLAPIENTRY *)(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)) _func)(count, bufsize, sources, types, ids, severities, lengths, messageLog);
}

void GLAPIENTRY _dispatch_stub_GetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1126];
   ((void (GLAPIENTRY *)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)) _func)(identifier, name, bufSize, length, label);
}

void GLAPIENTRY _dispatch_stub_GetObjectPtrLabel(const GLvoid *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1127];
   ((void (GLAPIENTRY *)(const GLvoid *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)) _func)(ptr, bufSize, length, label);
}

void GLAPIENTRY _dispatch_stub_ObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1128];
   ((void (GLAPIENTRY *)(GLenum identifier, GLuint name, GLsizei length, const GLchar *label)) _func)(identifier, name, length, label);
}

void GLAPIENTRY _dispatch_stub_ObjectPtrLabel(const GLvoid *ptr, GLsizei length, const GLchar *label)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1129];
   ((void (GLAPIENTRY *)(const GLvoid *ptr, GLsizei length, const GLchar *label)) _func)(ptr, length, label);
}

void GLAPIENTRY _dispatch_stub_PopDebugGroup(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1130];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_PushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1131];
   ((void (GLAPIENTRY *)(GLenum source, GLuint id, GLsizei length, const GLchar *message)) _func)(source, id, length, message);
}

void GLAPIENTRY _dispatch_stub_SecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1132];
   ((void (GLAPIENTRY *)(GLfloat red, GLfloat green, GLfloat blue)) _func)(red, green, blue);
}

void GLAPIENTRY _dispatch_stub_SecondaryColor3fvEXT(const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1133];
   ((void (GLAPIENTRY *)(const GLfloat *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_MultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1134];
   ((void (GLAPIENTRY *)(GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount)) _func)(mode, count, type, indices, primcount);
}

void GLAPIENTRY _dispatch_stub_FogCoordfEXT(GLfloat coord)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1135];
   ((void (GLAPIENTRY *)(GLfloat coord)) _func)(coord);
}

void GLAPIENTRY _dispatch_stub_FogCoordfvEXT(const GLfloat *coord)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1136];
   ((void (GLAPIENTRY *)(const GLfloat *coord)) _func)(coord);
}

void GLAPIENTRY _dispatch_stub_WindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1137];
   ((void (GLAPIENTRY *)(GLdouble x, GLdouble y, GLdouble z, GLdouble w)) _func)(x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_WindowPos4dvMESA(const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1138];
   ((void (GLAPIENTRY *)(const GLdouble *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_WindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1139];
   ((void (GLAPIENTRY *)(GLfloat x, GLfloat y, GLfloat z, GLfloat w)) _func)(x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_WindowPos4fvMESA(const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1140];
   ((void (GLAPIENTRY *)(const GLfloat *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_WindowPos4iMESA(GLint x, GLint y, GLint z, GLint w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1141];
   ((void (GLAPIENTRY *)(GLint x, GLint y, GLint z, GLint w)) _func)(x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_WindowPos4ivMESA(const GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1142];
   ((void (GLAPIENTRY *)(const GLint *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_WindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1143];
   ((void (GLAPIENTRY *)(GLshort x, GLshort y, GLshort z, GLshort w)) _func)(x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_WindowPos4svMESA(const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1144];
   ((void (GLAPIENTRY *)(const GLshort *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_MultiModeDrawArraysIBM(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1145];
   ((void (GLAPIENTRY *)(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride)) _func)(mode, first, count, primcount, modestride);
}

void GLAPIENTRY _dispatch_stub_MultiModeDrawElementsIBM(const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, GLint modestride)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1146];
   ((void (GLAPIENTRY *)(const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, GLint modestride)) _func)(mode, count, type, indices, primcount, modestride);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib1dNV(GLuint index, GLdouble x)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1147];
   ((void (GLAPIENTRY *)(GLuint index, GLdouble x)) _func)(index, x);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib1dvNV(GLuint index, const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1148];
   ((void (GLAPIENTRY *)(GLuint index, const GLdouble *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib1fNV(GLuint index, GLfloat x)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1149];
   ((void (GLAPIENTRY *)(GLuint index, GLfloat x)) _func)(index, x);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib1fvNV(GLuint index, const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1150];
   ((void (GLAPIENTRY *)(GLuint index, const GLfloat *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib1sNV(GLuint index, GLshort x)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1151];
   ((void (GLAPIENTRY *)(GLuint index, GLshort x)) _func)(index, x);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib1svNV(GLuint index, const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1152];
   ((void (GLAPIENTRY *)(GLuint index, const GLshort *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1153];
   ((void (GLAPIENTRY *)(GLuint index, GLdouble x, GLdouble y)) _func)(index, x, y);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib2dvNV(GLuint index, const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1154];
   ((void (GLAPIENTRY *)(GLuint index, const GLdouble *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1155];
   ((void (GLAPIENTRY *)(GLuint index, GLfloat x, GLfloat y)) _func)(index, x, y);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib2fvNV(GLuint index, const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1156];
   ((void (GLAPIENTRY *)(GLuint index, const GLfloat *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib2sNV(GLuint index, GLshort x, GLshort y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1157];
   ((void (GLAPIENTRY *)(GLuint index, GLshort x, GLshort y)) _func)(index, x, y);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib2svNV(GLuint index, const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1158];
   ((void (GLAPIENTRY *)(GLuint index, const GLshort *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1159];
   ((void (GLAPIENTRY *)(GLuint index, GLdouble x, GLdouble y, GLdouble z)) _func)(index, x, y, z);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib3dvNV(GLuint index, const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1160];
   ((void (GLAPIENTRY *)(GLuint index, const GLdouble *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1161];
   ((void (GLAPIENTRY *)(GLuint index, GLfloat x, GLfloat y, GLfloat z)) _func)(index, x, y, z);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib3fvNV(GLuint index, const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1162];
   ((void (GLAPIENTRY *)(GLuint index, const GLfloat *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1163];
   ((void (GLAPIENTRY *)(GLuint index, GLshort x, GLshort y, GLshort z)) _func)(index, x, y, z);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib3svNV(GLuint index, const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1164];
   ((void (GLAPIENTRY *)(GLuint index, const GLshort *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1165];
   ((void (GLAPIENTRY *)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)) _func)(index, x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib4dvNV(GLuint index, const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1166];
   ((void (GLAPIENTRY *)(GLuint index, const GLdouble *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1167];
   ((void (GLAPIENTRY *)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)) _func)(index, x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib4fvNV(GLuint index, const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1168];
   ((void (GLAPIENTRY *)(GLuint index, const GLfloat *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1169];
   ((void (GLAPIENTRY *)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)) _func)(index, x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib4svNV(GLuint index, const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1170];
   ((void (GLAPIENTRY *)(GLuint index, const GLshort *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1171];
   ((void (GLAPIENTRY *)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)) _func)(index, x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib4ubvNV(GLuint index, const GLubyte *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1172];
   ((void (GLAPIENTRY *)(GLuint index, const GLubyte *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribs1dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1173];
   ((void (GLAPIENTRY *)(GLuint index, GLsizei n, const GLdouble *v)) _func)(index, n, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribs1fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1174];
   ((void (GLAPIENTRY *)(GLuint index, GLsizei n, const GLfloat *v)) _func)(index, n, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribs1svNV(GLuint index, GLsizei n, const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1175];
   ((void (GLAPIENTRY *)(GLuint index, GLsizei n, const GLshort *v)) _func)(index, n, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribs2dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1176];
   ((void (GLAPIENTRY *)(GLuint index, GLsizei n, const GLdouble *v)) _func)(index, n, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribs2fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1177];
   ((void (GLAPIENTRY *)(GLuint index, GLsizei n, const GLfloat *v)) _func)(index, n, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribs2svNV(GLuint index, GLsizei n, const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1178];
   ((void (GLAPIENTRY *)(GLuint index, GLsizei n, const GLshort *v)) _func)(index, n, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribs3dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1179];
   ((void (GLAPIENTRY *)(GLuint index, GLsizei n, const GLdouble *v)) _func)(index, n, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribs3fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1180];
   ((void (GLAPIENTRY *)(GLuint index, GLsizei n, const GLfloat *v)) _func)(index, n, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribs3svNV(GLuint index, GLsizei n, const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1181];
   ((void (GLAPIENTRY *)(GLuint index, GLsizei n, const GLshort *v)) _func)(index, n, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribs4dvNV(GLuint index, GLsizei n, const GLdouble *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1182];
   ((void (GLAPIENTRY *)(GLuint index, GLsizei n, const GLdouble *v)) _func)(index, n, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribs4fvNV(GLuint index, GLsizei n, const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1183];
   ((void (GLAPIENTRY *)(GLuint index, GLsizei n, const GLfloat *v)) _func)(index, n, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribs4svNV(GLuint index, GLsizei n, const GLshort *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1184];
   ((void (GLAPIENTRY *)(GLuint index, GLsizei n, const GLshort *v)) _func)(index, n, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribs4ubvNV(GLuint index, GLsizei n, const GLubyte *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1185];
   ((void (GLAPIENTRY *)(GLuint index, GLsizei n, const GLubyte *v)) _func)(index, n, v);
}

void GLAPIENTRY _dispatch_stub_AlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1186];
   ((void (GLAPIENTRY *)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)) _func)(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
}

void GLAPIENTRY _dispatch_stub_AlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1187];
   ((void (GLAPIENTRY *)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)) _func)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
}

void GLAPIENTRY _dispatch_stub_AlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1188];
   ((void (GLAPIENTRY *)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)) _func)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
}

void GLAPIENTRY _dispatch_stub_BeginFragmentShaderATI(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1189];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_BindFragmentShaderATI(GLuint id)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1190];
   ((void (GLAPIENTRY *)(GLuint id)) _func)(id);
}

void GLAPIENTRY _dispatch_stub_ColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1191];
   ((void (GLAPIENTRY *)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)) _func)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
}

void GLAPIENTRY _dispatch_stub_ColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1192];
   ((void (GLAPIENTRY *)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)) _func)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
}

void GLAPIENTRY _dispatch_stub_ColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1193];
   ((void (GLAPIENTRY *)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)) _func)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
}

void GLAPIENTRY _dispatch_stub_DeleteFragmentShaderATI(GLuint id)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1194];
   ((void (GLAPIENTRY *)(GLuint id)) _func)(id);
}

void GLAPIENTRY _dispatch_stub_EndFragmentShaderATI(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1195];
   ((void (GLAPIENTRY *)(void)) _func)();
}

GLuint GLAPIENTRY _dispatch_stub_GenFragmentShadersATI(GLuint range)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1196];
   return ((GLuint (GLAPIENTRY *)(GLuint range)) _func)(range);
}

void GLAPIENTRY _dispatch_stub_PassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1197];
   ((void (GLAPIENTRY *)(GLuint dst, GLuint coord, GLenum swizzle)) _func)(dst, coord, swizzle);
}

void GLAPIENTRY _dispatch_stub_SampleMapATI(GLuint dst, GLuint interp, GLenum swizzle)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1198];
   ((void (GLAPIENTRY *)(GLuint dst, GLuint interp, GLenum swizzle)) _func)(dst, interp, swizzle);
}

void GLAPIENTRY _dispatch_stub_SetFragmentShaderConstantATI(GLuint dst, const GLfloat *value)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1199];
   ((void (GLAPIENTRY *)(GLuint dst, const GLfloat *value)) _func)(dst, value);
}

void GLAPIENTRY _dispatch_stub_DepthRangeArrayfvOES(GLuint first, GLsizei count, const GLfloat *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1200];
   ((void (GLAPIENTRY *)(GLuint first, GLsizei count, const GLfloat *v)) _func)(first, count, v);
}

void GLAPIENTRY _dispatch_stub_DepthRangeIndexedfOES(GLuint index, GLfloat n, GLfloat f)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1201];
   ((void (GLAPIENTRY *)(GLuint index, GLfloat n, GLfloat f)) _func)(index, n, f);
}

void GLAPIENTRY _dispatch_stub_ActiveStencilFaceEXT(GLenum face)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1202];
   ((void (GLAPIENTRY *)(GLenum face)) _func)(face);
}

void GLAPIENTRY _dispatch_stub_PrimitiveRestartNV(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1203];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_GetTexGenxvOES(GLenum coord, GLenum pname, GLfixed *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1204];
   ((void (GLAPIENTRY *)(GLenum coord, GLenum pname, GLfixed *params)) _func)(coord, pname, params);
}

void GLAPIENTRY _dispatch_stub_TexGenxOES(GLenum coord, GLenum pname, GLfixed param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1205];
   ((void (GLAPIENTRY *)(GLenum coord, GLenum pname, GLfixed param)) _func)(coord, pname, param);
}

void GLAPIENTRY _dispatch_stub_TexGenxvOES(GLenum coord, GLenum pname, const GLfixed *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1206];
   ((void (GLAPIENTRY *)(GLenum coord, GLenum pname, const GLfixed *params)) _func)(coord, pname, params);
}

void GLAPIENTRY _dispatch_stub_DepthBoundsEXT(GLclampd zmin, GLclampd zmax)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1207];
   ((void (GLAPIENTRY *)(GLclampd zmin, GLclampd zmax)) _func)(zmin, zmax);
}

void GLAPIENTRY _dispatch_stub_BindFramebufferEXT(GLenum target, GLuint framebuffer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1208];
   ((void (GLAPIENTRY *)(GLenum target, GLuint framebuffer)) _func)(target, framebuffer);
}

void GLAPIENTRY _dispatch_stub_BindRenderbufferEXT(GLenum target, GLuint renderbuffer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1209];
   ((void (GLAPIENTRY *)(GLenum target, GLuint renderbuffer)) _func)(target, renderbuffer);
}

void GLAPIENTRY _dispatch_stub_StringMarkerGREMEDY(GLsizei len, const GLvoid *string)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1210];
   ((void (GLAPIENTRY *)(GLsizei len, const GLvoid *string)) _func)(len, string);
}

void GLAPIENTRY _dispatch_stub_VertexAttribI1iEXT(GLuint index, GLint x)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1211];
   ((void (GLAPIENTRY *)(GLuint index, GLint x)) _func)(index, x);
}

void GLAPIENTRY _dispatch_stub_VertexAttribI1uiEXT(GLuint index, GLuint x)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1212];
   ((void (GLAPIENTRY *)(GLuint index, GLuint x)) _func)(index, x);
}

void GLAPIENTRY _dispatch_stub_VertexAttribI2iEXT(GLuint index, GLint x, GLint y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1213];
   ((void (GLAPIENTRY *)(GLuint index, GLint x, GLint y)) _func)(index, x, y);
}

void GLAPIENTRY _dispatch_stub_VertexAttribI2ivEXT(GLuint index, const GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1214];
   ((void (GLAPIENTRY *)(GLuint index, const GLint *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1215];
   ((void (GLAPIENTRY *)(GLuint index, GLuint x, GLuint y)) _func)(index, x, y);
}

void GLAPIENTRY _dispatch_stub_VertexAttribI2uivEXT(GLuint index, const GLuint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1216];
   ((void (GLAPIENTRY *)(GLuint index, const GLuint *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1217];
   ((void (GLAPIENTRY *)(GLuint index, GLint x, GLint y, GLint z)) _func)(index, x, y, z);
}

void GLAPIENTRY _dispatch_stub_VertexAttribI3ivEXT(GLuint index, const GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1218];
   ((void (GLAPIENTRY *)(GLuint index, const GLint *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1219];
   ((void (GLAPIENTRY *)(GLuint index, GLuint x, GLuint y, GLuint z)) _func)(index, x, y, z);
}

void GLAPIENTRY _dispatch_stub_VertexAttribI3uivEXT(GLuint index, const GLuint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1220];
   ((void (GLAPIENTRY *)(GLuint index, const GLuint *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1221];
   ((void (GLAPIENTRY *)(GLuint index, GLint x, GLint y, GLint z, GLint w)) _func)(index, x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_VertexAttribI4ivEXT(GLuint index, const GLint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1222];
   ((void (GLAPIENTRY *)(GLuint index, const GLint *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1223];
   ((void (GLAPIENTRY *)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)) _func)(index, x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_VertexAttribI4uivEXT(GLuint index, const GLuint *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1224];
   ((void (GLAPIENTRY *)(GLuint index, const GLuint *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_ClearColorIiEXT(GLint r, GLint g, GLint b, GLint a)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1225];
   ((void (GLAPIENTRY *)(GLint r, GLint g, GLint b, GLint a)) _func)(r, g, b, a);
}

void GLAPIENTRY _dispatch_stub_ClearColorIuiEXT(GLuint r, GLuint g, GLuint b, GLuint a)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1226];
   ((void (GLAPIENTRY *)(GLuint r, GLuint g, GLuint b, GLuint a)) _func)(r, g, b, a);
}

void GLAPIENTRY _dispatch_stub_BindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1227];
   ((void (GLAPIENTRY *)(GLenum target, GLuint index, GLuint buffer, GLintptr offset)) _func)(target, index, buffer, offset);
}

void GLAPIENTRY _dispatch_stub_BeginPerfMonitorAMD(GLuint monitor)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1228];
   ((void (GLAPIENTRY *)(GLuint monitor)) _func)(monitor);
}

void GLAPIENTRY _dispatch_stub_DeletePerfMonitorsAMD(GLsizei n, GLuint *monitors)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1229];
   ((void (GLAPIENTRY *)(GLsizei n, GLuint *monitors)) _func)(n, monitors);
}

void GLAPIENTRY _dispatch_stub_EndPerfMonitorAMD(GLuint monitor)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1230];
   ((void (GLAPIENTRY *)(GLuint monitor)) _func)(monitor);
}

void GLAPIENTRY _dispatch_stub_GenPerfMonitorsAMD(GLsizei n, GLuint *monitors)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1231];
   ((void (GLAPIENTRY *)(GLsizei n, GLuint *monitors)) _func)(n, monitors);
}

void GLAPIENTRY _dispatch_stub_GetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1232];
   ((void (GLAPIENTRY *)(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten)) _func)(monitor, pname, dataSize, data, bytesWritten);
}

void GLAPIENTRY _dispatch_stub_GetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1233];
   ((void (GLAPIENTRY *)(GLuint group, GLuint counter, GLenum pname, GLvoid *data)) _func)(group, counter, pname, data);
}

void GLAPIENTRY _dispatch_stub_GetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1234];
   ((void (GLAPIENTRY *)(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString)) _func)(group, counter, bufSize, length, counterString);
}

void GLAPIENTRY _dispatch_stub_GetPerfMonitorCountersAMD(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei countersSize, GLuint *counters)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1235];
   ((void (GLAPIENTRY *)(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei countersSize, GLuint *counters)) _func)(group, numCounters, maxActiveCounters, countersSize, counters);
}

void GLAPIENTRY _dispatch_stub_GetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1236];
   ((void (GLAPIENTRY *)(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString)) _func)(group, bufSize, length, groupString);
}

void GLAPIENTRY _dispatch_stub_GetPerfMonitorGroupsAMD(GLint *numGroups, GLsizei groupsSize, GLuint *groups)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1237];
   ((void (GLAPIENTRY *)(GLint *numGroups, GLsizei groupsSize, GLuint *groups)) _func)(numGroups, groupsSize, groups);
}

void GLAPIENTRY _dispatch_stub_SelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1238];
   ((void (GLAPIENTRY *)(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList)) _func)(monitor, enable, group, numCounters, counterList);
}

void GLAPIENTRY _dispatch_stub_TextureBarrierNV(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1239];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_VDPAUFiniNV(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1240];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_VDPAUGetSurfaceivNV(GLintptr surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1241];
   ((void (GLAPIENTRY *)(GLintptr surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)) _func)(surface, pname, bufSize, length, values);
}

void GLAPIENTRY _dispatch_stub_VDPAUInitNV(const GLvoid *vdpDevice, const GLvoid *getProcAddress)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1242];
   ((void (GLAPIENTRY *)(const GLvoid *vdpDevice, const GLvoid *getProcAddress)) _func)(vdpDevice, getProcAddress);
}

GLboolean GLAPIENTRY _dispatch_stub_VDPAUIsSurfaceNV(GLintptr surface)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1243];
   return ((GLboolean (GLAPIENTRY *)(GLintptr surface)) _func)(surface);
}

void GLAPIENTRY _dispatch_stub_VDPAUMapSurfacesNV(GLsizei numSurfaces, const GLintptr *surfaces)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1244];
   ((void (GLAPIENTRY *)(GLsizei numSurfaces, const GLintptr *surfaces)) _func)(numSurfaces, surfaces);
}

GLintptr GLAPIENTRY _dispatch_stub_VDPAURegisterOutputSurfaceNV(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1245];
   return ((GLintptr (GLAPIENTRY *)(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)) _func)(vdpSurface, target, numTextureNames, textureNames);
}

GLintptr GLAPIENTRY _dispatch_stub_VDPAURegisterVideoSurfaceNV(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1246];
   return ((GLintptr (GLAPIENTRY *)(const GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)) _func)(vdpSurface, target, numTextureNames, textureNames);
}

void GLAPIENTRY _dispatch_stub_VDPAUSurfaceAccessNV(GLintptr surface, GLenum access)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1247];
   ((void (GLAPIENTRY *)(GLintptr surface, GLenum access)) _func)(surface, access);
}

void GLAPIENTRY _dispatch_stub_VDPAUUnmapSurfacesNV(GLsizei numSurfaces, const GLintptr *surfaces)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1248];
   ((void (GLAPIENTRY *)(GLsizei numSurfaces, const GLintptr *surfaces)) _func)(numSurfaces, surfaces);
}

void GLAPIENTRY _dispatch_stub_VDPAUUnregisterSurfaceNV(GLintptr surface)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1249];
   ((void (GLAPIENTRY *)(GLintptr surface)) _func)(surface);
}

void GLAPIENTRY _dispatch_stub_BeginPerfQueryINTEL(GLuint queryHandle)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1250];
   ((void (GLAPIENTRY *)(GLuint queryHandle)) _func)(queryHandle);
}

void GLAPIENTRY _dispatch_stub_CreatePerfQueryINTEL(GLuint queryId, GLuint *queryHandle)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1251];
   ((void (GLAPIENTRY *)(GLuint queryId, GLuint *queryHandle)) _func)(queryId, queryHandle);
}

void GLAPIENTRY _dispatch_stub_DeletePerfQueryINTEL(GLuint queryHandle)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1252];
   ((void (GLAPIENTRY *)(GLuint queryHandle)) _func)(queryHandle);
}

void GLAPIENTRY _dispatch_stub_EndPerfQueryINTEL(GLuint queryHandle)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1253];
   ((void (GLAPIENTRY *)(GLuint queryHandle)) _func)(queryHandle);
}

void GLAPIENTRY _dispatch_stub_GetFirstPerfQueryIdINTEL(GLuint *queryId)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1254];
   ((void (GLAPIENTRY *)(GLuint *queryId)) _func)(queryId);
}

void GLAPIENTRY _dispatch_stub_GetNextPerfQueryIdINTEL(GLuint queryId, GLuint *nextQueryId)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1255];
   ((void (GLAPIENTRY *)(GLuint queryId, GLuint *nextQueryId)) _func)(queryId, nextQueryId);
}

void GLAPIENTRY _dispatch_stub_GetPerfCounterInfoINTEL(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1256];
   ((void (GLAPIENTRY *)(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue)) _func)(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
}

void GLAPIENTRY _dispatch_stub_GetPerfQueryDataINTEL(GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1257];
   ((void (GLAPIENTRY *)(GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten)) _func)(queryHandle, flags, dataSize, data, bytesWritten);
}

void GLAPIENTRY _dispatch_stub_GetPerfQueryIdByNameINTEL(GLchar *queryName, GLuint *queryId)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1258];
   ((void (GLAPIENTRY *)(GLchar *queryName, GLuint *queryId)) _func)(queryName, queryId);
}

void GLAPIENTRY _dispatch_stub_GetPerfQueryInfoINTEL(GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1259];
   ((void (GLAPIENTRY *)(GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask)) _func)(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
}

void GLAPIENTRY _dispatch_stub_PolygonOffsetClampEXT(GLfloat factor, GLfloat units, GLfloat clamp)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1260];
   ((void (GLAPIENTRY *)(GLfloat factor, GLfloat units, GLfloat clamp)) _func)(factor, units, clamp);
}

void GLAPIENTRY _dispatch_stub_SubpixelPrecisionBiasNV(GLuint xbits, GLuint ybits)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1261];
   ((void (GLAPIENTRY *)(GLuint xbits, GLuint ybits)) _func)(xbits, ybits);
}

void GLAPIENTRY _dispatch_stub_ConservativeRasterParameterfNV(GLenum pname, GLfloat param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1262];
   ((void (GLAPIENTRY *)(GLenum pname, GLfloat param)) _func)(pname, param);
}

void GLAPIENTRY _dispatch_stub_ConservativeRasterParameteriNV(GLenum pname, GLint param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1263];
   ((void (GLAPIENTRY *)(GLenum pname, GLint param)) _func)(pname, param);
}

void GLAPIENTRY _dispatch_stub_WindowRectanglesEXT(GLenum mode, GLsizei count, const GLint *box)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1264];
   ((void (GLAPIENTRY *)(GLenum mode, GLsizei count, const GLint *box)) _func)(mode, count, box);
}

void GLAPIENTRY _dispatch_stub_BufferStorageMemEXT(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1265];
   ((void (GLAPIENTRY *)(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset)) _func)(target, size, memory, offset);
}

void GLAPIENTRY _dispatch_stub_CreateMemoryObjectsEXT(GLsizei n, GLuint *memoryObjects)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1266];
   ((void (GLAPIENTRY *)(GLsizei n, GLuint *memoryObjects)) _func)(n, memoryObjects);
}

void GLAPIENTRY _dispatch_stub_DeleteMemoryObjectsEXT(GLsizei n, const GLuint *memoryObjects)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1267];
   ((void (GLAPIENTRY *)(GLsizei n, const GLuint *memoryObjects)) _func)(n, memoryObjects);
}

void GLAPIENTRY _dispatch_stub_DeleteSemaphoresEXT(GLsizei n, const GLuint *semaphores)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1268];
   ((void (GLAPIENTRY *)(GLsizei n, const GLuint *semaphores)) _func)(n, semaphores);
}

void GLAPIENTRY _dispatch_stub_GenSemaphoresEXT(GLsizei n, GLuint *semaphores)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1269];
   ((void (GLAPIENTRY *)(GLsizei n, GLuint *semaphores)) _func)(n, semaphores);
}

void GLAPIENTRY _dispatch_stub_GetMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1270];
   ((void (GLAPIENTRY *)(GLuint memoryObject, GLenum pname, GLint *params)) _func)(memoryObject, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, GLuint64 *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1271];
   ((void (GLAPIENTRY *)(GLuint semaphore, GLenum pname, GLuint64 *params)) _func)(semaphore, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetUnsignedBytei_vEXT(GLenum target, GLuint index, GLubyte *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1272];
   ((void (GLAPIENTRY *)(GLenum target, GLuint index, GLubyte *data)) _func)(target, index, data);
}

void GLAPIENTRY _dispatch_stub_GetUnsignedBytevEXT(GLenum pname, GLubyte *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1273];
   ((void (GLAPIENTRY *)(GLenum pname, GLubyte *data)) _func)(pname, data);
}

GLboolean GLAPIENTRY _dispatch_stub_IsMemoryObjectEXT(GLuint memoryObject)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1274];
   return ((GLboolean (GLAPIENTRY *)(GLuint memoryObject)) _func)(memoryObject);
}

GLboolean GLAPIENTRY _dispatch_stub_IsSemaphoreEXT(GLuint semaphore)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1275];
   return ((GLboolean (GLAPIENTRY *)(GLuint semaphore)) _func)(semaphore);
}

void GLAPIENTRY _dispatch_stub_MemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, const GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1276];
   ((void (GLAPIENTRY *)(GLuint memoryObject, GLenum pname, const GLint *params)) _func)(memoryObject, pname, params);
}

void GLAPIENTRY _dispatch_stub_NamedBufferStorageMemEXT(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1277];
   ((void (GLAPIENTRY *)(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset)) _func)(buffer, size, memory, offset);
}

void GLAPIENTRY _dispatch_stub_SemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, const GLuint64 *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1278];
   ((void (GLAPIENTRY *)(GLuint semaphore, GLenum pname, const GLuint64 *params)) _func)(semaphore, pname, params);
}

void GLAPIENTRY _dispatch_stub_SignalSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1279];
   ((void (GLAPIENTRY *)(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts)) _func)(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
}

void GLAPIENTRY _dispatch_stub_TexStorageMem1DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1280];
   ((void (GLAPIENTRY *)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset)) _func)(target, levels, internalFormat, width, memory, offset);
}

void GLAPIENTRY _dispatch_stub_TexStorageMem2DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1281];
   ((void (GLAPIENTRY *)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset)) _func)(target, levels, internalFormat, width, height, memory, offset);
}

void GLAPIENTRY _dispatch_stub_TexStorageMem2DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1282];
   ((void (GLAPIENTRY *)(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)) _func)(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
}

void GLAPIENTRY _dispatch_stub_TexStorageMem3DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1283];
   ((void (GLAPIENTRY *)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset)) _func)(target, levels, internalFormat, width, height, depth, memory, offset);
}

void GLAPIENTRY _dispatch_stub_TexStorageMem3DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1284];
   ((void (GLAPIENTRY *)(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)) _func)(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
}

void GLAPIENTRY _dispatch_stub_TextureStorageMem1DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1285];
   ((void (GLAPIENTRY *)(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset)) _func)(texture, levels, internalFormat, width, memory, offset);
}

void GLAPIENTRY _dispatch_stub_TextureStorageMem2DEXT(GLenum texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1286];
   ((void (GLAPIENTRY *)(GLenum texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset)) _func)(texture, levels, internalFormat, width, height, memory, offset);
}

void GLAPIENTRY _dispatch_stub_TextureStorageMem2DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1287];
   ((void (GLAPIENTRY *)(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)) _func)(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
}

void GLAPIENTRY _dispatch_stub_TextureStorageMem3DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1288];
   ((void (GLAPIENTRY *)(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset)) _func)(texture, levels, internalFormat, width, height, depth, memory, offset);
}

void GLAPIENTRY _dispatch_stub_TextureStorageMem3DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1289];
   ((void (GLAPIENTRY *)(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset)) _func)(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
}

void GLAPIENTRY _dispatch_stub_WaitSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1290];
   ((void (GLAPIENTRY *)(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts)) _func)(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
}

void GLAPIENTRY _dispatch_stub_ImportMemoryFdEXT(GLuint memory, GLuint64 size, GLenum handleType, GLint fd)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1291];
   ((void (GLAPIENTRY *)(GLuint memory, GLuint64 size, GLenum handleType, GLint fd)) _func)(memory, size, handleType, fd);
}

void GLAPIENTRY _dispatch_stub_ImportSemaphoreFdEXT(GLuint semaphore, GLenum handleType, GLint fd)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1292];
   ((void (GLAPIENTRY *)(GLuint semaphore, GLenum handleType, GLint fd)) _func)(semaphore, handleType, fd);
}

void GLAPIENTRY _dispatch_stub_FramebufferFetchBarrierEXT(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1293];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_NamedRenderbufferStorageMultisampleAdvancedAMD(GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1294];
   ((void (GLAPIENTRY *)(GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height)) _func)(renderbuffer, samples, storageSamples, internalformat, width, height);
}

void GLAPIENTRY _dispatch_stub_RenderbufferStorageMultisampleAdvancedAMD(GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1295];
   ((void (GLAPIENTRY *)(GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height)) _func)(target, samples, storageSamples, internalformat, width, height);
}

void GLAPIENTRY _dispatch_stub_StencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1296];
   ((void (GLAPIENTRY *)(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)) _func)(frontfunc, backfunc, ref, mask);
}

void GLAPIENTRY _dispatch_stub_ProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1297];
   ((void (GLAPIENTRY *)(GLenum target, GLuint index, GLsizei count, const GLfloat *params)) _func)(target, index, count, params);
}

void GLAPIENTRY _dispatch_stub_ProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1298];
   ((void (GLAPIENTRY *)(GLenum target, GLuint index, GLsizei count, const GLfloat *params)) _func)(target, index, count, params);
}

void GLAPIENTRY _dispatch_stub_EGLImageTargetRenderbufferStorageOES(GLenum target, GLvoid *writeOffset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1299];
   ((void (GLAPIENTRY *)(GLenum target, GLvoid *writeOffset)) _func)(target, writeOffset);
}

void GLAPIENTRY _dispatch_stub_EGLImageTargetTexture2DOES(GLenum target, GLvoid *writeOffset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1300];
   ((void (GLAPIENTRY *)(GLenum target, GLvoid *writeOffset)) _func)(target, writeOffset);
}

void GLAPIENTRY _dispatch_stub_AlphaFuncx(GLenum func, GLclampx ref)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1301];
   ((void (GLAPIENTRY *)(GLenum func, GLclampx ref)) _func)(func, ref);
}

void GLAPIENTRY _dispatch_stub_ClearColorx(GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1302];
   ((void (GLAPIENTRY *)(GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha)) _func)(red, green, blue, alpha);
}

void GLAPIENTRY _dispatch_stub_ClearDepthx(GLclampx depth)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1303];
   ((void (GLAPIENTRY *)(GLclampx depth)) _func)(depth);
}

void GLAPIENTRY _dispatch_stub_Color4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1304];
   ((void (GLAPIENTRY *)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)) _func)(red, green, blue, alpha);
}

void GLAPIENTRY _dispatch_stub_DepthRangex(GLclampx zNear, GLclampx zFar)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1305];
   ((void (GLAPIENTRY *)(GLclampx zNear, GLclampx zFar)) _func)(zNear, zFar);
}

void GLAPIENTRY _dispatch_stub_Fogx(GLenum pname, GLfixed param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1306];
   ((void (GLAPIENTRY *)(GLenum pname, GLfixed param)) _func)(pname, param);
}

void GLAPIENTRY _dispatch_stub_Fogxv(GLenum pname, const GLfixed *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1307];
   ((void (GLAPIENTRY *)(GLenum pname, const GLfixed *params)) _func)(pname, params);
}

void GLAPIENTRY _dispatch_stub_Frustumf(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1308];
   ((void (GLAPIENTRY *)(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)) _func)(left, right, bottom, top, zNear, zFar);
}

void GLAPIENTRY _dispatch_stub_Frustumx(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1309];
   ((void (GLAPIENTRY *)(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)) _func)(left, right, bottom, top, zNear, zFar);
}

void GLAPIENTRY _dispatch_stub_LightModelx(GLenum pname, GLfixed param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1310];
   ((void (GLAPIENTRY *)(GLenum pname, GLfixed param)) _func)(pname, param);
}

void GLAPIENTRY _dispatch_stub_LightModelxv(GLenum pname, const GLfixed *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1311];
   ((void (GLAPIENTRY *)(GLenum pname, const GLfixed *params)) _func)(pname, params);
}

void GLAPIENTRY _dispatch_stub_Lightx(GLenum light, GLenum pname, GLfixed param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1312];
   ((void (GLAPIENTRY *)(GLenum light, GLenum pname, GLfixed param)) _func)(light, pname, param);
}

void GLAPIENTRY _dispatch_stub_Lightxv(GLenum light, GLenum pname, const GLfixed *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1313];
   ((void (GLAPIENTRY *)(GLenum light, GLenum pname, const GLfixed *params)) _func)(light, pname, params);
}

void GLAPIENTRY _dispatch_stub_LineWidthx(GLfixed width)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1314];
   ((void (GLAPIENTRY *)(GLfixed width)) _func)(width);
}

void GLAPIENTRY _dispatch_stub_LoadMatrixx(const GLfixed *m)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1315];
   ((void (GLAPIENTRY *)(const GLfixed *m)) _func)(m);
}

void GLAPIENTRY _dispatch_stub_Materialx(GLenum face, GLenum pname, GLfixed param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1316];
   ((void (GLAPIENTRY *)(GLenum face, GLenum pname, GLfixed param)) _func)(face, pname, param);
}

void GLAPIENTRY _dispatch_stub_Materialxv(GLenum face, GLenum pname, const GLfixed *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1317];
   ((void (GLAPIENTRY *)(GLenum face, GLenum pname, const GLfixed *params)) _func)(face, pname, params);
}

void GLAPIENTRY _dispatch_stub_MultMatrixx(const GLfixed *m)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1318];
   ((void (GLAPIENTRY *)(const GLfixed *m)) _func)(m);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord4x(GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1319];
   ((void (GLAPIENTRY *)(GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q)) _func)(target, s, t, r, q);
}

void GLAPIENTRY _dispatch_stub_Normal3x(GLfixed nx, GLfixed ny, GLfixed nz)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1320];
   ((void (GLAPIENTRY *)(GLfixed nx, GLfixed ny, GLfixed nz)) _func)(nx, ny, nz);
}

void GLAPIENTRY _dispatch_stub_Orthof(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1321];
   ((void (GLAPIENTRY *)(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)) _func)(left, right, bottom, top, zNear, zFar);
}

void GLAPIENTRY _dispatch_stub_Orthox(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1322];
   ((void (GLAPIENTRY *)(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)) _func)(left, right, bottom, top, zNear, zFar);
}

void GLAPIENTRY _dispatch_stub_PointSizex(GLfixed size)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1323];
   ((void (GLAPIENTRY *)(GLfixed size)) _func)(size);
}

void GLAPIENTRY _dispatch_stub_PolygonOffsetx(GLfixed factor, GLfixed units)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1324];
   ((void (GLAPIENTRY *)(GLfixed factor, GLfixed units)) _func)(factor, units);
}

void GLAPIENTRY _dispatch_stub_Rotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1325];
   ((void (GLAPIENTRY *)(GLfixed angle, GLfixed x, GLfixed y, GLfixed z)) _func)(angle, x, y, z);
}

void GLAPIENTRY _dispatch_stub_SampleCoveragex(GLclampx value, GLboolean invert)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1326];
   ((void (GLAPIENTRY *)(GLclampx value, GLboolean invert)) _func)(value, invert);
}

void GLAPIENTRY _dispatch_stub_Scalex(GLfixed x, GLfixed y, GLfixed z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1327];
   ((void (GLAPIENTRY *)(GLfixed x, GLfixed y, GLfixed z)) _func)(x, y, z);
}

void GLAPIENTRY _dispatch_stub_TexEnvx(GLenum target, GLenum pname, GLfixed param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1328];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLfixed param)) _func)(target, pname, param);
}

void GLAPIENTRY _dispatch_stub_TexEnvxv(GLenum target, GLenum pname, const GLfixed *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1329];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, const GLfixed *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_TexParameterx(GLenum target, GLenum pname, GLfixed param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1330];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLfixed param)) _func)(target, pname, param);
}

void GLAPIENTRY _dispatch_stub_Translatex(GLfixed x, GLfixed y, GLfixed z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1331];
   ((void (GLAPIENTRY *)(GLfixed x, GLfixed y, GLfixed z)) _func)(x, y, z);
}

void GLAPIENTRY _dispatch_stub_ClipPlanef(GLenum plane, const GLfloat *equation)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1332];
   ((void (GLAPIENTRY *)(GLenum plane, const GLfloat *equation)) _func)(plane, equation);
}

void GLAPIENTRY _dispatch_stub_ClipPlanex(GLenum plane, const GLfixed *equation)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1333];
   ((void (GLAPIENTRY *)(GLenum plane, const GLfixed *equation)) _func)(plane, equation);
}

void GLAPIENTRY _dispatch_stub_GetClipPlanef(GLenum plane, GLfloat *equation)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1334];
   ((void (GLAPIENTRY *)(GLenum plane, GLfloat *equation)) _func)(plane, equation);
}

void GLAPIENTRY _dispatch_stub_GetClipPlanex(GLenum plane, GLfixed *equation)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1335];
   ((void (GLAPIENTRY *)(GLenum plane, GLfixed *equation)) _func)(plane, equation);
}

void GLAPIENTRY _dispatch_stub_GetFixedv(GLenum pname, GLfixed *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1336];
   ((void (GLAPIENTRY *)(GLenum pname, GLfixed *params)) _func)(pname, params);
}

void GLAPIENTRY _dispatch_stub_GetLightxv(GLenum light, GLenum pname, GLfixed *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1337];
   ((void (GLAPIENTRY *)(GLenum light, GLenum pname, GLfixed *params)) _func)(light, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetMaterialxv(GLenum face, GLenum pname, GLfixed *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1338];
   ((void (GLAPIENTRY *)(GLenum face, GLenum pname, GLfixed *params)) _func)(face, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetTexEnvxv(GLenum target, GLenum pname, GLfixed *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1339];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLfixed *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetTexParameterxv(GLenum target, GLenum pname, GLfixed *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1340];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLfixed *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_PointParameterx(GLenum pname, GLfixed param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1341];
   ((void (GLAPIENTRY *)(GLenum pname, GLfixed param)) _func)(pname, param);
}

void GLAPIENTRY _dispatch_stub_PointParameterxv(GLenum pname, const GLfixed *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1342];
   ((void (GLAPIENTRY *)(GLenum pname, const GLfixed *params)) _func)(pname, params);
}

void GLAPIENTRY _dispatch_stub_TexParameterxv(GLenum target, GLenum pname, const GLfixed *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1343];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, const GLfixed *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_BlendBarrier(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1344];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_PrimitiveBoundingBox(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1345];
   ((void (GLAPIENTRY *)(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)) _func)(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
}

void GLAPIENTRY _dispatch_stub_MaxShaderCompilerThreadsKHR(GLuint count)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1346];
   ((void (GLAPIENTRY *)(GLuint count)) _func)(count);
}

void GLAPIENTRY _dispatch_stub_MatrixLoadfEXT(GLenum matrixMode, const GLfloat *m)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1347];
   ((void (GLAPIENTRY *)(GLenum matrixMode, const GLfloat *m)) _func)(matrixMode, m);
}

void GLAPIENTRY _dispatch_stub_MatrixLoaddEXT(GLenum matrixMode, const GLdouble *m)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1348];
   ((void (GLAPIENTRY *)(GLenum matrixMode, const GLdouble *m)) _func)(matrixMode, m);
}

void GLAPIENTRY _dispatch_stub_MatrixMultfEXT(GLenum matrixMode, const GLfloat *m)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1349];
   ((void (GLAPIENTRY *)(GLenum matrixMode, const GLfloat *m)) _func)(matrixMode, m);
}

void GLAPIENTRY _dispatch_stub_MatrixMultdEXT(GLenum matrixMode, const GLdouble *m)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1350];
   ((void (GLAPIENTRY *)(GLenum matrixMode, const GLdouble *m)) _func)(matrixMode, m);
}

void GLAPIENTRY _dispatch_stub_MatrixLoadIdentityEXT(GLenum matrixMode)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1351];
   ((void (GLAPIENTRY *)(GLenum matrixMode)) _func)(matrixMode);
}

void GLAPIENTRY _dispatch_stub_MatrixRotatefEXT(GLenum matrixMode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1352];
   ((void (GLAPIENTRY *)(GLenum matrixMode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)) _func)(matrixMode, angle, x, y, z);
}

void GLAPIENTRY _dispatch_stub_MatrixRotatedEXT(GLenum matrixMode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1353];
   ((void (GLAPIENTRY *)(GLenum matrixMode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)) _func)(matrixMode, angle, x, y, z);
}

void GLAPIENTRY _dispatch_stub_MatrixScalefEXT(GLenum matrixMode, GLfloat x, GLfloat y, GLfloat z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1354];
   ((void (GLAPIENTRY *)(GLenum matrixMode, GLfloat x, GLfloat y, GLfloat z)) _func)(matrixMode, x, y, z);
}

void GLAPIENTRY _dispatch_stub_MatrixScaledEXT(GLenum matrixMode, GLdouble x, GLdouble y, GLdouble z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1355];
   ((void (GLAPIENTRY *)(GLenum matrixMode, GLdouble x, GLdouble y, GLdouble z)) _func)(matrixMode, x, y, z);
}

void GLAPIENTRY _dispatch_stub_MatrixTranslatefEXT(GLenum matrixMode, GLfloat x, GLfloat y, GLfloat z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1356];
   ((void (GLAPIENTRY *)(GLenum matrixMode, GLfloat x, GLfloat y, GLfloat z)) _func)(matrixMode, x, y, z);
}

void GLAPIENTRY _dispatch_stub_MatrixTranslatedEXT(GLenum matrixMode, GLdouble x, GLdouble y, GLdouble z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1357];
   ((void (GLAPIENTRY *)(GLenum matrixMode, GLdouble x, GLdouble y, GLdouble z)) _func)(matrixMode, x, y, z);
}

void GLAPIENTRY _dispatch_stub_MatrixOrthoEXT(GLenum matrixMode, GLdouble l, GLdouble r, GLdouble b, GLdouble t, GLdouble n, GLdouble f)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1358];
   ((void (GLAPIENTRY *)(GLenum matrixMode, GLdouble l, GLdouble r, GLdouble b, GLdouble t, GLdouble n, GLdouble f)) _func)(matrixMode, l, r, b, t, n, f);
}

void GLAPIENTRY _dispatch_stub_MatrixFrustumEXT(GLenum matrixMode, GLdouble l, GLdouble r, GLdouble b, GLdouble t, GLdouble n, GLdouble f)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1359];
   ((void (GLAPIENTRY *)(GLenum matrixMode, GLdouble l, GLdouble r, GLdouble b, GLdouble t, GLdouble n, GLdouble f)) _func)(matrixMode, l, r, b, t, n, f);
}

void GLAPIENTRY _dispatch_stub_MatrixPushEXT(GLenum matrixMode)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1360];
   ((void (GLAPIENTRY *)(GLenum matrixMode)) _func)(matrixMode);
}

void GLAPIENTRY _dispatch_stub_MatrixPopEXT(GLenum matrixMode)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1361];
   ((void (GLAPIENTRY *)(GLenum matrixMode)) _func)(matrixMode);
}

void GLAPIENTRY _dispatch_stub_MatrixLoadTransposefEXT(GLenum matrixMode, const GLfloat *m)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1362];
   ((void (GLAPIENTRY *)(GLenum matrixMode, const GLfloat *m)) _func)(matrixMode, m);
}

void GLAPIENTRY _dispatch_stub_MatrixLoadTransposedEXT(GLenum matrixMode, const GLdouble *m)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1363];
   ((void (GLAPIENTRY *)(GLenum matrixMode, const GLdouble *m)) _func)(matrixMode, m);
}

void GLAPIENTRY _dispatch_stub_MatrixMultTransposefEXT(GLenum matrixMode, const GLfloat *m)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1364];
   ((void (GLAPIENTRY *)(GLenum matrixMode, const GLfloat *m)) _func)(matrixMode, m);
}

void GLAPIENTRY _dispatch_stub_MatrixMultTransposedEXT(GLenum matrixMode, const GLdouble *m)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1365];
   ((void (GLAPIENTRY *)(GLenum matrixMode, const GLdouble *m)) _func)(matrixMode, m);
}

void GLAPIENTRY _dispatch_stub_BindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1366];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLuint texture)) _func)(texunit, target, texture);
}

void GLAPIENTRY _dispatch_stub_NamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1367];
   ((void (GLAPIENTRY *)(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage)) _func)(buffer, size, data, usage);
}

void GLAPIENTRY _dispatch_stub_NamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1368];
   ((void (GLAPIENTRY *)(GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data)) _func)(buffer, offset, size, data);
}

void GLAPIENTRY _dispatch_stub_NamedBufferStorageEXT(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLbitfield flags)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1369];
   ((void (GLAPIENTRY *)(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLbitfield flags)) _func)(buffer, size, data, flags);
}

GLvoid * GLAPIENTRY _dispatch_stub_MapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1370];
   return ((GLvoid * (GLAPIENTRY *)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)) _func)(buffer, offset, length, access);
}

void GLAPIENTRY _dispatch_stub_TextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1371];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)) _func)(texture, target, level, internalFormat, width, border, format, type, pixels);
}

void GLAPIENTRY _dispatch_stub_TextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1372];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)) _func)(texture, target, level, internalFormat, width, height, border, format, type, pixels);
}

void GLAPIENTRY _dispatch_stub_TextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1373];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)) _func)(texture, target, level, internalFormat, width, height, depth, border, format, type, pixels);
}

void GLAPIENTRY _dispatch_stub_TextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1374];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)) _func)(texture, target, level, xoffset, width, format, type, pixels);
}

void GLAPIENTRY _dispatch_stub_TextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1375];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)) _func)(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
}

void GLAPIENTRY _dispatch_stub_TextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1376];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)) _func)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

void GLAPIENTRY _dispatch_stub_CopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, int border)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1377];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, int border)) _func)(texture, target, level, internalFormat, x, y, width, border);
}

void GLAPIENTRY _dispatch_stub_CopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, int border)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1378];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, int border)) _func)(texture, target, level, internalFormat, x, y, width, height, border);
}

void GLAPIENTRY _dispatch_stub_CopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1379];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)) _func)(texture, target, level, xoffset, x, y, width);
}

void GLAPIENTRY _dispatch_stub_CopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1380];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)) _func)(texture, target, level, xoffset, yoffset, x, y, width, height);
}

void GLAPIENTRY _dispatch_stub_CopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1381];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)) _func)(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

GLvoid * GLAPIENTRY _dispatch_stub_MapNamedBufferEXT(GLuint buffer, GLenum access)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1382];
   return ((GLvoid * (GLAPIENTRY *)(GLuint buffer, GLenum access)) _func)(buffer, access);
}

void GLAPIENTRY _dispatch_stub_GetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1383];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLenum pname, GLint *params)) _func)(texture, target, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, float *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1384];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLenum pname, float *params)) _func)(texture, target, pname, params);
}

void GLAPIENTRY _dispatch_stub_TextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, int param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1385];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLenum pname, int param)) _func)(texture, target, pname, param);
}

void GLAPIENTRY _dispatch_stub_TextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1386];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLenum pname, const GLint *params)) _func)(texture, target, pname, params);
}

void GLAPIENTRY _dispatch_stub_TextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, float param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1387];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLenum pname, float param)) _func)(texture, target, pname, param);
}

void GLAPIENTRY _dispatch_stub_TextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const float *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1388];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLenum pname, const float *params)) _func)(texture, target, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1389];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)) _func)(texture, target, level, format, type, pixels);
}

void GLAPIENTRY _dispatch_stub_GetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1390];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params)) _func)(texture, target, level, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, float *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1391];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLint level, GLenum pname, float *params)) _func)(texture, target, level, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1392];
   ((void (GLAPIENTRY *)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data)) _func)(buffer, offset, size, data);
}

void GLAPIENTRY _dispatch_stub_GetNamedBufferPointervEXT(GLuint buffer, GLenum pname, GLvoid **params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1393];
   ((void (GLAPIENTRY *)(GLuint buffer, GLenum pname, GLvoid **params)) _func)(buffer, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1394];
   ((void (GLAPIENTRY *)(GLuint buffer, GLenum pname, GLint *params)) _func)(buffer, pname, params);
}

void GLAPIENTRY _dispatch_stub_FlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1395];
   ((void (GLAPIENTRY *)(GLuint buffer, GLintptr offset, GLsizeiptr length)) _func)(buffer, offset, length);
}

void GLAPIENTRY _dispatch_stub_FramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1396];
   ((void (GLAPIENTRY *)(GLuint framebuffer, GLenum mode)) _func)(framebuffer, mode);
}

void GLAPIENTRY _dispatch_stub_FramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum *bufs)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1397];
   ((void (GLAPIENTRY *)(GLuint framebuffer, GLsizei n, const GLenum *bufs)) _func)(framebuffer, n, bufs);
}

void GLAPIENTRY _dispatch_stub_FramebufferReadBufferEXT(GLuint framebuffer, GLenum mode)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1398];
   ((void (GLAPIENTRY *)(GLuint framebuffer, GLenum mode)) _func)(framebuffer, mode);
}

void GLAPIENTRY _dispatch_stub_GetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1399];
   ((void (GLAPIENTRY *)(GLuint framebuffer, GLenum pname, GLint *param)) _func)(framebuffer, pname, param);
}

GLenum GLAPIENTRY _dispatch_stub_CheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1400];
   return ((GLenum (GLAPIENTRY *)(GLuint framebuffer, GLenum target)) _func)(framebuffer, target);
}

void GLAPIENTRY _dispatch_stub_NamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1401];
   ((void (GLAPIENTRY *)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)) _func)(framebuffer, attachment, textarget, texture, level);
}

void GLAPIENTRY _dispatch_stub_NamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1402];
   ((void (GLAPIENTRY *)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)) _func)(framebuffer, attachment, textarget, texture, level);
}

void GLAPIENTRY _dispatch_stub_NamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1403];
   ((void (GLAPIENTRY *)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)) _func)(framebuffer, attachment, textarget, texture, level, zoffset);
}

void GLAPIENTRY _dispatch_stub_NamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1404];
   ((void (GLAPIENTRY *)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)) _func)(framebuffer, attachment, renderbuffertarget, renderbuffer);
}

void GLAPIENTRY _dispatch_stub_GetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1405];
   ((void (GLAPIENTRY *)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)) _func)(framebuffer, attachment, pname, params);
}

void GLAPIENTRY _dispatch_stub_EnableClientStateiEXT(GLenum array, GLuint index)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1406];
   ((void (GLAPIENTRY *)(GLenum array, GLuint index)) _func)(array, index);
}

void GLAPIENTRY _dispatch_stub_DisableClientStateiEXT(GLenum array, GLuint index)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1407];
   ((void (GLAPIENTRY *)(GLenum array, GLuint index)) _func)(array, index);
}

void GLAPIENTRY _dispatch_stub_GetPointerIndexedvEXT(GLenum target, GLuint index, GLvoid**params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1408];
   ((void (GLAPIENTRY *)(GLenum target, GLuint index, GLvoid**params)) _func)(target, index, params);
}

void GLAPIENTRY _dispatch_stub_MultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1409];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLenum pname, GLint param)) _func)(texunit, target, pname, param);
}

void GLAPIENTRY _dispatch_stub_MultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1410];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLenum pname, const GLint *param)) _func)(texunit, target, pname, param);
}

void GLAPIENTRY _dispatch_stub_MultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1411];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLenum pname, GLfloat param)) _func)(texunit, target, pname, param);
}

void GLAPIENTRY _dispatch_stub_MultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1412];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLenum pname, const GLfloat *param)) _func)(texunit, target, pname, param);
}

void GLAPIENTRY _dispatch_stub_GetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1413];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLenum pname, GLint *param)) _func)(texunit, target, pname, param);
}

void GLAPIENTRY _dispatch_stub_GetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1414];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLenum pname, GLfloat *param)) _func)(texunit, target, pname, param);
}

void GLAPIENTRY _dispatch_stub_MultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1415];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLenum pname, GLint param)) _func)(texunit, target, pname, param);
}

void GLAPIENTRY _dispatch_stub_MultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint*param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1416];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLenum pname, const GLint*param)) _func)(texunit, target, pname, param);
}

void GLAPIENTRY _dispatch_stub_MultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1417];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLenum pname, GLfloat param)) _func)(texunit, target, pname, param);
}

void GLAPIENTRY _dispatch_stub_MultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat*param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1418];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLenum pname, const GLfloat*param)) _func)(texunit, target, pname, param);
}

void GLAPIENTRY _dispatch_stub_GetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid*pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1419];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid*pixels)) _func)(texunit, target, level, format, type, pixels);
}

void GLAPIENTRY _dispatch_stub_MultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid*pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1420];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid*pixels)) _func)(texunit, target, level, internalformat, width, border, format, type, pixels);
}

void GLAPIENTRY _dispatch_stub_MultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid*pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1421];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid*pixels)) _func)(texunit, target, level, internalformat, width, height, border, format, type, pixels);
}

void GLAPIENTRY _dispatch_stub_MultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid*pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1422];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid*pixels)) _func)(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
}

void GLAPIENTRY _dispatch_stub_MultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid*pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1423];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid*pixels)) _func)(texunit, target, level, xoffset, width, format, type, pixels);
}

void GLAPIENTRY _dispatch_stub_MultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid*pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1424];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid*pixels)) _func)(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
}

void GLAPIENTRY _dispatch_stub_MultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid*pixels)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1425];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid*pixels)) _func)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}

void GLAPIENTRY _dispatch_stub_GetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint*params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1426];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLenum pname, GLint*params)) _func)(texunit, target, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat*params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1427];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLenum pname, GLfloat*params)) _func)(texunit, target, pname, params);
}

void GLAPIENTRY _dispatch_stub_CopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1428];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)) _func)(texunit, target, level, internalformat, x, y, width, border);
}

void GLAPIENTRY _dispatch_stub_CopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1429];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)) _func)(texunit, target, level, internalformat, x, y, width, height, border);
}

void GLAPIENTRY _dispatch_stub_CopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1430];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)) _func)(texunit, target, level, xoffset, x, y, width);
}

void GLAPIENTRY _dispatch_stub_CopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1431];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)) _func)(texunit, target, level, xoffset, yoffset, x, y, width, height);
}

void GLAPIENTRY _dispatch_stub_CopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1432];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)) _func)(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
}

void GLAPIENTRY _dispatch_stub_MultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1433];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum coord, GLenum pname, GLdouble param)) _func)(texunit, coord, pname, param);
}

void GLAPIENTRY _dispatch_stub_MultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble*param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1434];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum coord, GLenum pname, const GLdouble*param)) _func)(texunit, coord, pname, param);
}

void GLAPIENTRY _dispatch_stub_MultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1435];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum coord, GLenum pname, GLfloat param)) _func)(texunit, coord, pname, param);
}

void GLAPIENTRY _dispatch_stub_MultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1436];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *param)) _func)(texunit, coord, pname, param);
}

void GLAPIENTRY _dispatch_stub_MultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1437];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum coord, GLenum pname, GLint param)) _func)(texunit, coord, pname, param);
}

void GLAPIENTRY _dispatch_stub_MultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint *param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1438];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum coord, GLenum pname, const GLint *param)) _func)(texunit, coord, pname, param);
}

void GLAPIENTRY _dispatch_stub_GetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble *param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1439];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum coord, GLenum pname, GLdouble *param)) _func)(texunit, coord, pname, param);
}

void GLAPIENTRY _dispatch_stub_GetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat *param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1440];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum coord, GLenum pname, GLfloat *param)) _func)(texunit, coord, pname, param);
}

void GLAPIENTRY _dispatch_stub_GetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint *param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1441];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum coord, GLenum pname, GLint *param)) _func)(texunit, coord, pname, param);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1442];
   ((void (GLAPIENTRY *)(GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)) _func)(texunit, size, type, stride, pointer);
}

void GLAPIENTRY _dispatch_stub_BindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1443];
   ((void (GLAPIENTRY *)(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format)) _func)(index, texture, level, layered, layer, access, format);
}

void GLAPIENTRY _dispatch_stub_CompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei border, GLsizei imageSize, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1444];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei border, GLsizei imageSize, const GLvoid *data)) _func)(texture, target, level, internalFormat, width, border, imageSize, data);
}

void GLAPIENTRY _dispatch_stub_CompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei border, GLsizei imageSize, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1445];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei border, GLsizei imageSize, const GLvoid *data)) _func)(texture, target, level, internalFormat, width, height, border, imageSize, data);
}

void GLAPIENTRY _dispatch_stub_CompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei border, GLsizei imageSize, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1446];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei border, GLsizei imageSize, const GLvoid *data)) _func)(texture, target, level, internalFormat, width, height, depth, border, imageSize, data);
}

void GLAPIENTRY _dispatch_stub_CompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1447];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)) _func)(texture, target, level, xoffset, width, format, imageSize, data);
}

void GLAPIENTRY _dispatch_stub_CompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1448];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)) _func)(texture, target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

void GLAPIENTRY _dispatch_stub_CompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1449];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)) _func)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

void GLAPIENTRY _dispatch_stub_GetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint level, GLvoid *img)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1450];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLint level, GLvoid *img)) _func)(texture, target, level, img);
}

void GLAPIENTRY _dispatch_stub_CompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei border, GLsizei imageSize, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1451];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei border, GLsizei imageSize, const GLvoid *data)) _func)(texunit, target, level, internalFormat, width, border, imageSize, data);
}

void GLAPIENTRY _dispatch_stub_CompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei border, GLsizei imageSize, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1452];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei border, GLsizei imageSize, const GLvoid *data)) _func)(texunit, target, level, internalFormat, width, height, border, imageSize, data);
}

void GLAPIENTRY _dispatch_stub_CompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei border, GLsizei imageSize, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1453];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei border, GLsizei imageSize, const GLvoid *data)) _func)(texunit, target, level, internalFormat, width, height, depth, border, imageSize, data);
}

void GLAPIENTRY _dispatch_stub_CompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1454];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)) _func)(texunit, target, level, xoffset, width, format, imageSize, data);
}

void GLAPIENTRY _dispatch_stub_CompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1455];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)) _func)(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

void GLAPIENTRY _dispatch_stub_CompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1456];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)) _func)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}

void GLAPIENTRY _dispatch_stub_GetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLvoid *img)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1457];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLint level, GLvoid *img)) _func)(texunit, target, level, img);
}

void GLAPIENTRY _dispatch_stub_GetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint*params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1458];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint*params)) _func)(texunit, target, level, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat*params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1459];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat*params)) _func)(texunit, target, level, pname, params);
}

void GLAPIENTRY _dispatch_stub_FramebufferParameteriMESA(GLenum target, GLenum pname, GLint param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1460];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLint param)) _func)(target, pname, param);
}

void GLAPIENTRY _dispatch_stub_GetFramebufferParameterivMESA(GLenum target, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1461];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_NamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1462];
   ((void (GLAPIENTRY *)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)) _func)(renderbuffer, internalformat, width, height);
}

void GLAPIENTRY _dispatch_stub_GetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1463];
   ((void (GLAPIENTRY *)(GLuint renderbuffer, GLenum pname, GLint *params)) _func)(renderbuffer, pname, params);
}

void GLAPIENTRY _dispatch_stub_ClientAttribDefaultEXT(GLbitfield mask)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1464];
   ((void (GLAPIENTRY *)(GLbitfield mask)) _func)(mask);
}

void GLAPIENTRY _dispatch_stub_PushClientAttribDefaultEXT(GLbitfield mask)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1465];
   ((void (GLAPIENTRY *)(GLbitfield mask)) _func)(mask);
}

void GLAPIENTRY _dispatch_stub_NamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid*string)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1466];
   ((void (GLAPIENTRY *)(GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid*string)) _func)(program, target, format, len, string);
}

void GLAPIENTRY _dispatch_stub_GetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, GLvoid*string)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1467];
   ((void (GLAPIENTRY *)(GLuint program, GLenum target, GLenum pname, GLvoid*string)) _func)(program, target, pname, string);
}

void GLAPIENTRY _dispatch_stub_NamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1468];
   ((void (GLAPIENTRY *)(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)) _func)(program, target, index, x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_NamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat*params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1469];
   ((void (GLAPIENTRY *)(GLuint program, GLenum target, GLuint index, const GLfloat*params)) _func)(program, target, index, params);
}

void GLAPIENTRY _dispatch_stub_GetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat*params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1470];
   ((void (GLAPIENTRY *)(GLuint program, GLenum target, GLuint index, GLfloat*params)) _func)(program, target, index, params);
}

void GLAPIENTRY _dispatch_stub_NamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1471];
   ((void (GLAPIENTRY *)(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)) _func)(program, target, index, x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_NamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble*params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1472];
   ((void (GLAPIENTRY *)(GLuint program, GLenum target, GLuint index, const GLdouble*params)) _func)(program, target, index, params);
}

void GLAPIENTRY _dispatch_stub_GetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble*params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1473];
   ((void (GLAPIENTRY *)(GLuint program, GLenum target, GLuint index, GLdouble*params)) _func)(program, target, index, params);
}

void GLAPIENTRY _dispatch_stub_GetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint*params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1474];
   ((void (GLAPIENTRY *)(GLuint program, GLenum target, GLenum pname, GLint*params)) _func)(program, target, pname, params);
}

void GLAPIENTRY _dispatch_stub_TextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1475];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)) _func)(texture, target, internalformat, buffer);
}

void GLAPIENTRY _dispatch_stub_MultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1476];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)) _func)(texunit, target, internalformat, buffer);
}

void GLAPIENTRY _dispatch_stub_TextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint*params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1477];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLenum pname, const GLint*params)) _func)(texture, target, pname, params);
}

void GLAPIENTRY _dispatch_stub_TextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint*params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1478];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLenum pname, const GLuint*params)) _func)(texture, target, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint*params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1479];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLenum pname, GLint*params)) _func)(texture, target, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint*params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1480];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLenum pname, GLuint*params)) _func)(texture, target, pname, params);
}

void GLAPIENTRY _dispatch_stub_MultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint*params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1481];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLenum pname, const GLint*params)) _func)(texunit, target, pname, params);
}

void GLAPIENTRY _dispatch_stub_MultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint*params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1482];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLenum pname, const GLuint*params)) _func)(texunit, target, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint*params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1483];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLenum pname, GLint*params)) _func)(texunit, target, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint*params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1484];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target, GLenum pname, GLuint*params)) _func)(texunit, target, pname, params);
}

void GLAPIENTRY _dispatch_stub_NamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat*params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1485];
   ((void (GLAPIENTRY *)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat*params)) _func)(program, target, index, count, params);
}

void GLAPIENTRY _dispatch_stub_GenerateTextureMipmapEXT(GLuint texture, GLenum target)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1486];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target)) _func)(texture, target);
}

void GLAPIENTRY _dispatch_stub_GenerateMultiTexMipmapEXT(GLenum texunit, GLenum target)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1487];
   ((void (GLAPIENTRY *)(GLenum texunit, GLenum target)) _func)(texunit, target);
}

void GLAPIENTRY _dispatch_stub_NamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1488];
   ((void (GLAPIENTRY *)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)) _func)(renderbuffer, samples, internalformat, width, height);
}

void GLAPIENTRY _dispatch_stub_NamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1489];
   ((void (GLAPIENTRY *)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)) _func)(readBuffer, writeBuffer, readOffset, writeOffset, size);
}

void GLAPIENTRY _dispatch_stub_VertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1490];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)) _func)(vaobj, buffer, size, type, stride, offset);
}

void GLAPIENTRY _dispatch_stub_VertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1491];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)) _func)(vaobj, buffer, size, type, stride, offset);
}

void GLAPIENTRY _dispatch_stub_VertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1492];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset)) _func)(vaobj, buffer, stride, offset);
}

void GLAPIENTRY _dispatch_stub_VertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1493];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)) _func)(vaobj, buffer, type, stride, offset);
}

void GLAPIENTRY _dispatch_stub_VertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1494];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)) _func)(vaobj, buffer, type, stride, offset);
}

void GLAPIENTRY _dispatch_stub_VertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1495];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)) _func)(vaobj, buffer, size, type, stride, offset);
}

void GLAPIENTRY _dispatch_stub_VertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1496];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset)) _func)(vaobj, buffer, texunit, size, type, stride, offset);
}

void GLAPIENTRY _dispatch_stub_VertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1497];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)) _func)(vaobj, buffer, type, stride, offset);
}

void GLAPIENTRY _dispatch_stub_VertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1498];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)) _func)(vaobj, buffer, size, type, stride, offset);
}

void GLAPIENTRY _dispatch_stub_VertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1499];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset)) _func)(vaobj, buffer, index, size, type, normalized, stride, offset);
}

void GLAPIENTRY _dispatch_stub_VertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1500];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)) _func)(vaobj, buffer, index, size, type, stride, offset);
}

void GLAPIENTRY _dispatch_stub_EnableVertexArrayEXT(GLuint vaobj, GLenum array)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1501];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLenum array)) _func)(vaobj, array);
}

void GLAPIENTRY _dispatch_stub_DisableVertexArrayEXT(GLuint vaobj, GLenum array)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1502];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLenum array)) _func)(vaobj, array);
}

void GLAPIENTRY _dispatch_stub_EnableVertexArrayAttribEXT(GLuint vaobj, GLuint index)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1503];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint index)) _func)(vaobj, index);
}

void GLAPIENTRY _dispatch_stub_DisableVertexArrayAttribEXT(GLuint vaobj, GLuint index)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1504];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint index)) _func)(vaobj, index);
}

void GLAPIENTRY _dispatch_stub_GetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint*param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1505];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLenum pname, GLint*param)) _func)(vaobj, pname, param);
}

void GLAPIENTRY _dispatch_stub_GetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, GLvoid**param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1506];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLenum pname, GLvoid**param)) _func)(vaobj, pname, param);
}

void GLAPIENTRY _dispatch_stub_GetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint*param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1507];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint index, GLenum pname, GLint*param)) _func)(vaobj, index, pname, param);
}

void GLAPIENTRY _dispatch_stub_GetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLvoid**param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1508];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint index, GLenum pname, GLvoid**param)) _func)(vaobj, index, pname, param);
}

void GLAPIENTRY _dispatch_stub_ClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1509];
   ((void (GLAPIENTRY *)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const GLvoid *data)) _func)(buffer, internalformat, format, type, data);
}

void GLAPIENTRY _dispatch_stub_ClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1510];
   ((void (GLAPIENTRY *)(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const GLvoid *data)) _func)(buffer, internalformat, offset, size, format, type, data);
}

void GLAPIENTRY _dispatch_stub_NamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1511];
   ((void (GLAPIENTRY *)(GLuint framebuffer, GLenum pname, GLint param)) _func)(framebuffer, pname, param);
}

void GLAPIENTRY _dispatch_stub_GetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint*params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1512];
   ((void (GLAPIENTRY *)(GLuint framebuffer, GLenum pname, GLint*params)) _func)(framebuffer, pname, params);
}

void GLAPIENTRY _dispatch_stub_VertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1513];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)) _func)(vaobj, buffer, index, size, type, stride, offset);
}

void GLAPIENTRY _dispatch_stub_VertexArrayVertexAttribDivisorEXT(GLuint vaobj, GLuint index, GLuint divisor)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1514];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint index, GLuint divisor)) _func)(vaobj, index, divisor);
}

void GLAPIENTRY _dispatch_stub_TextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1515];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)) _func)(texture, target, internalformat, buffer, offset, size);
}

void GLAPIENTRY _dispatch_stub_TextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1516];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)) _func)(texture, target, samples, internalformat, width, height, fixedsamplelocations);
}

void GLAPIENTRY _dispatch_stub_TextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1517];
   ((void (GLAPIENTRY *)(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)) _func)(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
}

void GLAPIENTRY _dispatch_stub_VertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1518];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)) _func)(vaobj, bindingindex, buffer, offset, stride);
}

void GLAPIENTRY _dispatch_stub_VertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1519];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)) _func)(vaobj, attribindex, size, type, normalized, relativeoffset);
}

void GLAPIENTRY _dispatch_stub_VertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1520];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)) _func)(vaobj, attribindex, size, type, relativeoffset);
}

void GLAPIENTRY _dispatch_stub_VertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1521];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)) _func)(vaobj, attribindex, size, type, relativeoffset);
}

void GLAPIENTRY _dispatch_stub_VertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1522];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint attribindex, GLuint bindingindex)) _func)(vaobj, attribindex, bindingindex);
}

void GLAPIENTRY _dispatch_stub_VertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1523];
   ((void (GLAPIENTRY *)(GLuint vaobj, GLuint bindingindex, GLuint divisor)) _func)(vaobj, bindingindex, divisor);
}

void GLAPIENTRY _dispatch_stub_NamedBufferPageCommitmentEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1524];
   ((void (GLAPIENTRY *)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)) _func)(buffer, offset, size, commit);
}

void GLAPIENTRY _dispatch_stub_NamedStringARB(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1525];
   ((void (GLAPIENTRY *)(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string)) _func)(type, namelen, name, stringlen, string);
}

void GLAPIENTRY _dispatch_stub_DeleteNamedStringARB(GLint namelen, const GLchar *name)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1526];
   ((void (GLAPIENTRY *)(GLint namelen, const GLchar *name)) _func)(namelen, name);
}

void GLAPIENTRY _dispatch_stub_CompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar * const *path, const GLint *length)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1527];
   ((void (GLAPIENTRY *)(GLuint shader, GLsizei count, const GLchar * const *path, const GLint *length)) _func)(shader, count, path, length);
}

GLboolean GLAPIENTRY _dispatch_stub_IsNamedStringARB(GLint namelen, const GLchar *name)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1528];
   return ((GLboolean (GLAPIENTRY *)(GLint namelen, const GLchar *name)) _func)(namelen, name);
}

void GLAPIENTRY _dispatch_stub_GetNamedStringARB(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1529];
   ((void (GLAPIENTRY *)(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string)) _func)(namelen, name, bufSize, stringlen, string);
}

void GLAPIENTRY _dispatch_stub_GetNamedStringivARB(GLint namelen, const GLchar *name, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1530];
   ((void (GLAPIENTRY *)(GLint namelen, const GLchar *name, GLenum pname, GLint *params)) _func)(namelen, name, pname, params);
}

void GLAPIENTRY _dispatch_stub_EGLImageTargetTexStorageEXT(GLenum target, GLvoid *image, const GLint *attrib_list)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1531];
   ((void (GLAPIENTRY *)(GLenum target, GLvoid *image, const GLint *attrib_list)) _func)(target, image, attrib_list);
}

void GLAPIENTRY _dispatch_stub_EGLImageTargetTextureStorageEXT(GLuint texture, GLvoid *image, const GLint *attrib_list)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1532];
   ((void (GLAPIENTRY *)(GLuint texture, GLvoid *image, const GLint *attrib_list)) _func)(texture, image, attrib_list);
}

void GLAPIENTRY _dispatch_stub_CopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1533];
   ((void (GLAPIENTRY *)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)) _func)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
}

void GLAPIENTRY _dispatch_stub_ViewportSwizzleNV(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1534];
   ((void (GLAPIENTRY *)(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew)) _func)(index, swizzlex, swizzley, swizzlez, swizzlew);
}

void GLAPIENTRY _dispatch_stub_AlphaToCoverageDitherControlNV(GLenum mode)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1535];
   ((void (GLAPIENTRY *)(GLenum mode)) _func)(mode);
}

void GLAPIENTRY _dispatch_stub_InternalBufferSubDataCopyMESA(GLintptr srcBuffer, GLuint srcOffset, GLuint dstTargetOrName, GLintptr dstOffset, GLsizeiptr size, GLboolean named, GLboolean ext_dsa)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1536];
   ((void (GLAPIENTRY *)(GLintptr srcBuffer, GLuint srcOffset, GLuint dstTargetOrName, GLintptr dstOffset, GLsizeiptr size, GLboolean named, GLboolean ext_dsa)) _func)(srcBuffer, srcOffset, dstTargetOrName, dstOffset, size, named, ext_dsa);
}

void GLAPIENTRY _dispatch_stub_Vertex2hNV(GLhalfNV x, GLhalfNV y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1537];
   ((void (GLAPIENTRY *)(GLhalfNV x, GLhalfNV y)) _func)(x, y);
}

void GLAPIENTRY _dispatch_stub_Vertex2hvNV(const GLhalfNV *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1538];
   ((void (GLAPIENTRY *)(const GLhalfNV *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Vertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1539];
   ((void (GLAPIENTRY *)(GLhalfNV x, GLhalfNV y, GLhalfNV z)) _func)(x, y, z);
}

void GLAPIENTRY _dispatch_stub_Vertex3hvNV(const GLhalfNV *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1540];
   ((void (GLAPIENTRY *)(const GLhalfNV *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Vertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1541];
   ((void (GLAPIENTRY *)(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)) _func)(x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_Vertex4hvNV(const GLhalfNV *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1542];
   ((void (GLAPIENTRY *)(const GLhalfNV *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Normal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1543];
   ((void (GLAPIENTRY *)(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)) _func)(nx, ny, nz);
}

void GLAPIENTRY _dispatch_stub_Normal3hvNV(const GLhalfNV *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1544];
   ((void (GLAPIENTRY *)(const GLhalfNV *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Color3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1545];
   ((void (GLAPIENTRY *)(GLhalfNV red, GLhalfNV green, GLhalfNV blue)) _func)(red, green, blue);
}

void GLAPIENTRY _dispatch_stub_Color3hvNV(const GLhalfNV *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1546];
   ((void (GLAPIENTRY *)(const GLhalfNV *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_Color4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1547];
   ((void (GLAPIENTRY *)(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)) _func)(red, green, blue, alpha);
}

void GLAPIENTRY _dispatch_stub_Color4hvNV(const GLhalfNV *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1548];
   ((void (GLAPIENTRY *)(const GLhalfNV *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_TexCoord1hNV(GLhalfNV s)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1549];
   ((void (GLAPIENTRY *)(GLhalfNV s)) _func)(s);
}

void GLAPIENTRY _dispatch_stub_TexCoord1hvNV(const GLhalfNV *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1550];
   ((void (GLAPIENTRY *)(const GLhalfNV *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_TexCoord2hNV(GLhalfNV s, GLhalfNV t)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1551];
   ((void (GLAPIENTRY *)(GLhalfNV s, GLhalfNV t)) _func)(s, t);
}

void GLAPIENTRY _dispatch_stub_TexCoord2hvNV(const GLhalfNV *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1552];
   ((void (GLAPIENTRY *)(const GLhalfNV *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_TexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1553];
   ((void (GLAPIENTRY *)(GLhalfNV s, GLhalfNV t, GLhalfNV r)) _func)(s, t, r);
}

void GLAPIENTRY _dispatch_stub_TexCoord3hvNV(const GLhalfNV *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1554];
   ((void (GLAPIENTRY *)(const GLhalfNV *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_TexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1555];
   ((void (GLAPIENTRY *)(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)) _func)(s, t, r, q);
}

void GLAPIENTRY _dispatch_stub_TexCoord4hvNV(const GLhalfNV *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1556];
   ((void (GLAPIENTRY *)(const GLhalfNV *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord1hNV(GLenum target, GLhalfNV s)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1557];
   ((void (GLAPIENTRY *)(GLenum target, GLhalfNV s)) _func)(target, s);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord1hvNV(GLenum target, const GLhalfNV *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1558];
   ((void (GLAPIENTRY *)(GLenum target, const GLhalfNV *v)) _func)(target, v);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1559];
   ((void (GLAPIENTRY *)(GLenum target, GLhalfNV s, GLhalfNV t)) _func)(target, s, t);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord2hvNV(GLenum target, const GLhalfNV *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1560];
   ((void (GLAPIENTRY *)(GLenum target, const GLhalfNV *v)) _func)(target, v);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1561];
   ((void (GLAPIENTRY *)(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)) _func)(target, s, t, r);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord3hvNV(GLenum target, const GLhalfNV *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1562];
   ((void (GLAPIENTRY *)(GLenum target, const GLhalfNV *v)) _func)(target, v);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1563];
   ((void (GLAPIENTRY *)(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)) _func)(target, s, t, r, q);
}

void GLAPIENTRY _dispatch_stub_MultiTexCoord4hvNV(GLenum target, const GLhalfNV *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1564];
   ((void (GLAPIENTRY *)(GLenum target, const GLhalfNV *v)) _func)(target, v);
}

void GLAPIENTRY _dispatch_stub_FogCoordhNV(GLhalfNV x)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1565];
   ((void (GLAPIENTRY *)(GLhalfNV x)) _func)(x);
}

void GLAPIENTRY _dispatch_stub_FogCoordhvNV(const GLhalfNV *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1566];
   ((void (GLAPIENTRY *)(const GLhalfNV *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_SecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1567];
   ((void (GLAPIENTRY *)(GLhalfNV red, GLhalfNV green, GLhalfNV blue)) _func)(red, green, blue);
}

void GLAPIENTRY _dispatch_stub_SecondaryColor3hvNV(const GLhalfNV *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1568];
   ((void (GLAPIENTRY *)(const GLhalfNV *v)) _func)(v);
}

void GLAPIENTRY _dispatch_stub_InternalSetError(GLenum error)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1569];
   ((void (GLAPIENTRY *)(GLenum error)) _func)(error);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib1hNV(GLuint index, GLhalfNV x)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1570];
   ((void (GLAPIENTRY *)(GLuint index, GLhalfNV x)) _func)(index, x);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib1hvNV(GLuint index, const GLhalfNV *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1571];
   ((void (GLAPIENTRY *)(GLuint index, const GLhalfNV *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1572];
   ((void (GLAPIENTRY *)(GLuint index, GLhalfNV x, GLhalfNV y)) _func)(index, x, y);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib2hvNV(GLuint index, const GLhalfNV *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1573];
   ((void (GLAPIENTRY *)(GLuint index, const GLhalfNV *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1574];
   ((void (GLAPIENTRY *)(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)) _func)(index, x, y, z);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib3hvNV(GLuint index, const GLhalfNV *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1575];
   ((void (GLAPIENTRY *)(GLuint index, const GLhalfNV *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1576];
   ((void (GLAPIENTRY *)(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)) _func)(index, x, y, z, w);
}

void GLAPIENTRY _dispatch_stub_VertexAttrib4hvNV(GLuint index, const GLhalfNV *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1577];
   ((void (GLAPIENTRY *)(GLuint index, const GLhalfNV *v)) _func)(index, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribs1hvNV(GLuint index, GLsizei n, const GLhalfNV *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1578];
   ((void (GLAPIENTRY *)(GLuint index, GLsizei n, const GLhalfNV *v)) _func)(index, n, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribs2hvNV(GLuint index, GLsizei n, const GLhalfNV *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1579];
   ((void (GLAPIENTRY *)(GLuint index, GLsizei n, const GLhalfNV *v)) _func)(index, n, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribs3hvNV(GLuint index, GLsizei n, const GLhalfNV *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1580];
   ((void (GLAPIENTRY *)(GLuint index, GLsizei n, const GLhalfNV *v)) _func)(index, n, v);
}

void GLAPIENTRY _dispatch_stub_VertexAttribs4hvNV(GLuint index, GLsizei n, const GLhalfNV *v)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1581];
   ((void (GLAPIENTRY *)(GLuint index, GLsizei n, const GLhalfNV *v)) _func)(index, n, v);
}

void GLAPIENTRY _dispatch_stub_TexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1582];
   ((void (GLAPIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)) _func)(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
}

void GLAPIENTRY _dispatch_stub_TexturePageCommitmentEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1583];
   ((void (GLAPIENTRY *)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)) _func)(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);
}

void GLAPIENTRY _dispatch_stub_ImportMemoryWin32HandleEXT(GLuint memory, GLuint64 size, GLenum handleType, GLvoid *handle)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1584];
   ((void (GLAPIENTRY *)(GLuint memory, GLuint64 size, GLenum handleType, GLvoid *handle)) _func)(memory, size, handleType, handle);
}

void GLAPIENTRY _dispatch_stub_ImportSemaphoreWin32HandleEXT(GLuint semaphore, GLenum handleType, GLvoid *handle)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1585];
   ((void (GLAPIENTRY *)(GLuint semaphore, GLenum handleType, GLvoid *handle)) _func)(semaphore, handleType, handle);
}

void GLAPIENTRY _dispatch_stub_ImportMemoryWin32NameEXT(GLuint memory, GLuint64 size, GLenum handleType, const GLvoid *name)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1586];
   ((void (GLAPIENTRY *)(GLuint memory, GLuint64 size, GLenum handleType, const GLvoid *name)) _func)(memory, size, handleType, name);
}

void GLAPIENTRY _dispatch_stub_ImportSemaphoreWin32NameEXT(GLuint semaphore, GLenum handleType, const GLvoid *handle)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1587];
   ((void (GLAPIENTRY *)(GLuint semaphore, GLenum handleType, const GLvoid *handle)) _func)(semaphore, handleType, handle);
}

void GLAPIENTRY _dispatch_stub_GetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1588];
   ((void (GLAPIENTRY *)(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label)) _func)(type, object, bufSize, length, label);
}

void GLAPIENTRY _dispatch_stub_LabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar *label)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1589];
   ((void (GLAPIENTRY *)(GLenum type, GLuint object, GLsizei length, const GLchar *label)) _func)(type, object, length, label);
}

void GLAPIENTRY _dispatch_stub_DrawArraysUserBuf(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1590];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_DrawElementsUserBuf(const GLvoid *cmd)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1591];
   ((void (GLAPIENTRY *)(const GLvoid *cmd)) _func)(cmd);
}

void GLAPIENTRY _dispatch_stub_MultiDrawArraysUserBuf(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1592];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_MultiDrawElementsUserBuf(GLintptr indexBuf, GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, const GLint *basevertex)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1593];
   ((void (GLAPIENTRY *)(GLintptr indexBuf, GLenum mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, const GLint *basevertex)) _func)(indexBuf, mode, count, type, indices, primcount, basevertex);
}

void GLAPIENTRY _dispatch_stub_DrawArraysInstancedBaseInstanceDrawID(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1594];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_DrawElementsInstancedBaseVertexBaseInstanceDrawID(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instance_count, GLint basevertex, GLuint baseinstance, GLuint drawid)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1595];
   ((void (GLAPIENTRY *)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei instance_count, GLint basevertex, GLuint baseinstance, GLuint drawid)) _func)(mode, count, type, indices, instance_count, basevertex, baseinstance, drawid);
}

void GLAPIENTRY _dispatch_stub_InternalInvalidateFramebufferAncillaryMESA(void)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1596];
   ((void (GLAPIENTRY *)(void)) _func)();
}

void GLAPIENTRY _dispatch_stub_DrawElementsPacked(GLenum mode, GLenum type, GLushort count, GLushort indices)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1597];
   ((void (GLAPIENTRY *)(GLenum mode, GLenum type, GLushort count, GLushort indices)) _func)(mode, type, count, indices);
}

void GLAPIENTRY _dispatch_stub_DrawElementsUserBufPacked(const GLvoid *cmd)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1598];
   ((void (GLAPIENTRY *)(const GLvoid *cmd)) _func)(cmd);
}

void GLAPIENTRY _dispatch_stub_TexStorageAttribs2DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, const GLint *attrib_list)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1599];
   ((void (GLAPIENTRY *)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, const GLint *attrib_list)) _func)(target, levels, internalFormat, width, height, attrib_list);
}

void GLAPIENTRY _dispatch_stub_TexStorageAttribs3DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, const GLint *attrib_list)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1600];
   ((void (GLAPIENTRY *)(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, const GLint *attrib_list)) _func)(target, levels, internalFormat, width, height, depth, attrib_list);
}

void GLAPIENTRY _dispatch_stub_FramebufferTextureMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseviewindex, GLsizei numviews)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1601];
   ((void (GLAPIENTRY *)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseviewindex, GLsizei numviews)) _func)(target, attachment, texture, level, baseviewindex, numviews);
}

void GLAPIENTRY _dispatch_stub_NamedFramebufferTextureMultiviewOVR(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint baseviewindex, GLsizei numviews)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1602];
   ((void (GLAPIENTRY *)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint baseviewindex, GLsizei numviews)) _func)(framebuffer, attachment, texture, level, baseviewindex, numviews);
}

void GLAPIENTRY _dispatch_stub_FramebufferTextureMultisampleMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLsizei samples, GLint baseviewindex, GLsizei numviews)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1603];
   ((void (GLAPIENTRY *)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLsizei samples, GLint baseviewindex, GLsizei numviews)) _func)(target, attachment, texture, level, samples, baseviewindex, numviews);
}

void GLAPIENTRY _dispatch_stub_ColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1604];
   ((void (GLAPIENTRY *)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)) _func)(target, internalformat, width, format, type, table);
}

void GLAPIENTRY _dispatch_stub_ColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1605];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, const GLfloat *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_ColorTableParameteriv(GLenum target, GLenum pname, const GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1606];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, const GLint *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_CopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1607];
   ((void (GLAPIENTRY *)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)) _func)(target, internalformat, x, y, width);
}

void GLAPIENTRY _dispatch_stub_GetColorTable(GLenum target, GLenum format, GLenum type, GLvoid *table)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1608];
   ((void (GLAPIENTRY *)(GLenum target, GLenum format, GLenum type, GLvoid *table)) _func)(target, format, type, table);
}

void GLAPIENTRY _dispatch_stub_GetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1609];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLfloat *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetColorTableParameteriv(GLenum target, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1610];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_ColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1611];
   ((void (GLAPIENTRY *)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)) _func)(target, start, count, format, type, data);
}

void GLAPIENTRY _dispatch_stub_CopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1612];
   ((void (GLAPIENTRY *)(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)) _func)(target, start, x, y, width);
}

void GLAPIENTRY _dispatch_stub_ConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1613];
   ((void (GLAPIENTRY *)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)) _func)(target, internalformat, width, format, type, image);
}

void GLAPIENTRY _dispatch_stub_ConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1614];
   ((void (GLAPIENTRY *)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)) _func)(target, internalformat, width, height, format, type, image);
}

void GLAPIENTRY _dispatch_stub_ConvolutionParameterf(GLenum target, GLenum pname, GLfloat params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1615];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLfloat params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_ConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1616];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, const GLfloat *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_ConvolutionParameteri(GLenum target, GLenum pname, GLint params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1617];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLint params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_ConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1618];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, const GLint *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_CopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1619];
   ((void (GLAPIENTRY *)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)) _func)(target, internalformat, x, y, width);
}

void GLAPIENTRY _dispatch_stub_CopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1620];
   ((void (GLAPIENTRY *)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)) _func)(target, internalformat, x, y, width, height);
}

void GLAPIENTRY _dispatch_stub_GetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid *image)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1621];
   ((void (GLAPIENTRY *)(GLenum target, GLenum format, GLenum type, GLvoid *image)) _func)(target, format, type, image);
}

void GLAPIENTRY _dispatch_stub_GetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1622];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLfloat *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1623];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1624];
   ((void (GLAPIENTRY *)(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)) _func)(target, format, type, row, column, span);
}

void GLAPIENTRY _dispatch_stub_SeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1625];
   ((void (GLAPIENTRY *)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)) _func)(target, internalformat, width, height, format, type, row, column);
}

void GLAPIENTRY _dispatch_stub_GetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1626];
   ((void (GLAPIENTRY *)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)) _func)(target, reset, format, type, values);
}

void GLAPIENTRY _dispatch_stub_GetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1627];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLfloat *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetHistogramParameteriv(GLenum target, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1628];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1629];
   ((void (GLAPIENTRY *)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)) _func)(target, reset, format, type, values);
}

void GLAPIENTRY _dispatch_stub_GetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1630];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLfloat *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_GetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1631];
   ((void (GLAPIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

void GLAPIENTRY _dispatch_stub_Histogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1632];
   ((void (GLAPIENTRY *)(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)) _func)(target, width, internalformat, sink);
}

void GLAPIENTRY _dispatch_stub_Minmax(GLenum target, GLenum internalformat, GLboolean sink)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1633];
   ((void (GLAPIENTRY *)(GLenum target, GLenum internalformat, GLboolean sink)) _func)(target, internalformat, sink);
}

void GLAPIENTRY _dispatch_stub_ResetHistogram(GLenum target)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1634];
   ((void (GLAPIENTRY *)(GLenum target)) _func)(target);
}

void GLAPIENTRY _dispatch_stub_ResetMinmax(GLenum target)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1635];
   ((void (GLAPIENTRY *)(GLenum target)) _func)(target);
}

void GLAPIENTRY _dispatch_stub_GetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1636];
   ((void (GLAPIENTRY *)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table)) _func)(target, format, type, bufSize, table);
}

void GLAPIENTRY _dispatch_stub_GetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1637];
   ((void (GLAPIENTRY *)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image)) _func)(target, format, type, bufSize, image);
}

void GLAPIENTRY _dispatch_stub_GetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1638];
   ((void (GLAPIENTRY *)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)) _func)(target, reset, format, type, bufSize, values);
}

void GLAPIENTRY _dispatch_stub_GetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1639];
   ((void (GLAPIENTRY *)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values)) _func)(target, reset, format, type, bufSize, values);
}

void GLAPIENTRY _dispatch_stub_GetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span)
{
   const struct _glapi_table *_tbl = GET_DISPATCH();
   _glapi_proc _func = ((const _glapi_proc *) _tbl)[1640];
   ((void (GLAPIENTRY *)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span)) _func)(target, format, type, rowBufSize, row, columnBufSize, column, span);
}


static const _glapi_proc public_entries[] = {
   (_glapi_proc) _dispatch_stub_NewList,
   (_glapi_proc) _dispatch_stub_EndList,
   (_glapi_proc) _dispatch_stub_CallList,
   (_glapi_proc) _dispatch_stub_CallLists,
   (_glapi_proc) _dispatch_stub_DeleteLists,
   (_glapi_proc) _dispatch_stub_GenLists,
   (_glapi_proc) _dispatch_stub_ListBase,
   (_glapi_proc) _dispatch_stub_Begin,
   (_glapi_proc) _dispatch_stub_Bitmap,
   (_glapi_proc) _dispatch_stub_Color3b,
   (_glapi_proc) _dispatch_stub_Color3bv,
   (_glapi_proc) _dispatch_stub_Color3d,
   (_glapi_proc) _dispatch_stub_Color3dv,
   (_glapi_proc) _dispatch_stub_Color3f,
   (_glapi_proc) _dispatch_stub_Color3fv,
   (_glapi_proc) _dispatch_stub_Color3i,
   (_glapi_proc) _dispatch_stub_Color3iv,
   (_glapi_proc) _dispatch_stub_Color3s,
   (_glapi_proc) _dispatch_stub_Color3sv,
   (_glapi_proc) _dispatch_stub_Color3ub,
   (_glapi_proc) _dispatch_stub_Color3ubv,
   (_glapi_proc) _dispatch_stub_Color3ui,
   (_glapi_proc) _dispatch_stub_Color3uiv,
   (_glapi_proc) _dispatch_stub_Color3us,
   (_glapi_proc) _dispatch_stub_Color3usv,
   (_glapi_proc) _dispatch_stub_Color4b,
   (_glapi_proc) _dispatch_stub_Color4bv,
   (_glapi_proc) _dispatch_stub_Color4d,
   (_glapi_proc) _dispatch_stub_Color4dv,
   (_glapi_proc) _dispatch_stub_Color4f,
   (_glapi_proc) _dispatch_stub_Color4fv,
   (_glapi_proc) _dispatch_stub_Color4i,
   (_glapi_proc) _dispatch_stub_Color4iv,
   (_glapi_proc) _dispatch_stub_Color4s,
   (_glapi_proc) _dispatch_stub_Color4sv,
   (_glapi_proc) _dispatch_stub_Color4ub,
   (_glapi_proc) _dispatch_stub_Color4ubv,
   (_glapi_proc) _dispatch_stub_Color4ui,
   (_glapi_proc) _dispatch_stub_Color4uiv,
   (_glapi_proc) _dispatch_stub_Color4us,
   (_glapi_proc) _dispatch_stub_Color4usv,
   (_glapi_proc) _dispatch_stub_EdgeFlag,
   (_glapi_proc) _dispatch_stub_EdgeFlagv,
   (_glapi_proc) _dispatch_stub_End,
   (_glapi_proc) _dispatch_stub_Indexd,
   (_glapi_proc) _dispatch_stub_Indexdv,
   (_glapi_proc) _dispatch_stub_Indexf,
   (_glapi_proc) _dispatch_stub_Indexfv,
   (_glapi_proc) _dispatch_stub_Indexi,
   (_glapi_proc) _dispatch_stub_Indexiv,
   (_glapi_proc) _dispatch_stub_Indexs,
   (_glapi_proc) _dispatch_stub_Indexsv,
   (_glapi_proc) _dispatch_stub_Normal3b,
   (_glapi_proc) _dispatch_stub_Normal3bv,
   (_glapi_proc) _dispatch_stub_Normal3d,
   (_glapi_proc) _dispatch_stub_Normal3dv,
   (_glapi_proc) _dispatch_stub_Normal3f,
   (_glapi_proc) _dispatch_stub_Normal3fv,
   (_glapi_proc) _dispatch_stub_Normal3i,
   (_glapi_proc) _dispatch_stub_Normal3iv,
   (_glapi_proc) _dispatch_stub_Normal3s,
   (_glapi_proc) _dispatch_stub_Normal3sv,
   (_glapi_proc) _dispatch_stub_RasterPos2d,
   (_glapi_proc) _dispatch_stub_RasterPos2dv,
   (_glapi_proc) _dispatch_stub_RasterPos2f,
   (_glapi_proc) _dispatch_stub_RasterPos2fv,
   (_glapi_proc) _dispatch_stub_RasterPos2i,
   (_glapi_proc) _dispatch_stub_RasterPos2iv,
   (_glapi_proc) _dispatch_stub_RasterPos2s,
   (_glapi_proc) _dispatch_stub_RasterPos2sv,
   (_glapi_proc) _dispatch_stub_RasterPos3d,
   (_glapi_proc) _dispatch_stub_RasterPos3dv,
   (_glapi_proc) _dispatch_stub_RasterPos3f,
   (_glapi_proc) _dispatch_stub_RasterPos3fv,
   (_glapi_proc) _dispatch_stub_RasterPos3i,
   (_glapi_proc) _dispatch_stub_RasterPos3iv,
   (_glapi_proc) _dispatch_stub_RasterPos3s,
   (_glapi_proc) _dispatch_stub_RasterPos3sv,
   (_glapi_proc) _dispatch_stub_RasterPos4d,
   (_glapi_proc) _dispatch_stub_RasterPos4dv,
   (_glapi_proc) _dispatch_stub_RasterPos4f,
   (_glapi_proc) _dispatch_stub_RasterPos4fv,
   (_glapi_proc) _dispatch_stub_RasterPos4i,
   (_glapi_proc) _dispatch_stub_RasterPos4iv,
   (_glapi_proc) _dispatch_stub_RasterPos4s,
   (_glapi_proc) _dispatch_stub_RasterPos4sv,
   (_glapi_proc) _dispatch_stub_Rectd,
   (_glapi_proc) _dispatch_stub_Rectdv,
   (_glapi_proc) _dispatch_stub_Rectf,
   (_glapi_proc) _dispatch_stub_Rectfv,
   (_glapi_proc) _dispatch_stub_Recti,
   (_glapi_proc) _dispatch_stub_Rectiv,
   (_glapi_proc) _dispatch_stub_Rects,
   (_glapi_proc) _dispatch_stub_Rectsv,
   (_glapi_proc) _dispatch_stub_TexCoord1d,
   (_glapi_proc) _dispatch_stub_TexCoord1dv,
   (_glapi_proc) _dispatch_stub_TexCoord1f,
   (_glapi_proc) _dispatch_stub_TexCoord1fv,
   (_glapi_proc) _dispatch_stub_TexCoord1i,
   (_glapi_proc) _dispatch_stub_TexCoord1iv,
   (_glapi_proc) _dispatch_stub_TexCoord1s,
   (_glapi_proc) _dispatch_stub_TexCoord1sv,
   (_glapi_proc) _dispatch_stub_TexCoord2d,
   (_glapi_proc) _dispatch_stub_TexCoord2dv,
   (_glapi_proc) _dispatch_stub_TexCoord2f,
   (_glapi_proc) _dispatch_stub_TexCoord2fv,
   (_glapi_proc) _dispatch_stub_TexCoord2i,
   (_glapi_proc) _dispatch_stub_TexCoord2iv,
   (_glapi_proc) _dispatch_stub_TexCoord2s,
   (_glapi_proc) _dispatch_stub_TexCoord2sv,
   (_glapi_proc) _dispatch_stub_TexCoord3d,
   (_glapi_proc) _dispatch_stub_TexCoord3dv,
   (_glapi_proc) _dispatch_stub_TexCoord3f,
   (_glapi_proc) _dispatch_stub_TexCoord3fv,
   (_glapi_proc) _dispatch_stub_TexCoord3i,
   (_glapi_proc) _dispatch_stub_TexCoord3iv,
   (_glapi_proc) _dispatch_stub_TexCoord3s,
   (_glapi_proc) _dispatch_stub_TexCoord3sv,
   (_glapi_proc) _dispatch_stub_TexCoord4d,
   (_glapi_proc) _dispatch_stub_TexCoord4dv,
   (_glapi_proc) _dispatch_stub_TexCoord4f,
   (_glapi_proc) _dispatch_stub_TexCoord4fv,
   (_glapi_proc) _dispatch_stub_TexCoord4i,
   (_glapi_proc) _dispatch_stub_TexCoord4iv,
   (_glapi_proc) _dispatch_stub_TexCoord4s,
   (_glapi_proc) _dispatch_stub_TexCoord4sv,
   (_glapi_proc) _dispatch_stub_Vertex2d,
   (_glapi_proc) _dispatch_stub_Vertex2dv,
   (_glapi_proc) _dispatch_stub_Vertex2f,
   (_glapi_proc) _dispatch_stub_Vertex2fv,
   (_glapi_proc) _dispatch_stub_Vertex2i,
   (_glapi_proc) _dispatch_stub_Vertex2iv,
   (_glapi_proc) _dispatch_stub_Vertex2s,
   (_glapi_proc) _dispatch_stub_Vertex2sv,
   (_glapi_proc) _dispatch_stub_Vertex3d,
   (_glapi_proc) _dispatch_stub_Vertex3dv,
   (_glapi_proc) _dispatch_stub_Vertex3f,
   (_glapi_proc) _dispatch_stub_Vertex3fv,
   (_glapi_proc) _dispatch_stub_Vertex3i,
   (_glapi_proc) _dispatch_stub_Vertex3iv,
   (_glapi_proc) _dispatch_stub_Vertex3s,
   (_glapi_proc) _dispatch_stub_Vertex3sv,
   (_glapi_proc) _dispatch_stub_Vertex4d,
   (_glapi_proc) _dispatch_stub_Vertex4dv,
   (_glapi_proc) _dispatch_stub_Vertex4f,
   (_glapi_proc) _dispatch_stub_Vertex4fv,
   (_glapi_proc) _dispatch_stub_Vertex4i,
   (_glapi_proc) _dispatch_stub_Vertex4iv,
   (_glapi_proc) _dispatch_stub_Vertex4s,
   (_glapi_proc) _dispatch_stub_Vertex4sv,
   (_glapi_proc) _dispatch_stub_ClipPlane,
   (_glapi_proc) _dispatch_stub_ColorMaterial,
   (_glapi_proc) _dispatch_stub_CullFace,
   (_glapi_proc) _dispatch_stub_Fogf,
   (_glapi_proc) _dispatch_stub_Fogfv,
   (_glapi_proc) _dispatch_stub_Fogi,
   (_glapi_proc) _dispatch_stub_Fogiv,
   (_glapi_proc) _dispatch_stub_FrontFace,
   (_glapi_proc) _dispatch_stub_Hint,
   (_glapi_proc) _dispatch_stub_Lightf,
   (_glapi_proc) _dispatch_stub_Lightfv,
   (_glapi_proc) _dispatch_stub_Lighti,
   (_glapi_proc) _dispatch_stub_Lightiv,
   (_glapi_proc) _dispatch_stub_LightModelf,
   (_glapi_proc) _dispatch_stub_LightModelfv,
   (_glapi_proc) _dispatch_stub_LightModeli,
   (_glapi_proc) _dispatch_stub_LightModeliv,
   (_glapi_proc) _dispatch_stub_LineStipple,
   (_glapi_proc) _dispatch_stub_LineWidth,
   (_glapi_proc) _dispatch_stub_Materialf,
   (_glapi_proc) _dispatch_stub_Materialfv,
   (_glapi_proc) _dispatch_stub_Materiali,
   (_glapi_proc) _dispatch_stub_Materialiv,
   (_glapi_proc) _dispatch_stub_PointSize,
   (_glapi_proc) _dispatch_stub_PolygonMode,
   (_glapi_proc) _dispatch_stub_PolygonStipple,
   (_glapi_proc) _dispatch_stub_Scissor,
   (_glapi_proc) _dispatch_stub_ShadeModel,
   (_glapi_proc) _dispatch_stub_TexParameterf,
   (_glapi_proc) _dispatch_stub_TexParameterfv,
   (_glapi_proc) _dispatch_stub_TexParameteri,
   (_glapi_proc) _dispatch_stub_TexParameteriv,
   (_glapi_proc) _dispatch_stub_TexImage1D,
   (_glapi_proc) _dispatch_stub_TexImage2D,
   (_glapi_proc) _dispatch_stub_TexEnvf,
   (_glapi_proc) _dispatch_stub_TexEnvfv,
   (_glapi_proc) _dispatch_stub_TexEnvi,
   (_glapi_proc) _dispatch_stub_TexEnviv,
   (_glapi_proc) _dispatch_stub_TexGend,
   (_glapi_proc) _dispatch_stub_TexGendv,
   (_glapi_proc) _dispatch_stub_TexGenf,
   (_glapi_proc) _dispatch_stub_TexGenfv,
   (_glapi_proc) _dispatch_stub_TexGeni,
   (_glapi_proc) _dispatch_stub_TexGeniv,
   (_glapi_proc) _dispatch_stub_FeedbackBuffer,
   (_glapi_proc) _dispatch_stub_SelectBuffer,
   (_glapi_proc) _dispatch_stub_RenderMode,
   (_glapi_proc) _dispatch_stub_InitNames,
   (_glapi_proc) _dispatch_stub_LoadName,
   (_glapi_proc) _dispatch_stub_PassThrough,
   (_glapi_proc) _dispatch_stub_PopName,
   (_glapi_proc) _dispatch_stub_PushName,
   (_glapi_proc) _dispatch_stub_DrawBuffer,
   (_glapi_proc) _dispatch_stub_Clear,
   (_glapi_proc) _dispatch_stub_ClearAccum,
   (_glapi_proc) _dispatch_stub_ClearIndex,
   (_glapi_proc) _dispatch_stub_ClearColor,
   (_glapi_proc) _dispatch_stub_ClearStencil,
   (_glapi_proc) _dispatch_stub_ClearDepth,
   (_glapi_proc) _dispatch_stub_StencilMask,
   (_glapi_proc) _dispatch_stub_ColorMask,
   (_glapi_proc) _dispatch_stub_DepthMask,
   (_glapi_proc) _dispatch_stub_IndexMask,
   (_glapi_proc) _dispatch_stub_Accum,
   (_glapi_proc) _dispatch_stub_Disable,
   (_glapi_proc) _dispatch_stub_Enable,
   (_glapi_proc) _dispatch_stub_Finish,
   (_glapi_proc) _dispatch_stub_Flush,
   (_glapi_proc) _dispatch_stub_PopAttrib,
   (_glapi_proc) _dispatch_stub_PushAttrib,
   (_glapi_proc) _dispatch_stub_Map1d,
   (_glapi_proc) _dispatch_stub_Map1f,
   (_glapi_proc) _dispatch_stub_Map2d,
   (_glapi_proc) _dispatch_stub_Map2f,
   (_glapi_proc) _dispatch_stub_MapGrid1d,
   (_glapi_proc) _dispatch_stub_MapGrid1f,
   (_glapi_proc) _dispatch_stub_MapGrid2d,
   (_glapi_proc) _dispatch_stub_MapGrid2f,
   (_glapi_proc) _dispatch_stub_EvalCoord1d,
   (_glapi_proc) _dispatch_stub_EvalCoord1dv,
   (_glapi_proc) _dispatch_stub_EvalCoord1f,
   (_glapi_proc) _dispatch_stub_EvalCoord1fv,
   (_glapi_proc) _dispatch_stub_EvalCoord2d,
   (_glapi_proc) _dispatch_stub_EvalCoord2dv,
   (_glapi_proc) _dispatch_stub_EvalCoord2f,
   (_glapi_proc) _dispatch_stub_EvalCoord2fv,
   (_glapi_proc) _dispatch_stub_EvalMesh1,
   (_glapi_proc) _dispatch_stub_EvalPoint1,
   (_glapi_proc) _dispatch_stub_EvalMesh2,
   (_glapi_proc) _dispatch_stub_EvalPoint2,
   (_glapi_proc) _dispatch_stub_AlphaFunc,
   (_glapi_proc) _dispatch_stub_BlendFunc,
   (_glapi_proc) _dispatch_stub_LogicOp,
   (_glapi_proc) _dispatch_stub_StencilFunc,
   (_glapi_proc) _dispatch_stub_StencilOp,
   (_glapi_proc) _dispatch_stub_DepthFunc,
   (_glapi_proc) _dispatch_stub_PixelZoom,
   (_glapi_proc) _dispatch_stub_PixelTransferf,
   (_glapi_proc) _dispatch_stub_PixelTransferi,
   (_glapi_proc) _dispatch_stub_PixelStoref,
   (_glapi_proc) _dispatch_stub_PixelStorei,
   (_glapi_proc) _dispatch_stub_PixelMapfv,
   (_glapi_proc) _dispatch_stub_PixelMapuiv,
   (_glapi_proc) _dispatch_stub_PixelMapusv,
   (_glapi_proc) _dispatch_stub_ReadBuffer,
   (_glapi_proc) _dispatch_stub_CopyPixels,
   (_glapi_proc) _dispatch_stub_ReadPixels,
   (_glapi_proc) _dispatch_stub_DrawPixels,
   (_glapi_proc) _dispatch_stub_GetBooleanv,
   (_glapi_proc) _dispatch_stub_GetClipPlane,
   (_glapi_proc) _dispatch_stub_GetDoublev,
   (_glapi_proc) _dispatch_stub_GetError,
   (_glapi_proc) _dispatch_stub_GetFloatv,
   (_glapi_proc) _dispatch_stub_GetIntegerv,
   (_glapi_proc) _dispatch_stub_GetLightfv,
   (_glapi_proc) _dispatch_stub_GetLightiv,
   (_glapi_proc) _dispatch_stub_GetMapdv,
   (_glapi_proc) _dispatch_stub_GetMapfv,
   (_glapi_proc) _dispatch_stub_GetMapiv,
   (_glapi_proc) _dispatch_stub_GetMaterialfv,
   (_glapi_proc) _dispatch_stub_GetMaterialiv,
   (_glapi_proc) _dispatch_stub_GetPixelMapfv,
   (_glapi_proc) _dispatch_stub_GetPixelMapuiv,
   (_glapi_proc) _dispatch_stub_GetPixelMapusv,
   (_glapi_proc) _dispatch_stub_GetPolygonStipple,
   (_glapi_proc) _dispatch_stub_GetString,
   (_glapi_proc) _dispatch_stub_GetTexEnvfv,
   (_glapi_proc) _dispatch_stub_GetTexEnviv,
   (_glapi_proc) _dispatch_stub_GetTexGendv,
   (_glapi_proc) _dispatch_stub_GetTexGenfv,
   (_glapi_proc) _dispatch_stub_GetTexGeniv,
   (_glapi_proc) _dispatch_stub_GetTexImage,
   (_glapi_proc) _dispatch_stub_GetTexParameterfv,
   (_glapi_proc) _dispatch_stub_GetTexParameteriv,
   (_glapi_proc) _dispatch_stub_GetTexLevelParameterfv,
   (_glapi_proc) _dispatch_stub_GetTexLevelParameteriv,
   (_glapi_proc) _dispatch_stub_IsEnabled,
   (_glapi_proc) _dispatch_stub_IsList,
   (_glapi_proc) _dispatch_stub_DepthRange,
   (_glapi_proc) _dispatch_stub_Frustum,
   (_glapi_proc) _dispatch_stub_LoadIdentity,
   (_glapi_proc) _dispatch_stub_LoadMatrixf,
   (_glapi_proc) _dispatch_stub_LoadMatrixd,
   (_glapi_proc) _dispatch_stub_MatrixMode,
   (_glapi_proc) _dispatch_stub_MultMatrixf,
   (_glapi_proc) _dispatch_stub_MultMatrixd,
   (_glapi_proc) _dispatch_stub_Ortho,
   (_glapi_proc) _dispatch_stub_PopMatrix,
   (_glapi_proc) _dispatch_stub_PushMatrix,
   (_glapi_proc) _dispatch_stub_Rotated,
   (_glapi_proc) _dispatch_stub_Rotatef,
   (_glapi_proc) _dispatch_stub_Scaled,
   (_glapi_proc) _dispatch_stub_Scalef,
   (_glapi_proc) _dispatch_stub_Translated,
   (_glapi_proc) _dispatch_stub_Translatef,
   (_glapi_proc) _dispatch_stub_Viewport,
   (_glapi_proc) _dispatch_stub_ArrayElement,
   (_glapi_proc) _dispatch_stub_BindTexture,
   (_glapi_proc) _dispatch_stub_ColorPointer,
   (_glapi_proc) _dispatch_stub_DisableClientState,
   (_glapi_proc) _dispatch_stub_DrawArrays,
   (_glapi_proc) _dispatch_stub_DrawElements,
   (_glapi_proc) _dispatch_stub_EdgeFlagPointer,
   (_glapi_proc) _dispatch_stub_EnableClientState,
   (_glapi_proc) _dispatch_stub_IndexPointer,
   (_glapi_proc) _dispatch_stub_Indexub,
   (_glapi_proc) _dispatch_stub_Indexubv,
   (_glapi_proc) _dispatch_stub_InterleavedArrays,
   (_glapi_proc) _dispatch_stub_NormalPointer,
   (_glapi_proc) _dispatch_stub_PolygonOffset,
   (_glapi_proc) _dispatch_stub_TexCoordPointer,
   (_glapi_proc) _dispatch_stub_VertexPointer,
   (_glapi_proc) _dispatch_stub_AreTexturesResident,
   (_glapi_proc) _dispatch_stub_CopyTexImage1D,
   (_glapi_proc) _dispatch_stub_CopyTexImage2D,
   (_glapi_proc) _dispatch_stub_CopyTexSubImage1D,
   (_glapi_proc) _dispatch_stub_CopyTexSubImage2D,
   (_glapi_proc) _dispatch_stub_DeleteTextures,
   (_glapi_proc) _dispatch_stub_GenTextures,
   (_glapi_proc) _dispatch_stub_GetPointerv,
   (_glapi_proc) _dispatch_stub_IsTexture,
   (_glapi_proc) _dispatch_stub_PrioritizeTextures,
   (_glapi_proc) _dispatch_stub_TexSubImage1D,
   (_glapi_proc) _dispatch_stub_TexSubImage2D,
   (_glapi_proc) _dispatch_stub_PopClientAttrib,
   (_glapi_proc) _dispatch_stub_PushClientAttrib,
   (_glapi_proc) _dispatch_stub_BlendColor,
   (_glapi_proc) _dispatch_stub_BlendEquation,
   (_glapi_proc) _dispatch_stub_DrawRangeElements,
   (_glapi_proc) _dispatch_stub_TexImage3D,
   (_glapi_proc) _dispatch_stub_TexSubImage3D,
   (_glapi_proc) _dispatch_stub_CopyTexSubImage3D,
   (_glapi_proc) _dispatch_stub_ActiveTexture,
   (_glapi_proc) _dispatch_stub_ClientActiveTexture,
   (_glapi_proc) _dispatch_stub_MultiTexCoord1d,
   (_glapi_proc) _dispatch_stub_MultiTexCoord1dv,
   (_glapi_proc) _dispatch_stub_MultiTexCoord1fARB,
   (_glapi_proc) _dispatch_stub_MultiTexCoord1fvARB,
   (_glapi_proc) _dispatch_stub_MultiTexCoord1i,
   (_glapi_proc) _dispatch_stub_MultiTexCoord1iv,
   (_glapi_proc) _dispatch_stub_MultiTexCoord1s,
   (_glapi_proc) _dispatch_stub_MultiTexCoord1sv,
   (_glapi_proc) _dispatch_stub_MultiTexCoord2d,
   (_glapi_proc) _dispatch_stub_MultiTexCoord2dv,
   (_glapi_proc) _dispatch_stub_MultiTexCoord2fARB,
   (_glapi_proc) _dispatch_stub_MultiTexCoord2fvARB,
   (_glapi_proc) _dispatch_stub_MultiTexCoord2i,
   (_glapi_proc) _dispatch_stub_MultiTexCoord2iv,
   (_glapi_proc) _dispatch_stub_MultiTexCoord2s,
   (_glapi_proc) _dispatch_stub_MultiTexCoord2sv,
   (_glapi_proc) _dispatch_stub_MultiTexCoord3d,
   (_glapi_proc) _dispatch_stub_MultiTexCoord3dv,
   (_glapi_proc) _dispatch_stub_MultiTexCoord3fARB,
   (_glapi_proc) _dispatch_stub_MultiTexCoord3fvARB,
   (_glapi_proc) _dispatch_stub_MultiTexCoord3i,
   (_glapi_proc) _dispatch_stub_MultiTexCoord3iv,
   (_glapi_proc) _dispatch_stub_MultiTexCoord3s,
   (_glapi_proc) _dispatch_stub_MultiTexCoord3sv,
   (_glapi_proc) _dispatch_stub_MultiTexCoord4d,
   (_glapi_proc) _dispatch_stub_MultiTexCoord4dv,
   (_glapi_proc) _dispatch_stub_MultiTexCoord4fARB,
   (_glapi_proc) _dispatch_stub_MultiTexCoord4fvARB,
   (_glapi_proc) _dispatch_stub_MultiTexCoord4i,
   (_glapi_proc) _dispatch_stub_MultiTexCoord4iv,
   (_glapi_proc) _dispatch_stub_MultiTexCoord4s,
   (_glapi_proc) _dispatch_stub_MultiTexCoord4sv,
   (_glapi_proc) _dispatch_stub_CompressedTexImage1D,
   (_glapi_proc) _dispatch_stub_CompressedTexImage2D,
   (_glapi_proc) _dispatch_stub_CompressedTexImage3D,
   (_glapi_proc) _dispatch_stub_CompressedTexSubImage1D,
   (_glapi_proc) _dispatch_stub_CompressedTexSubImage2D,
   (_glapi_proc) _dispatch_stub_CompressedTexSubImage3D,
   (_glapi_proc) _dispatch_stub_GetCompressedTexImage,
   (_glapi_proc) _dispatch_stub_LoadTransposeMatrixd,
   (_glapi_proc) _dispatch_stub_LoadTransposeMatrixf,
   (_glapi_proc) _dispatch_stub_MultTransposeMatrixd,
   (_glapi_proc) _dispatch_stub_MultTransposeMatrixf,
   (_glapi_proc) _dispatch_stub_SampleCoverage,
   (_glapi_proc) _dispatch_stub_BlendFuncSeparate,
   (_glapi_proc) _dispatch_stub_FogCoordPointer,
   (_glapi_proc) _dispatch_stub_FogCoordd,
   (_glapi_proc) _dispatch_stub_FogCoorddv,
   (_glapi_proc) _dispatch_stub_MultiDrawArrays,
   (_glapi_proc) _dispatch_stub_PointParameterf,
   (_glapi_proc) _dispatch_stub_PointParameterfv,
   (_glapi_proc) _dispatch_stub_PointParameteri,
   (_glapi_proc) _dispatch_stub_PointParameteriv,
   (_glapi_proc) _dispatch_stub_SecondaryColor3b,
   (_glapi_proc) _dispatch_stub_SecondaryColor3bv,
   (_glapi_proc) _dispatch_stub_SecondaryColor3d,
   (_glapi_proc) _dispatch_stub_SecondaryColor3dv,
   (_glapi_proc) _dispatch_stub_SecondaryColor3i,
   (_glapi_proc) _dispatch_stub_SecondaryColor3iv,
   (_glapi_proc) _dispatch_stub_SecondaryColor3s,
   (_glapi_proc) _dispatch_stub_SecondaryColor3sv,
   (_glapi_proc) _dispatch_stub_SecondaryColor3ub,
   (_glapi_proc) _dispatch_stub_SecondaryColor3ubv,
   (_glapi_proc) _dispatch_stub_SecondaryColor3ui,
   (_glapi_proc) _dispatch_stub_SecondaryColor3uiv,
   (_glapi_proc) _dispatch_stub_SecondaryColor3us,
   (_glapi_proc) _dispatch_stub_SecondaryColor3usv,
   (_glapi_proc) _dispatch_stub_SecondaryColorPointer,
   (_glapi_proc) _dispatch_stub_WindowPos2d,
   (_glapi_proc) _dispatch_stub_WindowPos2dv,
   (_glapi_proc) _dispatch_stub_WindowPos2f,
   (_glapi_proc) _dispatch_stub_WindowPos2fv,
   (_glapi_proc) _dispatch_stub_WindowPos2i,
   (_glapi_proc) _dispatch_stub_WindowPos2iv,
   (_glapi_proc) _dispatch_stub_WindowPos2s,
   (_glapi_proc) _dispatch_stub_WindowPos2sv,
   (_glapi_proc) _dispatch_stub_WindowPos3d,
   (_glapi_proc) _dispatch_stub_WindowPos3dv,
   (_glapi_proc) _dispatch_stub_WindowPos3f,
   (_glapi_proc) _dispatch_stub_WindowPos3fv,
   (_glapi_proc) _dispatch_stub_WindowPos3i,
   (_glapi_proc) _dispatch_stub_WindowPos3iv,
   (_glapi_proc) _dispatch_stub_WindowPos3s,
   (_glapi_proc) _dispatch_stub_WindowPos3sv,
   (_glapi_proc) _dispatch_stub_BeginQuery,
   (_glapi_proc) _dispatch_stub_BindBuffer,
   (_glapi_proc) _dispatch_stub_BufferData,
   (_glapi_proc) _dispatch_stub_BufferSubData,
   (_glapi_proc) _dispatch_stub_DeleteBuffers,
   (_glapi_proc) _dispatch_stub_DeleteQueries,
   (_glapi_proc) _dispatch_stub_EndQuery,
   (_glapi_proc) _dispatch_stub_GenBuffers,
   (_glapi_proc) _dispatch_stub_GenQueries,
   (_glapi_proc) _dispatch_stub_GetBufferParameteriv,
   (_glapi_proc) _dispatch_stub_GetBufferPointerv,
   (_glapi_proc) _dispatch_stub_GetBufferSubData,
   (_glapi_proc) _dispatch_stub_GetQueryObjectiv,
   (_glapi_proc) _dispatch_stub_GetQueryObjectuiv,
   (_glapi_proc) _dispatch_stub_GetQueryiv,
   (_glapi_proc) _dispatch_stub_IsBuffer,
   (_glapi_proc) _dispatch_stub_IsQuery,
   (_glapi_proc) _dispatch_stub_MapBuffer,
   (_glapi_proc) _dispatch_stub_UnmapBuffer,
   (_glapi_proc) _dispatch_stub_AttachShader,
   (_glapi_proc) _dispatch_stub_BindAttribLocation,
   (_glapi_proc) _dispatch_stub_BlendEquationSeparate,
   (_glapi_proc) _dispatch_stub_CompileShader,
   (_glapi_proc) _dispatch_stub_CreateProgram,
   (_glapi_proc) _dispatch_stub_CreateShader,
   (_glapi_proc) _dispatch_stub_DeleteProgram,
   (_glapi_proc) _dispatch_stub_DeleteShader,
   (_glapi_proc) _dispatch_stub_DetachShader,
   (_glapi_proc) _dispatch_stub_DisableVertexAttribArray,
   (_glapi_proc) _dispatch_stub_DrawBuffers,
   (_glapi_proc) _dispatch_stub_EnableVertexAttribArray,
   (_glapi_proc) _dispatch_stub_GetActiveAttrib,
   (_glapi_proc) _dispatch_stub_GetActiveUniform,
   (_glapi_proc) _dispatch_stub_GetAttachedShaders,
   (_glapi_proc) _dispatch_stub_GetAttribLocation,
   (_glapi_proc) _dispatch_stub_GetProgramInfoLog,
   (_glapi_proc) _dispatch_stub_GetProgramiv,
   (_glapi_proc) _dispatch_stub_GetShaderInfoLog,
   (_glapi_proc) _dispatch_stub_GetShaderSource,
   (_glapi_proc) _dispatch_stub_GetShaderiv,
   (_glapi_proc) _dispatch_stub_GetUniformLocation,
   (_glapi_proc) _dispatch_stub_GetUniformfv,
   (_glapi_proc) _dispatch_stub_GetUniformiv,
   (_glapi_proc) _dispatch_stub_GetVertexAttribPointerv,
   (_glapi_proc) _dispatch_stub_GetVertexAttribdv,
   (_glapi_proc) _dispatch_stub_GetVertexAttribfv,
   (_glapi_proc) _dispatch_stub_GetVertexAttribiv,
   (_glapi_proc) _dispatch_stub_IsProgram,
   (_glapi_proc) _dispatch_stub_IsShader,
   (_glapi_proc) _dispatch_stub_LinkProgram,
   (_glapi_proc) _dispatch_stub_ShaderSource,
   (_glapi_proc) _dispatch_stub_StencilFuncSeparate,
   (_glapi_proc) _dispatch_stub_StencilMaskSeparate,
   (_glapi_proc) _dispatch_stub_StencilOpSeparate,
   (_glapi_proc) _dispatch_stub_Uniform1f,
   (_glapi_proc) _dispatch_stub_Uniform1fv,
   (_glapi_proc) _dispatch_stub_Uniform1i,
   (_glapi_proc) _dispatch_stub_Uniform1iv,
   (_glapi_proc) _dispatch_stub_Uniform2f,
   (_glapi_proc) _dispatch_stub_Uniform2fv,
   (_glapi_proc) _dispatch_stub_Uniform2i,
   (_glapi_proc) _dispatch_stub_Uniform2iv,
   (_glapi_proc) _dispatch_stub_Uniform3f,
   (_glapi_proc) _dispatch_stub_Uniform3fv,
   (_glapi_proc) _dispatch_stub_Uniform3i,
   (_glapi_proc) _dispatch_stub_Uniform3iv,
   (_glapi_proc) _dispatch_stub_Uniform4f,
   (_glapi_proc) _dispatch_stub_Uniform4fv,
   (_glapi_proc) _dispatch_stub_Uniform4i,
   (_glapi_proc) _dispatch_stub_Uniform4iv,
   (_glapi_proc) _dispatch_stub_UniformMatrix2fv,
   (_glapi_proc) _dispatch_stub_UniformMatrix3fv,
   (_glapi_proc) _dispatch_stub_UniformMatrix4fv,
   (_glapi_proc) _dispatch_stub_UseProgram,
   (_glapi_proc) _dispatch_stub_ValidateProgram,
   (_glapi_proc) _dispatch_stub_VertexAttrib1d,
   (_glapi_proc) _dispatch_stub_VertexAttrib1dv,
   (_glapi_proc) _dispatch_stub_VertexAttrib1s,
   (_glapi_proc) _dispatch_stub_VertexAttrib1sv,
   (_glapi_proc) _dispatch_stub_VertexAttrib2d,
   (_glapi_proc) _dispatch_stub_VertexAttrib2dv,
   (_glapi_proc) _dispatch_stub_VertexAttrib2s,
   (_glapi_proc) _dispatch_stub_VertexAttrib2sv,
   (_glapi_proc) _dispatch_stub_VertexAttrib3d,
   (_glapi_proc) _dispatch_stub_VertexAttrib3dv,
   (_glapi_proc) _dispatch_stub_VertexAttrib3s,
   (_glapi_proc) _dispatch_stub_VertexAttrib3sv,
   (_glapi_proc) _dispatch_stub_VertexAttrib4Nbv,
   (_glapi_proc) _dispatch_stub_VertexAttrib4Niv,
   (_glapi_proc) _dispatch_stub_VertexAttrib4Nsv,
   (_glapi_proc) _dispatch_stub_VertexAttrib4Nub,
   (_glapi_proc) _dispatch_stub_VertexAttrib4Nubv,
   (_glapi_proc) _dispatch_stub_VertexAttrib4Nuiv,
   (_glapi_proc) _dispatch_stub_VertexAttrib4Nusv,
   (_glapi_proc) _dispatch_stub_VertexAttrib4bv,
   (_glapi_proc) _dispatch_stub_VertexAttrib4d,
   (_glapi_proc) _dispatch_stub_VertexAttrib4dv,
   (_glapi_proc) _dispatch_stub_VertexAttrib4iv,
   (_glapi_proc) _dispatch_stub_VertexAttrib4s,
   (_glapi_proc) _dispatch_stub_VertexAttrib4sv,
   (_glapi_proc) _dispatch_stub_VertexAttrib4ubv,
   (_glapi_proc) _dispatch_stub_VertexAttrib4uiv,
   (_glapi_proc) _dispatch_stub_VertexAttrib4usv,
   (_glapi_proc) _dispatch_stub_VertexAttribPointer,
   (_glapi_proc) _dispatch_stub_UniformMatrix2x3fv,
   (_glapi_proc) _dispatch_stub_UniformMatrix2x4fv,
   (_glapi_proc) _dispatch_stub_UniformMatrix3x2fv,
   (_glapi_proc) _dispatch_stub_UniformMatrix3x4fv,
   (_glapi_proc) _dispatch_stub_UniformMatrix4x2fv,
   (_glapi_proc) _dispatch_stub_UniformMatrix4x3fv,
   (_glapi_proc) _dispatch_stub_BeginConditionalRender,
   (_glapi_proc) _dispatch_stub_BeginTransformFeedback,
   (_glapi_proc) _dispatch_stub_BindBufferBase,
   (_glapi_proc) _dispatch_stub_BindBufferRange,
   (_glapi_proc) _dispatch_stub_BindFragDataLocation,
   (_glapi_proc) _dispatch_stub_ClampColor,
   (_glapi_proc) _dispatch_stub_ClearBufferfi,
   (_glapi_proc) _dispatch_stub_ClearBufferfv,
   (_glapi_proc) _dispatch_stub_ClearBufferiv,
   (_glapi_proc) _dispatch_stub_ClearBufferuiv,
   (_glapi_proc) _dispatch_stub_ColorMaski,
   (_glapi_proc) _dispatch_stub_Disablei,
   (_glapi_proc) _dispatch_stub_Enablei,
   (_glapi_proc) _dispatch_stub_EndConditionalRender,
   (_glapi_proc) _dispatch_stub_EndTransformFeedback,
   (_glapi_proc) _dispatch_stub_GetBooleani_v,
   (_glapi_proc) _dispatch_stub_GetFragDataLocation,
   (_glapi_proc) _dispatch_stub_GetIntegeri_v,
   (_glapi_proc) _dispatch_stub_GetStringi,
   (_glapi_proc) _dispatch_stub_GetTexParameterIiv,
   (_glapi_proc) _dispatch_stub_GetTexParameterIuiv,
   (_glapi_proc) _dispatch_stub_GetTransformFeedbackVarying,
   (_glapi_proc) _dispatch_stub_GetUniformuiv,
   (_glapi_proc) _dispatch_stub_GetVertexAttribIiv,
   (_glapi_proc) _dispatch_stub_GetVertexAttribIuiv,
   (_glapi_proc) _dispatch_stub_IsEnabledi,
   (_glapi_proc) _dispatch_stub_TexParameterIiv,
   (_glapi_proc) _dispatch_stub_TexParameterIuiv,
   (_glapi_proc) _dispatch_stub_TransformFeedbackVaryings,
   (_glapi_proc) _dispatch_stub_Uniform1ui,
   (_glapi_proc) _dispatch_stub_Uniform1uiv,
   (_glapi_proc) _dispatch_stub_Uniform2ui,
   (_glapi_proc) _dispatch_stub_Uniform2uiv,
   (_glapi_proc) _dispatch_stub_Uniform3ui,
   (_glapi_proc) _dispatch_stub_Uniform3uiv,
   (_glapi_proc) _dispatch_stub_Uniform4ui,
   (_glapi_proc) _dispatch_stub_Uniform4uiv,
   (_glapi_proc) _dispatch_stub_VertexAttribI1iv,
   (_glapi_proc) _dispatch_stub_VertexAttribI1uiv,
   (_glapi_proc) _dispatch_stub_VertexAttribI4bv,
   (_glapi_proc) _dispatch_stub_VertexAttribI4sv,
   (_glapi_proc) _dispatch_stub_VertexAttribI4ubv,
   (_glapi_proc) _dispatch_stub_VertexAttribI4usv,
   (_glapi_proc) _dispatch_stub_VertexAttribIPointer,
   (_glapi_proc) _dispatch_stub_PrimitiveRestartIndex,
   (_glapi_proc) _dispatch_stub_TexBuffer,
   (_glapi_proc) _dispatch_stub_FramebufferTexture,
   (_glapi_proc) _dispatch_stub_GetBufferParameteri64v,
   (_glapi_proc) _dispatch_stub_GetInteger64i_v,
   (_glapi_proc) _dispatch_stub_VertexAttribDivisor,
   (_glapi_proc) _dispatch_stub_MinSampleShading,
   (_glapi_proc) _dispatch_stub_MemoryBarrierByRegion,
   (_glapi_proc) _dispatch_stub_BindProgramARB,
   (_glapi_proc) _dispatch_stub_DeleteProgramsARB,
   (_glapi_proc) _dispatch_stub_GenProgramsARB,
   (_glapi_proc) _dispatch_stub_GetProgramEnvParameterdvARB,
   (_glapi_proc) _dispatch_stub_GetProgramEnvParameterfvARB,
   (_glapi_proc) _dispatch_stub_GetProgramLocalParameterdvARB,
   (_glapi_proc) _dispatch_stub_GetProgramLocalParameterfvARB,
   (_glapi_proc) _dispatch_stub_GetProgramStringARB,
   (_glapi_proc) _dispatch_stub_GetProgramivARB,
   (_glapi_proc) _dispatch_stub_IsProgramARB,
   (_glapi_proc) _dispatch_stub_ProgramEnvParameter4dARB,
   (_glapi_proc) _dispatch_stub_ProgramEnvParameter4dvARB,
   (_glapi_proc) _dispatch_stub_ProgramEnvParameter4fARB,
   (_glapi_proc) _dispatch_stub_ProgramEnvParameter4fvARB,
   (_glapi_proc) _dispatch_stub_ProgramLocalParameter4dARB,
   (_glapi_proc) _dispatch_stub_ProgramLocalParameter4dvARB,
   (_glapi_proc) _dispatch_stub_ProgramLocalParameter4fARB,
   (_glapi_proc) _dispatch_stub_ProgramLocalParameter4fvARB,
   (_glapi_proc) _dispatch_stub_ProgramStringARB,
   (_glapi_proc) _dispatch_stub_VertexAttrib1fARB,
   (_glapi_proc) _dispatch_stub_VertexAttrib1fvARB,
   (_glapi_proc) _dispatch_stub_VertexAttrib2fARB,
   (_glapi_proc) _dispatch_stub_VertexAttrib2fvARB,
   (_glapi_proc) _dispatch_stub_VertexAttrib3fARB,
   (_glapi_proc) _dispatch_stub_VertexAttrib3fvARB,
   (_glapi_proc) _dispatch_stub_VertexAttrib4fARB,
   (_glapi_proc) _dispatch_stub_VertexAttrib4fvARB,
   (_glapi_proc) _dispatch_stub_AttachObjectARB,
   (_glapi_proc) _dispatch_stub_CreateProgramObjectARB,
   (_glapi_proc) _dispatch_stub_CreateShaderObjectARB,
   (_glapi_proc) _dispatch_stub_DeleteObjectARB,
   (_glapi_proc) _dispatch_stub_DetachObjectARB,
   (_glapi_proc) _dispatch_stub_GetAttachedObjectsARB,
   (_glapi_proc) _dispatch_stub_GetHandleARB,
   (_glapi_proc) _dispatch_stub_GetInfoLogARB,
   (_glapi_proc) _dispatch_stub_GetObjectParameterfvARB,
   (_glapi_proc) _dispatch_stub_GetObjectParameterivARB,
   (_glapi_proc) _dispatch_stub_DrawArraysInstanced,
   (_glapi_proc) _dispatch_stub_DrawElementsInstanced,
   (_glapi_proc) _dispatch_stub_BindFramebuffer,
   (_glapi_proc) _dispatch_stub_BindRenderbuffer,
   (_glapi_proc) _dispatch_stub_BlitFramebuffer,
   (_glapi_proc) _dispatch_stub_CheckFramebufferStatus,
   (_glapi_proc) _dispatch_stub_DeleteFramebuffers,
   (_glapi_proc) _dispatch_stub_DeleteRenderbuffers,
   (_glapi_proc) _dispatch_stub_FramebufferRenderbuffer,
   (_glapi_proc) _dispatch_stub_FramebufferTexture1D,
   (_glapi_proc) _dispatch_stub_FramebufferTexture2D,
   (_glapi_proc) _dispatch_stub_FramebufferTexture3D,
   (_glapi_proc) _dispatch_stub_FramebufferTextureLayer,
   (_glapi_proc) _dispatch_stub_GenFramebuffers,
   (_glapi_proc) _dispatch_stub_GenRenderbuffers,
   (_glapi_proc) _dispatch_stub_GenerateMipmap,
   (_glapi_proc) _dispatch_stub_GetFramebufferAttachmentParameteriv,
   (_glapi_proc) _dispatch_stub_GetRenderbufferParameteriv,
   (_glapi_proc) _dispatch_stub_IsFramebuffer,
   (_glapi_proc) _dispatch_stub_IsRenderbuffer,
   (_glapi_proc) _dispatch_stub_RenderbufferStorage,
   (_glapi_proc) _dispatch_stub_RenderbufferStorageMultisample,
   (_glapi_proc) _dispatch_stub_FlushMappedBufferRange,
   (_glapi_proc) _dispatch_stub_MapBufferRange,
   (_glapi_proc) _dispatch_stub_BindVertexArray,
   (_glapi_proc) _dispatch_stub_DeleteVertexArrays,
   (_glapi_proc) _dispatch_stub_GenVertexArrays,
   (_glapi_proc) _dispatch_stub_IsVertexArray,
   (_glapi_proc) _dispatch_stub_GetActiveUniformBlockName,
   (_glapi_proc) _dispatch_stub_GetActiveUniformBlockiv,
   (_glapi_proc) _dispatch_stub_GetActiveUniformName,
   (_glapi_proc) _dispatch_stub_GetActiveUniformsiv,
   (_glapi_proc) _dispatch_stub_GetUniformBlockIndex,
   (_glapi_proc) _dispatch_stub_GetUniformIndices,
   (_glapi_proc) _dispatch_stub_UniformBlockBinding,
   (_glapi_proc) _dispatch_stub_CopyBufferSubData,
   (_glapi_proc) _dispatch_stub_ClientWaitSync,
   (_glapi_proc) _dispatch_stub_DeleteSync,
   (_glapi_proc) _dispatch_stub_FenceSync,
   (_glapi_proc) _dispatch_stub_GetInteger64v,
   (_glapi_proc) _dispatch_stub_GetSynciv,
   (_glapi_proc) _dispatch_stub_IsSync,
   (_glapi_proc) _dispatch_stub_WaitSync,
   (_glapi_proc) _dispatch_stub_DrawElementsBaseVertex,
   (_glapi_proc) _dispatch_stub_DrawElementsInstancedBaseVertex,
   (_glapi_proc) _dispatch_stub_DrawRangeElementsBaseVertex,
   (_glapi_proc) _dispatch_stub_MultiDrawElementsBaseVertex,
   (_glapi_proc) _dispatch_stub_ProvokingVertex,
   (_glapi_proc) _dispatch_stub_GetMultisamplefv,
   (_glapi_proc) _dispatch_stub_SampleMaski,
   (_glapi_proc) _dispatch_stub_TexImage2DMultisample,
   (_glapi_proc) _dispatch_stub_TexImage3DMultisample,
   (_glapi_proc) _dispatch_stub_BlendEquationSeparateiARB,
   (_glapi_proc) _dispatch_stub_BlendEquationiARB,
   (_glapi_proc) _dispatch_stub_BlendFuncSeparateiARB,
   (_glapi_proc) _dispatch_stub_BlendFunciARB,
   (_glapi_proc) _dispatch_stub_BindFragDataLocationIndexed,
   (_glapi_proc) _dispatch_stub_GetFragDataIndex,
   (_glapi_proc) _dispatch_stub_BindSampler,
   (_glapi_proc) _dispatch_stub_DeleteSamplers,
   (_glapi_proc) _dispatch_stub_GenSamplers,
   (_glapi_proc) _dispatch_stub_GetSamplerParameterIiv,
   (_glapi_proc) _dispatch_stub_GetSamplerParameterIuiv,
   (_glapi_proc) _dispatch_stub_GetSamplerParameterfv,
   (_glapi_proc) _dispatch_stub_GetSamplerParameteriv,
   (_glapi_proc) _dispatch_stub_IsSampler,
   (_glapi_proc) _dispatch_stub_SamplerParameterIiv,
   (_glapi_proc) _dispatch_stub_SamplerParameterIuiv,
   (_glapi_proc) _dispatch_stub_SamplerParameterf,
   (_glapi_proc) _dispatch_stub_SamplerParameterfv,
   (_glapi_proc) _dispatch_stub_SamplerParameteri,
   (_glapi_proc) _dispatch_stub_SamplerParameteriv,
   (_glapi_proc) _dispatch_stub_GetQueryObjecti64v,
   (_glapi_proc) _dispatch_stub_GetQueryObjectui64v,
   (_glapi_proc) _dispatch_stub_QueryCounter,
   (_glapi_proc) _dispatch_stub_ColorP3ui,
   (_glapi_proc) _dispatch_stub_ColorP3uiv,
   (_glapi_proc) _dispatch_stub_ColorP4ui,
   (_glapi_proc) _dispatch_stub_ColorP4uiv,
   (_glapi_proc) _dispatch_stub_MultiTexCoordP1ui,
   (_glapi_proc) _dispatch_stub_MultiTexCoordP1uiv,
   (_glapi_proc) _dispatch_stub_MultiTexCoordP2ui,
   (_glapi_proc) _dispatch_stub_MultiTexCoordP2uiv,
   (_glapi_proc) _dispatch_stub_MultiTexCoordP3ui,
   (_glapi_proc) _dispatch_stub_MultiTexCoordP3uiv,
   (_glapi_proc) _dispatch_stub_MultiTexCoordP4ui,
   (_glapi_proc) _dispatch_stub_MultiTexCoordP4uiv,
   (_glapi_proc) _dispatch_stub_NormalP3ui,
   (_glapi_proc) _dispatch_stub_NormalP3uiv,
   (_glapi_proc) _dispatch_stub_SecondaryColorP3ui,
   (_glapi_proc) _dispatch_stub_SecondaryColorP3uiv,
   (_glapi_proc) _dispatch_stub_TexCoordP1ui,
   (_glapi_proc) _dispatch_stub_TexCoordP1uiv,
   (_glapi_proc) _dispatch_stub_TexCoordP2ui,
   (_glapi_proc) _dispatch_stub_TexCoordP2uiv,
   (_glapi_proc) _dispatch_stub_TexCoordP3ui,
   (_glapi_proc) _dispatch_stub_TexCoordP3uiv,
   (_glapi_proc) _dispatch_stub_TexCoordP4ui,
   (_glapi_proc) _dispatch_stub_TexCoordP4uiv,
   (_glapi_proc) _dispatch_stub_VertexAttribP1ui,
   (_glapi_proc) _dispatch_stub_VertexAttribP1uiv,
   (_glapi_proc) _dispatch_stub_VertexAttribP2ui,
   (_glapi_proc) _dispatch_stub_VertexAttribP2uiv,
   (_glapi_proc) _dispatch_stub_VertexAttribP3ui,
   (_glapi_proc) _dispatch_stub_VertexAttribP3uiv,
   (_glapi_proc) _dispatch_stub_VertexAttribP4ui,
   (_glapi_proc) _dispatch_stub_VertexAttribP4uiv,
   (_glapi_proc) _dispatch_stub_VertexP2ui,
   (_glapi_proc) _dispatch_stub_VertexP2uiv,
   (_glapi_proc) _dispatch_stub_VertexP3ui,
   (_glapi_proc) _dispatch_stub_VertexP3uiv,
   (_glapi_proc) _dispatch_stub_VertexP4ui,
   (_glapi_proc) _dispatch_stub_VertexP4uiv,
   (_glapi_proc) _dispatch_stub_DrawArraysIndirect,
   (_glapi_proc) _dispatch_stub_DrawElementsIndirect,
   (_glapi_proc) _dispatch_stub_GetUniformdv,
   (_glapi_proc) _dispatch_stub_Uniform1d,
   (_glapi_proc) _dispatch_stub_Uniform1dv,
   (_glapi_proc) _dispatch_stub_Uniform2d,
   (_glapi_proc) _dispatch_stub_Uniform2dv,
   (_glapi_proc) _dispatch_stub_Uniform3d,
   (_glapi_proc) _dispatch_stub_Uniform3dv,
   (_glapi_proc) _dispatch_stub_Uniform4d,
   (_glapi_proc) _dispatch_stub_Uniform4dv,
   (_glapi_proc) _dispatch_stub_UniformMatrix2dv,
   (_glapi_proc) _dispatch_stub_UniformMatrix2x3dv,
   (_glapi_proc) _dispatch_stub_UniformMatrix2x4dv,
   (_glapi_proc) _dispatch_stub_UniformMatrix3dv,
   (_glapi_proc) _dispatch_stub_UniformMatrix3x2dv,
   (_glapi_proc) _dispatch_stub_UniformMatrix3x4dv,
   (_glapi_proc) _dispatch_stub_UniformMatrix4dv,
   (_glapi_proc) _dispatch_stub_UniformMatrix4x2dv,
   (_glapi_proc) _dispatch_stub_UniformMatrix4x3dv,
   (_glapi_proc) _dispatch_stub_GetActiveSubroutineName,
   (_glapi_proc) _dispatch_stub_GetActiveSubroutineUniformName,
   (_glapi_proc) _dispatch_stub_GetActiveSubroutineUniformiv,
   (_glapi_proc) _dispatch_stub_GetProgramStageiv,
   (_glapi_proc) _dispatch_stub_GetSubroutineIndex,
   (_glapi_proc) _dispatch_stub_GetSubroutineUniformLocation,
   (_glapi_proc) _dispatch_stub_GetUniformSubroutineuiv,
   (_glapi_proc) _dispatch_stub_UniformSubroutinesuiv,
   (_glapi_proc) _dispatch_stub_PatchParameterfv,
   (_glapi_proc) _dispatch_stub_PatchParameteri,
   (_glapi_proc) _dispatch_stub_BindTransformFeedback,
   (_glapi_proc) _dispatch_stub_DeleteTransformFeedbacks,
   (_glapi_proc) _dispatch_stub_DrawTransformFeedback,
   (_glapi_proc) _dispatch_stub_GenTransformFeedbacks,
   (_glapi_proc) _dispatch_stub_IsTransformFeedback,
   (_glapi_proc) _dispatch_stub_PauseTransformFeedback,
   (_glapi_proc) _dispatch_stub_ResumeTransformFeedback,
   (_glapi_proc) _dispatch_stub_BeginQueryIndexed,
   (_glapi_proc) _dispatch_stub_DrawTransformFeedbackStream,
   (_glapi_proc) _dispatch_stub_EndQueryIndexed,
   (_glapi_proc) _dispatch_stub_GetQueryIndexediv,
   (_glapi_proc) _dispatch_stub_ClearDepthf,
   (_glapi_proc) _dispatch_stub_DepthRangef,
   (_glapi_proc) _dispatch_stub_GetShaderPrecisionFormat,
   (_glapi_proc) _dispatch_stub_ReleaseShaderCompiler,
   (_glapi_proc) _dispatch_stub_ShaderBinary,
   (_glapi_proc) _dispatch_stub_GetProgramBinary,
   (_glapi_proc) _dispatch_stub_ProgramBinary,
   (_glapi_proc) _dispatch_stub_ProgramParameteri,
   (_glapi_proc) _dispatch_stub_GetVertexAttribLdv,
   (_glapi_proc) _dispatch_stub_VertexAttribL1d,
   (_glapi_proc) _dispatch_stub_VertexAttribL1dv,
   (_glapi_proc) _dispatch_stub_VertexAttribL2d,
   (_glapi_proc) _dispatch_stub_VertexAttribL2dv,
   (_glapi_proc) _dispatch_stub_VertexAttribL3d,
   (_glapi_proc) _dispatch_stub_VertexAttribL3dv,
   (_glapi_proc) _dispatch_stub_VertexAttribL4d,
   (_glapi_proc) _dispatch_stub_VertexAttribL4dv,
   (_glapi_proc) _dispatch_stub_VertexAttribLPointer,
   (_glapi_proc) _dispatch_stub_DepthRangeArrayv,
   (_glapi_proc) _dispatch_stub_DepthRangeIndexed,
   (_glapi_proc) _dispatch_stub_GetDoublei_v,
   (_glapi_proc) _dispatch_stub_GetFloati_v,
   (_glapi_proc) _dispatch_stub_ScissorArrayv,
   (_glapi_proc) _dispatch_stub_ScissorIndexed,
   (_glapi_proc) _dispatch_stub_ScissorIndexedv,
   (_glapi_proc) _dispatch_stub_ViewportArrayv,
   (_glapi_proc) _dispatch_stub_ViewportIndexedf,
   (_glapi_proc) _dispatch_stub_ViewportIndexedfv,
   (_glapi_proc) _dispatch_stub_GetGraphicsResetStatusARB,
   (_glapi_proc) _dispatch_stub_GetnCompressedTexImageARB,
   (_glapi_proc) _dispatch_stub_GetnMapdvARB,
   (_glapi_proc) _dispatch_stub_GetnMapfvARB,
   (_glapi_proc) _dispatch_stub_GetnMapivARB,
   (_glapi_proc) _dispatch_stub_GetnPixelMapfvARB,
   (_glapi_proc) _dispatch_stub_GetnPixelMapuivARB,
   (_glapi_proc) _dispatch_stub_GetnPixelMapusvARB,
   (_glapi_proc) _dispatch_stub_GetnPolygonStippleARB,
   (_glapi_proc) _dispatch_stub_GetnTexImageARB,
   (_glapi_proc) _dispatch_stub_GetnUniformdvARB,
   (_glapi_proc) _dispatch_stub_GetnUniformfvARB,
   (_glapi_proc) _dispatch_stub_GetnUniformivARB,
   (_glapi_proc) _dispatch_stub_GetnUniformuivARB,
   (_glapi_proc) _dispatch_stub_ReadnPixelsARB,
   (_glapi_proc) _dispatch_stub_DrawArraysInstancedBaseInstance,
   (_glapi_proc) _dispatch_stub_DrawElementsInstancedBaseInstance,
   (_glapi_proc) _dispatch_stub_DrawElementsInstancedBaseVertexBaseInstance,
   (_glapi_proc) _dispatch_stub_DrawTransformFeedbackInstanced,
   (_glapi_proc) _dispatch_stub_DrawTransformFeedbackStreamInstanced,
   (_glapi_proc) _dispatch_stub_GetInternalformativ,
   (_glapi_proc) _dispatch_stub_GetActiveAtomicCounterBufferiv,
   (_glapi_proc) _dispatch_stub_BindImageTexture,
   (_glapi_proc) _dispatch_stub_MemoryBarrier,
   (_glapi_proc) _dispatch_stub_TexStorage1D,
   (_glapi_proc) _dispatch_stub_TexStorage2D,
   (_glapi_proc) _dispatch_stub_TexStorage3D,
   (_glapi_proc) _dispatch_stub_TextureStorage1DEXT,
   (_glapi_proc) _dispatch_stub_TextureStorage2DEXT,
   (_glapi_proc) _dispatch_stub_TextureStorage3DEXT,
   (_glapi_proc) _dispatch_stub_ClearBufferData,
   (_glapi_proc) _dispatch_stub_ClearBufferSubData,
   (_glapi_proc) _dispatch_stub_DispatchCompute,
   (_glapi_proc) _dispatch_stub_DispatchComputeIndirect,
   (_glapi_proc) _dispatch_stub_CopyImageSubData,
   (_glapi_proc) _dispatch_stub_TextureView,
   (_glapi_proc) _dispatch_stub_BindVertexBuffer,
   (_glapi_proc) _dispatch_stub_VertexAttribBinding,
   (_glapi_proc) _dispatch_stub_VertexAttribFormat,
   (_glapi_proc) _dispatch_stub_VertexAttribIFormat,
   (_glapi_proc) _dispatch_stub_VertexAttribLFormat,
   (_glapi_proc) _dispatch_stub_VertexBindingDivisor,
   (_glapi_proc) _dispatch_stub_FramebufferParameteri,
   (_glapi_proc) _dispatch_stub_GetFramebufferParameteriv,
   (_glapi_proc) _dispatch_stub_GetInternalformati64v,
   (_glapi_proc) _dispatch_stub_MultiDrawArraysIndirect,
   (_glapi_proc) _dispatch_stub_MultiDrawElementsIndirect,
   (_glapi_proc) _dispatch_stub_GetProgramInterfaceiv,
   (_glapi_proc) _dispatch_stub_GetProgramResourceIndex,
   (_glapi_proc) _dispatch_stub_GetProgramResourceLocation,
   (_glapi_proc) _dispatch_stub_GetProgramResourceLocationIndex,
   (_glapi_proc) _dispatch_stub_GetProgramResourceName,
   (_glapi_proc) _dispatch_stub_GetProgramResourceiv,
   (_glapi_proc) _dispatch_stub_ShaderStorageBlockBinding,
   (_glapi_proc) _dispatch_stub_TexBufferRange,
   (_glapi_proc) _dispatch_stub_TexStorage2DMultisample,
   (_glapi_proc) _dispatch_stub_TexStorage3DMultisample,
   (_glapi_proc) _dispatch_stub_BufferStorage,
   (_glapi_proc) _dispatch_stub_ClearTexImage,
   (_glapi_proc) _dispatch_stub_ClearTexSubImage,
   (_glapi_proc) _dispatch_stub_BindBuffersBase,
   (_glapi_proc) _dispatch_stub_BindBuffersRange,
   (_glapi_proc) _dispatch_stub_BindImageTextures,
   (_glapi_proc) _dispatch_stub_BindSamplers,
   (_glapi_proc) _dispatch_stub_BindTextures,
   (_glapi_proc) _dispatch_stub_BindVertexBuffers,
   (_glapi_proc) _dispatch_stub_GetImageHandleARB,
   (_glapi_proc) _dispatch_stub_GetTextureHandleARB,
   (_glapi_proc) _dispatch_stub_GetTextureSamplerHandleARB,
   (_glapi_proc) _dispatch_stub_GetVertexAttribLui64vARB,
   (_glapi_proc) _dispatch_stub_IsImageHandleResidentARB,
   (_glapi_proc) _dispatch_stub_IsTextureHandleResidentARB,
   (_glapi_proc) _dispatch_stub_MakeImageHandleNonResidentARB,
   (_glapi_proc) _dispatch_stub_MakeImageHandleResidentARB,
   (_glapi_proc) _dispatch_stub_MakeTextureHandleNonResidentARB,
   (_glapi_proc) _dispatch_stub_MakeTextureHandleResidentARB,
   (_glapi_proc) _dispatch_stub_ProgramUniformHandleui64ARB,
   (_glapi_proc) _dispatch_stub_ProgramUniformHandleui64vARB,
   (_glapi_proc) _dispatch_stub_UniformHandleui64ARB,
   (_glapi_proc) _dispatch_stub_UniformHandleui64vARB,
   (_glapi_proc) _dispatch_stub_VertexAttribL1ui64ARB,
   (_glapi_proc) _dispatch_stub_VertexAttribL1ui64vARB,
   (_glapi_proc) _dispatch_stub_DispatchComputeGroupSizeARB,
   (_glapi_proc) _dispatch_stub_MultiDrawArraysIndirectCountARB,
   (_glapi_proc) _dispatch_stub_MultiDrawElementsIndirectCountARB,
   (_glapi_proc) _dispatch_stub_ClipControl,
   (_glapi_proc) _dispatch_stub_BindTextureUnit,
   (_glapi_proc) _dispatch_stub_BlitNamedFramebuffer,
   (_glapi_proc) _dispatch_stub_CheckNamedFramebufferStatus,
   (_glapi_proc) _dispatch_stub_ClearNamedBufferData,
   (_glapi_proc) _dispatch_stub_ClearNamedBufferSubData,
   (_glapi_proc) _dispatch_stub_ClearNamedFramebufferfi,
   (_glapi_proc) _dispatch_stub_ClearNamedFramebufferfv,
   (_glapi_proc) _dispatch_stub_ClearNamedFramebufferiv,
   (_glapi_proc) _dispatch_stub_ClearNamedFramebufferuiv,
   (_glapi_proc) _dispatch_stub_CompressedTextureSubImage1D,
   (_glapi_proc) _dispatch_stub_CompressedTextureSubImage2D,
   (_glapi_proc) _dispatch_stub_CompressedTextureSubImage3D,
   (_glapi_proc) _dispatch_stub_CopyNamedBufferSubData,
   (_glapi_proc) _dispatch_stub_CopyTextureSubImage1D,
   (_glapi_proc) _dispatch_stub_CopyTextureSubImage2D,
   (_glapi_proc) _dispatch_stub_CopyTextureSubImage3D,
   (_glapi_proc) _dispatch_stub_CreateBuffers,
   (_glapi_proc) _dispatch_stub_CreateFramebuffers,
   (_glapi_proc) _dispatch_stub_CreateProgramPipelines,
   (_glapi_proc) _dispatch_stub_CreateQueries,
   (_glapi_proc) _dispatch_stub_CreateRenderbuffers,
   (_glapi_proc) _dispatch_stub_CreateSamplers,
   (_glapi_proc) _dispatch_stub_CreateTextures,
   (_glapi_proc) _dispatch_stub_CreateTransformFeedbacks,
   (_glapi_proc) _dispatch_stub_CreateVertexArrays,
   (_glapi_proc) _dispatch_stub_DisableVertexArrayAttrib,
   (_glapi_proc) _dispatch_stub_EnableVertexArrayAttrib,
   (_glapi_proc) _dispatch_stub_FlushMappedNamedBufferRange,
   (_glapi_proc) _dispatch_stub_GenerateTextureMipmap,
   (_glapi_proc) _dispatch_stub_GetCompressedTextureImage,
   (_glapi_proc) _dispatch_stub_GetNamedBufferParameteri64v,
   (_glapi_proc) _dispatch_stub_GetNamedBufferParameteriv,
   (_glapi_proc) _dispatch_stub_GetNamedBufferPointerv,
   (_glapi_proc) _dispatch_stub_GetNamedBufferSubData,
   (_glapi_proc) _dispatch_stub_GetNamedFramebufferAttachmentParameteriv,
   (_glapi_proc) _dispatch_stub_GetNamedFramebufferParameteriv,
   (_glapi_proc) _dispatch_stub_GetNamedRenderbufferParameteriv,
   (_glapi_proc) _dispatch_stub_GetQueryBufferObjecti64v,
   (_glapi_proc) _dispatch_stub_GetQueryBufferObjectiv,
   (_glapi_proc) _dispatch_stub_GetQueryBufferObjectui64v,
   (_glapi_proc) _dispatch_stub_GetQueryBufferObjectuiv,
   (_glapi_proc) _dispatch_stub_GetTextureImage,
   (_glapi_proc) _dispatch_stub_GetTextureLevelParameterfv,
   (_glapi_proc) _dispatch_stub_GetTextureLevelParameteriv,
   (_glapi_proc) _dispatch_stub_GetTextureParameterIiv,
   (_glapi_proc) _dispatch_stub_GetTextureParameterIuiv,
   (_glapi_proc) _dispatch_stub_GetTextureParameterfv,
   (_glapi_proc) _dispatch_stub_GetTextureParameteriv,
   (_glapi_proc) _dispatch_stub_GetTransformFeedbacki64_v,
   (_glapi_proc) _dispatch_stub_GetTransformFeedbacki_v,
   (_glapi_proc) _dispatch_stub_GetTransformFeedbackiv,
   (_glapi_proc) _dispatch_stub_GetVertexArrayIndexed64iv,
   (_glapi_proc) _dispatch_stub_GetVertexArrayIndexediv,
   (_glapi_proc) _dispatch_stub_GetVertexArrayiv,
   (_glapi_proc) _dispatch_stub_InvalidateNamedFramebufferData,
   (_glapi_proc) _dispatch_stub_InvalidateNamedFramebufferSubData,
   (_glapi_proc) _dispatch_stub_MapNamedBuffer,
   (_glapi_proc) _dispatch_stub_MapNamedBufferRange,
   (_glapi_proc) _dispatch_stub_NamedBufferData,
   (_glapi_proc) _dispatch_stub_NamedBufferStorage,
   (_glapi_proc) _dispatch_stub_NamedBufferSubData,
   (_glapi_proc) _dispatch_stub_NamedFramebufferDrawBuffer,
   (_glapi_proc) _dispatch_stub_NamedFramebufferDrawBuffers,
   (_glapi_proc) _dispatch_stub_NamedFramebufferParameteri,
   (_glapi_proc) _dispatch_stub_NamedFramebufferReadBuffer,
   (_glapi_proc) _dispatch_stub_NamedFramebufferRenderbuffer,
   (_glapi_proc) _dispatch_stub_NamedFramebufferTexture,
   (_glapi_proc) _dispatch_stub_NamedFramebufferTextureLayer,
   (_glapi_proc) _dispatch_stub_NamedRenderbufferStorage,
   (_glapi_proc) _dispatch_stub_NamedRenderbufferStorageMultisample,
   (_glapi_proc) _dispatch_stub_TextureBuffer,
   (_glapi_proc) _dispatch_stub_TextureBufferRange,
   (_glapi_proc) _dispatch_stub_TextureParameterIiv,
   (_glapi_proc) _dispatch_stub_TextureParameterIuiv,
   (_glapi_proc) _dispatch_stub_TextureParameterf,
   (_glapi_proc) _dispatch_stub_TextureParameterfv,
   (_glapi_proc) _dispatch_stub_TextureParameteri,
   (_glapi_proc) _dispatch_stub_TextureParameteriv,
   (_glapi_proc) _dispatch_stub_TextureStorage1D,
   (_glapi_proc) _dispatch_stub_TextureStorage2D,
   (_glapi_proc) _dispatch_stub_TextureStorage2DMultisample,
   (_glapi_proc) _dispatch_stub_TextureStorage3D,
   (_glapi_proc) _dispatch_stub_TextureStorage3DMultisample,
   (_glapi_proc) _dispatch_stub_TextureSubImage1D,
   (_glapi_proc) _dispatch_stub_TextureSubImage2D,
   (_glapi_proc) _dispatch_stub_TextureSubImage3D,
   (_glapi_proc) _dispatch_stub_TransformFeedbackBufferBase,
   (_glapi_proc) _dispatch_stub_TransformFeedbackBufferRange,
   (_glapi_proc) _dispatch_stub_UnmapNamedBufferEXT,
   (_glapi_proc) _dispatch_stub_VertexArrayAttribBinding,
   (_glapi_proc) _dispatch_stub_VertexArrayAttribFormat,
   (_glapi_proc) _dispatch_stub_VertexArrayAttribIFormat,
   (_glapi_proc) _dispatch_stub_VertexArrayAttribLFormat,
   (_glapi_proc) _dispatch_stub_VertexArrayBindingDivisor,
   (_glapi_proc) _dispatch_stub_VertexArrayElementBuffer,
   (_glapi_proc) _dispatch_stub_VertexArrayVertexBuffer,
   (_glapi_proc) _dispatch_stub_VertexArrayVertexBuffers,
   (_glapi_proc) _dispatch_stub_GetCompressedTextureSubImage,
   (_glapi_proc) _dispatch_stub_GetTextureSubImage,
   (_glapi_proc) _dispatch_stub_BufferPageCommitmentARB,
   (_glapi_proc) _dispatch_stub_NamedBufferPageCommitmentARB,
   (_glapi_proc) _dispatch_stub_GetUniformi64vARB,
   (_glapi_proc) _dispatch_stub_GetUniformui64vARB,
   (_glapi_proc) _dispatch_stub_GetnUniformi64vARB,
   (_glapi_proc) _dispatch_stub_GetnUniformui64vARB,
   (_glapi_proc) _dispatch_stub_ProgramUniform1i64ARB,
   (_glapi_proc) _dispatch_stub_ProgramUniform1i64vARB,
   (_glapi_proc) _dispatch_stub_ProgramUniform1ui64ARB,
   (_glapi_proc) _dispatch_stub_ProgramUniform1ui64vARB,
   (_glapi_proc) _dispatch_stub_ProgramUniform2i64ARB,
   (_glapi_proc) _dispatch_stub_ProgramUniform2i64vARB,
   (_glapi_proc) _dispatch_stub_ProgramUniform2ui64ARB,
   (_glapi_proc) _dispatch_stub_ProgramUniform2ui64vARB,
   (_glapi_proc) _dispatch_stub_ProgramUniform3i64ARB,
   (_glapi_proc) _dispatch_stub_ProgramUniform3i64vARB,
   (_glapi_proc) _dispatch_stub_ProgramUniform3ui64ARB,
   (_glapi_proc) _dispatch_stub_ProgramUniform3ui64vARB,
   (_glapi_proc) _dispatch_stub_ProgramUniform4i64ARB,
   (_glapi_proc) _dispatch_stub_ProgramUniform4i64vARB,
   (_glapi_proc) _dispatch_stub_ProgramUniform4ui64ARB,
   (_glapi_proc) _dispatch_stub_ProgramUniform4ui64vARB,
   (_glapi_proc) _dispatch_stub_Uniform1i64ARB,
   (_glapi_proc) _dispatch_stub_Uniform1i64vARB,
   (_glapi_proc) _dispatch_stub_Uniform1ui64ARB,
   (_glapi_proc) _dispatch_stub_Uniform1ui64vARB,
   (_glapi_proc) _dispatch_stub_Uniform2i64ARB,
   (_glapi_proc) _dispatch_stub_Uniform2i64vARB,
   (_glapi_proc) _dispatch_stub_Uniform2ui64ARB,
   (_glapi_proc) _dispatch_stub_Uniform2ui64vARB,
   (_glapi_proc) _dispatch_stub_Uniform3i64ARB,
   (_glapi_proc) _dispatch_stub_Uniform3i64vARB,
   (_glapi_proc) _dispatch_stub_Uniform3ui64ARB,
   (_glapi_proc) _dispatch_stub_Uniform3ui64vARB,
   (_glapi_proc) _dispatch_stub_Uniform4i64ARB,
   (_glapi_proc) _dispatch_stub_Uniform4i64vARB,
   (_glapi_proc) _dispatch_stub_Uniform4ui64ARB,
   (_glapi_proc) _dispatch_stub_Uniform4ui64vARB,
   (_glapi_proc) _dispatch_stub_EvaluateDepthValuesARB,
   (_glapi_proc) _dispatch_stub_FramebufferSampleLocationsfvARB,
   (_glapi_proc) _dispatch_stub_NamedFramebufferSampleLocationsfvARB,
   (_glapi_proc) _dispatch_stub_SpecializeShaderARB,
   (_glapi_proc) _dispatch_stub_InvalidateBufferData,
   (_glapi_proc) _dispatch_stub_InvalidateBufferSubData,
   (_glapi_proc) _dispatch_stub_InvalidateFramebuffer,
   (_glapi_proc) _dispatch_stub_InvalidateSubFramebuffer,
   (_glapi_proc) _dispatch_stub_InvalidateTexImage,
   (_glapi_proc) _dispatch_stub_InvalidateTexSubImage,
   (_glapi_proc) _dispatch_stub_DrawTexfOES,
   (_glapi_proc) _dispatch_stub_DrawTexfvOES,
   (_glapi_proc) _dispatch_stub_DrawTexiOES,
   (_glapi_proc) _dispatch_stub_DrawTexivOES,
   (_glapi_proc) _dispatch_stub_DrawTexsOES,
   (_glapi_proc) _dispatch_stub_DrawTexsvOES,
   (_glapi_proc) _dispatch_stub_DrawTexxOES,
   (_glapi_proc) _dispatch_stub_DrawTexxvOES,
   (_glapi_proc) _dispatch_stub_PointSizePointerOES,
   (_glapi_proc) _dispatch_stub_QueryMatrixxOES,
   (_glapi_proc) _dispatch_stub_ColorPointerEXT,
   (_glapi_proc) _dispatch_stub_EdgeFlagPointerEXT,
   (_glapi_proc) _dispatch_stub_IndexPointerEXT,
   (_glapi_proc) _dispatch_stub_NormalPointerEXT,
   (_glapi_proc) _dispatch_stub_TexCoordPointerEXT,
   (_glapi_proc) _dispatch_stub_VertexPointerEXT,
   (_glapi_proc) _dispatch_stub_DiscardFramebufferEXT,
   (_glapi_proc) _dispatch_stub_ActiveShaderProgram,
   (_glapi_proc) _dispatch_stub_BindProgramPipeline,
   (_glapi_proc) _dispatch_stub_CreateShaderProgramv,
   (_glapi_proc) _dispatch_stub_DeleteProgramPipelines,
   (_glapi_proc) _dispatch_stub_GenProgramPipelines,
   (_glapi_proc) _dispatch_stub_GetProgramPipelineInfoLog,
   (_glapi_proc) _dispatch_stub_GetProgramPipelineiv,
   (_glapi_proc) _dispatch_stub_IsProgramPipeline,
   (_glapi_proc) _dispatch_stub_LockArraysEXT,
   (_glapi_proc) _dispatch_stub_ProgramUniform1d,
   (_glapi_proc) _dispatch_stub_ProgramUniform1dv,
   (_glapi_proc) _dispatch_stub_ProgramUniform1f,
   (_glapi_proc) _dispatch_stub_ProgramUniform1fv,
   (_glapi_proc) _dispatch_stub_ProgramUniform1i,
   (_glapi_proc) _dispatch_stub_ProgramUniform1iv,
   (_glapi_proc) _dispatch_stub_ProgramUniform1ui,
   (_glapi_proc) _dispatch_stub_ProgramUniform1uiv,
   (_glapi_proc) _dispatch_stub_ProgramUniform2d,
   (_glapi_proc) _dispatch_stub_ProgramUniform2dv,
   (_glapi_proc) _dispatch_stub_ProgramUniform2f,
   (_glapi_proc) _dispatch_stub_ProgramUniform2fv,
   (_glapi_proc) _dispatch_stub_ProgramUniform2i,
   (_glapi_proc) _dispatch_stub_ProgramUniform2iv,
   (_glapi_proc) _dispatch_stub_ProgramUniform2ui,
   (_glapi_proc) _dispatch_stub_ProgramUniform2uiv,
   (_glapi_proc) _dispatch_stub_ProgramUniform3d,
   (_glapi_proc) _dispatch_stub_ProgramUniform3dv,
   (_glapi_proc) _dispatch_stub_ProgramUniform3f,
   (_glapi_proc) _dispatch_stub_ProgramUniform3fv,
   (_glapi_proc) _dispatch_stub_ProgramUniform3i,
   (_glapi_proc) _dispatch_stub_ProgramUniform3iv,
   (_glapi_proc) _dispatch_stub_ProgramUniform3ui,
   (_glapi_proc) _dispatch_stub_ProgramUniform3uiv,
   (_glapi_proc) _dispatch_stub_ProgramUniform4d,
   (_glapi_proc) _dispatch_stub_ProgramUniform4dv,
   (_glapi_proc) _dispatch_stub_ProgramUniform4f,
   (_glapi_proc) _dispatch_stub_ProgramUniform4fv,
   (_glapi_proc) _dispatch_stub_ProgramUniform4i,
   (_glapi_proc) _dispatch_stub_ProgramUniform4iv,
   (_glapi_proc) _dispatch_stub_ProgramUniform4ui,
   (_glapi_proc) _dispatch_stub_ProgramUniform4uiv,
   (_glapi_proc) _dispatch_stub_ProgramUniformMatrix2dv,
   (_glapi_proc) _dispatch_stub_ProgramUniformMatrix2fv,
   (_glapi_proc) _dispatch_stub_ProgramUniformMatrix2x3dv,
   (_glapi_proc) _dispatch_stub_ProgramUniformMatrix2x3fv,
   (_glapi_proc) _dispatch_stub_ProgramUniformMatrix2x4dv,
   (_glapi_proc) _dispatch_stub_ProgramUniformMatrix2x4fv,
   (_glapi_proc) _dispatch_stub_ProgramUniformMatrix3dv,
   (_glapi_proc) _dispatch_stub_ProgramUniformMatrix3fv,
   (_glapi_proc) _dispatch_stub_ProgramUniformMatrix3x2dv,
   (_glapi_proc) _dispatch_stub_ProgramUniformMatrix3x2fv,
   (_glapi_proc) _dispatch_stub_ProgramUniformMatrix3x4dv,
   (_glapi_proc) _dispatch_stub_ProgramUniformMatrix3x4fv,
   (_glapi_proc) _dispatch_stub_ProgramUniformMatrix4dv,
   (_glapi_proc) _dispatch_stub_ProgramUniformMatrix4fv,
   (_glapi_proc) _dispatch_stub_ProgramUniformMatrix4x2dv,
   (_glapi_proc) _dispatch_stub_ProgramUniformMatrix4x2fv,
   (_glapi_proc) _dispatch_stub_ProgramUniformMatrix4x3dv,
   (_glapi_proc) _dispatch_stub_ProgramUniformMatrix4x3fv,
   (_glapi_proc) _dispatch_stub_UnlockArraysEXT,
   (_glapi_proc) _dispatch_stub_UseProgramStages,
   (_glapi_proc) _dispatch_stub_ValidateProgramPipeline,
   (_glapi_proc) _dispatch_stub_FramebufferTexture2DMultisampleEXT,
   (_glapi_proc) _dispatch_stub_DebugMessageCallback,
   (_glapi_proc) _dispatch_stub_DebugMessageControl,
   (_glapi_proc) _dispatch_stub_DebugMessageInsert,
   (_glapi_proc) _dispatch_stub_GetDebugMessageLog,
   (_glapi_proc) _dispatch_stub_GetObjectLabel,
   (_glapi_proc) _dispatch_stub_GetObjectPtrLabel,
   (_glapi_proc) _dispatch_stub_ObjectLabel,
   (_glapi_proc) _dispatch_stub_ObjectPtrLabel,
   (_glapi_proc) _dispatch_stub_PopDebugGroup,
   (_glapi_proc) _dispatch_stub_PushDebugGroup,
   (_glapi_proc) _dispatch_stub_SecondaryColor3fEXT,
   (_glapi_proc) _dispatch_stub_SecondaryColor3fvEXT,
   (_glapi_proc) _dispatch_stub_MultiDrawElements,
   (_glapi_proc) _dispatch_stub_FogCoordfEXT,
   (_glapi_proc) _dispatch_stub_FogCoordfvEXT,
   (_glapi_proc) _dispatch_stub_WindowPos4dMESA,
   (_glapi_proc) _dispatch_stub_WindowPos4dvMESA,
   (_glapi_proc) _dispatch_stub_WindowPos4fMESA,
   (_glapi_proc) _dispatch_stub_WindowPos4fvMESA,
   (_glapi_proc) _dispatch_stub_WindowPos4iMESA,
   (_glapi_proc) _dispatch_stub_WindowPos4ivMESA,
   (_glapi_proc) _dispatch_stub_WindowPos4sMESA,
   (_glapi_proc) _dispatch_stub_WindowPos4svMESA,
   (_glapi_proc) _dispatch_stub_MultiModeDrawArraysIBM,
   (_glapi_proc) _dispatch_stub_MultiModeDrawElementsIBM,
   (_glapi_proc) _dispatch_stub_VertexAttrib1dNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib1dvNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib1fNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib1fvNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib1sNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib1svNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib2dNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib2dvNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib2fNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib2fvNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib2sNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib2svNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib3dNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib3dvNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib3fNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib3fvNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib3sNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib3svNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib4dNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib4dvNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib4fNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib4fvNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib4sNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib4svNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib4ubNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib4ubvNV,
   (_glapi_proc) _dispatch_stub_VertexAttribs1dvNV,
   (_glapi_proc) _dispatch_stub_VertexAttribs1fvNV,
   (_glapi_proc) _dispatch_stub_VertexAttribs1svNV,
   (_glapi_proc) _dispatch_stub_VertexAttribs2dvNV,
   (_glapi_proc) _dispatch_stub_VertexAttribs2fvNV,
   (_glapi_proc) _dispatch_stub_VertexAttribs2svNV,
   (_glapi_proc) _dispatch_stub_VertexAttribs3dvNV,
   (_glapi_proc) _dispatch_stub_VertexAttribs3fvNV,
   (_glapi_proc) _dispatch_stub_VertexAttribs3svNV,
   (_glapi_proc) _dispatch_stub_VertexAttribs4dvNV,
   (_glapi_proc) _dispatch_stub_VertexAttribs4fvNV,
   (_glapi_proc) _dispatch_stub_VertexAttribs4svNV,
   (_glapi_proc) _dispatch_stub_VertexAttribs4ubvNV,
   (_glapi_proc) _dispatch_stub_AlphaFragmentOp1ATI,
   (_glapi_proc) _dispatch_stub_AlphaFragmentOp2ATI,
   (_glapi_proc) _dispatch_stub_AlphaFragmentOp3ATI,
   (_glapi_proc) _dispatch_stub_BeginFragmentShaderATI,
   (_glapi_proc) _dispatch_stub_BindFragmentShaderATI,
   (_glapi_proc) _dispatch_stub_ColorFragmentOp1ATI,
   (_glapi_proc) _dispatch_stub_ColorFragmentOp2ATI,
   (_glapi_proc) _dispatch_stub_ColorFragmentOp3ATI,
   (_glapi_proc) _dispatch_stub_DeleteFragmentShaderATI,
   (_glapi_proc) _dispatch_stub_EndFragmentShaderATI,
   (_glapi_proc) _dispatch_stub_GenFragmentShadersATI,
   (_glapi_proc) _dispatch_stub_PassTexCoordATI,
   (_glapi_proc) _dispatch_stub_SampleMapATI,
   (_glapi_proc) _dispatch_stub_SetFragmentShaderConstantATI,
   (_glapi_proc) _dispatch_stub_DepthRangeArrayfvOES,
   (_glapi_proc) _dispatch_stub_DepthRangeIndexedfOES,
   (_glapi_proc) _dispatch_stub_ActiveStencilFaceEXT,
   (_glapi_proc) _dispatch_stub_PrimitiveRestartNV,
   (_glapi_proc) _dispatch_stub_GetTexGenxvOES,
   (_glapi_proc) _dispatch_stub_TexGenxOES,
   (_glapi_proc) _dispatch_stub_TexGenxvOES,
   (_glapi_proc) _dispatch_stub_DepthBoundsEXT,
   (_glapi_proc) _dispatch_stub_BindFramebufferEXT,
   (_glapi_proc) _dispatch_stub_BindRenderbufferEXT,
   (_glapi_proc) _dispatch_stub_StringMarkerGREMEDY,
   (_glapi_proc) _dispatch_stub_VertexAttribI1iEXT,
   (_glapi_proc) _dispatch_stub_VertexAttribI1uiEXT,
   (_glapi_proc) _dispatch_stub_VertexAttribI2iEXT,
   (_glapi_proc) _dispatch_stub_VertexAttribI2ivEXT,
   (_glapi_proc) _dispatch_stub_VertexAttribI2uiEXT,
   (_glapi_proc) _dispatch_stub_VertexAttribI2uivEXT,
   (_glapi_proc) _dispatch_stub_VertexAttribI3iEXT,
   (_glapi_proc) _dispatch_stub_VertexAttribI3ivEXT,
   (_glapi_proc) _dispatch_stub_VertexAttribI3uiEXT,
   (_glapi_proc) _dispatch_stub_VertexAttribI3uivEXT,
   (_glapi_proc) _dispatch_stub_VertexAttribI4iEXT,
   (_glapi_proc) _dispatch_stub_VertexAttribI4ivEXT,
   (_glapi_proc) _dispatch_stub_VertexAttribI4uiEXT,
   (_glapi_proc) _dispatch_stub_VertexAttribI4uivEXT,
   (_glapi_proc) _dispatch_stub_ClearColorIiEXT,
   (_glapi_proc) _dispatch_stub_ClearColorIuiEXT,
   (_glapi_proc) _dispatch_stub_BindBufferOffsetEXT,
   (_glapi_proc) _dispatch_stub_BeginPerfMonitorAMD,
   (_glapi_proc) _dispatch_stub_DeletePerfMonitorsAMD,
   (_glapi_proc) _dispatch_stub_EndPerfMonitorAMD,
   (_glapi_proc) _dispatch_stub_GenPerfMonitorsAMD,
   (_glapi_proc) _dispatch_stub_GetPerfMonitorCounterDataAMD,
   (_glapi_proc) _dispatch_stub_GetPerfMonitorCounterInfoAMD,
   (_glapi_proc) _dispatch_stub_GetPerfMonitorCounterStringAMD,
   (_glapi_proc) _dispatch_stub_GetPerfMonitorCountersAMD,
   (_glapi_proc) _dispatch_stub_GetPerfMonitorGroupStringAMD,
   (_glapi_proc) _dispatch_stub_GetPerfMonitorGroupsAMD,
   (_glapi_proc) _dispatch_stub_SelectPerfMonitorCountersAMD,
   (_glapi_proc) _dispatch_stub_TextureBarrierNV,
   (_glapi_proc) _dispatch_stub_VDPAUFiniNV,
   (_glapi_proc) _dispatch_stub_VDPAUGetSurfaceivNV,
   (_glapi_proc) _dispatch_stub_VDPAUInitNV,
   (_glapi_proc) _dispatch_stub_VDPAUIsSurfaceNV,
   (_glapi_proc) _dispatch_stub_VDPAUMapSurfacesNV,
   (_glapi_proc) _dispatch_stub_VDPAURegisterOutputSurfaceNV,
   (_glapi_proc) _dispatch_stub_VDPAURegisterVideoSurfaceNV,
   (_glapi_proc) _dispatch_stub_VDPAUSurfaceAccessNV,
   (_glapi_proc) _dispatch_stub_VDPAUUnmapSurfacesNV,
   (_glapi_proc) _dispatch_stub_VDPAUUnregisterSurfaceNV,
   (_glapi_proc) _dispatch_stub_BeginPerfQueryINTEL,
   (_glapi_proc) _dispatch_stub_CreatePerfQueryINTEL,
   (_glapi_proc) _dispatch_stub_DeletePerfQueryINTEL,
   (_glapi_proc) _dispatch_stub_EndPerfQueryINTEL,
   (_glapi_proc) _dispatch_stub_GetFirstPerfQueryIdINTEL,
   (_glapi_proc) _dispatch_stub_GetNextPerfQueryIdINTEL,
   (_glapi_proc) _dispatch_stub_GetPerfCounterInfoINTEL,
   (_glapi_proc) _dispatch_stub_GetPerfQueryDataINTEL,
   (_glapi_proc) _dispatch_stub_GetPerfQueryIdByNameINTEL,
   (_glapi_proc) _dispatch_stub_GetPerfQueryInfoINTEL,
   (_glapi_proc) _dispatch_stub_PolygonOffsetClampEXT,
   (_glapi_proc) _dispatch_stub_SubpixelPrecisionBiasNV,
   (_glapi_proc) _dispatch_stub_ConservativeRasterParameterfNV,
   (_glapi_proc) _dispatch_stub_ConservativeRasterParameteriNV,
   (_glapi_proc) _dispatch_stub_WindowRectanglesEXT,
   (_glapi_proc) _dispatch_stub_BufferStorageMemEXT,
   (_glapi_proc) _dispatch_stub_CreateMemoryObjectsEXT,
   (_glapi_proc) _dispatch_stub_DeleteMemoryObjectsEXT,
   (_glapi_proc) _dispatch_stub_DeleteSemaphoresEXT,
   (_glapi_proc) _dispatch_stub_GenSemaphoresEXT,
   (_glapi_proc) _dispatch_stub_GetMemoryObjectParameterivEXT,
   (_glapi_proc) _dispatch_stub_GetSemaphoreParameterui64vEXT,
   (_glapi_proc) _dispatch_stub_GetUnsignedBytei_vEXT,
   (_glapi_proc) _dispatch_stub_GetUnsignedBytevEXT,
   (_glapi_proc) _dispatch_stub_IsMemoryObjectEXT,
   (_glapi_proc) _dispatch_stub_IsSemaphoreEXT,
   (_glapi_proc) _dispatch_stub_MemoryObjectParameterivEXT,
   (_glapi_proc) _dispatch_stub_NamedBufferStorageMemEXT,
   (_glapi_proc) _dispatch_stub_SemaphoreParameterui64vEXT,
   (_glapi_proc) _dispatch_stub_SignalSemaphoreEXT,
   (_glapi_proc) _dispatch_stub_TexStorageMem1DEXT,
   (_glapi_proc) _dispatch_stub_TexStorageMem2DEXT,
   (_glapi_proc) _dispatch_stub_TexStorageMem2DMultisampleEXT,
   (_glapi_proc) _dispatch_stub_TexStorageMem3DEXT,
   (_glapi_proc) _dispatch_stub_TexStorageMem3DMultisampleEXT,
   (_glapi_proc) _dispatch_stub_TextureStorageMem1DEXT,
   (_glapi_proc) _dispatch_stub_TextureStorageMem2DEXT,
   (_glapi_proc) _dispatch_stub_TextureStorageMem2DMultisampleEXT,
   (_glapi_proc) _dispatch_stub_TextureStorageMem3DEXT,
   (_glapi_proc) _dispatch_stub_TextureStorageMem3DMultisampleEXT,
   (_glapi_proc) _dispatch_stub_WaitSemaphoreEXT,
   (_glapi_proc) _dispatch_stub_ImportMemoryFdEXT,
   (_glapi_proc) _dispatch_stub_ImportSemaphoreFdEXT,
   (_glapi_proc) _dispatch_stub_FramebufferFetchBarrierEXT,
   (_glapi_proc) _dispatch_stub_NamedRenderbufferStorageMultisampleAdvancedAMD,
   (_glapi_proc) _dispatch_stub_RenderbufferStorageMultisampleAdvancedAMD,
   (_glapi_proc) _dispatch_stub_StencilFuncSeparateATI,
   (_glapi_proc) _dispatch_stub_ProgramEnvParameters4fvEXT,
   (_glapi_proc) _dispatch_stub_ProgramLocalParameters4fvEXT,
   (_glapi_proc) _dispatch_stub_EGLImageTargetRenderbufferStorageOES,
   (_glapi_proc) _dispatch_stub_EGLImageTargetTexture2DOES,
   (_glapi_proc) _dispatch_stub_AlphaFuncx,
   (_glapi_proc) _dispatch_stub_ClearColorx,
   (_glapi_proc) _dispatch_stub_ClearDepthx,
   (_glapi_proc) _dispatch_stub_Color4x,
   (_glapi_proc) _dispatch_stub_DepthRangex,
   (_glapi_proc) _dispatch_stub_Fogx,
   (_glapi_proc) _dispatch_stub_Fogxv,
   (_glapi_proc) _dispatch_stub_Frustumf,
   (_glapi_proc) _dispatch_stub_Frustumx,
   (_glapi_proc) _dispatch_stub_LightModelx,
   (_glapi_proc) _dispatch_stub_LightModelxv,
   (_glapi_proc) _dispatch_stub_Lightx,
   (_glapi_proc) _dispatch_stub_Lightxv,
   (_glapi_proc) _dispatch_stub_LineWidthx,
   (_glapi_proc) _dispatch_stub_LoadMatrixx,
   (_glapi_proc) _dispatch_stub_Materialx,
   (_glapi_proc) _dispatch_stub_Materialxv,
   (_glapi_proc) _dispatch_stub_MultMatrixx,
   (_glapi_proc) _dispatch_stub_MultiTexCoord4x,
   (_glapi_proc) _dispatch_stub_Normal3x,
   (_glapi_proc) _dispatch_stub_Orthof,
   (_glapi_proc) _dispatch_stub_Orthox,
   (_glapi_proc) _dispatch_stub_PointSizex,
   (_glapi_proc) _dispatch_stub_PolygonOffsetx,
   (_glapi_proc) _dispatch_stub_Rotatex,
   (_glapi_proc) _dispatch_stub_SampleCoveragex,
   (_glapi_proc) _dispatch_stub_Scalex,
   (_glapi_proc) _dispatch_stub_TexEnvx,
   (_glapi_proc) _dispatch_stub_TexEnvxv,
   (_glapi_proc) _dispatch_stub_TexParameterx,
   (_glapi_proc) _dispatch_stub_Translatex,
   (_glapi_proc) _dispatch_stub_ClipPlanef,
   (_glapi_proc) _dispatch_stub_ClipPlanex,
   (_glapi_proc) _dispatch_stub_GetClipPlanef,
   (_glapi_proc) _dispatch_stub_GetClipPlanex,
   (_glapi_proc) _dispatch_stub_GetFixedv,
   (_glapi_proc) _dispatch_stub_GetLightxv,
   (_glapi_proc) _dispatch_stub_GetMaterialxv,
   (_glapi_proc) _dispatch_stub_GetTexEnvxv,
   (_glapi_proc) _dispatch_stub_GetTexParameterxv,
   (_glapi_proc) _dispatch_stub_PointParameterx,
   (_glapi_proc) _dispatch_stub_PointParameterxv,
   (_glapi_proc) _dispatch_stub_TexParameterxv,
   (_glapi_proc) _dispatch_stub_BlendBarrier,
   (_glapi_proc) _dispatch_stub_PrimitiveBoundingBox,
   (_glapi_proc) _dispatch_stub_MaxShaderCompilerThreadsKHR,
   (_glapi_proc) _dispatch_stub_MatrixLoadfEXT,
   (_glapi_proc) _dispatch_stub_MatrixLoaddEXT,
   (_glapi_proc) _dispatch_stub_MatrixMultfEXT,
   (_glapi_proc) _dispatch_stub_MatrixMultdEXT,
   (_glapi_proc) _dispatch_stub_MatrixLoadIdentityEXT,
   (_glapi_proc) _dispatch_stub_MatrixRotatefEXT,
   (_glapi_proc) _dispatch_stub_MatrixRotatedEXT,
   (_glapi_proc) _dispatch_stub_MatrixScalefEXT,
   (_glapi_proc) _dispatch_stub_MatrixScaledEXT,
   (_glapi_proc) _dispatch_stub_MatrixTranslatefEXT,
   (_glapi_proc) _dispatch_stub_MatrixTranslatedEXT,
   (_glapi_proc) _dispatch_stub_MatrixOrthoEXT,
   (_glapi_proc) _dispatch_stub_MatrixFrustumEXT,
   (_glapi_proc) _dispatch_stub_MatrixPushEXT,
   (_glapi_proc) _dispatch_stub_MatrixPopEXT,
   (_glapi_proc) _dispatch_stub_MatrixLoadTransposefEXT,
   (_glapi_proc) _dispatch_stub_MatrixLoadTransposedEXT,
   (_glapi_proc) _dispatch_stub_MatrixMultTransposefEXT,
   (_glapi_proc) _dispatch_stub_MatrixMultTransposedEXT,
   (_glapi_proc) _dispatch_stub_BindMultiTextureEXT,
   (_glapi_proc) _dispatch_stub_NamedBufferDataEXT,
   (_glapi_proc) _dispatch_stub_NamedBufferSubDataEXT,
   (_glapi_proc) _dispatch_stub_NamedBufferStorageEXT,
   (_glapi_proc) _dispatch_stub_MapNamedBufferRangeEXT,
   (_glapi_proc) _dispatch_stub_TextureImage1DEXT,
   (_glapi_proc) _dispatch_stub_TextureImage2DEXT,
   (_glapi_proc) _dispatch_stub_TextureImage3DEXT,
   (_glapi_proc) _dispatch_stub_TextureSubImage1DEXT,
   (_glapi_proc) _dispatch_stub_TextureSubImage2DEXT,
   (_glapi_proc) _dispatch_stub_TextureSubImage3DEXT,
   (_glapi_proc) _dispatch_stub_CopyTextureImage1DEXT,
   (_glapi_proc) _dispatch_stub_CopyTextureImage2DEXT,
   (_glapi_proc) _dispatch_stub_CopyTextureSubImage1DEXT,
   (_glapi_proc) _dispatch_stub_CopyTextureSubImage2DEXT,
   (_glapi_proc) _dispatch_stub_CopyTextureSubImage3DEXT,
   (_glapi_proc) _dispatch_stub_MapNamedBufferEXT,
   (_glapi_proc) _dispatch_stub_GetTextureParameterivEXT,
   (_glapi_proc) _dispatch_stub_GetTextureParameterfvEXT,
   (_glapi_proc) _dispatch_stub_TextureParameteriEXT,
   (_glapi_proc) _dispatch_stub_TextureParameterivEXT,
   (_glapi_proc) _dispatch_stub_TextureParameterfEXT,
   (_glapi_proc) _dispatch_stub_TextureParameterfvEXT,
   (_glapi_proc) _dispatch_stub_GetTextureImageEXT,
   (_glapi_proc) _dispatch_stub_GetTextureLevelParameterivEXT,
   (_glapi_proc) _dispatch_stub_GetTextureLevelParameterfvEXT,
   (_glapi_proc) _dispatch_stub_GetNamedBufferSubDataEXT,
   (_glapi_proc) _dispatch_stub_GetNamedBufferPointervEXT,
   (_glapi_proc) _dispatch_stub_GetNamedBufferParameterivEXT,
   (_glapi_proc) _dispatch_stub_FlushMappedNamedBufferRangeEXT,
   (_glapi_proc) _dispatch_stub_FramebufferDrawBufferEXT,
   (_glapi_proc) _dispatch_stub_FramebufferDrawBuffersEXT,
   (_glapi_proc) _dispatch_stub_FramebufferReadBufferEXT,
   (_glapi_proc) _dispatch_stub_GetFramebufferParameterivEXT,
   (_glapi_proc) _dispatch_stub_CheckNamedFramebufferStatusEXT,
   (_glapi_proc) _dispatch_stub_NamedFramebufferTexture1DEXT,
   (_glapi_proc) _dispatch_stub_NamedFramebufferTexture2DEXT,
   (_glapi_proc) _dispatch_stub_NamedFramebufferTexture3DEXT,
   (_glapi_proc) _dispatch_stub_NamedFramebufferRenderbufferEXT,
   (_glapi_proc) _dispatch_stub_GetNamedFramebufferAttachmentParameterivEXT,
   (_glapi_proc) _dispatch_stub_EnableClientStateiEXT,
   (_glapi_proc) _dispatch_stub_DisableClientStateiEXT,
   (_glapi_proc) _dispatch_stub_GetPointerIndexedvEXT,
   (_glapi_proc) _dispatch_stub_MultiTexEnviEXT,
   (_glapi_proc) _dispatch_stub_MultiTexEnvivEXT,
   (_glapi_proc) _dispatch_stub_MultiTexEnvfEXT,
   (_glapi_proc) _dispatch_stub_MultiTexEnvfvEXT,
   (_glapi_proc) _dispatch_stub_GetMultiTexEnvivEXT,
   (_glapi_proc) _dispatch_stub_GetMultiTexEnvfvEXT,
   (_glapi_proc) _dispatch_stub_MultiTexParameteriEXT,
   (_glapi_proc) _dispatch_stub_MultiTexParameterivEXT,
   (_glapi_proc) _dispatch_stub_MultiTexParameterfEXT,
   (_glapi_proc) _dispatch_stub_MultiTexParameterfvEXT,
   (_glapi_proc) _dispatch_stub_GetMultiTexImageEXT,
   (_glapi_proc) _dispatch_stub_MultiTexImage1DEXT,
   (_glapi_proc) _dispatch_stub_MultiTexImage2DEXT,
   (_glapi_proc) _dispatch_stub_MultiTexImage3DEXT,
   (_glapi_proc) _dispatch_stub_MultiTexSubImage1DEXT,
   (_glapi_proc) _dispatch_stub_MultiTexSubImage2DEXT,
   (_glapi_proc) _dispatch_stub_MultiTexSubImage3DEXT,
   (_glapi_proc) _dispatch_stub_GetMultiTexParameterivEXT,
   (_glapi_proc) _dispatch_stub_GetMultiTexParameterfvEXT,
   (_glapi_proc) _dispatch_stub_CopyMultiTexImage1DEXT,
   (_glapi_proc) _dispatch_stub_CopyMultiTexImage2DEXT,
   (_glapi_proc) _dispatch_stub_CopyMultiTexSubImage1DEXT,
   (_glapi_proc) _dispatch_stub_CopyMultiTexSubImage2DEXT,
   (_glapi_proc) _dispatch_stub_CopyMultiTexSubImage3DEXT,
   (_glapi_proc) _dispatch_stub_MultiTexGendEXT,
   (_glapi_proc) _dispatch_stub_MultiTexGendvEXT,
   (_glapi_proc) _dispatch_stub_MultiTexGenfEXT,
   (_glapi_proc) _dispatch_stub_MultiTexGenfvEXT,
   (_glapi_proc) _dispatch_stub_MultiTexGeniEXT,
   (_glapi_proc) _dispatch_stub_MultiTexGenivEXT,
   (_glapi_proc) _dispatch_stub_GetMultiTexGendvEXT,
   (_glapi_proc) _dispatch_stub_GetMultiTexGenfvEXT,
   (_glapi_proc) _dispatch_stub_GetMultiTexGenivEXT,
   (_glapi_proc) _dispatch_stub_MultiTexCoordPointerEXT,
   (_glapi_proc) _dispatch_stub_BindImageTextureEXT,
   (_glapi_proc) _dispatch_stub_CompressedTextureImage1DEXT,
   (_glapi_proc) _dispatch_stub_CompressedTextureImage2DEXT,
   (_glapi_proc) _dispatch_stub_CompressedTextureImage3DEXT,
   (_glapi_proc) _dispatch_stub_CompressedTextureSubImage1DEXT,
   (_glapi_proc) _dispatch_stub_CompressedTextureSubImage2DEXT,
   (_glapi_proc) _dispatch_stub_CompressedTextureSubImage3DEXT,
   (_glapi_proc) _dispatch_stub_GetCompressedTextureImageEXT,
   (_glapi_proc) _dispatch_stub_CompressedMultiTexImage1DEXT,
   (_glapi_proc) _dispatch_stub_CompressedMultiTexImage2DEXT,
   (_glapi_proc) _dispatch_stub_CompressedMultiTexImage3DEXT,
   (_glapi_proc) _dispatch_stub_CompressedMultiTexSubImage1DEXT,
   (_glapi_proc) _dispatch_stub_CompressedMultiTexSubImage2DEXT,
   (_glapi_proc) _dispatch_stub_CompressedMultiTexSubImage3DEXT,
   (_glapi_proc) _dispatch_stub_GetCompressedMultiTexImageEXT,
   (_glapi_proc) _dispatch_stub_GetMultiTexLevelParameterivEXT,
   (_glapi_proc) _dispatch_stub_GetMultiTexLevelParameterfvEXT,
   (_glapi_proc) _dispatch_stub_FramebufferParameteriMESA,
   (_glapi_proc) _dispatch_stub_GetFramebufferParameterivMESA,
   (_glapi_proc) _dispatch_stub_NamedRenderbufferStorageEXT,
   (_glapi_proc) _dispatch_stub_GetNamedRenderbufferParameterivEXT,
   (_glapi_proc) _dispatch_stub_ClientAttribDefaultEXT,
   (_glapi_proc) _dispatch_stub_PushClientAttribDefaultEXT,
   (_glapi_proc) _dispatch_stub_NamedProgramStringEXT,
   (_glapi_proc) _dispatch_stub_GetNamedProgramStringEXT,
   (_glapi_proc) _dispatch_stub_NamedProgramLocalParameter4fEXT,
   (_glapi_proc) _dispatch_stub_NamedProgramLocalParameter4fvEXT,
   (_glapi_proc) _dispatch_stub_GetNamedProgramLocalParameterfvEXT,
   (_glapi_proc) _dispatch_stub_NamedProgramLocalParameter4dEXT,
   (_glapi_proc) _dispatch_stub_NamedProgramLocalParameter4dvEXT,
   (_glapi_proc) _dispatch_stub_GetNamedProgramLocalParameterdvEXT,
   (_glapi_proc) _dispatch_stub_GetNamedProgramivEXT,
   (_glapi_proc) _dispatch_stub_TextureBufferEXT,
   (_glapi_proc) _dispatch_stub_MultiTexBufferEXT,
   (_glapi_proc) _dispatch_stub_TextureParameterIivEXT,
   (_glapi_proc) _dispatch_stub_TextureParameterIuivEXT,
   (_glapi_proc) _dispatch_stub_GetTextureParameterIivEXT,
   (_glapi_proc) _dispatch_stub_GetTextureParameterIuivEXT,
   (_glapi_proc) _dispatch_stub_MultiTexParameterIivEXT,
   (_glapi_proc) _dispatch_stub_MultiTexParameterIuivEXT,
   (_glapi_proc) _dispatch_stub_GetMultiTexParameterIivEXT,
   (_glapi_proc) _dispatch_stub_GetMultiTexParameterIuivEXT,
   (_glapi_proc) _dispatch_stub_NamedProgramLocalParameters4fvEXT,
   (_glapi_proc) _dispatch_stub_GenerateTextureMipmapEXT,
   (_glapi_proc) _dispatch_stub_GenerateMultiTexMipmapEXT,
   (_glapi_proc) _dispatch_stub_NamedRenderbufferStorageMultisampleEXT,
   (_glapi_proc) _dispatch_stub_NamedCopyBufferSubDataEXT,
   (_glapi_proc) _dispatch_stub_VertexArrayVertexOffsetEXT,
   (_glapi_proc) _dispatch_stub_VertexArrayColorOffsetEXT,
   (_glapi_proc) _dispatch_stub_VertexArrayEdgeFlagOffsetEXT,
   (_glapi_proc) _dispatch_stub_VertexArrayIndexOffsetEXT,
   (_glapi_proc) _dispatch_stub_VertexArrayNormalOffsetEXT,
   (_glapi_proc) _dispatch_stub_VertexArrayTexCoordOffsetEXT,
   (_glapi_proc) _dispatch_stub_VertexArrayMultiTexCoordOffsetEXT,
   (_glapi_proc) _dispatch_stub_VertexArrayFogCoordOffsetEXT,
   (_glapi_proc) _dispatch_stub_VertexArraySecondaryColorOffsetEXT,
   (_glapi_proc) _dispatch_stub_VertexArrayVertexAttribOffsetEXT,
   (_glapi_proc) _dispatch_stub_VertexArrayVertexAttribIOffsetEXT,
   (_glapi_proc) _dispatch_stub_EnableVertexArrayEXT,
   (_glapi_proc) _dispatch_stub_DisableVertexArrayEXT,
   (_glapi_proc) _dispatch_stub_EnableVertexArrayAttribEXT,
   (_glapi_proc) _dispatch_stub_DisableVertexArrayAttribEXT,
   (_glapi_proc) _dispatch_stub_GetVertexArrayIntegervEXT,
   (_glapi_proc) _dispatch_stub_GetVertexArrayPointervEXT,
   (_glapi_proc) _dispatch_stub_GetVertexArrayIntegeri_vEXT,
   (_glapi_proc) _dispatch_stub_GetVertexArrayPointeri_vEXT,
   (_glapi_proc) _dispatch_stub_ClearNamedBufferDataEXT,
   (_glapi_proc) _dispatch_stub_ClearNamedBufferSubDataEXT,
   (_glapi_proc) _dispatch_stub_NamedFramebufferParameteriEXT,
   (_glapi_proc) _dispatch_stub_GetNamedFramebufferParameterivEXT,
   (_glapi_proc) _dispatch_stub_VertexArrayVertexAttribLOffsetEXT,
   (_glapi_proc) _dispatch_stub_VertexArrayVertexAttribDivisorEXT,
   (_glapi_proc) _dispatch_stub_TextureBufferRangeEXT,
   (_glapi_proc) _dispatch_stub_TextureStorage2DMultisampleEXT,
   (_glapi_proc) _dispatch_stub_TextureStorage3DMultisampleEXT,
   (_glapi_proc) _dispatch_stub_VertexArrayBindVertexBufferEXT,
   (_glapi_proc) _dispatch_stub_VertexArrayVertexAttribFormatEXT,
   (_glapi_proc) _dispatch_stub_VertexArrayVertexAttribIFormatEXT,
   (_glapi_proc) _dispatch_stub_VertexArrayVertexAttribLFormatEXT,
   (_glapi_proc) _dispatch_stub_VertexArrayVertexAttribBindingEXT,
   (_glapi_proc) _dispatch_stub_VertexArrayVertexBindingDivisorEXT,
   (_glapi_proc) _dispatch_stub_NamedBufferPageCommitmentEXT,
   (_glapi_proc) _dispatch_stub_NamedStringARB,
   (_glapi_proc) _dispatch_stub_DeleteNamedStringARB,
   (_glapi_proc) _dispatch_stub_CompileShaderIncludeARB,
   (_glapi_proc) _dispatch_stub_IsNamedStringARB,
   (_glapi_proc) _dispatch_stub_GetNamedStringARB,
   (_glapi_proc) _dispatch_stub_GetNamedStringivARB,
   (_glapi_proc) _dispatch_stub_EGLImageTargetTexStorageEXT,
   (_glapi_proc) _dispatch_stub_EGLImageTargetTextureStorageEXT,
   (_glapi_proc) _dispatch_stub_CopyImageSubDataNV,
   (_glapi_proc) _dispatch_stub_ViewportSwizzleNV,
   (_glapi_proc) _dispatch_stub_AlphaToCoverageDitherControlNV,
   (_glapi_proc) _dispatch_stub_InternalBufferSubDataCopyMESA,
   (_glapi_proc) _dispatch_stub_Vertex2hNV,
   (_glapi_proc) _dispatch_stub_Vertex2hvNV,
   (_glapi_proc) _dispatch_stub_Vertex3hNV,
   (_glapi_proc) _dispatch_stub_Vertex3hvNV,
   (_glapi_proc) _dispatch_stub_Vertex4hNV,
   (_glapi_proc) _dispatch_stub_Vertex4hvNV,
   (_glapi_proc) _dispatch_stub_Normal3hNV,
   (_glapi_proc) _dispatch_stub_Normal3hvNV,
   (_glapi_proc) _dispatch_stub_Color3hNV,
   (_glapi_proc) _dispatch_stub_Color3hvNV,
   (_glapi_proc) _dispatch_stub_Color4hNV,
   (_glapi_proc) _dispatch_stub_Color4hvNV,
   (_glapi_proc) _dispatch_stub_TexCoord1hNV,
   (_glapi_proc) _dispatch_stub_TexCoord1hvNV,
   (_glapi_proc) _dispatch_stub_TexCoord2hNV,
   (_glapi_proc) _dispatch_stub_TexCoord2hvNV,
   (_glapi_proc) _dispatch_stub_TexCoord3hNV,
   (_glapi_proc) _dispatch_stub_TexCoord3hvNV,
   (_glapi_proc) _dispatch_stub_TexCoord4hNV,
   (_glapi_proc) _dispatch_stub_TexCoord4hvNV,
   (_glapi_proc) _dispatch_stub_MultiTexCoord1hNV,
   (_glapi_proc) _dispatch_stub_MultiTexCoord1hvNV,
   (_glapi_proc) _dispatch_stub_MultiTexCoord2hNV,
   (_glapi_proc) _dispatch_stub_MultiTexCoord2hvNV,
   (_glapi_proc) _dispatch_stub_MultiTexCoord3hNV,
   (_glapi_proc) _dispatch_stub_MultiTexCoord3hvNV,
   (_glapi_proc) _dispatch_stub_MultiTexCoord4hNV,
   (_glapi_proc) _dispatch_stub_MultiTexCoord4hvNV,
   (_glapi_proc) _dispatch_stub_FogCoordhNV,
   (_glapi_proc) _dispatch_stub_FogCoordhvNV,
   (_glapi_proc) _dispatch_stub_SecondaryColor3hNV,
   (_glapi_proc) _dispatch_stub_SecondaryColor3hvNV,
   (_glapi_proc) _dispatch_stub_InternalSetError,
   (_glapi_proc) _dispatch_stub_VertexAttrib1hNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib1hvNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib2hNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib2hvNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib3hNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib3hvNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib4hNV,
   (_glapi_proc) _dispatch_stub_VertexAttrib4hvNV,
   (_glapi_proc) _dispatch_stub_VertexAttribs1hvNV,
   (_glapi_proc) _dispatch_stub_VertexAttribs2hvNV,
   (_glapi_proc) _dispatch_stub_VertexAttribs3hvNV,
   (_glapi_proc) _dispatch_stub_VertexAttribs4hvNV,
   (_glapi_proc) _dispatch_stub_TexPageCommitmentARB,
   (_glapi_proc) _dispatch_stub_TexturePageCommitmentEXT,
   (_glapi_proc) _dispatch_stub_ImportMemoryWin32HandleEXT,
   (_glapi_proc) _dispatch_stub_ImportSemaphoreWin32HandleEXT,
   (_glapi_proc) _dispatch_stub_ImportMemoryWin32NameEXT,
   (_glapi_proc) _dispatch_stub_ImportSemaphoreWin32NameEXT,
   (_glapi_proc) _dispatch_stub_GetObjectLabelEXT,
   (_glapi_proc) _dispatch_stub_LabelObjectEXT,
   (_glapi_proc) _dispatch_stub_DrawArraysUserBuf,
   (_glapi_proc) _dispatch_stub_DrawElementsUserBuf,
   (_glapi_proc) _dispatch_stub_MultiDrawArraysUserBuf,
   (_glapi_proc) _dispatch_stub_MultiDrawElementsUserBuf,
   (_glapi_proc) _dispatch_stub_DrawArraysInstancedBaseInstanceDrawID,
   (_glapi_proc) _dispatch_stub_DrawElementsInstancedBaseVertexBaseInstanceDrawID,
   (_glapi_proc) _dispatch_stub_InternalInvalidateFramebufferAncillaryMESA,
   (_glapi_proc) _dispatch_stub_DrawElementsPacked,
   (_glapi_proc) _dispatch_stub_DrawElementsUserBufPacked,
   (_glapi_proc) _dispatch_stub_TexStorageAttribs2DEXT,
   (_glapi_proc) _dispatch_stub_TexStorageAttribs3DEXT,
   (_glapi_proc) _dispatch_stub_FramebufferTextureMultiviewOVR,
   (_glapi_proc) _dispatch_stub_NamedFramebufferTextureMultiviewOVR,
   (_glapi_proc) _dispatch_stub_FramebufferTextureMultisampleMultiviewOVR,
   (_glapi_proc) _dispatch_stub_ColorTable,
   (_glapi_proc) _dispatch_stub_ColorTableParameterfv,
   (_glapi_proc) _dispatch_stub_ColorTableParameteriv,
   (_glapi_proc) _dispatch_stub_CopyColorTable,
   (_glapi_proc) _dispatch_stub_GetColorTable,
   (_glapi_proc) _dispatch_stub_GetColorTableParameterfv,
   (_glapi_proc) _dispatch_stub_GetColorTableParameteriv,
   (_glapi_proc) _dispatch_stub_ColorSubTable,
   (_glapi_proc) _dispatch_stub_CopyColorSubTable,
   (_glapi_proc) _dispatch_stub_ConvolutionFilter1D,
   (_glapi_proc) _dispatch_stub_ConvolutionFilter2D,
   (_glapi_proc) _dispatch_stub_ConvolutionParameterf,
   (_glapi_proc) _dispatch_stub_ConvolutionParameterfv,
   (_glapi_proc) _dispatch_stub_ConvolutionParameteri,
   (_glapi_proc) _dispatch_stub_ConvolutionParameteriv,
   (_glapi_proc) _dispatch_stub_CopyConvolutionFilter1D,
   (_glapi_proc) _dispatch_stub_CopyConvolutionFilter2D,
   (_glapi_proc) _dispatch_stub_GetConvolutionFilter,
   (_glapi_proc) _dispatch_stub_GetConvolutionParameterfv,
   (_glapi_proc) _dispatch_stub_GetConvolutionParameteriv,
   (_glapi_proc) _dispatch_stub_GetSeparableFilter,
   (_glapi_proc) _dispatch_stub_SeparableFilter2D,
   (_glapi_proc) _dispatch_stub_GetHistogram,
   (_glapi_proc) _dispatch_stub_GetHistogramParameterfv,
   (_glapi_proc) _dispatch_stub_GetHistogramParameteriv,
   (_glapi_proc) _dispatch_stub_GetMinmax,
   (_glapi_proc) _dispatch_stub_GetMinmaxParameterfv,
   (_glapi_proc) _dispatch_stub_GetMinmaxParameteriv,
   (_glapi_proc) _dispatch_stub_Histogram,
   (_glapi_proc) _dispatch_stub_Minmax,
   (_glapi_proc) _dispatch_stub_ResetHistogram,
   (_glapi_proc) _dispatch_stub_ResetMinmax,
   (_glapi_proc) _dispatch_stub_GetnColorTableARB,
   (_glapi_proc) _dispatch_stub_GetnConvolutionFilterARB,
   (_glapi_proc) _dispatch_stub_GetnHistogramARB,
   (_glapi_proc) _dispatch_stub_GetnMinmaxARB,
   (_glapi_proc) _dispatch_stub_GetnSeparableFilterARB
};
#undef MAPI_TMP_PUBLIC_ENTRIES
#endif /* MAPI_TMP_PUBLIC_ENTRIES */

#ifdef MAPI_TMP_STUB_ASM_GCC
__asm__(
".hidden ""_dispatch_stub_NewList""\n"
STUB_ASM_ENTRY("_dispatch_stub_NewList")"\n"
"\t"STUB_ASM_CODE("0")"\n"

".hidden ""_dispatch_stub_EndList""\n"
STUB_ASM_ENTRY("_dispatch_stub_EndList")"\n"
"\t"STUB_ASM_CODE("1")"\n"

".hidden ""_dispatch_stub_CallList""\n"
STUB_ASM_ENTRY("_dispatch_stub_CallList")"\n"
"\t"STUB_ASM_CODE("2")"\n"

".hidden ""_dispatch_stub_CallLists""\n"
STUB_ASM_ENTRY("_dispatch_stub_CallLists")"\n"
"\t"STUB_ASM_CODE("3")"\n"

".hidden ""_dispatch_stub_DeleteLists""\n"
STUB_ASM_ENTRY("_dispatch_stub_DeleteLists")"\n"
"\t"STUB_ASM_CODE("4")"\n"

".hidden ""_dispatch_stub_GenLists""\n"
STUB_ASM_ENTRY("_dispatch_stub_GenLists")"\n"
"\t"STUB_ASM_CODE("5")"\n"

".hidden ""_dispatch_stub_ListBase""\n"
STUB_ASM_ENTRY("_dispatch_stub_ListBase")"\n"
"\t"STUB_ASM_CODE("6")"\n"

".hidden ""_dispatch_stub_Begin""\n"
STUB_ASM_ENTRY("_dispatch_stub_Begin")"\n"
"\t"STUB_ASM_CODE("7")"\n"

".hidden ""_dispatch_stub_Bitmap""\n"
STUB_ASM_ENTRY("_dispatch_stub_Bitmap")"\n"
"\t"STUB_ASM_CODE("8")"\n"

".hidden ""_dispatch_stub_Color3b""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color3b")"\n"
"\t"STUB_ASM_CODE("9")"\n"

".hidden ""_dispatch_stub_Color3bv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color3bv")"\n"
"\t"STUB_ASM_CODE("10")"\n"

".hidden ""_dispatch_stub_Color3d""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color3d")"\n"
"\t"STUB_ASM_CODE("11")"\n"

".hidden ""_dispatch_stub_Color3dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color3dv")"\n"
"\t"STUB_ASM_CODE("12")"\n"

".hidden ""_dispatch_stub_Color3f""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color3f")"\n"
"\t"STUB_ASM_CODE("13")"\n"

".hidden ""_dispatch_stub_Color3fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color3fv")"\n"
"\t"STUB_ASM_CODE("14")"\n"

".hidden ""_dispatch_stub_Color3i""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color3i")"\n"
"\t"STUB_ASM_CODE("15")"\n"

".hidden ""_dispatch_stub_Color3iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color3iv")"\n"
"\t"STUB_ASM_CODE("16")"\n"

".hidden ""_dispatch_stub_Color3s""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color3s")"\n"
"\t"STUB_ASM_CODE("17")"\n"

".hidden ""_dispatch_stub_Color3sv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color3sv")"\n"
"\t"STUB_ASM_CODE("18")"\n"

".hidden ""_dispatch_stub_Color3ub""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color3ub")"\n"
"\t"STUB_ASM_CODE("19")"\n"

".hidden ""_dispatch_stub_Color3ubv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color3ubv")"\n"
"\t"STUB_ASM_CODE("20")"\n"

".hidden ""_dispatch_stub_Color3ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color3ui")"\n"
"\t"STUB_ASM_CODE("21")"\n"

".hidden ""_dispatch_stub_Color3uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color3uiv")"\n"
"\t"STUB_ASM_CODE("22")"\n"

".hidden ""_dispatch_stub_Color3us""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color3us")"\n"
"\t"STUB_ASM_CODE("23")"\n"

".hidden ""_dispatch_stub_Color3usv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color3usv")"\n"
"\t"STUB_ASM_CODE("24")"\n"

".hidden ""_dispatch_stub_Color4b""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color4b")"\n"
"\t"STUB_ASM_CODE("25")"\n"

".hidden ""_dispatch_stub_Color4bv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color4bv")"\n"
"\t"STUB_ASM_CODE("26")"\n"

".hidden ""_dispatch_stub_Color4d""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color4d")"\n"
"\t"STUB_ASM_CODE("27")"\n"

".hidden ""_dispatch_stub_Color4dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color4dv")"\n"
"\t"STUB_ASM_CODE("28")"\n"

".hidden ""_dispatch_stub_Color4f""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color4f")"\n"
"\t"STUB_ASM_CODE("29")"\n"

".hidden ""_dispatch_stub_Color4fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color4fv")"\n"
"\t"STUB_ASM_CODE("30")"\n"

".hidden ""_dispatch_stub_Color4i""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color4i")"\n"
"\t"STUB_ASM_CODE("31")"\n"

".hidden ""_dispatch_stub_Color4iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color4iv")"\n"
"\t"STUB_ASM_CODE("32")"\n"

".hidden ""_dispatch_stub_Color4s""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color4s")"\n"
"\t"STUB_ASM_CODE("33")"\n"

".hidden ""_dispatch_stub_Color4sv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color4sv")"\n"
"\t"STUB_ASM_CODE("34")"\n"

".hidden ""_dispatch_stub_Color4ub""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color4ub")"\n"
"\t"STUB_ASM_CODE("35")"\n"

".hidden ""_dispatch_stub_Color4ubv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color4ubv")"\n"
"\t"STUB_ASM_CODE("36")"\n"

".hidden ""_dispatch_stub_Color4ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color4ui")"\n"
"\t"STUB_ASM_CODE("37")"\n"

".hidden ""_dispatch_stub_Color4uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color4uiv")"\n"
"\t"STUB_ASM_CODE("38")"\n"

".hidden ""_dispatch_stub_Color4us""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color4us")"\n"
"\t"STUB_ASM_CODE("39")"\n"

".hidden ""_dispatch_stub_Color4usv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color4usv")"\n"
"\t"STUB_ASM_CODE("40")"\n"

".hidden ""_dispatch_stub_EdgeFlag""\n"
STUB_ASM_ENTRY("_dispatch_stub_EdgeFlag")"\n"
"\t"STUB_ASM_CODE("41")"\n"

".hidden ""_dispatch_stub_EdgeFlagv""\n"
STUB_ASM_ENTRY("_dispatch_stub_EdgeFlagv")"\n"
"\t"STUB_ASM_CODE("42")"\n"

".hidden ""_dispatch_stub_End""\n"
STUB_ASM_ENTRY("_dispatch_stub_End")"\n"
"\t"STUB_ASM_CODE("43")"\n"

".hidden ""_dispatch_stub_Indexd""\n"
STUB_ASM_ENTRY("_dispatch_stub_Indexd")"\n"
"\t"STUB_ASM_CODE("44")"\n"

".hidden ""_dispatch_stub_Indexdv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Indexdv")"\n"
"\t"STUB_ASM_CODE("45")"\n"

".hidden ""_dispatch_stub_Indexf""\n"
STUB_ASM_ENTRY("_dispatch_stub_Indexf")"\n"
"\t"STUB_ASM_CODE("46")"\n"

".hidden ""_dispatch_stub_Indexfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Indexfv")"\n"
"\t"STUB_ASM_CODE("47")"\n"

".hidden ""_dispatch_stub_Indexi""\n"
STUB_ASM_ENTRY("_dispatch_stub_Indexi")"\n"
"\t"STUB_ASM_CODE("48")"\n"

".hidden ""_dispatch_stub_Indexiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Indexiv")"\n"
"\t"STUB_ASM_CODE("49")"\n"

".hidden ""_dispatch_stub_Indexs""\n"
STUB_ASM_ENTRY("_dispatch_stub_Indexs")"\n"
"\t"STUB_ASM_CODE("50")"\n"

".hidden ""_dispatch_stub_Indexsv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Indexsv")"\n"
"\t"STUB_ASM_CODE("51")"\n"

".hidden ""_dispatch_stub_Normal3b""\n"
STUB_ASM_ENTRY("_dispatch_stub_Normal3b")"\n"
"\t"STUB_ASM_CODE("52")"\n"

".hidden ""_dispatch_stub_Normal3bv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Normal3bv")"\n"
"\t"STUB_ASM_CODE("53")"\n"

".hidden ""_dispatch_stub_Normal3d""\n"
STUB_ASM_ENTRY("_dispatch_stub_Normal3d")"\n"
"\t"STUB_ASM_CODE("54")"\n"

".hidden ""_dispatch_stub_Normal3dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Normal3dv")"\n"
"\t"STUB_ASM_CODE("55")"\n"

".hidden ""_dispatch_stub_Normal3f""\n"
STUB_ASM_ENTRY("_dispatch_stub_Normal3f")"\n"
"\t"STUB_ASM_CODE("56")"\n"

".hidden ""_dispatch_stub_Normal3fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Normal3fv")"\n"
"\t"STUB_ASM_CODE("57")"\n"

".hidden ""_dispatch_stub_Normal3i""\n"
STUB_ASM_ENTRY("_dispatch_stub_Normal3i")"\n"
"\t"STUB_ASM_CODE("58")"\n"

".hidden ""_dispatch_stub_Normal3iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Normal3iv")"\n"
"\t"STUB_ASM_CODE("59")"\n"

".hidden ""_dispatch_stub_Normal3s""\n"
STUB_ASM_ENTRY("_dispatch_stub_Normal3s")"\n"
"\t"STUB_ASM_CODE("60")"\n"

".hidden ""_dispatch_stub_Normal3sv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Normal3sv")"\n"
"\t"STUB_ASM_CODE("61")"\n"

".hidden ""_dispatch_stub_RasterPos2d""\n"
STUB_ASM_ENTRY("_dispatch_stub_RasterPos2d")"\n"
"\t"STUB_ASM_CODE("62")"\n"

".hidden ""_dispatch_stub_RasterPos2dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_RasterPos2dv")"\n"
"\t"STUB_ASM_CODE("63")"\n"

".hidden ""_dispatch_stub_RasterPos2f""\n"
STUB_ASM_ENTRY("_dispatch_stub_RasterPos2f")"\n"
"\t"STUB_ASM_CODE("64")"\n"

".hidden ""_dispatch_stub_RasterPos2fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_RasterPos2fv")"\n"
"\t"STUB_ASM_CODE("65")"\n"

".hidden ""_dispatch_stub_RasterPos2i""\n"
STUB_ASM_ENTRY("_dispatch_stub_RasterPos2i")"\n"
"\t"STUB_ASM_CODE("66")"\n"

".hidden ""_dispatch_stub_RasterPos2iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_RasterPos2iv")"\n"
"\t"STUB_ASM_CODE("67")"\n"

".hidden ""_dispatch_stub_RasterPos2s""\n"
STUB_ASM_ENTRY("_dispatch_stub_RasterPos2s")"\n"
"\t"STUB_ASM_CODE("68")"\n"

".hidden ""_dispatch_stub_RasterPos2sv""\n"
STUB_ASM_ENTRY("_dispatch_stub_RasterPos2sv")"\n"
"\t"STUB_ASM_CODE("69")"\n"

".hidden ""_dispatch_stub_RasterPos3d""\n"
STUB_ASM_ENTRY("_dispatch_stub_RasterPos3d")"\n"
"\t"STUB_ASM_CODE("70")"\n"

".hidden ""_dispatch_stub_RasterPos3dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_RasterPos3dv")"\n"
"\t"STUB_ASM_CODE("71")"\n"

".hidden ""_dispatch_stub_RasterPos3f""\n"
STUB_ASM_ENTRY("_dispatch_stub_RasterPos3f")"\n"
"\t"STUB_ASM_CODE("72")"\n"

".hidden ""_dispatch_stub_RasterPos3fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_RasterPos3fv")"\n"
"\t"STUB_ASM_CODE("73")"\n"

".hidden ""_dispatch_stub_RasterPos3i""\n"
STUB_ASM_ENTRY("_dispatch_stub_RasterPos3i")"\n"
"\t"STUB_ASM_CODE("74")"\n"

".hidden ""_dispatch_stub_RasterPos3iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_RasterPos3iv")"\n"
"\t"STUB_ASM_CODE("75")"\n"

".hidden ""_dispatch_stub_RasterPos3s""\n"
STUB_ASM_ENTRY("_dispatch_stub_RasterPos3s")"\n"
"\t"STUB_ASM_CODE("76")"\n"

".hidden ""_dispatch_stub_RasterPos3sv""\n"
STUB_ASM_ENTRY("_dispatch_stub_RasterPos3sv")"\n"
"\t"STUB_ASM_CODE("77")"\n"

".hidden ""_dispatch_stub_RasterPos4d""\n"
STUB_ASM_ENTRY("_dispatch_stub_RasterPos4d")"\n"
"\t"STUB_ASM_CODE("78")"\n"

".hidden ""_dispatch_stub_RasterPos4dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_RasterPos4dv")"\n"
"\t"STUB_ASM_CODE("79")"\n"

".hidden ""_dispatch_stub_RasterPos4f""\n"
STUB_ASM_ENTRY("_dispatch_stub_RasterPos4f")"\n"
"\t"STUB_ASM_CODE("80")"\n"

".hidden ""_dispatch_stub_RasterPos4fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_RasterPos4fv")"\n"
"\t"STUB_ASM_CODE("81")"\n"

".hidden ""_dispatch_stub_RasterPos4i""\n"
STUB_ASM_ENTRY("_dispatch_stub_RasterPos4i")"\n"
"\t"STUB_ASM_CODE("82")"\n"

".hidden ""_dispatch_stub_RasterPos4iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_RasterPos4iv")"\n"
"\t"STUB_ASM_CODE("83")"\n"

".hidden ""_dispatch_stub_RasterPos4s""\n"
STUB_ASM_ENTRY("_dispatch_stub_RasterPos4s")"\n"
"\t"STUB_ASM_CODE("84")"\n"

".hidden ""_dispatch_stub_RasterPos4sv""\n"
STUB_ASM_ENTRY("_dispatch_stub_RasterPos4sv")"\n"
"\t"STUB_ASM_CODE("85")"\n"

".hidden ""_dispatch_stub_Rectd""\n"
STUB_ASM_ENTRY("_dispatch_stub_Rectd")"\n"
"\t"STUB_ASM_CODE("86")"\n"

".hidden ""_dispatch_stub_Rectdv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Rectdv")"\n"
"\t"STUB_ASM_CODE("87")"\n"

".hidden ""_dispatch_stub_Rectf""\n"
STUB_ASM_ENTRY("_dispatch_stub_Rectf")"\n"
"\t"STUB_ASM_CODE("88")"\n"

".hidden ""_dispatch_stub_Rectfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Rectfv")"\n"
"\t"STUB_ASM_CODE("89")"\n"

".hidden ""_dispatch_stub_Recti""\n"
STUB_ASM_ENTRY("_dispatch_stub_Recti")"\n"
"\t"STUB_ASM_CODE("90")"\n"

".hidden ""_dispatch_stub_Rectiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Rectiv")"\n"
"\t"STUB_ASM_CODE("91")"\n"

".hidden ""_dispatch_stub_Rects""\n"
STUB_ASM_ENTRY("_dispatch_stub_Rects")"\n"
"\t"STUB_ASM_CODE("92")"\n"

".hidden ""_dispatch_stub_Rectsv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Rectsv")"\n"
"\t"STUB_ASM_CODE("93")"\n"

".hidden ""_dispatch_stub_TexCoord1d""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord1d")"\n"
"\t"STUB_ASM_CODE("94")"\n"

".hidden ""_dispatch_stub_TexCoord1dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord1dv")"\n"
"\t"STUB_ASM_CODE("95")"\n"

".hidden ""_dispatch_stub_TexCoord1f""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord1f")"\n"
"\t"STUB_ASM_CODE("96")"\n"

".hidden ""_dispatch_stub_TexCoord1fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord1fv")"\n"
"\t"STUB_ASM_CODE("97")"\n"

".hidden ""_dispatch_stub_TexCoord1i""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord1i")"\n"
"\t"STUB_ASM_CODE("98")"\n"

".hidden ""_dispatch_stub_TexCoord1iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord1iv")"\n"
"\t"STUB_ASM_CODE("99")"\n"

".hidden ""_dispatch_stub_TexCoord1s""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord1s")"\n"
"\t"STUB_ASM_CODE("100")"\n"

".hidden ""_dispatch_stub_TexCoord1sv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord1sv")"\n"
"\t"STUB_ASM_CODE("101")"\n"

".hidden ""_dispatch_stub_TexCoord2d""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord2d")"\n"
"\t"STUB_ASM_CODE("102")"\n"

".hidden ""_dispatch_stub_TexCoord2dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord2dv")"\n"
"\t"STUB_ASM_CODE("103")"\n"

".hidden ""_dispatch_stub_TexCoord2f""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord2f")"\n"
"\t"STUB_ASM_CODE("104")"\n"

".hidden ""_dispatch_stub_TexCoord2fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord2fv")"\n"
"\t"STUB_ASM_CODE("105")"\n"

".hidden ""_dispatch_stub_TexCoord2i""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord2i")"\n"
"\t"STUB_ASM_CODE("106")"\n"

".hidden ""_dispatch_stub_TexCoord2iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord2iv")"\n"
"\t"STUB_ASM_CODE("107")"\n"

".hidden ""_dispatch_stub_TexCoord2s""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord2s")"\n"
"\t"STUB_ASM_CODE("108")"\n"

".hidden ""_dispatch_stub_TexCoord2sv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord2sv")"\n"
"\t"STUB_ASM_CODE("109")"\n"

".hidden ""_dispatch_stub_TexCoord3d""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord3d")"\n"
"\t"STUB_ASM_CODE("110")"\n"

".hidden ""_dispatch_stub_TexCoord3dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord3dv")"\n"
"\t"STUB_ASM_CODE("111")"\n"

".hidden ""_dispatch_stub_TexCoord3f""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord3f")"\n"
"\t"STUB_ASM_CODE("112")"\n"

".hidden ""_dispatch_stub_TexCoord3fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord3fv")"\n"
"\t"STUB_ASM_CODE("113")"\n"

".hidden ""_dispatch_stub_TexCoord3i""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord3i")"\n"
"\t"STUB_ASM_CODE("114")"\n"

".hidden ""_dispatch_stub_TexCoord3iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord3iv")"\n"
"\t"STUB_ASM_CODE("115")"\n"

".hidden ""_dispatch_stub_TexCoord3s""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord3s")"\n"
"\t"STUB_ASM_CODE("116")"\n"

".hidden ""_dispatch_stub_TexCoord3sv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord3sv")"\n"
"\t"STUB_ASM_CODE("117")"\n"

".hidden ""_dispatch_stub_TexCoord4d""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord4d")"\n"
"\t"STUB_ASM_CODE("118")"\n"

".hidden ""_dispatch_stub_TexCoord4dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord4dv")"\n"
"\t"STUB_ASM_CODE("119")"\n"

".hidden ""_dispatch_stub_TexCoord4f""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord4f")"\n"
"\t"STUB_ASM_CODE("120")"\n"

".hidden ""_dispatch_stub_TexCoord4fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord4fv")"\n"
"\t"STUB_ASM_CODE("121")"\n"

".hidden ""_dispatch_stub_TexCoord4i""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord4i")"\n"
"\t"STUB_ASM_CODE("122")"\n"

".hidden ""_dispatch_stub_TexCoord4iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord4iv")"\n"
"\t"STUB_ASM_CODE("123")"\n"

".hidden ""_dispatch_stub_TexCoord4s""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord4s")"\n"
"\t"STUB_ASM_CODE("124")"\n"

".hidden ""_dispatch_stub_TexCoord4sv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord4sv")"\n"
"\t"STUB_ASM_CODE("125")"\n"

".hidden ""_dispatch_stub_Vertex2d""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex2d")"\n"
"\t"STUB_ASM_CODE("126")"\n"

".hidden ""_dispatch_stub_Vertex2dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex2dv")"\n"
"\t"STUB_ASM_CODE("127")"\n"

".hidden ""_dispatch_stub_Vertex2f""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex2f")"\n"
"\t"STUB_ASM_CODE("128")"\n"

".hidden ""_dispatch_stub_Vertex2fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex2fv")"\n"
"\t"STUB_ASM_CODE("129")"\n"

".hidden ""_dispatch_stub_Vertex2i""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex2i")"\n"
"\t"STUB_ASM_CODE("130")"\n"

".hidden ""_dispatch_stub_Vertex2iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex2iv")"\n"
"\t"STUB_ASM_CODE("131")"\n"

".hidden ""_dispatch_stub_Vertex2s""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex2s")"\n"
"\t"STUB_ASM_CODE("132")"\n"

".hidden ""_dispatch_stub_Vertex2sv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex2sv")"\n"
"\t"STUB_ASM_CODE("133")"\n"

".hidden ""_dispatch_stub_Vertex3d""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex3d")"\n"
"\t"STUB_ASM_CODE("134")"\n"

".hidden ""_dispatch_stub_Vertex3dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex3dv")"\n"
"\t"STUB_ASM_CODE("135")"\n"

".hidden ""_dispatch_stub_Vertex3f""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex3f")"\n"
"\t"STUB_ASM_CODE("136")"\n"

".hidden ""_dispatch_stub_Vertex3fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex3fv")"\n"
"\t"STUB_ASM_CODE("137")"\n"

".hidden ""_dispatch_stub_Vertex3i""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex3i")"\n"
"\t"STUB_ASM_CODE("138")"\n"

".hidden ""_dispatch_stub_Vertex3iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex3iv")"\n"
"\t"STUB_ASM_CODE("139")"\n"

".hidden ""_dispatch_stub_Vertex3s""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex3s")"\n"
"\t"STUB_ASM_CODE("140")"\n"

".hidden ""_dispatch_stub_Vertex3sv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex3sv")"\n"
"\t"STUB_ASM_CODE("141")"\n"

".hidden ""_dispatch_stub_Vertex4d""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex4d")"\n"
"\t"STUB_ASM_CODE("142")"\n"

".hidden ""_dispatch_stub_Vertex4dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex4dv")"\n"
"\t"STUB_ASM_CODE("143")"\n"

".hidden ""_dispatch_stub_Vertex4f""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex4f")"\n"
"\t"STUB_ASM_CODE("144")"\n"

".hidden ""_dispatch_stub_Vertex4fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex4fv")"\n"
"\t"STUB_ASM_CODE("145")"\n"

".hidden ""_dispatch_stub_Vertex4i""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex4i")"\n"
"\t"STUB_ASM_CODE("146")"\n"

".hidden ""_dispatch_stub_Vertex4iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex4iv")"\n"
"\t"STUB_ASM_CODE("147")"\n"

".hidden ""_dispatch_stub_Vertex4s""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex4s")"\n"
"\t"STUB_ASM_CODE("148")"\n"

".hidden ""_dispatch_stub_Vertex4sv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex4sv")"\n"
"\t"STUB_ASM_CODE("149")"\n"

".hidden ""_dispatch_stub_ClipPlane""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClipPlane")"\n"
"\t"STUB_ASM_CODE("150")"\n"

".hidden ""_dispatch_stub_ColorMaterial""\n"
STUB_ASM_ENTRY("_dispatch_stub_ColorMaterial")"\n"
"\t"STUB_ASM_CODE("151")"\n"

".hidden ""_dispatch_stub_CullFace""\n"
STUB_ASM_ENTRY("_dispatch_stub_CullFace")"\n"
"\t"STUB_ASM_CODE("152")"\n"

".hidden ""_dispatch_stub_Fogf""\n"
STUB_ASM_ENTRY("_dispatch_stub_Fogf")"\n"
"\t"STUB_ASM_CODE("153")"\n"

".hidden ""_dispatch_stub_Fogfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Fogfv")"\n"
"\t"STUB_ASM_CODE("154")"\n"

".hidden ""_dispatch_stub_Fogi""\n"
STUB_ASM_ENTRY("_dispatch_stub_Fogi")"\n"
"\t"STUB_ASM_CODE("155")"\n"

".hidden ""_dispatch_stub_Fogiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Fogiv")"\n"
"\t"STUB_ASM_CODE("156")"\n"

".hidden ""_dispatch_stub_FrontFace""\n"
STUB_ASM_ENTRY("_dispatch_stub_FrontFace")"\n"
"\t"STUB_ASM_CODE("157")"\n"

".hidden ""_dispatch_stub_Hint""\n"
STUB_ASM_ENTRY("_dispatch_stub_Hint")"\n"
"\t"STUB_ASM_CODE("158")"\n"

".hidden ""_dispatch_stub_Lightf""\n"
STUB_ASM_ENTRY("_dispatch_stub_Lightf")"\n"
"\t"STUB_ASM_CODE("159")"\n"

".hidden ""_dispatch_stub_Lightfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Lightfv")"\n"
"\t"STUB_ASM_CODE("160")"\n"

".hidden ""_dispatch_stub_Lighti""\n"
STUB_ASM_ENTRY("_dispatch_stub_Lighti")"\n"
"\t"STUB_ASM_CODE("161")"\n"

".hidden ""_dispatch_stub_Lightiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Lightiv")"\n"
"\t"STUB_ASM_CODE("162")"\n"

".hidden ""_dispatch_stub_LightModelf""\n"
STUB_ASM_ENTRY("_dispatch_stub_LightModelf")"\n"
"\t"STUB_ASM_CODE("163")"\n"

".hidden ""_dispatch_stub_LightModelfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_LightModelfv")"\n"
"\t"STUB_ASM_CODE("164")"\n"

".hidden ""_dispatch_stub_LightModeli""\n"
STUB_ASM_ENTRY("_dispatch_stub_LightModeli")"\n"
"\t"STUB_ASM_CODE("165")"\n"

".hidden ""_dispatch_stub_LightModeliv""\n"
STUB_ASM_ENTRY("_dispatch_stub_LightModeliv")"\n"
"\t"STUB_ASM_CODE("166")"\n"

".hidden ""_dispatch_stub_LineStipple""\n"
STUB_ASM_ENTRY("_dispatch_stub_LineStipple")"\n"
"\t"STUB_ASM_CODE("167")"\n"

".hidden ""_dispatch_stub_LineWidth""\n"
STUB_ASM_ENTRY("_dispatch_stub_LineWidth")"\n"
"\t"STUB_ASM_CODE("168")"\n"

".hidden ""_dispatch_stub_Materialf""\n"
STUB_ASM_ENTRY("_dispatch_stub_Materialf")"\n"
"\t"STUB_ASM_CODE("169")"\n"

".hidden ""_dispatch_stub_Materialfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Materialfv")"\n"
"\t"STUB_ASM_CODE("170")"\n"

".hidden ""_dispatch_stub_Materiali""\n"
STUB_ASM_ENTRY("_dispatch_stub_Materiali")"\n"
"\t"STUB_ASM_CODE("171")"\n"

".hidden ""_dispatch_stub_Materialiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Materialiv")"\n"
"\t"STUB_ASM_CODE("172")"\n"

".hidden ""_dispatch_stub_PointSize""\n"
STUB_ASM_ENTRY("_dispatch_stub_PointSize")"\n"
"\t"STUB_ASM_CODE("173")"\n"

".hidden ""_dispatch_stub_PolygonMode""\n"
STUB_ASM_ENTRY("_dispatch_stub_PolygonMode")"\n"
"\t"STUB_ASM_CODE("174")"\n"

".hidden ""_dispatch_stub_PolygonStipple""\n"
STUB_ASM_ENTRY("_dispatch_stub_PolygonStipple")"\n"
"\t"STUB_ASM_CODE("175")"\n"

".hidden ""_dispatch_stub_Scissor""\n"
STUB_ASM_ENTRY("_dispatch_stub_Scissor")"\n"
"\t"STUB_ASM_CODE("176")"\n"

".hidden ""_dispatch_stub_ShadeModel""\n"
STUB_ASM_ENTRY("_dispatch_stub_ShadeModel")"\n"
"\t"STUB_ASM_CODE("177")"\n"

".hidden ""_dispatch_stub_TexParameterf""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexParameterf")"\n"
"\t"STUB_ASM_CODE("178")"\n"

".hidden ""_dispatch_stub_TexParameterfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexParameterfv")"\n"
"\t"STUB_ASM_CODE("179")"\n"

".hidden ""_dispatch_stub_TexParameteri""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexParameteri")"\n"
"\t"STUB_ASM_CODE("180")"\n"

".hidden ""_dispatch_stub_TexParameteriv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexParameteriv")"\n"
"\t"STUB_ASM_CODE("181")"\n"

".hidden ""_dispatch_stub_TexImage1D""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexImage1D")"\n"
"\t"STUB_ASM_CODE("182")"\n"

".hidden ""_dispatch_stub_TexImage2D""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexImage2D")"\n"
"\t"STUB_ASM_CODE("183")"\n"

".hidden ""_dispatch_stub_TexEnvf""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexEnvf")"\n"
"\t"STUB_ASM_CODE("184")"\n"

".hidden ""_dispatch_stub_TexEnvfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexEnvfv")"\n"
"\t"STUB_ASM_CODE("185")"\n"

".hidden ""_dispatch_stub_TexEnvi""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexEnvi")"\n"
"\t"STUB_ASM_CODE("186")"\n"

".hidden ""_dispatch_stub_TexEnviv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexEnviv")"\n"
"\t"STUB_ASM_CODE("187")"\n"

".hidden ""_dispatch_stub_TexGend""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexGend")"\n"
"\t"STUB_ASM_CODE("188")"\n"

".hidden ""_dispatch_stub_TexGendv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexGendv")"\n"
"\t"STUB_ASM_CODE("189")"\n"

".hidden ""_dispatch_stub_TexGenf""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexGenf")"\n"
"\t"STUB_ASM_CODE("190")"\n"

".hidden ""_dispatch_stub_TexGenfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexGenfv")"\n"
"\t"STUB_ASM_CODE("191")"\n"

".hidden ""_dispatch_stub_TexGeni""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexGeni")"\n"
"\t"STUB_ASM_CODE("192")"\n"

".hidden ""_dispatch_stub_TexGeniv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexGeniv")"\n"
"\t"STUB_ASM_CODE("193")"\n"

".hidden ""_dispatch_stub_FeedbackBuffer""\n"
STUB_ASM_ENTRY("_dispatch_stub_FeedbackBuffer")"\n"
"\t"STUB_ASM_CODE("194")"\n"

".hidden ""_dispatch_stub_SelectBuffer""\n"
STUB_ASM_ENTRY("_dispatch_stub_SelectBuffer")"\n"
"\t"STUB_ASM_CODE("195")"\n"

".hidden ""_dispatch_stub_RenderMode""\n"
STUB_ASM_ENTRY("_dispatch_stub_RenderMode")"\n"
"\t"STUB_ASM_CODE("196")"\n"

".hidden ""_dispatch_stub_InitNames""\n"
STUB_ASM_ENTRY("_dispatch_stub_InitNames")"\n"
"\t"STUB_ASM_CODE("197")"\n"

".hidden ""_dispatch_stub_LoadName""\n"
STUB_ASM_ENTRY("_dispatch_stub_LoadName")"\n"
"\t"STUB_ASM_CODE("198")"\n"

".hidden ""_dispatch_stub_PassThrough""\n"
STUB_ASM_ENTRY("_dispatch_stub_PassThrough")"\n"
"\t"STUB_ASM_CODE("199")"\n"

".hidden ""_dispatch_stub_PopName""\n"
STUB_ASM_ENTRY("_dispatch_stub_PopName")"\n"
"\t"STUB_ASM_CODE("200")"\n"

".hidden ""_dispatch_stub_PushName""\n"
STUB_ASM_ENTRY("_dispatch_stub_PushName")"\n"
"\t"STUB_ASM_CODE("201")"\n"

".hidden ""_dispatch_stub_DrawBuffer""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawBuffer")"\n"
"\t"STUB_ASM_CODE("202")"\n"

".hidden ""_dispatch_stub_Clear""\n"
STUB_ASM_ENTRY("_dispatch_stub_Clear")"\n"
"\t"STUB_ASM_CODE("203")"\n"

".hidden ""_dispatch_stub_ClearAccum""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClearAccum")"\n"
"\t"STUB_ASM_CODE("204")"\n"

".hidden ""_dispatch_stub_ClearIndex""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClearIndex")"\n"
"\t"STUB_ASM_CODE("205")"\n"

".hidden ""_dispatch_stub_ClearColor""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClearColor")"\n"
"\t"STUB_ASM_CODE("206")"\n"

".hidden ""_dispatch_stub_ClearStencil""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClearStencil")"\n"
"\t"STUB_ASM_CODE("207")"\n"

".hidden ""_dispatch_stub_ClearDepth""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClearDepth")"\n"
"\t"STUB_ASM_CODE("208")"\n"

".hidden ""_dispatch_stub_StencilMask""\n"
STUB_ASM_ENTRY("_dispatch_stub_StencilMask")"\n"
"\t"STUB_ASM_CODE("209")"\n"

".hidden ""_dispatch_stub_ColorMask""\n"
STUB_ASM_ENTRY("_dispatch_stub_ColorMask")"\n"
"\t"STUB_ASM_CODE("210")"\n"

".hidden ""_dispatch_stub_DepthMask""\n"
STUB_ASM_ENTRY("_dispatch_stub_DepthMask")"\n"
"\t"STUB_ASM_CODE("211")"\n"

".hidden ""_dispatch_stub_IndexMask""\n"
STUB_ASM_ENTRY("_dispatch_stub_IndexMask")"\n"
"\t"STUB_ASM_CODE("212")"\n"

".hidden ""_dispatch_stub_Accum""\n"
STUB_ASM_ENTRY("_dispatch_stub_Accum")"\n"
"\t"STUB_ASM_CODE("213")"\n"

".hidden ""_dispatch_stub_Disable""\n"
STUB_ASM_ENTRY("_dispatch_stub_Disable")"\n"
"\t"STUB_ASM_CODE("214")"\n"

".hidden ""_dispatch_stub_Enable""\n"
STUB_ASM_ENTRY("_dispatch_stub_Enable")"\n"
"\t"STUB_ASM_CODE("215")"\n"

".hidden ""_dispatch_stub_Finish""\n"
STUB_ASM_ENTRY("_dispatch_stub_Finish")"\n"
"\t"STUB_ASM_CODE("216")"\n"

".hidden ""_dispatch_stub_Flush""\n"
STUB_ASM_ENTRY("_dispatch_stub_Flush")"\n"
"\t"STUB_ASM_CODE("217")"\n"

".hidden ""_dispatch_stub_PopAttrib""\n"
STUB_ASM_ENTRY("_dispatch_stub_PopAttrib")"\n"
"\t"STUB_ASM_CODE("218")"\n"

".hidden ""_dispatch_stub_PushAttrib""\n"
STUB_ASM_ENTRY("_dispatch_stub_PushAttrib")"\n"
"\t"STUB_ASM_CODE("219")"\n"

".hidden ""_dispatch_stub_Map1d""\n"
STUB_ASM_ENTRY("_dispatch_stub_Map1d")"\n"
"\t"STUB_ASM_CODE("220")"\n"

".hidden ""_dispatch_stub_Map1f""\n"
STUB_ASM_ENTRY("_dispatch_stub_Map1f")"\n"
"\t"STUB_ASM_CODE("221")"\n"

".hidden ""_dispatch_stub_Map2d""\n"
STUB_ASM_ENTRY("_dispatch_stub_Map2d")"\n"
"\t"STUB_ASM_CODE("222")"\n"

".hidden ""_dispatch_stub_Map2f""\n"
STUB_ASM_ENTRY("_dispatch_stub_Map2f")"\n"
"\t"STUB_ASM_CODE("223")"\n"

".hidden ""_dispatch_stub_MapGrid1d""\n"
STUB_ASM_ENTRY("_dispatch_stub_MapGrid1d")"\n"
"\t"STUB_ASM_CODE("224")"\n"

".hidden ""_dispatch_stub_MapGrid1f""\n"
STUB_ASM_ENTRY("_dispatch_stub_MapGrid1f")"\n"
"\t"STUB_ASM_CODE("225")"\n"

".hidden ""_dispatch_stub_MapGrid2d""\n"
STUB_ASM_ENTRY("_dispatch_stub_MapGrid2d")"\n"
"\t"STUB_ASM_CODE("226")"\n"

".hidden ""_dispatch_stub_MapGrid2f""\n"
STUB_ASM_ENTRY("_dispatch_stub_MapGrid2f")"\n"
"\t"STUB_ASM_CODE("227")"\n"

".hidden ""_dispatch_stub_EvalCoord1d""\n"
STUB_ASM_ENTRY("_dispatch_stub_EvalCoord1d")"\n"
"\t"STUB_ASM_CODE("228")"\n"

".hidden ""_dispatch_stub_EvalCoord1dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_EvalCoord1dv")"\n"
"\t"STUB_ASM_CODE("229")"\n"

".hidden ""_dispatch_stub_EvalCoord1f""\n"
STUB_ASM_ENTRY("_dispatch_stub_EvalCoord1f")"\n"
"\t"STUB_ASM_CODE("230")"\n"

".hidden ""_dispatch_stub_EvalCoord1fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_EvalCoord1fv")"\n"
"\t"STUB_ASM_CODE("231")"\n"

".hidden ""_dispatch_stub_EvalCoord2d""\n"
STUB_ASM_ENTRY("_dispatch_stub_EvalCoord2d")"\n"
"\t"STUB_ASM_CODE("232")"\n"

".hidden ""_dispatch_stub_EvalCoord2dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_EvalCoord2dv")"\n"
"\t"STUB_ASM_CODE("233")"\n"

".hidden ""_dispatch_stub_EvalCoord2f""\n"
STUB_ASM_ENTRY("_dispatch_stub_EvalCoord2f")"\n"
"\t"STUB_ASM_CODE("234")"\n"

".hidden ""_dispatch_stub_EvalCoord2fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_EvalCoord2fv")"\n"
"\t"STUB_ASM_CODE("235")"\n"

".hidden ""_dispatch_stub_EvalMesh1""\n"
STUB_ASM_ENTRY("_dispatch_stub_EvalMesh1")"\n"
"\t"STUB_ASM_CODE("236")"\n"

".hidden ""_dispatch_stub_EvalPoint1""\n"
STUB_ASM_ENTRY("_dispatch_stub_EvalPoint1")"\n"
"\t"STUB_ASM_CODE("237")"\n"

".hidden ""_dispatch_stub_EvalMesh2""\n"
STUB_ASM_ENTRY("_dispatch_stub_EvalMesh2")"\n"
"\t"STUB_ASM_CODE("238")"\n"

".hidden ""_dispatch_stub_EvalPoint2""\n"
STUB_ASM_ENTRY("_dispatch_stub_EvalPoint2")"\n"
"\t"STUB_ASM_CODE("239")"\n"

".hidden ""_dispatch_stub_AlphaFunc""\n"
STUB_ASM_ENTRY("_dispatch_stub_AlphaFunc")"\n"
"\t"STUB_ASM_CODE("240")"\n"

".hidden ""_dispatch_stub_BlendFunc""\n"
STUB_ASM_ENTRY("_dispatch_stub_BlendFunc")"\n"
"\t"STUB_ASM_CODE("241")"\n"

".hidden ""_dispatch_stub_LogicOp""\n"
STUB_ASM_ENTRY("_dispatch_stub_LogicOp")"\n"
"\t"STUB_ASM_CODE("242")"\n"

".hidden ""_dispatch_stub_StencilFunc""\n"
STUB_ASM_ENTRY("_dispatch_stub_StencilFunc")"\n"
"\t"STUB_ASM_CODE("243")"\n"

".hidden ""_dispatch_stub_StencilOp""\n"
STUB_ASM_ENTRY("_dispatch_stub_StencilOp")"\n"
"\t"STUB_ASM_CODE("244")"\n"

".hidden ""_dispatch_stub_DepthFunc""\n"
STUB_ASM_ENTRY("_dispatch_stub_DepthFunc")"\n"
"\t"STUB_ASM_CODE("245")"\n"

".hidden ""_dispatch_stub_PixelZoom""\n"
STUB_ASM_ENTRY("_dispatch_stub_PixelZoom")"\n"
"\t"STUB_ASM_CODE("246")"\n"

".hidden ""_dispatch_stub_PixelTransferf""\n"
STUB_ASM_ENTRY("_dispatch_stub_PixelTransferf")"\n"
"\t"STUB_ASM_CODE("247")"\n"

".hidden ""_dispatch_stub_PixelTransferi""\n"
STUB_ASM_ENTRY("_dispatch_stub_PixelTransferi")"\n"
"\t"STUB_ASM_CODE("248")"\n"

".hidden ""_dispatch_stub_PixelStoref""\n"
STUB_ASM_ENTRY("_dispatch_stub_PixelStoref")"\n"
"\t"STUB_ASM_CODE("249")"\n"

".hidden ""_dispatch_stub_PixelStorei""\n"
STUB_ASM_ENTRY("_dispatch_stub_PixelStorei")"\n"
"\t"STUB_ASM_CODE("250")"\n"

".hidden ""_dispatch_stub_PixelMapfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_PixelMapfv")"\n"
"\t"STUB_ASM_CODE("251")"\n"

".hidden ""_dispatch_stub_PixelMapuiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_PixelMapuiv")"\n"
"\t"STUB_ASM_CODE("252")"\n"

".hidden ""_dispatch_stub_PixelMapusv""\n"
STUB_ASM_ENTRY("_dispatch_stub_PixelMapusv")"\n"
"\t"STUB_ASM_CODE("253")"\n"

".hidden ""_dispatch_stub_ReadBuffer""\n"
STUB_ASM_ENTRY("_dispatch_stub_ReadBuffer")"\n"
"\t"STUB_ASM_CODE("254")"\n"

".hidden ""_dispatch_stub_CopyPixels""\n"
STUB_ASM_ENTRY("_dispatch_stub_CopyPixels")"\n"
"\t"STUB_ASM_CODE("255")"\n"

".hidden ""_dispatch_stub_ReadPixels""\n"
STUB_ASM_ENTRY("_dispatch_stub_ReadPixels")"\n"
"\t"STUB_ASM_CODE("256")"\n"

".hidden ""_dispatch_stub_DrawPixels""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawPixels")"\n"
"\t"STUB_ASM_CODE("257")"\n"

".hidden ""_dispatch_stub_GetBooleanv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetBooleanv")"\n"
"\t"STUB_ASM_CODE("258")"\n"

".hidden ""_dispatch_stub_GetClipPlane""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetClipPlane")"\n"
"\t"STUB_ASM_CODE("259")"\n"

".hidden ""_dispatch_stub_GetDoublev""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetDoublev")"\n"
"\t"STUB_ASM_CODE("260")"\n"

".hidden ""_dispatch_stub_GetError""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetError")"\n"
"\t"STUB_ASM_CODE("261")"\n"

".hidden ""_dispatch_stub_GetFloatv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetFloatv")"\n"
"\t"STUB_ASM_CODE("262")"\n"

".hidden ""_dispatch_stub_GetIntegerv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetIntegerv")"\n"
"\t"STUB_ASM_CODE("263")"\n"

".hidden ""_dispatch_stub_GetLightfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetLightfv")"\n"
"\t"STUB_ASM_CODE("264")"\n"

".hidden ""_dispatch_stub_GetLightiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetLightiv")"\n"
"\t"STUB_ASM_CODE("265")"\n"

".hidden ""_dispatch_stub_GetMapdv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetMapdv")"\n"
"\t"STUB_ASM_CODE("266")"\n"

".hidden ""_dispatch_stub_GetMapfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetMapfv")"\n"
"\t"STUB_ASM_CODE("267")"\n"

".hidden ""_dispatch_stub_GetMapiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetMapiv")"\n"
"\t"STUB_ASM_CODE("268")"\n"

".hidden ""_dispatch_stub_GetMaterialfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetMaterialfv")"\n"
"\t"STUB_ASM_CODE("269")"\n"

".hidden ""_dispatch_stub_GetMaterialiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetMaterialiv")"\n"
"\t"STUB_ASM_CODE("270")"\n"

".hidden ""_dispatch_stub_GetPixelMapfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetPixelMapfv")"\n"
"\t"STUB_ASM_CODE("271")"\n"

".hidden ""_dispatch_stub_GetPixelMapuiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetPixelMapuiv")"\n"
"\t"STUB_ASM_CODE("272")"\n"

".hidden ""_dispatch_stub_GetPixelMapusv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetPixelMapusv")"\n"
"\t"STUB_ASM_CODE("273")"\n"

".hidden ""_dispatch_stub_GetPolygonStipple""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetPolygonStipple")"\n"
"\t"STUB_ASM_CODE("274")"\n"

".hidden ""_dispatch_stub_GetString""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetString")"\n"
"\t"STUB_ASM_CODE("275")"\n"

".hidden ""_dispatch_stub_GetTexEnvfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTexEnvfv")"\n"
"\t"STUB_ASM_CODE("276")"\n"

".hidden ""_dispatch_stub_GetTexEnviv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTexEnviv")"\n"
"\t"STUB_ASM_CODE("277")"\n"

".hidden ""_dispatch_stub_GetTexGendv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTexGendv")"\n"
"\t"STUB_ASM_CODE("278")"\n"

".hidden ""_dispatch_stub_GetTexGenfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTexGenfv")"\n"
"\t"STUB_ASM_CODE("279")"\n"

".hidden ""_dispatch_stub_GetTexGeniv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTexGeniv")"\n"
"\t"STUB_ASM_CODE("280")"\n"

".hidden ""_dispatch_stub_GetTexImage""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTexImage")"\n"
"\t"STUB_ASM_CODE("281")"\n"

".hidden ""_dispatch_stub_GetTexParameterfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTexParameterfv")"\n"
"\t"STUB_ASM_CODE("282")"\n"

".hidden ""_dispatch_stub_GetTexParameteriv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTexParameteriv")"\n"
"\t"STUB_ASM_CODE("283")"\n"

".hidden ""_dispatch_stub_GetTexLevelParameterfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTexLevelParameterfv")"\n"
"\t"STUB_ASM_CODE("284")"\n"

".hidden ""_dispatch_stub_GetTexLevelParameteriv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTexLevelParameteriv")"\n"
"\t"STUB_ASM_CODE("285")"\n"

".hidden ""_dispatch_stub_IsEnabled""\n"
STUB_ASM_ENTRY("_dispatch_stub_IsEnabled")"\n"
"\t"STUB_ASM_CODE("286")"\n"

".hidden ""_dispatch_stub_IsList""\n"
STUB_ASM_ENTRY("_dispatch_stub_IsList")"\n"
"\t"STUB_ASM_CODE("287")"\n"

".hidden ""_dispatch_stub_DepthRange""\n"
STUB_ASM_ENTRY("_dispatch_stub_DepthRange")"\n"
"\t"STUB_ASM_CODE("288")"\n"

".hidden ""_dispatch_stub_Frustum""\n"
STUB_ASM_ENTRY("_dispatch_stub_Frustum")"\n"
"\t"STUB_ASM_CODE("289")"\n"

".hidden ""_dispatch_stub_LoadIdentity""\n"
STUB_ASM_ENTRY("_dispatch_stub_LoadIdentity")"\n"
"\t"STUB_ASM_CODE("290")"\n"

".hidden ""_dispatch_stub_LoadMatrixf""\n"
STUB_ASM_ENTRY("_dispatch_stub_LoadMatrixf")"\n"
"\t"STUB_ASM_CODE("291")"\n"

".hidden ""_dispatch_stub_LoadMatrixd""\n"
STUB_ASM_ENTRY("_dispatch_stub_LoadMatrixd")"\n"
"\t"STUB_ASM_CODE("292")"\n"

".hidden ""_dispatch_stub_MatrixMode""\n"
STUB_ASM_ENTRY("_dispatch_stub_MatrixMode")"\n"
"\t"STUB_ASM_CODE("293")"\n"

".hidden ""_dispatch_stub_MultMatrixf""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultMatrixf")"\n"
"\t"STUB_ASM_CODE("294")"\n"

".hidden ""_dispatch_stub_MultMatrixd""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultMatrixd")"\n"
"\t"STUB_ASM_CODE("295")"\n"

".hidden ""_dispatch_stub_Ortho""\n"
STUB_ASM_ENTRY("_dispatch_stub_Ortho")"\n"
"\t"STUB_ASM_CODE("296")"\n"

".hidden ""_dispatch_stub_PopMatrix""\n"
STUB_ASM_ENTRY("_dispatch_stub_PopMatrix")"\n"
"\t"STUB_ASM_CODE("297")"\n"

".hidden ""_dispatch_stub_PushMatrix""\n"
STUB_ASM_ENTRY("_dispatch_stub_PushMatrix")"\n"
"\t"STUB_ASM_CODE("298")"\n"

".hidden ""_dispatch_stub_Rotated""\n"
STUB_ASM_ENTRY("_dispatch_stub_Rotated")"\n"
"\t"STUB_ASM_CODE("299")"\n"

".hidden ""_dispatch_stub_Rotatef""\n"
STUB_ASM_ENTRY("_dispatch_stub_Rotatef")"\n"
"\t"STUB_ASM_CODE("300")"\n"

".hidden ""_dispatch_stub_Scaled""\n"
STUB_ASM_ENTRY("_dispatch_stub_Scaled")"\n"
"\t"STUB_ASM_CODE("301")"\n"

".hidden ""_dispatch_stub_Scalef""\n"
STUB_ASM_ENTRY("_dispatch_stub_Scalef")"\n"
"\t"STUB_ASM_CODE("302")"\n"

".hidden ""_dispatch_stub_Translated""\n"
STUB_ASM_ENTRY("_dispatch_stub_Translated")"\n"
"\t"STUB_ASM_CODE("303")"\n"

".hidden ""_dispatch_stub_Translatef""\n"
STUB_ASM_ENTRY("_dispatch_stub_Translatef")"\n"
"\t"STUB_ASM_CODE("304")"\n"

".hidden ""_dispatch_stub_Viewport""\n"
STUB_ASM_ENTRY("_dispatch_stub_Viewport")"\n"
"\t"STUB_ASM_CODE("305")"\n"

".hidden ""_dispatch_stub_ArrayElement""\n"
STUB_ASM_ENTRY("_dispatch_stub_ArrayElement")"\n"
"\t"STUB_ASM_CODE("306")"\n"

".hidden ""_dispatch_stub_BindTexture""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindTexture")"\n"
"\t"STUB_ASM_CODE("307")"\n"

".hidden ""_dispatch_stub_ColorPointer""\n"
STUB_ASM_ENTRY("_dispatch_stub_ColorPointer")"\n"
"\t"STUB_ASM_CODE("308")"\n"

".hidden ""_dispatch_stub_DisableClientState""\n"
STUB_ASM_ENTRY("_dispatch_stub_DisableClientState")"\n"
"\t"STUB_ASM_CODE("309")"\n"

".hidden ""_dispatch_stub_DrawArrays""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawArrays")"\n"
"\t"STUB_ASM_CODE("310")"\n"

".hidden ""_dispatch_stub_DrawElements""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawElements")"\n"
"\t"STUB_ASM_CODE("311")"\n"

".hidden ""_dispatch_stub_EdgeFlagPointer""\n"
STUB_ASM_ENTRY("_dispatch_stub_EdgeFlagPointer")"\n"
"\t"STUB_ASM_CODE("312")"\n"

".hidden ""_dispatch_stub_EnableClientState""\n"
STUB_ASM_ENTRY("_dispatch_stub_EnableClientState")"\n"
"\t"STUB_ASM_CODE("313")"\n"

".hidden ""_dispatch_stub_IndexPointer""\n"
STUB_ASM_ENTRY("_dispatch_stub_IndexPointer")"\n"
"\t"STUB_ASM_CODE("314")"\n"

".hidden ""_dispatch_stub_Indexub""\n"
STUB_ASM_ENTRY("_dispatch_stub_Indexub")"\n"
"\t"STUB_ASM_CODE("315")"\n"

".hidden ""_dispatch_stub_Indexubv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Indexubv")"\n"
"\t"STUB_ASM_CODE("316")"\n"

".hidden ""_dispatch_stub_InterleavedArrays""\n"
STUB_ASM_ENTRY("_dispatch_stub_InterleavedArrays")"\n"
"\t"STUB_ASM_CODE("317")"\n"

".hidden ""_dispatch_stub_NormalPointer""\n"
STUB_ASM_ENTRY("_dispatch_stub_NormalPointer")"\n"
"\t"STUB_ASM_CODE("318")"\n"

".hidden ""_dispatch_stub_PolygonOffset""\n"
STUB_ASM_ENTRY("_dispatch_stub_PolygonOffset")"\n"
"\t"STUB_ASM_CODE("319")"\n"

".hidden ""_dispatch_stub_TexCoordPointer""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoordPointer")"\n"
"\t"STUB_ASM_CODE("320")"\n"

".hidden ""_dispatch_stub_VertexPointer""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexPointer")"\n"
"\t"STUB_ASM_CODE("321")"\n"

".hidden ""_dispatch_stub_AreTexturesResident""\n"
STUB_ASM_ENTRY("_dispatch_stub_AreTexturesResident")"\n"
"\t"STUB_ASM_CODE("322")"\n"

".hidden ""_dispatch_stub_CopyTexImage1D""\n"
STUB_ASM_ENTRY("_dispatch_stub_CopyTexImage1D")"\n"
"\t"STUB_ASM_CODE("323")"\n"

".hidden ""_dispatch_stub_CopyTexImage2D""\n"
STUB_ASM_ENTRY("_dispatch_stub_CopyTexImage2D")"\n"
"\t"STUB_ASM_CODE("324")"\n"

".hidden ""_dispatch_stub_CopyTexSubImage1D""\n"
STUB_ASM_ENTRY("_dispatch_stub_CopyTexSubImage1D")"\n"
"\t"STUB_ASM_CODE("325")"\n"

".hidden ""_dispatch_stub_CopyTexSubImage2D""\n"
STUB_ASM_ENTRY("_dispatch_stub_CopyTexSubImage2D")"\n"
"\t"STUB_ASM_CODE("326")"\n"

".hidden ""_dispatch_stub_DeleteTextures""\n"
STUB_ASM_ENTRY("_dispatch_stub_DeleteTextures")"\n"
"\t"STUB_ASM_CODE("327")"\n"

".hidden ""_dispatch_stub_GenTextures""\n"
STUB_ASM_ENTRY("_dispatch_stub_GenTextures")"\n"
"\t"STUB_ASM_CODE("328")"\n"

".hidden ""_dispatch_stub_GetPointerv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetPointerv")"\n"
"\t"STUB_ASM_CODE("329")"\n"

".hidden ""_dispatch_stub_IsTexture""\n"
STUB_ASM_ENTRY("_dispatch_stub_IsTexture")"\n"
"\t"STUB_ASM_CODE("330")"\n"

".hidden ""_dispatch_stub_PrioritizeTextures""\n"
STUB_ASM_ENTRY("_dispatch_stub_PrioritizeTextures")"\n"
"\t"STUB_ASM_CODE("331")"\n"

".hidden ""_dispatch_stub_TexSubImage1D""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexSubImage1D")"\n"
"\t"STUB_ASM_CODE("332")"\n"

".hidden ""_dispatch_stub_TexSubImage2D""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexSubImage2D")"\n"
"\t"STUB_ASM_CODE("333")"\n"

".hidden ""_dispatch_stub_PopClientAttrib""\n"
STUB_ASM_ENTRY("_dispatch_stub_PopClientAttrib")"\n"
"\t"STUB_ASM_CODE("334")"\n"

".hidden ""_dispatch_stub_PushClientAttrib""\n"
STUB_ASM_ENTRY("_dispatch_stub_PushClientAttrib")"\n"
"\t"STUB_ASM_CODE("335")"\n"

".hidden ""_dispatch_stub_BlendColor""\n"
STUB_ASM_ENTRY("_dispatch_stub_BlendColor")"\n"
"\t"STUB_ASM_CODE("336")"\n"

".hidden ""_dispatch_stub_BlendEquation""\n"
STUB_ASM_ENTRY("_dispatch_stub_BlendEquation")"\n"
"\t"STUB_ASM_CODE("337")"\n"

".hidden ""_dispatch_stub_DrawRangeElements""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawRangeElements")"\n"
"\t"STUB_ASM_CODE("338")"\n"

".hidden ""_dispatch_stub_TexImage3D""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexImage3D")"\n"
"\t"STUB_ASM_CODE("339")"\n"

".hidden ""_dispatch_stub_TexSubImage3D""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexSubImage3D")"\n"
"\t"STUB_ASM_CODE("340")"\n"

".hidden ""_dispatch_stub_CopyTexSubImage3D""\n"
STUB_ASM_ENTRY("_dispatch_stub_CopyTexSubImage3D")"\n"
"\t"STUB_ASM_CODE("341")"\n"

".hidden ""_dispatch_stub_ActiveTexture""\n"
STUB_ASM_ENTRY("_dispatch_stub_ActiveTexture")"\n"
"\t"STUB_ASM_CODE("342")"\n"

".hidden ""_dispatch_stub_ClientActiveTexture""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClientActiveTexture")"\n"
"\t"STUB_ASM_CODE("343")"\n"

".hidden ""_dispatch_stub_MultiTexCoord1d""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord1d")"\n"
"\t"STUB_ASM_CODE("344")"\n"

".hidden ""_dispatch_stub_MultiTexCoord1dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord1dv")"\n"
"\t"STUB_ASM_CODE("345")"\n"

".hidden ""_dispatch_stub_MultiTexCoord1fARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord1fARB")"\n"
"\t"STUB_ASM_CODE("346")"\n"

".hidden ""_dispatch_stub_MultiTexCoord1fvARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord1fvARB")"\n"
"\t"STUB_ASM_CODE("347")"\n"

".hidden ""_dispatch_stub_MultiTexCoord1i""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord1i")"\n"
"\t"STUB_ASM_CODE("348")"\n"

".hidden ""_dispatch_stub_MultiTexCoord1iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord1iv")"\n"
"\t"STUB_ASM_CODE("349")"\n"

".hidden ""_dispatch_stub_MultiTexCoord1s""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord1s")"\n"
"\t"STUB_ASM_CODE("350")"\n"

".hidden ""_dispatch_stub_MultiTexCoord1sv""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord1sv")"\n"
"\t"STUB_ASM_CODE("351")"\n"

".hidden ""_dispatch_stub_MultiTexCoord2d""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord2d")"\n"
"\t"STUB_ASM_CODE("352")"\n"

".hidden ""_dispatch_stub_MultiTexCoord2dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord2dv")"\n"
"\t"STUB_ASM_CODE("353")"\n"

".hidden ""_dispatch_stub_MultiTexCoord2fARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord2fARB")"\n"
"\t"STUB_ASM_CODE("354")"\n"

".hidden ""_dispatch_stub_MultiTexCoord2fvARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord2fvARB")"\n"
"\t"STUB_ASM_CODE("355")"\n"

".hidden ""_dispatch_stub_MultiTexCoord2i""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord2i")"\n"
"\t"STUB_ASM_CODE("356")"\n"

".hidden ""_dispatch_stub_MultiTexCoord2iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord2iv")"\n"
"\t"STUB_ASM_CODE("357")"\n"

".hidden ""_dispatch_stub_MultiTexCoord2s""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord2s")"\n"
"\t"STUB_ASM_CODE("358")"\n"

".hidden ""_dispatch_stub_MultiTexCoord2sv""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord2sv")"\n"
"\t"STUB_ASM_CODE("359")"\n"

".hidden ""_dispatch_stub_MultiTexCoord3d""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord3d")"\n"
"\t"STUB_ASM_CODE("360")"\n"

".hidden ""_dispatch_stub_MultiTexCoord3dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord3dv")"\n"
"\t"STUB_ASM_CODE("361")"\n"

".hidden ""_dispatch_stub_MultiTexCoord3fARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord3fARB")"\n"
"\t"STUB_ASM_CODE("362")"\n"

".hidden ""_dispatch_stub_MultiTexCoord3fvARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord3fvARB")"\n"
"\t"STUB_ASM_CODE("363")"\n"

".hidden ""_dispatch_stub_MultiTexCoord3i""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord3i")"\n"
"\t"STUB_ASM_CODE("364")"\n"

".hidden ""_dispatch_stub_MultiTexCoord3iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord3iv")"\n"
"\t"STUB_ASM_CODE("365")"\n"

".hidden ""_dispatch_stub_MultiTexCoord3s""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord3s")"\n"
"\t"STUB_ASM_CODE("366")"\n"

".hidden ""_dispatch_stub_MultiTexCoord3sv""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord3sv")"\n"
"\t"STUB_ASM_CODE("367")"\n"

".hidden ""_dispatch_stub_MultiTexCoord4d""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord4d")"\n"
"\t"STUB_ASM_CODE("368")"\n"

".hidden ""_dispatch_stub_MultiTexCoord4dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord4dv")"\n"
"\t"STUB_ASM_CODE("369")"\n"

".hidden ""_dispatch_stub_MultiTexCoord4fARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord4fARB")"\n"
"\t"STUB_ASM_CODE("370")"\n"

".hidden ""_dispatch_stub_MultiTexCoord4fvARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord4fvARB")"\n"
"\t"STUB_ASM_CODE("371")"\n"

".hidden ""_dispatch_stub_MultiTexCoord4i""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord4i")"\n"
"\t"STUB_ASM_CODE("372")"\n"

".hidden ""_dispatch_stub_MultiTexCoord4iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord4iv")"\n"
"\t"STUB_ASM_CODE("373")"\n"

".hidden ""_dispatch_stub_MultiTexCoord4s""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord4s")"\n"
"\t"STUB_ASM_CODE("374")"\n"

".hidden ""_dispatch_stub_MultiTexCoord4sv""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord4sv")"\n"
"\t"STUB_ASM_CODE("375")"\n"

".hidden ""_dispatch_stub_CompressedTexImage1D""\n"
STUB_ASM_ENTRY("_dispatch_stub_CompressedTexImage1D")"\n"
"\t"STUB_ASM_CODE("376")"\n"

".hidden ""_dispatch_stub_CompressedTexImage2D""\n"
STUB_ASM_ENTRY("_dispatch_stub_CompressedTexImage2D")"\n"
"\t"STUB_ASM_CODE("377")"\n"

".hidden ""_dispatch_stub_CompressedTexImage3D""\n"
STUB_ASM_ENTRY("_dispatch_stub_CompressedTexImage3D")"\n"
"\t"STUB_ASM_CODE("378")"\n"

".hidden ""_dispatch_stub_CompressedTexSubImage1D""\n"
STUB_ASM_ENTRY("_dispatch_stub_CompressedTexSubImage1D")"\n"
"\t"STUB_ASM_CODE("379")"\n"

".hidden ""_dispatch_stub_CompressedTexSubImage2D""\n"
STUB_ASM_ENTRY("_dispatch_stub_CompressedTexSubImage2D")"\n"
"\t"STUB_ASM_CODE("380")"\n"

".hidden ""_dispatch_stub_CompressedTexSubImage3D""\n"
STUB_ASM_ENTRY("_dispatch_stub_CompressedTexSubImage3D")"\n"
"\t"STUB_ASM_CODE("381")"\n"

".hidden ""_dispatch_stub_GetCompressedTexImage""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetCompressedTexImage")"\n"
"\t"STUB_ASM_CODE("382")"\n"

".hidden ""_dispatch_stub_LoadTransposeMatrixd""\n"
STUB_ASM_ENTRY("_dispatch_stub_LoadTransposeMatrixd")"\n"
"\t"STUB_ASM_CODE("383")"\n"

".hidden ""_dispatch_stub_LoadTransposeMatrixf""\n"
STUB_ASM_ENTRY("_dispatch_stub_LoadTransposeMatrixf")"\n"
"\t"STUB_ASM_CODE("384")"\n"

".hidden ""_dispatch_stub_MultTransposeMatrixd""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultTransposeMatrixd")"\n"
"\t"STUB_ASM_CODE("385")"\n"

".hidden ""_dispatch_stub_MultTransposeMatrixf""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultTransposeMatrixf")"\n"
"\t"STUB_ASM_CODE("386")"\n"

".hidden ""_dispatch_stub_SampleCoverage""\n"
STUB_ASM_ENTRY("_dispatch_stub_SampleCoverage")"\n"
"\t"STUB_ASM_CODE("387")"\n"

".hidden ""_dispatch_stub_BlendFuncSeparate""\n"
STUB_ASM_ENTRY("_dispatch_stub_BlendFuncSeparate")"\n"
"\t"STUB_ASM_CODE("388")"\n"

".hidden ""_dispatch_stub_FogCoordPointer""\n"
STUB_ASM_ENTRY("_dispatch_stub_FogCoordPointer")"\n"
"\t"STUB_ASM_CODE("389")"\n"

".hidden ""_dispatch_stub_FogCoordd""\n"
STUB_ASM_ENTRY("_dispatch_stub_FogCoordd")"\n"
"\t"STUB_ASM_CODE("390")"\n"

".hidden ""_dispatch_stub_FogCoorddv""\n"
STUB_ASM_ENTRY("_dispatch_stub_FogCoorddv")"\n"
"\t"STUB_ASM_CODE("391")"\n"

".hidden ""_dispatch_stub_MultiDrawArrays""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiDrawArrays")"\n"
"\t"STUB_ASM_CODE("392")"\n"

".hidden ""_dispatch_stub_PointParameterf""\n"
STUB_ASM_ENTRY("_dispatch_stub_PointParameterf")"\n"
"\t"STUB_ASM_CODE("393")"\n"

".hidden ""_dispatch_stub_PointParameterfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_PointParameterfv")"\n"
"\t"STUB_ASM_CODE("394")"\n"

".hidden ""_dispatch_stub_PointParameteri""\n"
STUB_ASM_ENTRY("_dispatch_stub_PointParameteri")"\n"
"\t"STUB_ASM_CODE("395")"\n"

".hidden ""_dispatch_stub_PointParameteriv""\n"
STUB_ASM_ENTRY("_dispatch_stub_PointParameteriv")"\n"
"\t"STUB_ASM_CODE("396")"\n"

".hidden ""_dispatch_stub_SecondaryColor3b""\n"
STUB_ASM_ENTRY("_dispatch_stub_SecondaryColor3b")"\n"
"\t"STUB_ASM_CODE("397")"\n"

".hidden ""_dispatch_stub_SecondaryColor3bv""\n"
STUB_ASM_ENTRY("_dispatch_stub_SecondaryColor3bv")"\n"
"\t"STUB_ASM_CODE("398")"\n"

".hidden ""_dispatch_stub_SecondaryColor3d""\n"
STUB_ASM_ENTRY("_dispatch_stub_SecondaryColor3d")"\n"
"\t"STUB_ASM_CODE("399")"\n"

".hidden ""_dispatch_stub_SecondaryColor3dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_SecondaryColor3dv")"\n"
"\t"STUB_ASM_CODE("400")"\n"

".hidden ""_dispatch_stub_SecondaryColor3i""\n"
STUB_ASM_ENTRY("_dispatch_stub_SecondaryColor3i")"\n"
"\t"STUB_ASM_CODE("401")"\n"

".hidden ""_dispatch_stub_SecondaryColor3iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_SecondaryColor3iv")"\n"
"\t"STUB_ASM_CODE("402")"\n"

".hidden ""_dispatch_stub_SecondaryColor3s""\n"
STUB_ASM_ENTRY("_dispatch_stub_SecondaryColor3s")"\n"
"\t"STUB_ASM_CODE("403")"\n"

".hidden ""_dispatch_stub_SecondaryColor3sv""\n"
STUB_ASM_ENTRY("_dispatch_stub_SecondaryColor3sv")"\n"
"\t"STUB_ASM_CODE("404")"\n"

".hidden ""_dispatch_stub_SecondaryColor3ub""\n"
STUB_ASM_ENTRY("_dispatch_stub_SecondaryColor3ub")"\n"
"\t"STUB_ASM_CODE("405")"\n"

".hidden ""_dispatch_stub_SecondaryColor3ubv""\n"
STUB_ASM_ENTRY("_dispatch_stub_SecondaryColor3ubv")"\n"
"\t"STUB_ASM_CODE("406")"\n"

".hidden ""_dispatch_stub_SecondaryColor3ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_SecondaryColor3ui")"\n"
"\t"STUB_ASM_CODE("407")"\n"

".hidden ""_dispatch_stub_SecondaryColor3uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_SecondaryColor3uiv")"\n"
"\t"STUB_ASM_CODE("408")"\n"

".hidden ""_dispatch_stub_SecondaryColor3us""\n"
STUB_ASM_ENTRY("_dispatch_stub_SecondaryColor3us")"\n"
"\t"STUB_ASM_CODE("409")"\n"

".hidden ""_dispatch_stub_SecondaryColor3usv""\n"
STUB_ASM_ENTRY("_dispatch_stub_SecondaryColor3usv")"\n"
"\t"STUB_ASM_CODE("410")"\n"

".hidden ""_dispatch_stub_SecondaryColorPointer""\n"
STUB_ASM_ENTRY("_dispatch_stub_SecondaryColorPointer")"\n"
"\t"STUB_ASM_CODE("411")"\n"

".hidden ""_dispatch_stub_WindowPos2d""\n"
STUB_ASM_ENTRY("_dispatch_stub_WindowPos2d")"\n"
"\t"STUB_ASM_CODE("412")"\n"

".hidden ""_dispatch_stub_WindowPos2dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_WindowPos2dv")"\n"
"\t"STUB_ASM_CODE("413")"\n"

".hidden ""_dispatch_stub_WindowPos2f""\n"
STUB_ASM_ENTRY("_dispatch_stub_WindowPos2f")"\n"
"\t"STUB_ASM_CODE("414")"\n"

".hidden ""_dispatch_stub_WindowPos2fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_WindowPos2fv")"\n"
"\t"STUB_ASM_CODE("415")"\n"

".hidden ""_dispatch_stub_WindowPos2i""\n"
STUB_ASM_ENTRY("_dispatch_stub_WindowPos2i")"\n"
"\t"STUB_ASM_CODE("416")"\n"

".hidden ""_dispatch_stub_WindowPos2iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_WindowPos2iv")"\n"
"\t"STUB_ASM_CODE("417")"\n"

".hidden ""_dispatch_stub_WindowPos2s""\n"
STUB_ASM_ENTRY("_dispatch_stub_WindowPos2s")"\n"
"\t"STUB_ASM_CODE("418")"\n"

".hidden ""_dispatch_stub_WindowPos2sv""\n"
STUB_ASM_ENTRY("_dispatch_stub_WindowPos2sv")"\n"
"\t"STUB_ASM_CODE("419")"\n"

".hidden ""_dispatch_stub_WindowPos3d""\n"
STUB_ASM_ENTRY("_dispatch_stub_WindowPos3d")"\n"
"\t"STUB_ASM_CODE("420")"\n"

".hidden ""_dispatch_stub_WindowPos3dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_WindowPos3dv")"\n"
"\t"STUB_ASM_CODE("421")"\n"

".hidden ""_dispatch_stub_WindowPos3f""\n"
STUB_ASM_ENTRY("_dispatch_stub_WindowPos3f")"\n"
"\t"STUB_ASM_CODE("422")"\n"

".hidden ""_dispatch_stub_WindowPos3fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_WindowPos3fv")"\n"
"\t"STUB_ASM_CODE("423")"\n"

".hidden ""_dispatch_stub_WindowPos3i""\n"
STUB_ASM_ENTRY("_dispatch_stub_WindowPos3i")"\n"
"\t"STUB_ASM_CODE("424")"\n"

".hidden ""_dispatch_stub_WindowPos3iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_WindowPos3iv")"\n"
"\t"STUB_ASM_CODE("425")"\n"

".hidden ""_dispatch_stub_WindowPos3s""\n"
STUB_ASM_ENTRY("_dispatch_stub_WindowPos3s")"\n"
"\t"STUB_ASM_CODE("426")"\n"

".hidden ""_dispatch_stub_WindowPos3sv""\n"
STUB_ASM_ENTRY("_dispatch_stub_WindowPos3sv")"\n"
"\t"STUB_ASM_CODE("427")"\n"

".hidden ""_dispatch_stub_BeginQuery""\n"
STUB_ASM_ENTRY("_dispatch_stub_BeginQuery")"\n"
"\t"STUB_ASM_CODE("428")"\n"

".hidden ""_dispatch_stub_BindBuffer""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindBuffer")"\n"
"\t"STUB_ASM_CODE("429")"\n"

".hidden ""_dispatch_stub_BufferData""\n"
STUB_ASM_ENTRY("_dispatch_stub_BufferData")"\n"
"\t"STUB_ASM_CODE("430")"\n"

".hidden ""_dispatch_stub_BufferSubData""\n"
STUB_ASM_ENTRY("_dispatch_stub_BufferSubData")"\n"
"\t"STUB_ASM_CODE("431")"\n"

".hidden ""_dispatch_stub_DeleteBuffers""\n"
STUB_ASM_ENTRY("_dispatch_stub_DeleteBuffers")"\n"
"\t"STUB_ASM_CODE("432")"\n"

".hidden ""_dispatch_stub_DeleteQueries""\n"
STUB_ASM_ENTRY("_dispatch_stub_DeleteQueries")"\n"
"\t"STUB_ASM_CODE("433")"\n"

".hidden ""_dispatch_stub_EndQuery""\n"
STUB_ASM_ENTRY("_dispatch_stub_EndQuery")"\n"
"\t"STUB_ASM_CODE("434")"\n"

".hidden ""_dispatch_stub_GenBuffers""\n"
STUB_ASM_ENTRY("_dispatch_stub_GenBuffers")"\n"
"\t"STUB_ASM_CODE("435")"\n"

".hidden ""_dispatch_stub_GenQueries""\n"
STUB_ASM_ENTRY("_dispatch_stub_GenQueries")"\n"
"\t"STUB_ASM_CODE("436")"\n"

".hidden ""_dispatch_stub_GetBufferParameteriv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetBufferParameteriv")"\n"
"\t"STUB_ASM_CODE("437")"\n"

".hidden ""_dispatch_stub_GetBufferPointerv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetBufferPointerv")"\n"
"\t"STUB_ASM_CODE("438")"\n"

".hidden ""_dispatch_stub_GetBufferSubData""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetBufferSubData")"\n"
"\t"STUB_ASM_CODE("439")"\n"

".hidden ""_dispatch_stub_GetQueryObjectiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetQueryObjectiv")"\n"
"\t"STUB_ASM_CODE("440")"\n"

".hidden ""_dispatch_stub_GetQueryObjectuiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetQueryObjectuiv")"\n"
"\t"STUB_ASM_CODE("441")"\n"

".hidden ""_dispatch_stub_GetQueryiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetQueryiv")"\n"
"\t"STUB_ASM_CODE("442")"\n"

".hidden ""_dispatch_stub_IsBuffer""\n"
STUB_ASM_ENTRY("_dispatch_stub_IsBuffer")"\n"
"\t"STUB_ASM_CODE("443")"\n"

".hidden ""_dispatch_stub_IsQuery""\n"
STUB_ASM_ENTRY("_dispatch_stub_IsQuery")"\n"
"\t"STUB_ASM_CODE("444")"\n"

".hidden ""_dispatch_stub_MapBuffer""\n"
STUB_ASM_ENTRY("_dispatch_stub_MapBuffer")"\n"
"\t"STUB_ASM_CODE("445")"\n"

".hidden ""_dispatch_stub_UnmapBuffer""\n"
STUB_ASM_ENTRY("_dispatch_stub_UnmapBuffer")"\n"
"\t"STUB_ASM_CODE("446")"\n"

".hidden ""_dispatch_stub_AttachShader""\n"
STUB_ASM_ENTRY("_dispatch_stub_AttachShader")"\n"
"\t"STUB_ASM_CODE("447")"\n"

".hidden ""_dispatch_stub_BindAttribLocation""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindAttribLocation")"\n"
"\t"STUB_ASM_CODE("448")"\n"

".hidden ""_dispatch_stub_BlendEquationSeparate""\n"
STUB_ASM_ENTRY("_dispatch_stub_BlendEquationSeparate")"\n"
"\t"STUB_ASM_CODE("449")"\n"

".hidden ""_dispatch_stub_CompileShader""\n"
STUB_ASM_ENTRY("_dispatch_stub_CompileShader")"\n"
"\t"STUB_ASM_CODE("450")"\n"

".hidden ""_dispatch_stub_CreateProgram""\n"
STUB_ASM_ENTRY("_dispatch_stub_CreateProgram")"\n"
"\t"STUB_ASM_CODE("451")"\n"

".hidden ""_dispatch_stub_CreateShader""\n"
STUB_ASM_ENTRY("_dispatch_stub_CreateShader")"\n"
"\t"STUB_ASM_CODE("452")"\n"

".hidden ""_dispatch_stub_DeleteProgram""\n"
STUB_ASM_ENTRY("_dispatch_stub_DeleteProgram")"\n"
"\t"STUB_ASM_CODE("453")"\n"

".hidden ""_dispatch_stub_DeleteShader""\n"
STUB_ASM_ENTRY("_dispatch_stub_DeleteShader")"\n"
"\t"STUB_ASM_CODE("454")"\n"

".hidden ""_dispatch_stub_DetachShader""\n"
STUB_ASM_ENTRY("_dispatch_stub_DetachShader")"\n"
"\t"STUB_ASM_CODE("455")"\n"

".hidden ""_dispatch_stub_DisableVertexAttribArray""\n"
STUB_ASM_ENTRY("_dispatch_stub_DisableVertexAttribArray")"\n"
"\t"STUB_ASM_CODE("456")"\n"

".hidden ""_dispatch_stub_DrawBuffers""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawBuffers")"\n"
"\t"STUB_ASM_CODE("457")"\n"

".hidden ""_dispatch_stub_EnableVertexAttribArray""\n"
STUB_ASM_ENTRY("_dispatch_stub_EnableVertexAttribArray")"\n"
"\t"STUB_ASM_CODE("458")"\n"

".hidden ""_dispatch_stub_GetActiveAttrib""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetActiveAttrib")"\n"
"\t"STUB_ASM_CODE("459")"\n"

".hidden ""_dispatch_stub_GetActiveUniform""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetActiveUniform")"\n"
"\t"STUB_ASM_CODE("460")"\n"

".hidden ""_dispatch_stub_GetAttachedShaders""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetAttachedShaders")"\n"
"\t"STUB_ASM_CODE("461")"\n"

".hidden ""_dispatch_stub_GetAttribLocation""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetAttribLocation")"\n"
"\t"STUB_ASM_CODE("462")"\n"

".hidden ""_dispatch_stub_GetProgramInfoLog""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetProgramInfoLog")"\n"
"\t"STUB_ASM_CODE("463")"\n"

".hidden ""_dispatch_stub_GetProgramiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetProgramiv")"\n"
"\t"STUB_ASM_CODE("464")"\n"

".hidden ""_dispatch_stub_GetShaderInfoLog""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetShaderInfoLog")"\n"
"\t"STUB_ASM_CODE("465")"\n"

".hidden ""_dispatch_stub_GetShaderSource""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetShaderSource")"\n"
"\t"STUB_ASM_CODE("466")"\n"

".hidden ""_dispatch_stub_GetShaderiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetShaderiv")"\n"
"\t"STUB_ASM_CODE("467")"\n"

".hidden ""_dispatch_stub_GetUniformLocation""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetUniformLocation")"\n"
"\t"STUB_ASM_CODE("468")"\n"

".hidden ""_dispatch_stub_GetUniformfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetUniformfv")"\n"
"\t"STUB_ASM_CODE("469")"\n"

".hidden ""_dispatch_stub_GetUniformiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetUniformiv")"\n"
"\t"STUB_ASM_CODE("470")"\n"

".hidden ""_dispatch_stub_GetVertexAttribPointerv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetVertexAttribPointerv")"\n"
"\t"STUB_ASM_CODE("471")"\n"

".hidden ""_dispatch_stub_GetVertexAttribdv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetVertexAttribdv")"\n"
"\t"STUB_ASM_CODE("472")"\n"

".hidden ""_dispatch_stub_GetVertexAttribfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetVertexAttribfv")"\n"
"\t"STUB_ASM_CODE("473")"\n"

".hidden ""_dispatch_stub_GetVertexAttribiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetVertexAttribiv")"\n"
"\t"STUB_ASM_CODE("474")"\n"

".hidden ""_dispatch_stub_IsProgram""\n"
STUB_ASM_ENTRY("_dispatch_stub_IsProgram")"\n"
"\t"STUB_ASM_CODE("475")"\n"

".hidden ""_dispatch_stub_IsShader""\n"
STUB_ASM_ENTRY("_dispatch_stub_IsShader")"\n"
"\t"STUB_ASM_CODE("476")"\n"

".hidden ""_dispatch_stub_LinkProgram""\n"
STUB_ASM_ENTRY("_dispatch_stub_LinkProgram")"\n"
"\t"STUB_ASM_CODE("477")"\n"

".hidden ""_dispatch_stub_ShaderSource""\n"
STUB_ASM_ENTRY("_dispatch_stub_ShaderSource")"\n"
"\t"STUB_ASM_CODE("478")"\n"

".hidden ""_dispatch_stub_StencilFuncSeparate""\n"
STUB_ASM_ENTRY("_dispatch_stub_StencilFuncSeparate")"\n"
"\t"STUB_ASM_CODE("479")"\n"

".hidden ""_dispatch_stub_StencilMaskSeparate""\n"
STUB_ASM_ENTRY("_dispatch_stub_StencilMaskSeparate")"\n"
"\t"STUB_ASM_CODE("480")"\n"

".hidden ""_dispatch_stub_StencilOpSeparate""\n"
STUB_ASM_ENTRY("_dispatch_stub_StencilOpSeparate")"\n"
"\t"STUB_ASM_CODE("481")"\n"

".hidden ""_dispatch_stub_Uniform1f""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform1f")"\n"
"\t"STUB_ASM_CODE("482")"\n"

".hidden ""_dispatch_stub_Uniform1fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform1fv")"\n"
"\t"STUB_ASM_CODE("483")"\n"

".hidden ""_dispatch_stub_Uniform1i""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform1i")"\n"
"\t"STUB_ASM_CODE("484")"\n"

".hidden ""_dispatch_stub_Uniform1iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform1iv")"\n"
"\t"STUB_ASM_CODE("485")"\n"

".hidden ""_dispatch_stub_Uniform2f""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform2f")"\n"
"\t"STUB_ASM_CODE("486")"\n"

".hidden ""_dispatch_stub_Uniform2fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform2fv")"\n"
"\t"STUB_ASM_CODE("487")"\n"

".hidden ""_dispatch_stub_Uniform2i""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform2i")"\n"
"\t"STUB_ASM_CODE("488")"\n"

".hidden ""_dispatch_stub_Uniform2iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform2iv")"\n"
"\t"STUB_ASM_CODE("489")"\n"

".hidden ""_dispatch_stub_Uniform3f""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform3f")"\n"
"\t"STUB_ASM_CODE("490")"\n"

".hidden ""_dispatch_stub_Uniform3fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform3fv")"\n"
"\t"STUB_ASM_CODE("491")"\n"

".hidden ""_dispatch_stub_Uniform3i""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform3i")"\n"
"\t"STUB_ASM_CODE("492")"\n"

".hidden ""_dispatch_stub_Uniform3iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform3iv")"\n"
"\t"STUB_ASM_CODE("493")"\n"

".hidden ""_dispatch_stub_Uniform4f""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform4f")"\n"
"\t"STUB_ASM_CODE("494")"\n"

".hidden ""_dispatch_stub_Uniform4fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform4fv")"\n"
"\t"STUB_ASM_CODE("495")"\n"

".hidden ""_dispatch_stub_Uniform4i""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform4i")"\n"
"\t"STUB_ASM_CODE("496")"\n"

".hidden ""_dispatch_stub_Uniform4iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform4iv")"\n"
"\t"STUB_ASM_CODE("497")"\n"

".hidden ""_dispatch_stub_UniformMatrix2fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_UniformMatrix2fv")"\n"
"\t"STUB_ASM_CODE("498")"\n"

".hidden ""_dispatch_stub_UniformMatrix3fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_UniformMatrix3fv")"\n"
"\t"STUB_ASM_CODE("499")"\n"

".hidden ""_dispatch_stub_UniformMatrix4fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_UniformMatrix4fv")"\n"
"\t"STUB_ASM_CODE("500")"\n"

".hidden ""_dispatch_stub_UseProgram""\n"
STUB_ASM_ENTRY("_dispatch_stub_UseProgram")"\n"
"\t"STUB_ASM_CODE("501")"\n"

".hidden ""_dispatch_stub_ValidateProgram""\n"
STUB_ASM_ENTRY("_dispatch_stub_ValidateProgram")"\n"
"\t"STUB_ASM_CODE("502")"\n"

".hidden ""_dispatch_stub_VertexAttrib1d""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib1d")"\n"
"\t"STUB_ASM_CODE("503")"\n"

".hidden ""_dispatch_stub_VertexAttrib1dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib1dv")"\n"
"\t"STUB_ASM_CODE("504")"\n"

".hidden ""_dispatch_stub_VertexAttrib1s""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib1s")"\n"
"\t"STUB_ASM_CODE("505")"\n"

".hidden ""_dispatch_stub_VertexAttrib1sv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib1sv")"\n"
"\t"STUB_ASM_CODE("506")"\n"

".hidden ""_dispatch_stub_VertexAttrib2d""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib2d")"\n"
"\t"STUB_ASM_CODE("507")"\n"

".hidden ""_dispatch_stub_VertexAttrib2dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib2dv")"\n"
"\t"STUB_ASM_CODE("508")"\n"

".hidden ""_dispatch_stub_VertexAttrib2s""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib2s")"\n"
"\t"STUB_ASM_CODE("509")"\n"

".hidden ""_dispatch_stub_VertexAttrib2sv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib2sv")"\n"
"\t"STUB_ASM_CODE("510")"\n"

".hidden ""_dispatch_stub_VertexAttrib3d""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib3d")"\n"
"\t"STUB_ASM_CODE("511")"\n"

".hidden ""_dispatch_stub_VertexAttrib3dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib3dv")"\n"
"\t"STUB_ASM_CODE("512")"\n"

".hidden ""_dispatch_stub_VertexAttrib3s""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib3s")"\n"
"\t"STUB_ASM_CODE("513")"\n"

".hidden ""_dispatch_stub_VertexAttrib3sv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib3sv")"\n"
"\t"STUB_ASM_CODE("514")"\n"

".hidden ""_dispatch_stub_VertexAttrib4Nbv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib4Nbv")"\n"
"\t"STUB_ASM_CODE("515")"\n"

".hidden ""_dispatch_stub_VertexAttrib4Niv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib4Niv")"\n"
"\t"STUB_ASM_CODE("516")"\n"

".hidden ""_dispatch_stub_VertexAttrib4Nsv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib4Nsv")"\n"
"\t"STUB_ASM_CODE("517")"\n"

".hidden ""_dispatch_stub_VertexAttrib4Nub""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib4Nub")"\n"
"\t"STUB_ASM_CODE("518")"\n"

".hidden ""_dispatch_stub_VertexAttrib4Nubv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib4Nubv")"\n"
"\t"STUB_ASM_CODE("519")"\n"

".hidden ""_dispatch_stub_VertexAttrib4Nuiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib4Nuiv")"\n"
"\t"STUB_ASM_CODE("520")"\n"

".hidden ""_dispatch_stub_VertexAttrib4Nusv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib4Nusv")"\n"
"\t"STUB_ASM_CODE("521")"\n"

".hidden ""_dispatch_stub_VertexAttrib4bv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib4bv")"\n"
"\t"STUB_ASM_CODE("522")"\n"

".hidden ""_dispatch_stub_VertexAttrib4d""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib4d")"\n"
"\t"STUB_ASM_CODE("523")"\n"

".hidden ""_dispatch_stub_VertexAttrib4dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib4dv")"\n"
"\t"STUB_ASM_CODE("524")"\n"

".hidden ""_dispatch_stub_VertexAttrib4iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib4iv")"\n"
"\t"STUB_ASM_CODE("525")"\n"

".hidden ""_dispatch_stub_VertexAttrib4s""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib4s")"\n"
"\t"STUB_ASM_CODE("526")"\n"

".hidden ""_dispatch_stub_VertexAttrib4sv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib4sv")"\n"
"\t"STUB_ASM_CODE("527")"\n"

".hidden ""_dispatch_stub_VertexAttrib4ubv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib4ubv")"\n"
"\t"STUB_ASM_CODE("528")"\n"

".hidden ""_dispatch_stub_VertexAttrib4uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib4uiv")"\n"
"\t"STUB_ASM_CODE("529")"\n"

".hidden ""_dispatch_stub_VertexAttrib4usv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib4usv")"\n"
"\t"STUB_ASM_CODE("530")"\n"

".hidden ""_dispatch_stub_VertexAttribPointer""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribPointer")"\n"
"\t"STUB_ASM_CODE("531")"\n"

".hidden ""_dispatch_stub_UniformMatrix2x3fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_UniformMatrix2x3fv")"\n"
"\t"STUB_ASM_CODE("532")"\n"

".hidden ""_dispatch_stub_UniformMatrix2x4fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_UniformMatrix2x4fv")"\n"
"\t"STUB_ASM_CODE("533")"\n"

".hidden ""_dispatch_stub_UniformMatrix3x2fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_UniformMatrix3x2fv")"\n"
"\t"STUB_ASM_CODE("534")"\n"

".hidden ""_dispatch_stub_UniformMatrix3x4fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_UniformMatrix3x4fv")"\n"
"\t"STUB_ASM_CODE("535")"\n"

".hidden ""_dispatch_stub_UniformMatrix4x2fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_UniformMatrix4x2fv")"\n"
"\t"STUB_ASM_CODE("536")"\n"

".hidden ""_dispatch_stub_UniformMatrix4x3fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_UniformMatrix4x3fv")"\n"
"\t"STUB_ASM_CODE("537")"\n"

".hidden ""_dispatch_stub_BeginConditionalRender""\n"
STUB_ASM_ENTRY("_dispatch_stub_BeginConditionalRender")"\n"
"\t"STUB_ASM_CODE("538")"\n"

".hidden ""_dispatch_stub_BeginTransformFeedback""\n"
STUB_ASM_ENTRY("_dispatch_stub_BeginTransformFeedback")"\n"
"\t"STUB_ASM_CODE("539")"\n"

".hidden ""_dispatch_stub_BindBufferBase""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindBufferBase")"\n"
"\t"STUB_ASM_CODE("540")"\n"

".hidden ""_dispatch_stub_BindBufferRange""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindBufferRange")"\n"
"\t"STUB_ASM_CODE("541")"\n"

".hidden ""_dispatch_stub_BindFragDataLocation""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindFragDataLocation")"\n"
"\t"STUB_ASM_CODE("542")"\n"

".hidden ""_dispatch_stub_ClampColor""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClampColor")"\n"
"\t"STUB_ASM_CODE("543")"\n"

".hidden ""_dispatch_stub_ClearBufferfi""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClearBufferfi")"\n"
"\t"STUB_ASM_CODE("544")"\n"

".hidden ""_dispatch_stub_ClearBufferfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClearBufferfv")"\n"
"\t"STUB_ASM_CODE("545")"\n"

".hidden ""_dispatch_stub_ClearBufferiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClearBufferiv")"\n"
"\t"STUB_ASM_CODE("546")"\n"

".hidden ""_dispatch_stub_ClearBufferuiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClearBufferuiv")"\n"
"\t"STUB_ASM_CODE("547")"\n"

".hidden ""_dispatch_stub_ColorMaski""\n"
STUB_ASM_ENTRY("_dispatch_stub_ColorMaski")"\n"
"\t"STUB_ASM_CODE("548")"\n"

".hidden ""_dispatch_stub_Disablei""\n"
STUB_ASM_ENTRY("_dispatch_stub_Disablei")"\n"
"\t"STUB_ASM_CODE("549")"\n"

".hidden ""_dispatch_stub_Enablei""\n"
STUB_ASM_ENTRY("_dispatch_stub_Enablei")"\n"
"\t"STUB_ASM_CODE("550")"\n"

".hidden ""_dispatch_stub_EndConditionalRender""\n"
STUB_ASM_ENTRY("_dispatch_stub_EndConditionalRender")"\n"
"\t"STUB_ASM_CODE("551")"\n"

".hidden ""_dispatch_stub_EndTransformFeedback""\n"
STUB_ASM_ENTRY("_dispatch_stub_EndTransformFeedback")"\n"
"\t"STUB_ASM_CODE("552")"\n"

".hidden ""_dispatch_stub_GetBooleani_v""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetBooleani_v")"\n"
"\t"STUB_ASM_CODE("553")"\n"

".hidden ""_dispatch_stub_GetFragDataLocation""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetFragDataLocation")"\n"
"\t"STUB_ASM_CODE("554")"\n"

".hidden ""_dispatch_stub_GetIntegeri_v""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetIntegeri_v")"\n"
"\t"STUB_ASM_CODE("555")"\n"

".hidden ""_dispatch_stub_GetStringi""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetStringi")"\n"
"\t"STUB_ASM_CODE("556")"\n"

".hidden ""_dispatch_stub_GetTexParameterIiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTexParameterIiv")"\n"
"\t"STUB_ASM_CODE("557")"\n"

".hidden ""_dispatch_stub_GetTexParameterIuiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTexParameterIuiv")"\n"
"\t"STUB_ASM_CODE("558")"\n"

".hidden ""_dispatch_stub_GetTransformFeedbackVarying""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTransformFeedbackVarying")"\n"
"\t"STUB_ASM_CODE("559")"\n"

".hidden ""_dispatch_stub_GetUniformuiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetUniformuiv")"\n"
"\t"STUB_ASM_CODE("560")"\n"

".hidden ""_dispatch_stub_GetVertexAttribIiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetVertexAttribIiv")"\n"
"\t"STUB_ASM_CODE("561")"\n"

".hidden ""_dispatch_stub_GetVertexAttribIuiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetVertexAttribIuiv")"\n"
"\t"STUB_ASM_CODE("562")"\n"

".hidden ""_dispatch_stub_IsEnabledi""\n"
STUB_ASM_ENTRY("_dispatch_stub_IsEnabledi")"\n"
"\t"STUB_ASM_CODE("563")"\n"

".hidden ""_dispatch_stub_TexParameterIiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexParameterIiv")"\n"
"\t"STUB_ASM_CODE("564")"\n"

".hidden ""_dispatch_stub_TexParameterIuiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexParameterIuiv")"\n"
"\t"STUB_ASM_CODE("565")"\n"

".hidden ""_dispatch_stub_TransformFeedbackVaryings""\n"
STUB_ASM_ENTRY("_dispatch_stub_TransformFeedbackVaryings")"\n"
"\t"STUB_ASM_CODE("566")"\n"

".hidden ""_dispatch_stub_Uniform1ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform1ui")"\n"
"\t"STUB_ASM_CODE("567")"\n"

".hidden ""_dispatch_stub_Uniform1uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform1uiv")"\n"
"\t"STUB_ASM_CODE("568")"\n"

".hidden ""_dispatch_stub_Uniform2ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform2ui")"\n"
"\t"STUB_ASM_CODE("569")"\n"

".hidden ""_dispatch_stub_Uniform2uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform2uiv")"\n"
"\t"STUB_ASM_CODE("570")"\n"

".hidden ""_dispatch_stub_Uniform3ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform3ui")"\n"
"\t"STUB_ASM_CODE("571")"\n"

".hidden ""_dispatch_stub_Uniform3uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform3uiv")"\n"
"\t"STUB_ASM_CODE("572")"\n"

".hidden ""_dispatch_stub_Uniform4ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform4ui")"\n"
"\t"STUB_ASM_CODE("573")"\n"

".hidden ""_dispatch_stub_Uniform4uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform4uiv")"\n"
"\t"STUB_ASM_CODE("574")"\n"

".hidden ""_dispatch_stub_VertexAttribI1iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribI1iv")"\n"
"\t"STUB_ASM_CODE("575")"\n"

".hidden ""_dispatch_stub_VertexAttribI1uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribI1uiv")"\n"
"\t"STUB_ASM_CODE("576")"\n"

".hidden ""_dispatch_stub_VertexAttribI4bv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribI4bv")"\n"
"\t"STUB_ASM_CODE("577")"\n"

".hidden ""_dispatch_stub_VertexAttribI4sv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribI4sv")"\n"
"\t"STUB_ASM_CODE("578")"\n"

".hidden ""_dispatch_stub_VertexAttribI4ubv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribI4ubv")"\n"
"\t"STUB_ASM_CODE("579")"\n"

".hidden ""_dispatch_stub_VertexAttribI4usv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribI4usv")"\n"
"\t"STUB_ASM_CODE("580")"\n"

".hidden ""_dispatch_stub_VertexAttribIPointer""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribIPointer")"\n"
"\t"STUB_ASM_CODE("581")"\n"

".hidden ""_dispatch_stub_PrimitiveRestartIndex""\n"
STUB_ASM_ENTRY("_dispatch_stub_PrimitiveRestartIndex")"\n"
"\t"STUB_ASM_CODE("582")"\n"

".hidden ""_dispatch_stub_TexBuffer""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexBuffer")"\n"
"\t"STUB_ASM_CODE("583")"\n"

".hidden ""_dispatch_stub_FramebufferTexture""\n"
STUB_ASM_ENTRY("_dispatch_stub_FramebufferTexture")"\n"
"\t"STUB_ASM_CODE("584")"\n"

".hidden ""_dispatch_stub_GetBufferParameteri64v""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetBufferParameteri64v")"\n"
"\t"STUB_ASM_CODE("585")"\n"

".hidden ""_dispatch_stub_GetInteger64i_v""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetInteger64i_v")"\n"
"\t"STUB_ASM_CODE("586")"\n"

".hidden ""_dispatch_stub_VertexAttribDivisor""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribDivisor")"\n"
"\t"STUB_ASM_CODE("587")"\n"

".hidden ""_dispatch_stub_MinSampleShading""\n"
STUB_ASM_ENTRY("_dispatch_stub_MinSampleShading")"\n"
"\t"STUB_ASM_CODE("588")"\n"

".hidden ""_dispatch_stub_MemoryBarrierByRegion""\n"
STUB_ASM_ENTRY("_dispatch_stub_MemoryBarrierByRegion")"\n"
"\t"STUB_ASM_CODE("589")"\n"

".hidden ""_dispatch_stub_BindProgramARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindProgramARB")"\n"
"\t"STUB_ASM_CODE("590")"\n"

".hidden ""_dispatch_stub_DeleteProgramsARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_DeleteProgramsARB")"\n"
"\t"STUB_ASM_CODE("591")"\n"

".hidden ""_dispatch_stub_GenProgramsARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GenProgramsARB")"\n"
"\t"STUB_ASM_CODE("592")"\n"

".hidden ""_dispatch_stub_GetProgramEnvParameterdvARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetProgramEnvParameterdvARB")"\n"
"\t"STUB_ASM_CODE("593")"\n"

".hidden ""_dispatch_stub_GetProgramEnvParameterfvARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetProgramEnvParameterfvARB")"\n"
"\t"STUB_ASM_CODE("594")"\n"

".hidden ""_dispatch_stub_GetProgramLocalParameterdvARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetProgramLocalParameterdvARB")"\n"
"\t"STUB_ASM_CODE("595")"\n"

".hidden ""_dispatch_stub_GetProgramLocalParameterfvARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetProgramLocalParameterfvARB")"\n"
"\t"STUB_ASM_CODE("596")"\n"

".hidden ""_dispatch_stub_GetProgramStringARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetProgramStringARB")"\n"
"\t"STUB_ASM_CODE("597")"\n"

".hidden ""_dispatch_stub_GetProgramivARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetProgramivARB")"\n"
"\t"STUB_ASM_CODE("598")"\n"

".hidden ""_dispatch_stub_IsProgramARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_IsProgramARB")"\n"
"\t"STUB_ASM_CODE("599")"\n"

".hidden ""_dispatch_stub_ProgramEnvParameter4dARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramEnvParameter4dARB")"\n"
"\t"STUB_ASM_CODE("600")"\n"

".hidden ""_dispatch_stub_ProgramEnvParameter4dvARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramEnvParameter4dvARB")"\n"
"\t"STUB_ASM_CODE("601")"\n"

".hidden ""_dispatch_stub_ProgramEnvParameter4fARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramEnvParameter4fARB")"\n"
"\t"STUB_ASM_CODE("602")"\n"

".hidden ""_dispatch_stub_ProgramEnvParameter4fvARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramEnvParameter4fvARB")"\n"
"\t"STUB_ASM_CODE("603")"\n"

".hidden ""_dispatch_stub_ProgramLocalParameter4dARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramLocalParameter4dARB")"\n"
"\t"STUB_ASM_CODE("604")"\n"

".hidden ""_dispatch_stub_ProgramLocalParameter4dvARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramLocalParameter4dvARB")"\n"
"\t"STUB_ASM_CODE("605")"\n"

".hidden ""_dispatch_stub_ProgramLocalParameter4fARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramLocalParameter4fARB")"\n"
"\t"STUB_ASM_CODE("606")"\n"

".hidden ""_dispatch_stub_ProgramLocalParameter4fvARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramLocalParameter4fvARB")"\n"
"\t"STUB_ASM_CODE("607")"\n"

".hidden ""_dispatch_stub_ProgramStringARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramStringARB")"\n"
"\t"STUB_ASM_CODE("608")"\n"

".hidden ""_dispatch_stub_VertexAttrib1fARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib1fARB")"\n"
"\t"STUB_ASM_CODE("609")"\n"

".hidden ""_dispatch_stub_VertexAttrib1fvARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib1fvARB")"\n"
"\t"STUB_ASM_CODE("610")"\n"

".hidden ""_dispatch_stub_VertexAttrib2fARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib2fARB")"\n"
"\t"STUB_ASM_CODE("611")"\n"

".hidden ""_dispatch_stub_VertexAttrib2fvARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib2fvARB")"\n"
"\t"STUB_ASM_CODE("612")"\n"

".hidden ""_dispatch_stub_VertexAttrib3fARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib3fARB")"\n"
"\t"STUB_ASM_CODE("613")"\n"

".hidden ""_dispatch_stub_VertexAttrib3fvARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib3fvARB")"\n"
"\t"STUB_ASM_CODE("614")"\n"

".hidden ""_dispatch_stub_VertexAttrib4fARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib4fARB")"\n"
"\t"STUB_ASM_CODE("615")"\n"

".hidden ""_dispatch_stub_VertexAttrib4fvARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib4fvARB")"\n"
"\t"STUB_ASM_CODE("616")"\n"

".hidden ""_dispatch_stub_AttachObjectARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_AttachObjectARB")"\n"
"\t"STUB_ASM_CODE("617")"\n"

".hidden ""_dispatch_stub_CreateProgramObjectARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_CreateProgramObjectARB")"\n"
"\t"STUB_ASM_CODE("618")"\n"

".hidden ""_dispatch_stub_CreateShaderObjectARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_CreateShaderObjectARB")"\n"
"\t"STUB_ASM_CODE("619")"\n"

".hidden ""_dispatch_stub_DeleteObjectARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_DeleteObjectARB")"\n"
"\t"STUB_ASM_CODE("620")"\n"

".hidden ""_dispatch_stub_DetachObjectARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_DetachObjectARB")"\n"
"\t"STUB_ASM_CODE("621")"\n"

".hidden ""_dispatch_stub_GetAttachedObjectsARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetAttachedObjectsARB")"\n"
"\t"STUB_ASM_CODE("622")"\n"

".hidden ""_dispatch_stub_GetHandleARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetHandleARB")"\n"
"\t"STUB_ASM_CODE("623")"\n"

".hidden ""_dispatch_stub_GetInfoLogARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetInfoLogARB")"\n"
"\t"STUB_ASM_CODE("624")"\n"

".hidden ""_dispatch_stub_GetObjectParameterfvARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetObjectParameterfvARB")"\n"
"\t"STUB_ASM_CODE("625")"\n"

".hidden ""_dispatch_stub_GetObjectParameterivARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetObjectParameterivARB")"\n"
"\t"STUB_ASM_CODE("626")"\n"

".hidden ""_dispatch_stub_DrawArraysInstanced""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawArraysInstanced")"\n"
"\t"STUB_ASM_CODE("627")"\n"

".hidden ""_dispatch_stub_DrawElementsInstanced""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawElementsInstanced")"\n"
"\t"STUB_ASM_CODE("628")"\n"

".hidden ""_dispatch_stub_BindFramebuffer""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindFramebuffer")"\n"
"\t"STUB_ASM_CODE("629")"\n"

".hidden ""_dispatch_stub_BindRenderbuffer""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindRenderbuffer")"\n"
"\t"STUB_ASM_CODE("630")"\n"

".hidden ""_dispatch_stub_BlitFramebuffer""\n"
STUB_ASM_ENTRY("_dispatch_stub_BlitFramebuffer")"\n"
"\t"STUB_ASM_CODE("631")"\n"

".hidden ""_dispatch_stub_CheckFramebufferStatus""\n"
STUB_ASM_ENTRY("_dispatch_stub_CheckFramebufferStatus")"\n"
"\t"STUB_ASM_CODE("632")"\n"

".hidden ""_dispatch_stub_DeleteFramebuffers""\n"
STUB_ASM_ENTRY("_dispatch_stub_DeleteFramebuffers")"\n"
"\t"STUB_ASM_CODE("633")"\n"

".hidden ""_dispatch_stub_DeleteRenderbuffers""\n"
STUB_ASM_ENTRY("_dispatch_stub_DeleteRenderbuffers")"\n"
"\t"STUB_ASM_CODE("634")"\n"

".hidden ""_dispatch_stub_FramebufferRenderbuffer""\n"
STUB_ASM_ENTRY("_dispatch_stub_FramebufferRenderbuffer")"\n"
"\t"STUB_ASM_CODE("635")"\n"

".hidden ""_dispatch_stub_FramebufferTexture1D""\n"
STUB_ASM_ENTRY("_dispatch_stub_FramebufferTexture1D")"\n"
"\t"STUB_ASM_CODE("636")"\n"

".hidden ""_dispatch_stub_FramebufferTexture2D""\n"
STUB_ASM_ENTRY("_dispatch_stub_FramebufferTexture2D")"\n"
"\t"STUB_ASM_CODE("637")"\n"

".hidden ""_dispatch_stub_FramebufferTexture3D""\n"
STUB_ASM_ENTRY("_dispatch_stub_FramebufferTexture3D")"\n"
"\t"STUB_ASM_CODE("638")"\n"

".hidden ""_dispatch_stub_FramebufferTextureLayer""\n"
STUB_ASM_ENTRY("_dispatch_stub_FramebufferTextureLayer")"\n"
"\t"STUB_ASM_CODE("639")"\n"

".hidden ""_dispatch_stub_GenFramebuffers""\n"
STUB_ASM_ENTRY("_dispatch_stub_GenFramebuffers")"\n"
"\t"STUB_ASM_CODE("640")"\n"

".hidden ""_dispatch_stub_GenRenderbuffers""\n"
STUB_ASM_ENTRY("_dispatch_stub_GenRenderbuffers")"\n"
"\t"STUB_ASM_CODE("641")"\n"

".hidden ""_dispatch_stub_GenerateMipmap""\n"
STUB_ASM_ENTRY("_dispatch_stub_GenerateMipmap")"\n"
"\t"STUB_ASM_CODE("642")"\n"

".hidden ""_dispatch_stub_GetFramebufferAttachmentParameteriv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetFramebufferAttachmentParameteriv")"\n"
"\t"STUB_ASM_CODE("643")"\n"

".hidden ""_dispatch_stub_GetRenderbufferParameteriv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetRenderbufferParameteriv")"\n"
"\t"STUB_ASM_CODE("644")"\n"

".hidden ""_dispatch_stub_IsFramebuffer""\n"
STUB_ASM_ENTRY("_dispatch_stub_IsFramebuffer")"\n"
"\t"STUB_ASM_CODE("645")"\n"

".hidden ""_dispatch_stub_IsRenderbuffer""\n"
STUB_ASM_ENTRY("_dispatch_stub_IsRenderbuffer")"\n"
"\t"STUB_ASM_CODE("646")"\n"

".hidden ""_dispatch_stub_RenderbufferStorage""\n"
STUB_ASM_ENTRY("_dispatch_stub_RenderbufferStorage")"\n"
"\t"STUB_ASM_CODE("647")"\n"

".hidden ""_dispatch_stub_RenderbufferStorageMultisample""\n"
STUB_ASM_ENTRY("_dispatch_stub_RenderbufferStorageMultisample")"\n"
"\t"STUB_ASM_CODE("648")"\n"

".hidden ""_dispatch_stub_FlushMappedBufferRange""\n"
STUB_ASM_ENTRY("_dispatch_stub_FlushMappedBufferRange")"\n"
"\t"STUB_ASM_CODE("649")"\n"

".hidden ""_dispatch_stub_MapBufferRange""\n"
STUB_ASM_ENTRY("_dispatch_stub_MapBufferRange")"\n"
"\t"STUB_ASM_CODE("650")"\n"

".hidden ""_dispatch_stub_BindVertexArray""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindVertexArray")"\n"
"\t"STUB_ASM_CODE("651")"\n"

".hidden ""_dispatch_stub_DeleteVertexArrays""\n"
STUB_ASM_ENTRY("_dispatch_stub_DeleteVertexArrays")"\n"
"\t"STUB_ASM_CODE("652")"\n"

".hidden ""_dispatch_stub_GenVertexArrays""\n"
STUB_ASM_ENTRY("_dispatch_stub_GenVertexArrays")"\n"
"\t"STUB_ASM_CODE("653")"\n"

".hidden ""_dispatch_stub_IsVertexArray""\n"
STUB_ASM_ENTRY("_dispatch_stub_IsVertexArray")"\n"
"\t"STUB_ASM_CODE("654")"\n"

".hidden ""_dispatch_stub_GetActiveUniformBlockName""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetActiveUniformBlockName")"\n"
"\t"STUB_ASM_CODE("655")"\n"

".hidden ""_dispatch_stub_GetActiveUniformBlockiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetActiveUniformBlockiv")"\n"
"\t"STUB_ASM_CODE("656")"\n"

".hidden ""_dispatch_stub_GetActiveUniformName""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetActiveUniformName")"\n"
"\t"STUB_ASM_CODE("657")"\n"

".hidden ""_dispatch_stub_GetActiveUniformsiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetActiveUniformsiv")"\n"
"\t"STUB_ASM_CODE("658")"\n"

".hidden ""_dispatch_stub_GetUniformBlockIndex""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetUniformBlockIndex")"\n"
"\t"STUB_ASM_CODE("659")"\n"

".hidden ""_dispatch_stub_GetUniformIndices""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetUniformIndices")"\n"
"\t"STUB_ASM_CODE("660")"\n"

".hidden ""_dispatch_stub_UniformBlockBinding""\n"
STUB_ASM_ENTRY("_dispatch_stub_UniformBlockBinding")"\n"
"\t"STUB_ASM_CODE("661")"\n"

".hidden ""_dispatch_stub_CopyBufferSubData""\n"
STUB_ASM_ENTRY("_dispatch_stub_CopyBufferSubData")"\n"
"\t"STUB_ASM_CODE("662")"\n"

".hidden ""_dispatch_stub_ClientWaitSync""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClientWaitSync")"\n"
"\t"STUB_ASM_CODE("663")"\n"

".hidden ""_dispatch_stub_DeleteSync""\n"
STUB_ASM_ENTRY("_dispatch_stub_DeleteSync")"\n"
"\t"STUB_ASM_CODE("664")"\n"

".hidden ""_dispatch_stub_FenceSync""\n"
STUB_ASM_ENTRY("_dispatch_stub_FenceSync")"\n"
"\t"STUB_ASM_CODE("665")"\n"

".hidden ""_dispatch_stub_GetInteger64v""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetInteger64v")"\n"
"\t"STUB_ASM_CODE("666")"\n"

".hidden ""_dispatch_stub_GetSynciv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetSynciv")"\n"
"\t"STUB_ASM_CODE("667")"\n"

".hidden ""_dispatch_stub_IsSync""\n"
STUB_ASM_ENTRY("_dispatch_stub_IsSync")"\n"
"\t"STUB_ASM_CODE("668")"\n"

".hidden ""_dispatch_stub_WaitSync""\n"
STUB_ASM_ENTRY("_dispatch_stub_WaitSync")"\n"
"\t"STUB_ASM_CODE("669")"\n"

".hidden ""_dispatch_stub_DrawElementsBaseVertex""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawElementsBaseVertex")"\n"
"\t"STUB_ASM_CODE("670")"\n"

".hidden ""_dispatch_stub_DrawElementsInstancedBaseVertex""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawElementsInstancedBaseVertex")"\n"
"\t"STUB_ASM_CODE("671")"\n"

".hidden ""_dispatch_stub_DrawRangeElementsBaseVertex""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawRangeElementsBaseVertex")"\n"
"\t"STUB_ASM_CODE("672")"\n"

".hidden ""_dispatch_stub_MultiDrawElementsBaseVertex""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiDrawElementsBaseVertex")"\n"
"\t"STUB_ASM_CODE("673")"\n"

".hidden ""_dispatch_stub_ProvokingVertex""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProvokingVertex")"\n"
"\t"STUB_ASM_CODE("674")"\n"

".hidden ""_dispatch_stub_GetMultisamplefv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetMultisamplefv")"\n"
"\t"STUB_ASM_CODE("675")"\n"

".hidden ""_dispatch_stub_SampleMaski""\n"
STUB_ASM_ENTRY("_dispatch_stub_SampleMaski")"\n"
"\t"STUB_ASM_CODE("676")"\n"

".hidden ""_dispatch_stub_TexImage2DMultisample""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexImage2DMultisample")"\n"
"\t"STUB_ASM_CODE("677")"\n"

".hidden ""_dispatch_stub_TexImage3DMultisample""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexImage3DMultisample")"\n"
"\t"STUB_ASM_CODE("678")"\n"

".hidden ""_dispatch_stub_BlendEquationSeparateiARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_BlendEquationSeparateiARB")"\n"
"\t"STUB_ASM_CODE("679")"\n"

".hidden ""_dispatch_stub_BlendEquationiARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_BlendEquationiARB")"\n"
"\t"STUB_ASM_CODE("680")"\n"

".hidden ""_dispatch_stub_BlendFuncSeparateiARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_BlendFuncSeparateiARB")"\n"
"\t"STUB_ASM_CODE("681")"\n"

".hidden ""_dispatch_stub_BlendFunciARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_BlendFunciARB")"\n"
"\t"STUB_ASM_CODE("682")"\n"

".hidden ""_dispatch_stub_BindFragDataLocationIndexed""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindFragDataLocationIndexed")"\n"
"\t"STUB_ASM_CODE("683")"\n"

".hidden ""_dispatch_stub_GetFragDataIndex""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetFragDataIndex")"\n"
"\t"STUB_ASM_CODE("684")"\n"

".hidden ""_dispatch_stub_BindSampler""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindSampler")"\n"
"\t"STUB_ASM_CODE("685")"\n"

".hidden ""_dispatch_stub_DeleteSamplers""\n"
STUB_ASM_ENTRY("_dispatch_stub_DeleteSamplers")"\n"
"\t"STUB_ASM_CODE("686")"\n"

".hidden ""_dispatch_stub_GenSamplers""\n"
STUB_ASM_ENTRY("_dispatch_stub_GenSamplers")"\n"
"\t"STUB_ASM_CODE("687")"\n"

".hidden ""_dispatch_stub_GetSamplerParameterIiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetSamplerParameterIiv")"\n"
"\t"STUB_ASM_CODE("688")"\n"

".hidden ""_dispatch_stub_GetSamplerParameterIuiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetSamplerParameterIuiv")"\n"
"\t"STUB_ASM_CODE("689")"\n"

".hidden ""_dispatch_stub_GetSamplerParameterfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetSamplerParameterfv")"\n"
"\t"STUB_ASM_CODE("690")"\n"

".hidden ""_dispatch_stub_GetSamplerParameteriv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetSamplerParameteriv")"\n"
"\t"STUB_ASM_CODE("691")"\n"

".hidden ""_dispatch_stub_IsSampler""\n"
STUB_ASM_ENTRY("_dispatch_stub_IsSampler")"\n"
"\t"STUB_ASM_CODE("692")"\n"

".hidden ""_dispatch_stub_SamplerParameterIiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_SamplerParameterIiv")"\n"
"\t"STUB_ASM_CODE("693")"\n"

".hidden ""_dispatch_stub_SamplerParameterIuiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_SamplerParameterIuiv")"\n"
"\t"STUB_ASM_CODE("694")"\n"

".hidden ""_dispatch_stub_SamplerParameterf""\n"
STUB_ASM_ENTRY("_dispatch_stub_SamplerParameterf")"\n"
"\t"STUB_ASM_CODE("695")"\n"

".hidden ""_dispatch_stub_SamplerParameterfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_SamplerParameterfv")"\n"
"\t"STUB_ASM_CODE("696")"\n"

".hidden ""_dispatch_stub_SamplerParameteri""\n"
STUB_ASM_ENTRY("_dispatch_stub_SamplerParameteri")"\n"
"\t"STUB_ASM_CODE("697")"\n"

".hidden ""_dispatch_stub_SamplerParameteriv""\n"
STUB_ASM_ENTRY("_dispatch_stub_SamplerParameteriv")"\n"
"\t"STUB_ASM_CODE("698")"\n"

".hidden ""_dispatch_stub_GetQueryObjecti64v""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetQueryObjecti64v")"\n"
"\t"STUB_ASM_CODE("699")"\n"

".hidden ""_dispatch_stub_GetQueryObjectui64v""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetQueryObjectui64v")"\n"
"\t"STUB_ASM_CODE("700")"\n"

".hidden ""_dispatch_stub_QueryCounter""\n"
STUB_ASM_ENTRY("_dispatch_stub_QueryCounter")"\n"
"\t"STUB_ASM_CODE("701")"\n"

".hidden ""_dispatch_stub_ColorP3ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_ColorP3ui")"\n"
"\t"STUB_ASM_CODE("702")"\n"

".hidden ""_dispatch_stub_ColorP3uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ColorP3uiv")"\n"
"\t"STUB_ASM_CODE("703")"\n"

".hidden ""_dispatch_stub_ColorP4ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_ColorP4ui")"\n"
"\t"STUB_ASM_CODE("704")"\n"

".hidden ""_dispatch_stub_ColorP4uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ColorP4uiv")"\n"
"\t"STUB_ASM_CODE("705")"\n"

".hidden ""_dispatch_stub_MultiTexCoordP1ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoordP1ui")"\n"
"\t"STUB_ASM_CODE("706")"\n"

".hidden ""_dispatch_stub_MultiTexCoordP1uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoordP1uiv")"\n"
"\t"STUB_ASM_CODE("707")"\n"

".hidden ""_dispatch_stub_MultiTexCoordP2ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoordP2ui")"\n"
"\t"STUB_ASM_CODE("708")"\n"

".hidden ""_dispatch_stub_MultiTexCoordP2uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoordP2uiv")"\n"
"\t"STUB_ASM_CODE("709")"\n"

".hidden ""_dispatch_stub_MultiTexCoordP3ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoordP3ui")"\n"
"\t"STUB_ASM_CODE("710")"\n"

".hidden ""_dispatch_stub_MultiTexCoordP3uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoordP3uiv")"\n"
"\t"STUB_ASM_CODE("711")"\n"

".hidden ""_dispatch_stub_MultiTexCoordP4ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoordP4ui")"\n"
"\t"STUB_ASM_CODE("712")"\n"

".hidden ""_dispatch_stub_MultiTexCoordP4uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoordP4uiv")"\n"
"\t"STUB_ASM_CODE("713")"\n"

".hidden ""_dispatch_stub_NormalP3ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_NormalP3ui")"\n"
"\t"STUB_ASM_CODE("714")"\n"

".hidden ""_dispatch_stub_NormalP3uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_NormalP3uiv")"\n"
"\t"STUB_ASM_CODE("715")"\n"

".hidden ""_dispatch_stub_SecondaryColorP3ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_SecondaryColorP3ui")"\n"
"\t"STUB_ASM_CODE("716")"\n"

".hidden ""_dispatch_stub_SecondaryColorP3uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_SecondaryColorP3uiv")"\n"
"\t"STUB_ASM_CODE("717")"\n"

".hidden ""_dispatch_stub_TexCoordP1ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoordP1ui")"\n"
"\t"STUB_ASM_CODE("718")"\n"

".hidden ""_dispatch_stub_TexCoordP1uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoordP1uiv")"\n"
"\t"STUB_ASM_CODE("719")"\n"

".hidden ""_dispatch_stub_TexCoordP2ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoordP2ui")"\n"
"\t"STUB_ASM_CODE("720")"\n"

".hidden ""_dispatch_stub_TexCoordP2uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoordP2uiv")"\n"
"\t"STUB_ASM_CODE("721")"\n"

".hidden ""_dispatch_stub_TexCoordP3ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoordP3ui")"\n"
"\t"STUB_ASM_CODE("722")"\n"

".hidden ""_dispatch_stub_TexCoordP3uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoordP3uiv")"\n"
"\t"STUB_ASM_CODE("723")"\n"

".hidden ""_dispatch_stub_TexCoordP4ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoordP4ui")"\n"
"\t"STUB_ASM_CODE("724")"\n"

".hidden ""_dispatch_stub_TexCoordP4uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoordP4uiv")"\n"
"\t"STUB_ASM_CODE("725")"\n"

".hidden ""_dispatch_stub_VertexAttribP1ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribP1ui")"\n"
"\t"STUB_ASM_CODE("726")"\n"

".hidden ""_dispatch_stub_VertexAttribP1uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribP1uiv")"\n"
"\t"STUB_ASM_CODE("727")"\n"

".hidden ""_dispatch_stub_VertexAttribP2ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribP2ui")"\n"
"\t"STUB_ASM_CODE("728")"\n"

".hidden ""_dispatch_stub_VertexAttribP2uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribP2uiv")"\n"
"\t"STUB_ASM_CODE("729")"\n"

".hidden ""_dispatch_stub_VertexAttribP3ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribP3ui")"\n"
"\t"STUB_ASM_CODE("730")"\n"

".hidden ""_dispatch_stub_VertexAttribP3uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribP3uiv")"\n"
"\t"STUB_ASM_CODE("731")"\n"

".hidden ""_dispatch_stub_VertexAttribP4ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribP4ui")"\n"
"\t"STUB_ASM_CODE("732")"\n"

".hidden ""_dispatch_stub_VertexAttribP4uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribP4uiv")"\n"
"\t"STUB_ASM_CODE("733")"\n"

".hidden ""_dispatch_stub_VertexP2ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexP2ui")"\n"
"\t"STUB_ASM_CODE("734")"\n"

".hidden ""_dispatch_stub_VertexP2uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexP2uiv")"\n"
"\t"STUB_ASM_CODE("735")"\n"

".hidden ""_dispatch_stub_VertexP3ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexP3ui")"\n"
"\t"STUB_ASM_CODE("736")"\n"

".hidden ""_dispatch_stub_VertexP3uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexP3uiv")"\n"
"\t"STUB_ASM_CODE("737")"\n"

".hidden ""_dispatch_stub_VertexP4ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexP4ui")"\n"
"\t"STUB_ASM_CODE("738")"\n"

".hidden ""_dispatch_stub_VertexP4uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexP4uiv")"\n"
"\t"STUB_ASM_CODE("739")"\n"

".hidden ""_dispatch_stub_DrawArraysIndirect""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawArraysIndirect")"\n"
"\t"STUB_ASM_CODE("740")"\n"

".hidden ""_dispatch_stub_DrawElementsIndirect""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawElementsIndirect")"\n"
"\t"STUB_ASM_CODE("741")"\n"

".hidden ""_dispatch_stub_GetUniformdv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetUniformdv")"\n"
"\t"STUB_ASM_CODE("742")"\n"

".hidden ""_dispatch_stub_Uniform1d""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform1d")"\n"
"\t"STUB_ASM_CODE("743")"\n"

".hidden ""_dispatch_stub_Uniform1dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform1dv")"\n"
"\t"STUB_ASM_CODE("744")"\n"

".hidden ""_dispatch_stub_Uniform2d""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform2d")"\n"
"\t"STUB_ASM_CODE("745")"\n"

".hidden ""_dispatch_stub_Uniform2dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform2dv")"\n"
"\t"STUB_ASM_CODE("746")"\n"

".hidden ""_dispatch_stub_Uniform3d""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform3d")"\n"
"\t"STUB_ASM_CODE("747")"\n"

".hidden ""_dispatch_stub_Uniform3dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform3dv")"\n"
"\t"STUB_ASM_CODE("748")"\n"

".hidden ""_dispatch_stub_Uniform4d""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform4d")"\n"
"\t"STUB_ASM_CODE("749")"\n"

".hidden ""_dispatch_stub_Uniform4dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform4dv")"\n"
"\t"STUB_ASM_CODE("750")"\n"

".hidden ""_dispatch_stub_UniformMatrix2dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_UniformMatrix2dv")"\n"
"\t"STUB_ASM_CODE("751")"\n"

".hidden ""_dispatch_stub_UniformMatrix2x3dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_UniformMatrix2x3dv")"\n"
"\t"STUB_ASM_CODE("752")"\n"

".hidden ""_dispatch_stub_UniformMatrix2x4dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_UniformMatrix2x4dv")"\n"
"\t"STUB_ASM_CODE("753")"\n"

".hidden ""_dispatch_stub_UniformMatrix3dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_UniformMatrix3dv")"\n"
"\t"STUB_ASM_CODE("754")"\n"

".hidden ""_dispatch_stub_UniformMatrix3x2dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_UniformMatrix3x2dv")"\n"
"\t"STUB_ASM_CODE("755")"\n"

".hidden ""_dispatch_stub_UniformMatrix3x4dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_UniformMatrix3x4dv")"\n"
"\t"STUB_ASM_CODE("756")"\n"

".hidden ""_dispatch_stub_UniformMatrix4dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_UniformMatrix4dv")"\n"
"\t"STUB_ASM_CODE("757")"\n"

".hidden ""_dispatch_stub_UniformMatrix4x2dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_UniformMatrix4x2dv")"\n"
"\t"STUB_ASM_CODE("758")"\n"

".hidden ""_dispatch_stub_UniformMatrix4x3dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_UniformMatrix4x3dv")"\n"
"\t"STUB_ASM_CODE("759")"\n"

".hidden ""_dispatch_stub_GetActiveSubroutineName""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetActiveSubroutineName")"\n"
"\t"STUB_ASM_CODE("760")"\n"

".hidden ""_dispatch_stub_GetActiveSubroutineUniformName""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetActiveSubroutineUniformName")"\n"
"\t"STUB_ASM_CODE("761")"\n"

".hidden ""_dispatch_stub_GetActiveSubroutineUniformiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetActiveSubroutineUniformiv")"\n"
"\t"STUB_ASM_CODE("762")"\n"

".hidden ""_dispatch_stub_GetProgramStageiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetProgramStageiv")"\n"
"\t"STUB_ASM_CODE("763")"\n"

".hidden ""_dispatch_stub_GetSubroutineIndex""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetSubroutineIndex")"\n"
"\t"STUB_ASM_CODE("764")"\n"

".hidden ""_dispatch_stub_GetSubroutineUniformLocation""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetSubroutineUniformLocation")"\n"
"\t"STUB_ASM_CODE("765")"\n"

".hidden ""_dispatch_stub_GetUniformSubroutineuiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetUniformSubroutineuiv")"\n"
"\t"STUB_ASM_CODE("766")"\n"

".hidden ""_dispatch_stub_UniformSubroutinesuiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_UniformSubroutinesuiv")"\n"
"\t"STUB_ASM_CODE("767")"\n"

".hidden ""_dispatch_stub_PatchParameterfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_PatchParameterfv")"\n"
"\t"STUB_ASM_CODE("768")"\n"

".hidden ""_dispatch_stub_PatchParameteri""\n"
STUB_ASM_ENTRY("_dispatch_stub_PatchParameteri")"\n"
"\t"STUB_ASM_CODE("769")"\n"

".hidden ""_dispatch_stub_BindTransformFeedback""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindTransformFeedback")"\n"
"\t"STUB_ASM_CODE("770")"\n"

".hidden ""_dispatch_stub_DeleteTransformFeedbacks""\n"
STUB_ASM_ENTRY("_dispatch_stub_DeleteTransformFeedbacks")"\n"
"\t"STUB_ASM_CODE("771")"\n"

".hidden ""_dispatch_stub_DrawTransformFeedback""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawTransformFeedback")"\n"
"\t"STUB_ASM_CODE("772")"\n"

".hidden ""_dispatch_stub_GenTransformFeedbacks""\n"
STUB_ASM_ENTRY("_dispatch_stub_GenTransformFeedbacks")"\n"
"\t"STUB_ASM_CODE("773")"\n"

".hidden ""_dispatch_stub_IsTransformFeedback""\n"
STUB_ASM_ENTRY("_dispatch_stub_IsTransformFeedback")"\n"
"\t"STUB_ASM_CODE("774")"\n"

".hidden ""_dispatch_stub_PauseTransformFeedback""\n"
STUB_ASM_ENTRY("_dispatch_stub_PauseTransformFeedback")"\n"
"\t"STUB_ASM_CODE("775")"\n"

".hidden ""_dispatch_stub_ResumeTransformFeedback""\n"
STUB_ASM_ENTRY("_dispatch_stub_ResumeTransformFeedback")"\n"
"\t"STUB_ASM_CODE("776")"\n"

".hidden ""_dispatch_stub_BeginQueryIndexed""\n"
STUB_ASM_ENTRY("_dispatch_stub_BeginQueryIndexed")"\n"
"\t"STUB_ASM_CODE("777")"\n"

".hidden ""_dispatch_stub_DrawTransformFeedbackStream""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawTransformFeedbackStream")"\n"
"\t"STUB_ASM_CODE("778")"\n"

".hidden ""_dispatch_stub_EndQueryIndexed""\n"
STUB_ASM_ENTRY("_dispatch_stub_EndQueryIndexed")"\n"
"\t"STUB_ASM_CODE("779")"\n"

".hidden ""_dispatch_stub_GetQueryIndexediv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetQueryIndexediv")"\n"
"\t"STUB_ASM_CODE("780")"\n"

".hidden ""_dispatch_stub_ClearDepthf""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClearDepthf")"\n"
"\t"STUB_ASM_CODE("781")"\n"

".hidden ""_dispatch_stub_DepthRangef""\n"
STUB_ASM_ENTRY("_dispatch_stub_DepthRangef")"\n"
"\t"STUB_ASM_CODE("782")"\n"

".hidden ""_dispatch_stub_GetShaderPrecisionFormat""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetShaderPrecisionFormat")"\n"
"\t"STUB_ASM_CODE("783")"\n"

".hidden ""_dispatch_stub_ReleaseShaderCompiler""\n"
STUB_ASM_ENTRY("_dispatch_stub_ReleaseShaderCompiler")"\n"
"\t"STUB_ASM_CODE("784")"\n"

".hidden ""_dispatch_stub_ShaderBinary""\n"
STUB_ASM_ENTRY("_dispatch_stub_ShaderBinary")"\n"
"\t"STUB_ASM_CODE("785")"\n"

".hidden ""_dispatch_stub_GetProgramBinary""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetProgramBinary")"\n"
"\t"STUB_ASM_CODE("786")"\n"

".hidden ""_dispatch_stub_ProgramBinary""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramBinary")"\n"
"\t"STUB_ASM_CODE("787")"\n"

".hidden ""_dispatch_stub_ProgramParameteri""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramParameteri")"\n"
"\t"STUB_ASM_CODE("788")"\n"

".hidden ""_dispatch_stub_GetVertexAttribLdv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetVertexAttribLdv")"\n"
"\t"STUB_ASM_CODE("789")"\n"

".hidden ""_dispatch_stub_VertexAttribL1d""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribL1d")"\n"
"\t"STUB_ASM_CODE("790")"\n"

".hidden ""_dispatch_stub_VertexAttribL1dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribL1dv")"\n"
"\t"STUB_ASM_CODE("791")"\n"

".hidden ""_dispatch_stub_VertexAttribL2d""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribL2d")"\n"
"\t"STUB_ASM_CODE("792")"\n"

".hidden ""_dispatch_stub_VertexAttribL2dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribL2dv")"\n"
"\t"STUB_ASM_CODE("793")"\n"

".hidden ""_dispatch_stub_VertexAttribL3d""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribL3d")"\n"
"\t"STUB_ASM_CODE("794")"\n"

".hidden ""_dispatch_stub_VertexAttribL3dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribL3dv")"\n"
"\t"STUB_ASM_CODE("795")"\n"

".hidden ""_dispatch_stub_VertexAttribL4d""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribL4d")"\n"
"\t"STUB_ASM_CODE("796")"\n"

".hidden ""_dispatch_stub_VertexAttribL4dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribL4dv")"\n"
"\t"STUB_ASM_CODE("797")"\n"

".hidden ""_dispatch_stub_VertexAttribLPointer""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribLPointer")"\n"
"\t"STUB_ASM_CODE("798")"\n"

".hidden ""_dispatch_stub_DepthRangeArrayv""\n"
STUB_ASM_ENTRY("_dispatch_stub_DepthRangeArrayv")"\n"
"\t"STUB_ASM_CODE("799")"\n"

".hidden ""_dispatch_stub_DepthRangeIndexed""\n"
STUB_ASM_ENTRY("_dispatch_stub_DepthRangeIndexed")"\n"
"\t"STUB_ASM_CODE("800")"\n"

".hidden ""_dispatch_stub_GetDoublei_v""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetDoublei_v")"\n"
"\t"STUB_ASM_CODE("801")"\n"

".hidden ""_dispatch_stub_GetFloati_v""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetFloati_v")"\n"
"\t"STUB_ASM_CODE("802")"\n"

".hidden ""_dispatch_stub_ScissorArrayv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ScissorArrayv")"\n"
"\t"STUB_ASM_CODE("803")"\n"

".hidden ""_dispatch_stub_ScissorIndexed""\n"
STUB_ASM_ENTRY("_dispatch_stub_ScissorIndexed")"\n"
"\t"STUB_ASM_CODE("804")"\n"

".hidden ""_dispatch_stub_ScissorIndexedv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ScissorIndexedv")"\n"
"\t"STUB_ASM_CODE("805")"\n"

".hidden ""_dispatch_stub_ViewportArrayv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ViewportArrayv")"\n"
"\t"STUB_ASM_CODE("806")"\n"

".hidden ""_dispatch_stub_ViewportIndexedf""\n"
STUB_ASM_ENTRY("_dispatch_stub_ViewportIndexedf")"\n"
"\t"STUB_ASM_CODE("807")"\n"

".hidden ""_dispatch_stub_ViewportIndexedfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ViewportIndexedfv")"\n"
"\t"STUB_ASM_CODE("808")"\n"

".hidden ""_dispatch_stub_GetGraphicsResetStatusARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetGraphicsResetStatusARB")"\n"
"\t"STUB_ASM_CODE("809")"\n"

".hidden ""_dispatch_stub_GetnCompressedTexImageARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetnCompressedTexImageARB")"\n"
"\t"STUB_ASM_CODE("810")"\n"

".hidden ""_dispatch_stub_GetnMapdvARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetnMapdvARB")"\n"
"\t"STUB_ASM_CODE("811")"\n"

".hidden ""_dispatch_stub_GetnMapfvARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetnMapfvARB")"\n"
"\t"STUB_ASM_CODE("812")"\n"

".hidden ""_dispatch_stub_GetnMapivARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetnMapivARB")"\n"
"\t"STUB_ASM_CODE("813")"\n"

".hidden ""_dispatch_stub_GetnPixelMapfvARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetnPixelMapfvARB")"\n"
"\t"STUB_ASM_CODE("814")"\n"

".hidden ""_dispatch_stub_GetnPixelMapuivARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetnPixelMapuivARB")"\n"
"\t"STUB_ASM_CODE("815")"\n"

".hidden ""_dispatch_stub_GetnPixelMapusvARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetnPixelMapusvARB")"\n"
"\t"STUB_ASM_CODE("816")"\n"

".hidden ""_dispatch_stub_GetnPolygonStippleARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetnPolygonStippleARB")"\n"
"\t"STUB_ASM_CODE("817")"\n"

".hidden ""_dispatch_stub_GetnTexImageARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetnTexImageARB")"\n"
"\t"STUB_ASM_CODE("818")"\n"

".hidden ""_dispatch_stub_GetnUniformdvARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetnUniformdvARB")"\n"
"\t"STUB_ASM_CODE("819")"\n"

".hidden ""_dispatch_stub_GetnUniformfvARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetnUniformfvARB")"\n"
"\t"STUB_ASM_CODE("820")"\n"

".hidden ""_dispatch_stub_GetnUniformivARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetnUniformivARB")"\n"
"\t"STUB_ASM_CODE("821")"\n"

".hidden ""_dispatch_stub_GetnUniformuivARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetnUniformuivARB")"\n"
"\t"STUB_ASM_CODE("822")"\n"

".hidden ""_dispatch_stub_ReadnPixelsARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_ReadnPixelsARB")"\n"
"\t"STUB_ASM_CODE("823")"\n"

".hidden ""_dispatch_stub_DrawArraysInstancedBaseInstance""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawArraysInstancedBaseInstance")"\n"
"\t"STUB_ASM_CODE("824")"\n"

".hidden ""_dispatch_stub_DrawElementsInstancedBaseInstance""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawElementsInstancedBaseInstance")"\n"
"\t"STUB_ASM_CODE("825")"\n"

".hidden ""_dispatch_stub_DrawElementsInstancedBaseVertexBaseInstance""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawElementsInstancedBaseVertexBaseInstance")"\n"
"\t"STUB_ASM_CODE("826")"\n"

".hidden ""_dispatch_stub_DrawTransformFeedbackInstanced""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawTransformFeedbackInstanced")"\n"
"\t"STUB_ASM_CODE("827")"\n"

".hidden ""_dispatch_stub_DrawTransformFeedbackStreamInstanced""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawTransformFeedbackStreamInstanced")"\n"
"\t"STUB_ASM_CODE("828")"\n"

".hidden ""_dispatch_stub_GetInternalformativ""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetInternalformativ")"\n"
"\t"STUB_ASM_CODE("829")"\n"

".hidden ""_dispatch_stub_GetActiveAtomicCounterBufferiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetActiveAtomicCounterBufferiv")"\n"
"\t"STUB_ASM_CODE("830")"\n"

".hidden ""_dispatch_stub_BindImageTexture""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindImageTexture")"\n"
"\t"STUB_ASM_CODE("831")"\n"

".hidden ""_dispatch_stub_MemoryBarrier""\n"
STUB_ASM_ENTRY("_dispatch_stub_MemoryBarrier")"\n"
"\t"STUB_ASM_CODE("832")"\n"

".hidden ""_dispatch_stub_TexStorage1D""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexStorage1D")"\n"
"\t"STUB_ASM_CODE("833")"\n"

".hidden ""_dispatch_stub_TexStorage2D""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexStorage2D")"\n"
"\t"STUB_ASM_CODE("834")"\n"

".hidden ""_dispatch_stub_TexStorage3D""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexStorage3D")"\n"
"\t"STUB_ASM_CODE("835")"\n"

".hidden ""_dispatch_stub_TextureStorage1DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureStorage1DEXT")"\n"
"\t"STUB_ASM_CODE("836")"\n"

".hidden ""_dispatch_stub_TextureStorage2DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureStorage2DEXT")"\n"
"\t"STUB_ASM_CODE("837")"\n"

".hidden ""_dispatch_stub_TextureStorage3DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureStorage3DEXT")"\n"
"\t"STUB_ASM_CODE("838")"\n"

".hidden ""_dispatch_stub_ClearBufferData""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClearBufferData")"\n"
"\t"STUB_ASM_CODE("839")"\n"

".hidden ""_dispatch_stub_ClearBufferSubData""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClearBufferSubData")"\n"
"\t"STUB_ASM_CODE("840")"\n"

".hidden ""_dispatch_stub_DispatchCompute""\n"
STUB_ASM_ENTRY("_dispatch_stub_DispatchCompute")"\n"
"\t"STUB_ASM_CODE("841")"\n"

".hidden ""_dispatch_stub_DispatchComputeIndirect""\n"
STUB_ASM_ENTRY("_dispatch_stub_DispatchComputeIndirect")"\n"
"\t"STUB_ASM_CODE("842")"\n"

".hidden ""_dispatch_stub_CopyImageSubData""\n"
STUB_ASM_ENTRY("_dispatch_stub_CopyImageSubData")"\n"
"\t"STUB_ASM_CODE("843")"\n"

".hidden ""_dispatch_stub_TextureView""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureView")"\n"
"\t"STUB_ASM_CODE("844")"\n"

".hidden ""_dispatch_stub_BindVertexBuffer""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindVertexBuffer")"\n"
"\t"STUB_ASM_CODE("845")"\n"

".hidden ""_dispatch_stub_VertexAttribBinding""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribBinding")"\n"
"\t"STUB_ASM_CODE("846")"\n"

".hidden ""_dispatch_stub_VertexAttribFormat""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribFormat")"\n"
"\t"STUB_ASM_CODE("847")"\n"

".hidden ""_dispatch_stub_VertexAttribIFormat""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribIFormat")"\n"
"\t"STUB_ASM_CODE("848")"\n"

".hidden ""_dispatch_stub_VertexAttribLFormat""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribLFormat")"\n"
"\t"STUB_ASM_CODE("849")"\n"

".hidden ""_dispatch_stub_VertexBindingDivisor""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexBindingDivisor")"\n"
"\t"STUB_ASM_CODE("850")"\n"

".hidden ""_dispatch_stub_FramebufferParameteri""\n"
STUB_ASM_ENTRY("_dispatch_stub_FramebufferParameteri")"\n"
"\t"STUB_ASM_CODE("851")"\n"

".hidden ""_dispatch_stub_GetFramebufferParameteriv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetFramebufferParameteriv")"\n"
"\t"STUB_ASM_CODE("852")"\n"

".hidden ""_dispatch_stub_GetInternalformati64v""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetInternalformati64v")"\n"
"\t"STUB_ASM_CODE("853")"\n"

".hidden ""_dispatch_stub_MultiDrawArraysIndirect""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiDrawArraysIndirect")"\n"
"\t"STUB_ASM_CODE("854")"\n"

".hidden ""_dispatch_stub_MultiDrawElementsIndirect""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiDrawElementsIndirect")"\n"
"\t"STUB_ASM_CODE("855")"\n"

".hidden ""_dispatch_stub_GetProgramInterfaceiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetProgramInterfaceiv")"\n"
"\t"STUB_ASM_CODE("856")"\n"

".hidden ""_dispatch_stub_GetProgramResourceIndex""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetProgramResourceIndex")"\n"
"\t"STUB_ASM_CODE("857")"\n"

".hidden ""_dispatch_stub_GetProgramResourceLocation""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetProgramResourceLocation")"\n"
"\t"STUB_ASM_CODE("858")"\n"

".hidden ""_dispatch_stub_GetProgramResourceLocationIndex""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetProgramResourceLocationIndex")"\n"
"\t"STUB_ASM_CODE("859")"\n"

".hidden ""_dispatch_stub_GetProgramResourceName""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetProgramResourceName")"\n"
"\t"STUB_ASM_CODE("860")"\n"

".hidden ""_dispatch_stub_GetProgramResourceiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetProgramResourceiv")"\n"
"\t"STUB_ASM_CODE("861")"\n"

".hidden ""_dispatch_stub_ShaderStorageBlockBinding""\n"
STUB_ASM_ENTRY("_dispatch_stub_ShaderStorageBlockBinding")"\n"
"\t"STUB_ASM_CODE("862")"\n"

".hidden ""_dispatch_stub_TexBufferRange""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexBufferRange")"\n"
"\t"STUB_ASM_CODE("863")"\n"

".hidden ""_dispatch_stub_TexStorage2DMultisample""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexStorage2DMultisample")"\n"
"\t"STUB_ASM_CODE("864")"\n"

".hidden ""_dispatch_stub_TexStorage3DMultisample""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexStorage3DMultisample")"\n"
"\t"STUB_ASM_CODE("865")"\n"

".hidden ""_dispatch_stub_BufferStorage""\n"
STUB_ASM_ENTRY("_dispatch_stub_BufferStorage")"\n"
"\t"STUB_ASM_CODE("866")"\n"

".hidden ""_dispatch_stub_ClearTexImage""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClearTexImage")"\n"
"\t"STUB_ASM_CODE("867")"\n"

".hidden ""_dispatch_stub_ClearTexSubImage""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClearTexSubImage")"\n"
"\t"STUB_ASM_CODE("868")"\n"

".hidden ""_dispatch_stub_BindBuffersBase""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindBuffersBase")"\n"
"\t"STUB_ASM_CODE("869")"\n"

".hidden ""_dispatch_stub_BindBuffersRange""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindBuffersRange")"\n"
"\t"STUB_ASM_CODE("870")"\n"

".hidden ""_dispatch_stub_BindImageTextures""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindImageTextures")"\n"
"\t"STUB_ASM_CODE("871")"\n"

".hidden ""_dispatch_stub_BindSamplers""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindSamplers")"\n"
"\t"STUB_ASM_CODE("872")"\n"

".hidden ""_dispatch_stub_BindTextures""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindTextures")"\n"
"\t"STUB_ASM_CODE("873")"\n"

".hidden ""_dispatch_stub_BindVertexBuffers""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindVertexBuffers")"\n"
"\t"STUB_ASM_CODE("874")"\n"

".hidden ""_dispatch_stub_GetImageHandleARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetImageHandleARB")"\n"
"\t"STUB_ASM_CODE("875")"\n"

".hidden ""_dispatch_stub_GetTextureHandleARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTextureHandleARB")"\n"
"\t"STUB_ASM_CODE("876")"\n"

".hidden ""_dispatch_stub_GetTextureSamplerHandleARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTextureSamplerHandleARB")"\n"
"\t"STUB_ASM_CODE("877")"\n"

".hidden ""_dispatch_stub_GetVertexAttribLui64vARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetVertexAttribLui64vARB")"\n"
"\t"STUB_ASM_CODE("878")"\n"

".hidden ""_dispatch_stub_IsImageHandleResidentARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_IsImageHandleResidentARB")"\n"
"\t"STUB_ASM_CODE("879")"\n"

".hidden ""_dispatch_stub_IsTextureHandleResidentARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_IsTextureHandleResidentARB")"\n"
"\t"STUB_ASM_CODE("880")"\n"

".hidden ""_dispatch_stub_MakeImageHandleNonResidentARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_MakeImageHandleNonResidentARB")"\n"
"\t"STUB_ASM_CODE("881")"\n"

".hidden ""_dispatch_stub_MakeImageHandleResidentARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_MakeImageHandleResidentARB")"\n"
"\t"STUB_ASM_CODE("882")"\n"

".hidden ""_dispatch_stub_MakeTextureHandleNonResidentARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_MakeTextureHandleNonResidentARB")"\n"
"\t"STUB_ASM_CODE("883")"\n"

".hidden ""_dispatch_stub_MakeTextureHandleResidentARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_MakeTextureHandleResidentARB")"\n"
"\t"STUB_ASM_CODE("884")"\n"

".hidden ""_dispatch_stub_ProgramUniformHandleui64ARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniformHandleui64ARB")"\n"
"\t"STUB_ASM_CODE("885")"\n"

".hidden ""_dispatch_stub_ProgramUniformHandleui64vARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniformHandleui64vARB")"\n"
"\t"STUB_ASM_CODE("886")"\n"

".hidden ""_dispatch_stub_UniformHandleui64ARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_UniformHandleui64ARB")"\n"
"\t"STUB_ASM_CODE("887")"\n"

".hidden ""_dispatch_stub_UniformHandleui64vARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_UniformHandleui64vARB")"\n"
"\t"STUB_ASM_CODE("888")"\n"

".hidden ""_dispatch_stub_VertexAttribL1ui64ARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribL1ui64ARB")"\n"
"\t"STUB_ASM_CODE("889")"\n"

".hidden ""_dispatch_stub_VertexAttribL1ui64vARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribL1ui64vARB")"\n"
"\t"STUB_ASM_CODE("890")"\n"

".hidden ""_dispatch_stub_DispatchComputeGroupSizeARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_DispatchComputeGroupSizeARB")"\n"
"\t"STUB_ASM_CODE("891")"\n"

".hidden ""_dispatch_stub_MultiDrawArraysIndirectCountARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiDrawArraysIndirectCountARB")"\n"
"\t"STUB_ASM_CODE("892")"\n"

".hidden ""_dispatch_stub_MultiDrawElementsIndirectCountARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiDrawElementsIndirectCountARB")"\n"
"\t"STUB_ASM_CODE("893")"\n"

".hidden ""_dispatch_stub_ClipControl""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClipControl")"\n"
"\t"STUB_ASM_CODE("894")"\n"

".hidden ""_dispatch_stub_BindTextureUnit""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindTextureUnit")"\n"
"\t"STUB_ASM_CODE("895")"\n"

".hidden ""_dispatch_stub_BlitNamedFramebuffer""\n"
STUB_ASM_ENTRY("_dispatch_stub_BlitNamedFramebuffer")"\n"
"\t"STUB_ASM_CODE("896")"\n"

".hidden ""_dispatch_stub_CheckNamedFramebufferStatus""\n"
STUB_ASM_ENTRY("_dispatch_stub_CheckNamedFramebufferStatus")"\n"
"\t"STUB_ASM_CODE("897")"\n"

".hidden ""_dispatch_stub_ClearNamedBufferData""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClearNamedBufferData")"\n"
"\t"STUB_ASM_CODE("898")"\n"

".hidden ""_dispatch_stub_ClearNamedBufferSubData""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClearNamedBufferSubData")"\n"
"\t"STUB_ASM_CODE("899")"\n"

".hidden ""_dispatch_stub_ClearNamedFramebufferfi""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClearNamedFramebufferfi")"\n"
"\t"STUB_ASM_CODE("900")"\n"

".hidden ""_dispatch_stub_ClearNamedFramebufferfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClearNamedFramebufferfv")"\n"
"\t"STUB_ASM_CODE("901")"\n"

".hidden ""_dispatch_stub_ClearNamedFramebufferiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClearNamedFramebufferiv")"\n"
"\t"STUB_ASM_CODE("902")"\n"

".hidden ""_dispatch_stub_ClearNamedFramebufferuiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClearNamedFramebufferuiv")"\n"
"\t"STUB_ASM_CODE("903")"\n"

".hidden ""_dispatch_stub_CompressedTextureSubImage1D""\n"
STUB_ASM_ENTRY("_dispatch_stub_CompressedTextureSubImage1D")"\n"
"\t"STUB_ASM_CODE("904")"\n"

".hidden ""_dispatch_stub_CompressedTextureSubImage2D""\n"
STUB_ASM_ENTRY("_dispatch_stub_CompressedTextureSubImage2D")"\n"
"\t"STUB_ASM_CODE("905")"\n"

".hidden ""_dispatch_stub_CompressedTextureSubImage3D""\n"
STUB_ASM_ENTRY("_dispatch_stub_CompressedTextureSubImage3D")"\n"
"\t"STUB_ASM_CODE("906")"\n"

".hidden ""_dispatch_stub_CopyNamedBufferSubData""\n"
STUB_ASM_ENTRY("_dispatch_stub_CopyNamedBufferSubData")"\n"
"\t"STUB_ASM_CODE("907")"\n"

".hidden ""_dispatch_stub_CopyTextureSubImage1D""\n"
STUB_ASM_ENTRY("_dispatch_stub_CopyTextureSubImage1D")"\n"
"\t"STUB_ASM_CODE("908")"\n"

".hidden ""_dispatch_stub_CopyTextureSubImage2D""\n"
STUB_ASM_ENTRY("_dispatch_stub_CopyTextureSubImage2D")"\n"
"\t"STUB_ASM_CODE("909")"\n"

".hidden ""_dispatch_stub_CopyTextureSubImage3D""\n"
STUB_ASM_ENTRY("_dispatch_stub_CopyTextureSubImage3D")"\n"
"\t"STUB_ASM_CODE("910")"\n"

".hidden ""_dispatch_stub_CreateBuffers""\n"
STUB_ASM_ENTRY("_dispatch_stub_CreateBuffers")"\n"
"\t"STUB_ASM_CODE("911")"\n"

".hidden ""_dispatch_stub_CreateFramebuffers""\n"
STUB_ASM_ENTRY("_dispatch_stub_CreateFramebuffers")"\n"
"\t"STUB_ASM_CODE("912")"\n"

".hidden ""_dispatch_stub_CreateProgramPipelines""\n"
STUB_ASM_ENTRY("_dispatch_stub_CreateProgramPipelines")"\n"
"\t"STUB_ASM_CODE("913")"\n"

".hidden ""_dispatch_stub_CreateQueries""\n"
STUB_ASM_ENTRY("_dispatch_stub_CreateQueries")"\n"
"\t"STUB_ASM_CODE("914")"\n"

".hidden ""_dispatch_stub_CreateRenderbuffers""\n"
STUB_ASM_ENTRY("_dispatch_stub_CreateRenderbuffers")"\n"
"\t"STUB_ASM_CODE("915")"\n"

".hidden ""_dispatch_stub_CreateSamplers""\n"
STUB_ASM_ENTRY("_dispatch_stub_CreateSamplers")"\n"
"\t"STUB_ASM_CODE("916")"\n"

".hidden ""_dispatch_stub_CreateTextures""\n"
STUB_ASM_ENTRY("_dispatch_stub_CreateTextures")"\n"
"\t"STUB_ASM_CODE("917")"\n"

".hidden ""_dispatch_stub_CreateTransformFeedbacks""\n"
STUB_ASM_ENTRY("_dispatch_stub_CreateTransformFeedbacks")"\n"
"\t"STUB_ASM_CODE("918")"\n"

".hidden ""_dispatch_stub_CreateVertexArrays""\n"
STUB_ASM_ENTRY("_dispatch_stub_CreateVertexArrays")"\n"
"\t"STUB_ASM_CODE("919")"\n"

".hidden ""_dispatch_stub_DisableVertexArrayAttrib""\n"
STUB_ASM_ENTRY("_dispatch_stub_DisableVertexArrayAttrib")"\n"
"\t"STUB_ASM_CODE("920")"\n"

".hidden ""_dispatch_stub_EnableVertexArrayAttrib""\n"
STUB_ASM_ENTRY("_dispatch_stub_EnableVertexArrayAttrib")"\n"
"\t"STUB_ASM_CODE("921")"\n"

".hidden ""_dispatch_stub_FlushMappedNamedBufferRange""\n"
STUB_ASM_ENTRY("_dispatch_stub_FlushMappedNamedBufferRange")"\n"
"\t"STUB_ASM_CODE("922")"\n"

".hidden ""_dispatch_stub_GenerateTextureMipmap""\n"
STUB_ASM_ENTRY("_dispatch_stub_GenerateTextureMipmap")"\n"
"\t"STUB_ASM_CODE("923")"\n"

".hidden ""_dispatch_stub_GetCompressedTextureImage""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetCompressedTextureImage")"\n"
"\t"STUB_ASM_CODE("924")"\n"

".hidden ""_dispatch_stub_GetNamedBufferParameteri64v""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetNamedBufferParameteri64v")"\n"
"\t"STUB_ASM_CODE("925")"\n"

".hidden ""_dispatch_stub_GetNamedBufferParameteriv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetNamedBufferParameteriv")"\n"
"\t"STUB_ASM_CODE("926")"\n"

".hidden ""_dispatch_stub_GetNamedBufferPointerv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetNamedBufferPointerv")"\n"
"\t"STUB_ASM_CODE("927")"\n"

".hidden ""_dispatch_stub_GetNamedBufferSubData""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetNamedBufferSubData")"\n"
"\t"STUB_ASM_CODE("928")"\n"

".hidden ""_dispatch_stub_GetNamedFramebufferAttachmentParameteriv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetNamedFramebufferAttachmentParameteriv")"\n"
"\t"STUB_ASM_CODE("929")"\n"

".hidden ""_dispatch_stub_GetNamedFramebufferParameteriv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetNamedFramebufferParameteriv")"\n"
"\t"STUB_ASM_CODE("930")"\n"

".hidden ""_dispatch_stub_GetNamedRenderbufferParameteriv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetNamedRenderbufferParameteriv")"\n"
"\t"STUB_ASM_CODE("931")"\n"

".hidden ""_dispatch_stub_GetQueryBufferObjecti64v""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetQueryBufferObjecti64v")"\n"
"\t"STUB_ASM_CODE("932")"\n"

".hidden ""_dispatch_stub_GetQueryBufferObjectiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetQueryBufferObjectiv")"\n"
"\t"STUB_ASM_CODE("933")"\n"

".hidden ""_dispatch_stub_GetQueryBufferObjectui64v""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetQueryBufferObjectui64v")"\n"
"\t"STUB_ASM_CODE("934")"\n"

".hidden ""_dispatch_stub_GetQueryBufferObjectuiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetQueryBufferObjectuiv")"\n"
"\t"STUB_ASM_CODE("935")"\n"

".hidden ""_dispatch_stub_GetTextureImage""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTextureImage")"\n"
"\t"STUB_ASM_CODE("936")"\n"

".hidden ""_dispatch_stub_GetTextureLevelParameterfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTextureLevelParameterfv")"\n"
"\t"STUB_ASM_CODE("937")"\n"

".hidden ""_dispatch_stub_GetTextureLevelParameteriv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTextureLevelParameteriv")"\n"
"\t"STUB_ASM_CODE("938")"\n"

".hidden ""_dispatch_stub_GetTextureParameterIiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTextureParameterIiv")"\n"
"\t"STUB_ASM_CODE("939")"\n"

".hidden ""_dispatch_stub_GetTextureParameterIuiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTextureParameterIuiv")"\n"
"\t"STUB_ASM_CODE("940")"\n"

".hidden ""_dispatch_stub_GetTextureParameterfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTextureParameterfv")"\n"
"\t"STUB_ASM_CODE("941")"\n"

".hidden ""_dispatch_stub_GetTextureParameteriv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTextureParameteriv")"\n"
"\t"STUB_ASM_CODE("942")"\n"

".hidden ""_dispatch_stub_GetTransformFeedbacki64_v""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTransformFeedbacki64_v")"\n"
"\t"STUB_ASM_CODE("943")"\n"

".hidden ""_dispatch_stub_GetTransformFeedbacki_v""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTransformFeedbacki_v")"\n"
"\t"STUB_ASM_CODE("944")"\n"

".hidden ""_dispatch_stub_GetTransformFeedbackiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTransformFeedbackiv")"\n"
"\t"STUB_ASM_CODE("945")"\n"

".hidden ""_dispatch_stub_GetVertexArrayIndexed64iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetVertexArrayIndexed64iv")"\n"
"\t"STUB_ASM_CODE("946")"\n"

".hidden ""_dispatch_stub_GetVertexArrayIndexediv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetVertexArrayIndexediv")"\n"
"\t"STUB_ASM_CODE("947")"\n"

".hidden ""_dispatch_stub_GetVertexArrayiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetVertexArrayiv")"\n"
"\t"STUB_ASM_CODE("948")"\n"

".hidden ""_dispatch_stub_InvalidateNamedFramebufferData""\n"
STUB_ASM_ENTRY("_dispatch_stub_InvalidateNamedFramebufferData")"\n"
"\t"STUB_ASM_CODE("949")"\n"

".hidden ""_dispatch_stub_InvalidateNamedFramebufferSubData""\n"
STUB_ASM_ENTRY("_dispatch_stub_InvalidateNamedFramebufferSubData")"\n"
"\t"STUB_ASM_CODE("950")"\n"

".hidden ""_dispatch_stub_MapNamedBuffer""\n"
STUB_ASM_ENTRY("_dispatch_stub_MapNamedBuffer")"\n"
"\t"STUB_ASM_CODE("951")"\n"

".hidden ""_dispatch_stub_MapNamedBufferRange""\n"
STUB_ASM_ENTRY("_dispatch_stub_MapNamedBufferRange")"\n"
"\t"STUB_ASM_CODE("952")"\n"

".hidden ""_dispatch_stub_NamedBufferData""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedBufferData")"\n"
"\t"STUB_ASM_CODE("953")"\n"

".hidden ""_dispatch_stub_NamedBufferStorage""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedBufferStorage")"\n"
"\t"STUB_ASM_CODE("954")"\n"

".hidden ""_dispatch_stub_NamedBufferSubData""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedBufferSubData")"\n"
"\t"STUB_ASM_CODE("955")"\n"

".hidden ""_dispatch_stub_NamedFramebufferDrawBuffer""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedFramebufferDrawBuffer")"\n"
"\t"STUB_ASM_CODE("956")"\n"

".hidden ""_dispatch_stub_NamedFramebufferDrawBuffers""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedFramebufferDrawBuffers")"\n"
"\t"STUB_ASM_CODE("957")"\n"

".hidden ""_dispatch_stub_NamedFramebufferParameteri""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedFramebufferParameteri")"\n"
"\t"STUB_ASM_CODE("958")"\n"

".hidden ""_dispatch_stub_NamedFramebufferReadBuffer""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedFramebufferReadBuffer")"\n"
"\t"STUB_ASM_CODE("959")"\n"

".hidden ""_dispatch_stub_NamedFramebufferRenderbuffer""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedFramebufferRenderbuffer")"\n"
"\t"STUB_ASM_CODE("960")"\n"

".hidden ""_dispatch_stub_NamedFramebufferTexture""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedFramebufferTexture")"\n"
"\t"STUB_ASM_CODE("961")"\n"

".hidden ""_dispatch_stub_NamedFramebufferTextureLayer""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedFramebufferTextureLayer")"\n"
"\t"STUB_ASM_CODE("962")"\n"

".hidden ""_dispatch_stub_NamedRenderbufferStorage""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedRenderbufferStorage")"\n"
"\t"STUB_ASM_CODE("963")"\n"

".hidden ""_dispatch_stub_NamedRenderbufferStorageMultisample""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedRenderbufferStorageMultisample")"\n"
"\t"STUB_ASM_CODE("964")"\n"

".hidden ""_dispatch_stub_TextureBuffer""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureBuffer")"\n"
"\t"STUB_ASM_CODE("965")"\n"

".hidden ""_dispatch_stub_TextureBufferRange""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureBufferRange")"\n"
"\t"STUB_ASM_CODE("966")"\n"

".hidden ""_dispatch_stub_TextureParameterIiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureParameterIiv")"\n"
"\t"STUB_ASM_CODE("967")"\n"

".hidden ""_dispatch_stub_TextureParameterIuiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureParameterIuiv")"\n"
"\t"STUB_ASM_CODE("968")"\n"

".hidden ""_dispatch_stub_TextureParameterf""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureParameterf")"\n"
"\t"STUB_ASM_CODE("969")"\n"

".hidden ""_dispatch_stub_TextureParameterfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureParameterfv")"\n"
"\t"STUB_ASM_CODE("970")"\n"

".hidden ""_dispatch_stub_TextureParameteri""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureParameteri")"\n"
"\t"STUB_ASM_CODE("971")"\n"

".hidden ""_dispatch_stub_TextureParameteriv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureParameteriv")"\n"
"\t"STUB_ASM_CODE("972")"\n"

".hidden ""_dispatch_stub_TextureStorage1D""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureStorage1D")"\n"
"\t"STUB_ASM_CODE("973")"\n"

".hidden ""_dispatch_stub_TextureStorage2D""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureStorage2D")"\n"
"\t"STUB_ASM_CODE("974")"\n"

".hidden ""_dispatch_stub_TextureStorage2DMultisample""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureStorage2DMultisample")"\n"
"\t"STUB_ASM_CODE("975")"\n"

".hidden ""_dispatch_stub_TextureStorage3D""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureStorage3D")"\n"
"\t"STUB_ASM_CODE("976")"\n"

".hidden ""_dispatch_stub_TextureStorage3DMultisample""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureStorage3DMultisample")"\n"
"\t"STUB_ASM_CODE("977")"\n"

".hidden ""_dispatch_stub_TextureSubImage1D""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureSubImage1D")"\n"
"\t"STUB_ASM_CODE("978")"\n"

".hidden ""_dispatch_stub_TextureSubImage2D""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureSubImage2D")"\n"
"\t"STUB_ASM_CODE("979")"\n"

".hidden ""_dispatch_stub_TextureSubImage3D""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureSubImage3D")"\n"
"\t"STUB_ASM_CODE("980")"\n"

".hidden ""_dispatch_stub_TransformFeedbackBufferBase""\n"
STUB_ASM_ENTRY("_dispatch_stub_TransformFeedbackBufferBase")"\n"
"\t"STUB_ASM_CODE("981")"\n"

".hidden ""_dispatch_stub_TransformFeedbackBufferRange""\n"
STUB_ASM_ENTRY("_dispatch_stub_TransformFeedbackBufferRange")"\n"
"\t"STUB_ASM_CODE("982")"\n"

".hidden ""_dispatch_stub_UnmapNamedBufferEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_UnmapNamedBufferEXT")"\n"
"\t"STUB_ASM_CODE("983")"\n"

".hidden ""_dispatch_stub_VertexArrayAttribBinding""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexArrayAttribBinding")"\n"
"\t"STUB_ASM_CODE("984")"\n"

".hidden ""_dispatch_stub_VertexArrayAttribFormat""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexArrayAttribFormat")"\n"
"\t"STUB_ASM_CODE("985")"\n"

".hidden ""_dispatch_stub_VertexArrayAttribIFormat""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexArrayAttribIFormat")"\n"
"\t"STUB_ASM_CODE("986")"\n"

".hidden ""_dispatch_stub_VertexArrayAttribLFormat""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexArrayAttribLFormat")"\n"
"\t"STUB_ASM_CODE("987")"\n"

".hidden ""_dispatch_stub_VertexArrayBindingDivisor""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexArrayBindingDivisor")"\n"
"\t"STUB_ASM_CODE("988")"\n"

".hidden ""_dispatch_stub_VertexArrayElementBuffer""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexArrayElementBuffer")"\n"
"\t"STUB_ASM_CODE("989")"\n"

".hidden ""_dispatch_stub_VertexArrayVertexBuffer""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexArrayVertexBuffer")"\n"
"\t"STUB_ASM_CODE("990")"\n"

".hidden ""_dispatch_stub_VertexArrayVertexBuffers""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexArrayVertexBuffers")"\n"
"\t"STUB_ASM_CODE("991")"\n"

".hidden ""_dispatch_stub_GetCompressedTextureSubImage""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetCompressedTextureSubImage")"\n"
"\t"STUB_ASM_CODE("992")"\n"

".hidden ""_dispatch_stub_GetTextureSubImage""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTextureSubImage")"\n"
"\t"STUB_ASM_CODE("993")"\n"

".hidden ""_dispatch_stub_BufferPageCommitmentARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_BufferPageCommitmentARB")"\n"
"\t"STUB_ASM_CODE("994")"\n"

".hidden ""_dispatch_stub_NamedBufferPageCommitmentARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedBufferPageCommitmentARB")"\n"
"\t"STUB_ASM_CODE("995")"\n"

".hidden ""_dispatch_stub_GetUniformi64vARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetUniformi64vARB")"\n"
"\t"STUB_ASM_CODE("996")"\n"

".hidden ""_dispatch_stub_GetUniformui64vARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetUniformui64vARB")"\n"
"\t"STUB_ASM_CODE("997")"\n"

".hidden ""_dispatch_stub_GetnUniformi64vARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetnUniformi64vARB")"\n"
"\t"STUB_ASM_CODE("998")"\n"

".hidden ""_dispatch_stub_GetnUniformui64vARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetnUniformui64vARB")"\n"
"\t"STUB_ASM_CODE("999")"\n"

".hidden ""_dispatch_stub_ProgramUniform1i64ARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform1i64ARB")"\n"
"\t"STUB_ASM_CODE("1000")"\n"

".hidden ""_dispatch_stub_ProgramUniform1i64vARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform1i64vARB")"\n"
"\t"STUB_ASM_CODE("1001")"\n"

".hidden ""_dispatch_stub_ProgramUniform1ui64ARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform1ui64ARB")"\n"
"\t"STUB_ASM_CODE("1002")"\n"

".hidden ""_dispatch_stub_ProgramUniform1ui64vARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform1ui64vARB")"\n"
"\t"STUB_ASM_CODE("1003")"\n"

".hidden ""_dispatch_stub_ProgramUniform2i64ARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform2i64ARB")"\n"
"\t"STUB_ASM_CODE("1004")"\n"

".hidden ""_dispatch_stub_ProgramUniform2i64vARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform2i64vARB")"\n"
"\t"STUB_ASM_CODE("1005")"\n"

".hidden ""_dispatch_stub_ProgramUniform2ui64ARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform2ui64ARB")"\n"
"\t"STUB_ASM_CODE("1006")"\n"

".hidden ""_dispatch_stub_ProgramUniform2ui64vARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform2ui64vARB")"\n"
"\t"STUB_ASM_CODE("1007")"\n"

".hidden ""_dispatch_stub_ProgramUniform3i64ARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform3i64ARB")"\n"
"\t"STUB_ASM_CODE("1008")"\n"

".hidden ""_dispatch_stub_ProgramUniform3i64vARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform3i64vARB")"\n"
"\t"STUB_ASM_CODE("1009")"\n"

".hidden ""_dispatch_stub_ProgramUniform3ui64ARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform3ui64ARB")"\n"
"\t"STUB_ASM_CODE("1010")"\n"

".hidden ""_dispatch_stub_ProgramUniform3ui64vARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform3ui64vARB")"\n"
"\t"STUB_ASM_CODE("1011")"\n"

".hidden ""_dispatch_stub_ProgramUniform4i64ARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform4i64ARB")"\n"
"\t"STUB_ASM_CODE("1012")"\n"

".hidden ""_dispatch_stub_ProgramUniform4i64vARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform4i64vARB")"\n"
"\t"STUB_ASM_CODE("1013")"\n"

".hidden ""_dispatch_stub_ProgramUniform4ui64ARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform4ui64ARB")"\n"
"\t"STUB_ASM_CODE("1014")"\n"

".hidden ""_dispatch_stub_ProgramUniform4ui64vARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform4ui64vARB")"\n"
"\t"STUB_ASM_CODE("1015")"\n"

".hidden ""_dispatch_stub_Uniform1i64ARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform1i64ARB")"\n"
"\t"STUB_ASM_CODE("1016")"\n"

".hidden ""_dispatch_stub_Uniform1i64vARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform1i64vARB")"\n"
"\t"STUB_ASM_CODE("1017")"\n"

".hidden ""_dispatch_stub_Uniform1ui64ARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform1ui64ARB")"\n"
"\t"STUB_ASM_CODE("1018")"\n"

".hidden ""_dispatch_stub_Uniform1ui64vARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform1ui64vARB")"\n"
"\t"STUB_ASM_CODE("1019")"\n"

".hidden ""_dispatch_stub_Uniform2i64ARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform2i64ARB")"\n"
"\t"STUB_ASM_CODE("1020")"\n"

".hidden ""_dispatch_stub_Uniform2i64vARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform2i64vARB")"\n"
"\t"STUB_ASM_CODE("1021")"\n"

".hidden ""_dispatch_stub_Uniform2ui64ARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform2ui64ARB")"\n"
"\t"STUB_ASM_CODE("1022")"\n"

".hidden ""_dispatch_stub_Uniform2ui64vARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform2ui64vARB")"\n"
"\t"STUB_ASM_CODE("1023")"\n"

".hidden ""_dispatch_stub_Uniform3i64ARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform3i64ARB")"\n"
"\t"STUB_ASM_CODE("1024")"\n"

".hidden ""_dispatch_stub_Uniform3i64vARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform3i64vARB")"\n"
"\t"STUB_ASM_CODE("1025")"\n"

".hidden ""_dispatch_stub_Uniform3ui64ARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform3ui64ARB")"\n"
"\t"STUB_ASM_CODE("1026")"\n"

".hidden ""_dispatch_stub_Uniform3ui64vARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform3ui64vARB")"\n"
"\t"STUB_ASM_CODE("1027")"\n"

".hidden ""_dispatch_stub_Uniform4i64ARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform4i64ARB")"\n"
"\t"STUB_ASM_CODE("1028")"\n"

".hidden ""_dispatch_stub_Uniform4i64vARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform4i64vARB")"\n"
"\t"STUB_ASM_CODE("1029")"\n"

".hidden ""_dispatch_stub_Uniform4ui64ARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform4ui64ARB")"\n"
"\t"STUB_ASM_CODE("1030")"\n"

".hidden ""_dispatch_stub_Uniform4ui64vARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_Uniform4ui64vARB")"\n"
"\t"STUB_ASM_CODE("1031")"\n"

".hidden ""_dispatch_stub_EvaluateDepthValuesARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_EvaluateDepthValuesARB")"\n"
"\t"STUB_ASM_CODE("1032")"\n"

".hidden ""_dispatch_stub_FramebufferSampleLocationsfvARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_FramebufferSampleLocationsfvARB")"\n"
"\t"STUB_ASM_CODE("1033")"\n"

".hidden ""_dispatch_stub_NamedFramebufferSampleLocationsfvARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedFramebufferSampleLocationsfvARB")"\n"
"\t"STUB_ASM_CODE("1034")"\n"

".hidden ""_dispatch_stub_SpecializeShaderARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_SpecializeShaderARB")"\n"
"\t"STUB_ASM_CODE("1035")"\n"

".hidden ""_dispatch_stub_InvalidateBufferData""\n"
STUB_ASM_ENTRY("_dispatch_stub_InvalidateBufferData")"\n"
"\t"STUB_ASM_CODE("1036")"\n"

".hidden ""_dispatch_stub_InvalidateBufferSubData""\n"
STUB_ASM_ENTRY("_dispatch_stub_InvalidateBufferSubData")"\n"
"\t"STUB_ASM_CODE("1037")"\n"

".hidden ""_dispatch_stub_InvalidateFramebuffer""\n"
STUB_ASM_ENTRY("_dispatch_stub_InvalidateFramebuffer")"\n"
"\t"STUB_ASM_CODE("1038")"\n"

".hidden ""_dispatch_stub_InvalidateSubFramebuffer""\n"
STUB_ASM_ENTRY("_dispatch_stub_InvalidateSubFramebuffer")"\n"
"\t"STUB_ASM_CODE("1039")"\n"

".hidden ""_dispatch_stub_InvalidateTexImage""\n"
STUB_ASM_ENTRY("_dispatch_stub_InvalidateTexImage")"\n"
"\t"STUB_ASM_CODE("1040")"\n"

".hidden ""_dispatch_stub_InvalidateTexSubImage""\n"
STUB_ASM_ENTRY("_dispatch_stub_InvalidateTexSubImage")"\n"
"\t"STUB_ASM_CODE("1041")"\n"

".hidden ""_dispatch_stub_DrawTexfOES""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawTexfOES")"\n"
"\t"STUB_ASM_CODE("1042")"\n"

".hidden ""_dispatch_stub_DrawTexfvOES""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawTexfvOES")"\n"
"\t"STUB_ASM_CODE("1043")"\n"

".hidden ""_dispatch_stub_DrawTexiOES""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawTexiOES")"\n"
"\t"STUB_ASM_CODE("1044")"\n"

".hidden ""_dispatch_stub_DrawTexivOES""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawTexivOES")"\n"
"\t"STUB_ASM_CODE("1045")"\n"

".hidden ""_dispatch_stub_DrawTexsOES""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawTexsOES")"\n"
"\t"STUB_ASM_CODE("1046")"\n"

".hidden ""_dispatch_stub_DrawTexsvOES""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawTexsvOES")"\n"
"\t"STUB_ASM_CODE("1047")"\n"

".hidden ""_dispatch_stub_DrawTexxOES""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawTexxOES")"\n"
"\t"STUB_ASM_CODE("1048")"\n"

".hidden ""_dispatch_stub_DrawTexxvOES""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawTexxvOES")"\n"
"\t"STUB_ASM_CODE("1049")"\n"

".hidden ""_dispatch_stub_PointSizePointerOES""\n"
STUB_ASM_ENTRY("_dispatch_stub_PointSizePointerOES")"\n"
"\t"STUB_ASM_CODE("1050")"\n"

".hidden ""_dispatch_stub_QueryMatrixxOES""\n"
STUB_ASM_ENTRY("_dispatch_stub_QueryMatrixxOES")"\n"
"\t"STUB_ASM_CODE("1051")"\n"

".hidden ""_dispatch_stub_ColorPointerEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_ColorPointerEXT")"\n"
"\t"STUB_ASM_CODE("1052")"\n"

".hidden ""_dispatch_stub_EdgeFlagPointerEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_EdgeFlagPointerEXT")"\n"
"\t"STUB_ASM_CODE("1053")"\n"

".hidden ""_dispatch_stub_IndexPointerEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_IndexPointerEXT")"\n"
"\t"STUB_ASM_CODE("1054")"\n"

".hidden ""_dispatch_stub_NormalPointerEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_NormalPointerEXT")"\n"
"\t"STUB_ASM_CODE("1055")"\n"

".hidden ""_dispatch_stub_TexCoordPointerEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoordPointerEXT")"\n"
"\t"STUB_ASM_CODE("1056")"\n"

".hidden ""_dispatch_stub_VertexPointerEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexPointerEXT")"\n"
"\t"STUB_ASM_CODE("1057")"\n"

".hidden ""_dispatch_stub_DiscardFramebufferEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_DiscardFramebufferEXT")"\n"
"\t"STUB_ASM_CODE("1058")"\n"

".hidden ""_dispatch_stub_ActiveShaderProgram""\n"
STUB_ASM_ENTRY("_dispatch_stub_ActiveShaderProgram")"\n"
"\t"STUB_ASM_CODE("1059")"\n"

".hidden ""_dispatch_stub_BindProgramPipeline""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindProgramPipeline")"\n"
"\t"STUB_ASM_CODE("1060")"\n"

".hidden ""_dispatch_stub_CreateShaderProgramv""\n"
STUB_ASM_ENTRY("_dispatch_stub_CreateShaderProgramv")"\n"
"\t"STUB_ASM_CODE("1061")"\n"

".hidden ""_dispatch_stub_DeleteProgramPipelines""\n"
STUB_ASM_ENTRY("_dispatch_stub_DeleteProgramPipelines")"\n"
"\t"STUB_ASM_CODE("1062")"\n"

".hidden ""_dispatch_stub_GenProgramPipelines""\n"
STUB_ASM_ENTRY("_dispatch_stub_GenProgramPipelines")"\n"
"\t"STUB_ASM_CODE("1063")"\n"

".hidden ""_dispatch_stub_GetProgramPipelineInfoLog""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetProgramPipelineInfoLog")"\n"
"\t"STUB_ASM_CODE("1064")"\n"

".hidden ""_dispatch_stub_GetProgramPipelineiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetProgramPipelineiv")"\n"
"\t"STUB_ASM_CODE("1065")"\n"

".hidden ""_dispatch_stub_IsProgramPipeline""\n"
STUB_ASM_ENTRY("_dispatch_stub_IsProgramPipeline")"\n"
"\t"STUB_ASM_CODE("1066")"\n"

".hidden ""_dispatch_stub_LockArraysEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_LockArraysEXT")"\n"
"\t"STUB_ASM_CODE("1067")"\n"

".hidden ""_dispatch_stub_ProgramUniform1d""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform1d")"\n"
"\t"STUB_ASM_CODE("1068")"\n"

".hidden ""_dispatch_stub_ProgramUniform1dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform1dv")"\n"
"\t"STUB_ASM_CODE("1069")"\n"

".hidden ""_dispatch_stub_ProgramUniform1f""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform1f")"\n"
"\t"STUB_ASM_CODE("1070")"\n"

".hidden ""_dispatch_stub_ProgramUniform1fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform1fv")"\n"
"\t"STUB_ASM_CODE("1071")"\n"

".hidden ""_dispatch_stub_ProgramUniform1i""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform1i")"\n"
"\t"STUB_ASM_CODE("1072")"\n"

".hidden ""_dispatch_stub_ProgramUniform1iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform1iv")"\n"
"\t"STUB_ASM_CODE("1073")"\n"

".hidden ""_dispatch_stub_ProgramUniform1ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform1ui")"\n"
"\t"STUB_ASM_CODE("1074")"\n"

".hidden ""_dispatch_stub_ProgramUniform1uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform1uiv")"\n"
"\t"STUB_ASM_CODE("1075")"\n"

".hidden ""_dispatch_stub_ProgramUniform2d""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform2d")"\n"
"\t"STUB_ASM_CODE("1076")"\n"

".hidden ""_dispatch_stub_ProgramUniform2dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform2dv")"\n"
"\t"STUB_ASM_CODE("1077")"\n"

".hidden ""_dispatch_stub_ProgramUniform2f""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform2f")"\n"
"\t"STUB_ASM_CODE("1078")"\n"

".hidden ""_dispatch_stub_ProgramUniform2fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform2fv")"\n"
"\t"STUB_ASM_CODE("1079")"\n"

".hidden ""_dispatch_stub_ProgramUniform2i""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform2i")"\n"
"\t"STUB_ASM_CODE("1080")"\n"

".hidden ""_dispatch_stub_ProgramUniform2iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform2iv")"\n"
"\t"STUB_ASM_CODE("1081")"\n"

".hidden ""_dispatch_stub_ProgramUniform2ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform2ui")"\n"
"\t"STUB_ASM_CODE("1082")"\n"

".hidden ""_dispatch_stub_ProgramUniform2uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform2uiv")"\n"
"\t"STUB_ASM_CODE("1083")"\n"

".hidden ""_dispatch_stub_ProgramUniform3d""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform3d")"\n"
"\t"STUB_ASM_CODE("1084")"\n"

".hidden ""_dispatch_stub_ProgramUniform3dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform3dv")"\n"
"\t"STUB_ASM_CODE("1085")"\n"

".hidden ""_dispatch_stub_ProgramUniform3f""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform3f")"\n"
"\t"STUB_ASM_CODE("1086")"\n"

".hidden ""_dispatch_stub_ProgramUniform3fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform3fv")"\n"
"\t"STUB_ASM_CODE("1087")"\n"

".hidden ""_dispatch_stub_ProgramUniform3i""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform3i")"\n"
"\t"STUB_ASM_CODE("1088")"\n"

".hidden ""_dispatch_stub_ProgramUniform3iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform3iv")"\n"
"\t"STUB_ASM_CODE("1089")"\n"

".hidden ""_dispatch_stub_ProgramUniform3ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform3ui")"\n"
"\t"STUB_ASM_CODE("1090")"\n"

".hidden ""_dispatch_stub_ProgramUniform3uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform3uiv")"\n"
"\t"STUB_ASM_CODE("1091")"\n"

".hidden ""_dispatch_stub_ProgramUniform4d""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform4d")"\n"
"\t"STUB_ASM_CODE("1092")"\n"

".hidden ""_dispatch_stub_ProgramUniform4dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform4dv")"\n"
"\t"STUB_ASM_CODE("1093")"\n"

".hidden ""_dispatch_stub_ProgramUniform4f""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform4f")"\n"
"\t"STUB_ASM_CODE("1094")"\n"

".hidden ""_dispatch_stub_ProgramUniform4fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform4fv")"\n"
"\t"STUB_ASM_CODE("1095")"\n"

".hidden ""_dispatch_stub_ProgramUniform4i""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform4i")"\n"
"\t"STUB_ASM_CODE("1096")"\n"

".hidden ""_dispatch_stub_ProgramUniform4iv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform4iv")"\n"
"\t"STUB_ASM_CODE("1097")"\n"

".hidden ""_dispatch_stub_ProgramUniform4ui""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform4ui")"\n"
"\t"STUB_ASM_CODE("1098")"\n"

".hidden ""_dispatch_stub_ProgramUniform4uiv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniform4uiv")"\n"
"\t"STUB_ASM_CODE("1099")"\n"

".hidden ""_dispatch_stub_ProgramUniformMatrix2dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniformMatrix2dv")"\n"
"\t"STUB_ASM_CODE("1100")"\n"

".hidden ""_dispatch_stub_ProgramUniformMatrix2fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniformMatrix2fv")"\n"
"\t"STUB_ASM_CODE("1101")"\n"

".hidden ""_dispatch_stub_ProgramUniformMatrix2x3dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniformMatrix2x3dv")"\n"
"\t"STUB_ASM_CODE("1102")"\n"

".hidden ""_dispatch_stub_ProgramUniformMatrix2x3fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniformMatrix2x3fv")"\n"
"\t"STUB_ASM_CODE("1103")"\n"

".hidden ""_dispatch_stub_ProgramUniformMatrix2x4dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniformMatrix2x4dv")"\n"
"\t"STUB_ASM_CODE("1104")"\n"

".hidden ""_dispatch_stub_ProgramUniformMatrix2x4fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniformMatrix2x4fv")"\n"
"\t"STUB_ASM_CODE("1105")"\n"

".hidden ""_dispatch_stub_ProgramUniformMatrix3dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniformMatrix3dv")"\n"
"\t"STUB_ASM_CODE("1106")"\n"

".hidden ""_dispatch_stub_ProgramUniformMatrix3fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniformMatrix3fv")"\n"
"\t"STUB_ASM_CODE("1107")"\n"

".hidden ""_dispatch_stub_ProgramUniformMatrix3x2dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniformMatrix3x2dv")"\n"
"\t"STUB_ASM_CODE("1108")"\n"

".hidden ""_dispatch_stub_ProgramUniformMatrix3x2fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniformMatrix3x2fv")"\n"
"\t"STUB_ASM_CODE("1109")"\n"

".hidden ""_dispatch_stub_ProgramUniformMatrix3x4dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniformMatrix3x4dv")"\n"
"\t"STUB_ASM_CODE("1110")"\n"

".hidden ""_dispatch_stub_ProgramUniformMatrix3x4fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniformMatrix3x4fv")"\n"
"\t"STUB_ASM_CODE("1111")"\n"

".hidden ""_dispatch_stub_ProgramUniformMatrix4dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniformMatrix4dv")"\n"
"\t"STUB_ASM_CODE("1112")"\n"

".hidden ""_dispatch_stub_ProgramUniformMatrix4fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniformMatrix4fv")"\n"
"\t"STUB_ASM_CODE("1113")"\n"

".hidden ""_dispatch_stub_ProgramUniformMatrix4x2dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniformMatrix4x2dv")"\n"
"\t"STUB_ASM_CODE("1114")"\n"

".hidden ""_dispatch_stub_ProgramUniformMatrix4x2fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniformMatrix4x2fv")"\n"
"\t"STUB_ASM_CODE("1115")"\n"

".hidden ""_dispatch_stub_ProgramUniformMatrix4x3dv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniformMatrix4x3dv")"\n"
"\t"STUB_ASM_CODE("1116")"\n"

".hidden ""_dispatch_stub_ProgramUniformMatrix4x3fv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramUniformMatrix4x3fv")"\n"
"\t"STUB_ASM_CODE("1117")"\n"

".hidden ""_dispatch_stub_UnlockArraysEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_UnlockArraysEXT")"\n"
"\t"STUB_ASM_CODE("1118")"\n"

".hidden ""_dispatch_stub_UseProgramStages""\n"
STUB_ASM_ENTRY("_dispatch_stub_UseProgramStages")"\n"
"\t"STUB_ASM_CODE("1119")"\n"

".hidden ""_dispatch_stub_ValidateProgramPipeline""\n"
STUB_ASM_ENTRY("_dispatch_stub_ValidateProgramPipeline")"\n"
"\t"STUB_ASM_CODE("1120")"\n"

".hidden ""_dispatch_stub_FramebufferTexture2DMultisampleEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_FramebufferTexture2DMultisampleEXT")"\n"
"\t"STUB_ASM_CODE("1121")"\n"

".hidden ""_dispatch_stub_DebugMessageCallback""\n"
STUB_ASM_ENTRY("_dispatch_stub_DebugMessageCallback")"\n"
"\t"STUB_ASM_CODE("1122")"\n"

".hidden ""_dispatch_stub_DebugMessageControl""\n"
STUB_ASM_ENTRY("_dispatch_stub_DebugMessageControl")"\n"
"\t"STUB_ASM_CODE("1123")"\n"

".hidden ""_dispatch_stub_DebugMessageInsert""\n"
STUB_ASM_ENTRY("_dispatch_stub_DebugMessageInsert")"\n"
"\t"STUB_ASM_CODE("1124")"\n"

".hidden ""_dispatch_stub_GetDebugMessageLog""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetDebugMessageLog")"\n"
"\t"STUB_ASM_CODE("1125")"\n"

".hidden ""_dispatch_stub_GetObjectLabel""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetObjectLabel")"\n"
"\t"STUB_ASM_CODE("1126")"\n"

".hidden ""_dispatch_stub_GetObjectPtrLabel""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetObjectPtrLabel")"\n"
"\t"STUB_ASM_CODE("1127")"\n"

".hidden ""_dispatch_stub_ObjectLabel""\n"
STUB_ASM_ENTRY("_dispatch_stub_ObjectLabel")"\n"
"\t"STUB_ASM_CODE("1128")"\n"

".hidden ""_dispatch_stub_ObjectPtrLabel""\n"
STUB_ASM_ENTRY("_dispatch_stub_ObjectPtrLabel")"\n"
"\t"STUB_ASM_CODE("1129")"\n"

".hidden ""_dispatch_stub_PopDebugGroup""\n"
STUB_ASM_ENTRY("_dispatch_stub_PopDebugGroup")"\n"
"\t"STUB_ASM_CODE("1130")"\n"

".hidden ""_dispatch_stub_PushDebugGroup""\n"
STUB_ASM_ENTRY("_dispatch_stub_PushDebugGroup")"\n"
"\t"STUB_ASM_CODE("1131")"\n"

".hidden ""_dispatch_stub_SecondaryColor3fEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_SecondaryColor3fEXT")"\n"
"\t"STUB_ASM_CODE("1132")"\n"

".hidden ""_dispatch_stub_SecondaryColor3fvEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_SecondaryColor3fvEXT")"\n"
"\t"STUB_ASM_CODE("1133")"\n"

".hidden ""_dispatch_stub_MultiDrawElements""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiDrawElements")"\n"
"\t"STUB_ASM_CODE("1134")"\n"

".hidden ""_dispatch_stub_FogCoordfEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_FogCoordfEXT")"\n"
"\t"STUB_ASM_CODE("1135")"\n"

".hidden ""_dispatch_stub_FogCoordfvEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_FogCoordfvEXT")"\n"
"\t"STUB_ASM_CODE("1136")"\n"

".hidden ""_dispatch_stub_WindowPos4dMESA""\n"
STUB_ASM_ENTRY("_dispatch_stub_WindowPos4dMESA")"\n"
"\t"STUB_ASM_CODE("1137")"\n"

".hidden ""_dispatch_stub_WindowPos4dvMESA""\n"
STUB_ASM_ENTRY("_dispatch_stub_WindowPos4dvMESA")"\n"
"\t"STUB_ASM_CODE("1138")"\n"

".hidden ""_dispatch_stub_WindowPos4fMESA""\n"
STUB_ASM_ENTRY("_dispatch_stub_WindowPos4fMESA")"\n"
"\t"STUB_ASM_CODE("1139")"\n"

".hidden ""_dispatch_stub_WindowPos4fvMESA""\n"
STUB_ASM_ENTRY("_dispatch_stub_WindowPos4fvMESA")"\n"
"\t"STUB_ASM_CODE("1140")"\n"

".hidden ""_dispatch_stub_WindowPos4iMESA""\n"
STUB_ASM_ENTRY("_dispatch_stub_WindowPos4iMESA")"\n"
"\t"STUB_ASM_CODE("1141")"\n"

".hidden ""_dispatch_stub_WindowPos4ivMESA""\n"
STUB_ASM_ENTRY("_dispatch_stub_WindowPos4ivMESA")"\n"
"\t"STUB_ASM_CODE("1142")"\n"

".hidden ""_dispatch_stub_WindowPos4sMESA""\n"
STUB_ASM_ENTRY("_dispatch_stub_WindowPos4sMESA")"\n"
"\t"STUB_ASM_CODE("1143")"\n"

".hidden ""_dispatch_stub_WindowPos4svMESA""\n"
STUB_ASM_ENTRY("_dispatch_stub_WindowPos4svMESA")"\n"
"\t"STUB_ASM_CODE("1144")"\n"

".hidden ""_dispatch_stub_MultiModeDrawArraysIBM""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiModeDrawArraysIBM")"\n"
"\t"STUB_ASM_CODE("1145")"\n"

".hidden ""_dispatch_stub_MultiModeDrawElementsIBM""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiModeDrawElementsIBM")"\n"
"\t"STUB_ASM_CODE("1146")"\n"

".hidden ""_dispatch_stub_VertexAttrib1dNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib1dNV")"\n"
"\t"STUB_ASM_CODE("1147")"\n"

".hidden ""_dispatch_stub_VertexAttrib1dvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib1dvNV")"\n"
"\t"STUB_ASM_CODE("1148")"\n"

".hidden ""_dispatch_stub_VertexAttrib1fNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib1fNV")"\n"
"\t"STUB_ASM_CODE("1149")"\n"

".hidden ""_dispatch_stub_VertexAttrib1fvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib1fvNV")"\n"
"\t"STUB_ASM_CODE("1150")"\n"

".hidden ""_dispatch_stub_VertexAttrib1sNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib1sNV")"\n"
"\t"STUB_ASM_CODE("1151")"\n"

".hidden ""_dispatch_stub_VertexAttrib1svNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib1svNV")"\n"
"\t"STUB_ASM_CODE("1152")"\n"

".hidden ""_dispatch_stub_VertexAttrib2dNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib2dNV")"\n"
"\t"STUB_ASM_CODE("1153")"\n"

".hidden ""_dispatch_stub_VertexAttrib2dvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib2dvNV")"\n"
"\t"STUB_ASM_CODE("1154")"\n"

".hidden ""_dispatch_stub_VertexAttrib2fNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib2fNV")"\n"
"\t"STUB_ASM_CODE("1155")"\n"

".hidden ""_dispatch_stub_VertexAttrib2fvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib2fvNV")"\n"
"\t"STUB_ASM_CODE("1156")"\n"

".hidden ""_dispatch_stub_VertexAttrib2sNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib2sNV")"\n"
"\t"STUB_ASM_CODE("1157")"\n"

".hidden ""_dispatch_stub_VertexAttrib2svNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib2svNV")"\n"
"\t"STUB_ASM_CODE("1158")"\n"

".hidden ""_dispatch_stub_VertexAttrib3dNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib3dNV")"\n"
"\t"STUB_ASM_CODE("1159")"\n"

".hidden ""_dispatch_stub_VertexAttrib3dvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib3dvNV")"\n"
"\t"STUB_ASM_CODE("1160")"\n"

".hidden ""_dispatch_stub_VertexAttrib3fNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib3fNV")"\n"
"\t"STUB_ASM_CODE("1161")"\n"

".hidden ""_dispatch_stub_VertexAttrib3fvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib3fvNV")"\n"
"\t"STUB_ASM_CODE("1162")"\n"

".hidden ""_dispatch_stub_VertexAttrib3sNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib3sNV")"\n"
"\t"STUB_ASM_CODE("1163")"\n"

".hidden ""_dispatch_stub_VertexAttrib3svNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib3svNV")"\n"
"\t"STUB_ASM_CODE("1164")"\n"

".hidden ""_dispatch_stub_VertexAttrib4dNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib4dNV")"\n"
"\t"STUB_ASM_CODE("1165")"\n"

".hidden ""_dispatch_stub_VertexAttrib4dvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib4dvNV")"\n"
"\t"STUB_ASM_CODE("1166")"\n"

".hidden ""_dispatch_stub_VertexAttrib4fNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib4fNV")"\n"
"\t"STUB_ASM_CODE("1167")"\n"

".hidden ""_dispatch_stub_VertexAttrib4fvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib4fvNV")"\n"
"\t"STUB_ASM_CODE("1168")"\n"

".hidden ""_dispatch_stub_VertexAttrib4sNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib4sNV")"\n"
"\t"STUB_ASM_CODE("1169")"\n"

".hidden ""_dispatch_stub_VertexAttrib4svNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib4svNV")"\n"
"\t"STUB_ASM_CODE("1170")"\n"

".hidden ""_dispatch_stub_VertexAttrib4ubNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib4ubNV")"\n"
"\t"STUB_ASM_CODE("1171")"\n"

".hidden ""_dispatch_stub_VertexAttrib4ubvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib4ubvNV")"\n"
"\t"STUB_ASM_CODE("1172")"\n"

".hidden ""_dispatch_stub_VertexAttribs1dvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribs1dvNV")"\n"
"\t"STUB_ASM_CODE("1173")"\n"

".hidden ""_dispatch_stub_VertexAttribs1fvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribs1fvNV")"\n"
"\t"STUB_ASM_CODE("1174")"\n"

".hidden ""_dispatch_stub_VertexAttribs1svNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribs1svNV")"\n"
"\t"STUB_ASM_CODE("1175")"\n"

".hidden ""_dispatch_stub_VertexAttribs2dvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribs2dvNV")"\n"
"\t"STUB_ASM_CODE("1176")"\n"

".hidden ""_dispatch_stub_VertexAttribs2fvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribs2fvNV")"\n"
"\t"STUB_ASM_CODE("1177")"\n"

".hidden ""_dispatch_stub_VertexAttribs2svNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribs2svNV")"\n"
"\t"STUB_ASM_CODE("1178")"\n"

".hidden ""_dispatch_stub_VertexAttribs3dvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribs3dvNV")"\n"
"\t"STUB_ASM_CODE("1179")"\n"

".hidden ""_dispatch_stub_VertexAttribs3fvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribs3fvNV")"\n"
"\t"STUB_ASM_CODE("1180")"\n"

".hidden ""_dispatch_stub_VertexAttribs3svNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribs3svNV")"\n"
"\t"STUB_ASM_CODE("1181")"\n"

".hidden ""_dispatch_stub_VertexAttribs4dvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribs4dvNV")"\n"
"\t"STUB_ASM_CODE("1182")"\n"

".hidden ""_dispatch_stub_VertexAttribs4fvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribs4fvNV")"\n"
"\t"STUB_ASM_CODE("1183")"\n"

".hidden ""_dispatch_stub_VertexAttribs4svNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribs4svNV")"\n"
"\t"STUB_ASM_CODE("1184")"\n"

".hidden ""_dispatch_stub_VertexAttribs4ubvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribs4ubvNV")"\n"
"\t"STUB_ASM_CODE("1185")"\n"

".hidden ""_dispatch_stub_AlphaFragmentOp1ATI""\n"
STUB_ASM_ENTRY("_dispatch_stub_AlphaFragmentOp1ATI")"\n"
"\t"STUB_ASM_CODE("1186")"\n"

".hidden ""_dispatch_stub_AlphaFragmentOp2ATI""\n"
STUB_ASM_ENTRY("_dispatch_stub_AlphaFragmentOp2ATI")"\n"
"\t"STUB_ASM_CODE("1187")"\n"

".hidden ""_dispatch_stub_AlphaFragmentOp3ATI""\n"
STUB_ASM_ENTRY("_dispatch_stub_AlphaFragmentOp3ATI")"\n"
"\t"STUB_ASM_CODE("1188")"\n"

".hidden ""_dispatch_stub_BeginFragmentShaderATI""\n"
STUB_ASM_ENTRY("_dispatch_stub_BeginFragmentShaderATI")"\n"
"\t"STUB_ASM_CODE("1189")"\n"

".hidden ""_dispatch_stub_BindFragmentShaderATI""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindFragmentShaderATI")"\n"
"\t"STUB_ASM_CODE("1190")"\n"

".hidden ""_dispatch_stub_ColorFragmentOp1ATI""\n"
STUB_ASM_ENTRY("_dispatch_stub_ColorFragmentOp1ATI")"\n"
"\t"STUB_ASM_CODE("1191")"\n"

".hidden ""_dispatch_stub_ColorFragmentOp2ATI""\n"
STUB_ASM_ENTRY("_dispatch_stub_ColorFragmentOp2ATI")"\n"
"\t"STUB_ASM_CODE("1192")"\n"

".hidden ""_dispatch_stub_ColorFragmentOp3ATI""\n"
STUB_ASM_ENTRY("_dispatch_stub_ColorFragmentOp3ATI")"\n"
"\t"STUB_ASM_CODE("1193")"\n"

".hidden ""_dispatch_stub_DeleteFragmentShaderATI""\n"
STUB_ASM_ENTRY("_dispatch_stub_DeleteFragmentShaderATI")"\n"
"\t"STUB_ASM_CODE("1194")"\n"

".hidden ""_dispatch_stub_EndFragmentShaderATI""\n"
STUB_ASM_ENTRY("_dispatch_stub_EndFragmentShaderATI")"\n"
"\t"STUB_ASM_CODE("1195")"\n"

".hidden ""_dispatch_stub_GenFragmentShadersATI""\n"
STUB_ASM_ENTRY("_dispatch_stub_GenFragmentShadersATI")"\n"
"\t"STUB_ASM_CODE("1196")"\n"

".hidden ""_dispatch_stub_PassTexCoordATI""\n"
STUB_ASM_ENTRY("_dispatch_stub_PassTexCoordATI")"\n"
"\t"STUB_ASM_CODE("1197")"\n"

".hidden ""_dispatch_stub_SampleMapATI""\n"
STUB_ASM_ENTRY("_dispatch_stub_SampleMapATI")"\n"
"\t"STUB_ASM_CODE("1198")"\n"

".hidden ""_dispatch_stub_SetFragmentShaderConstantATI""\n"
STUB_ASM_ENTRY("_dispatch_stub_SetFragmentShaderConstantATI")"\n"
"\t"STUB_ASM_CODE("1199")"\n"

".hidden ""_dispatch_stub_DepthRangeArrayfvOES""\n"
STUB_ASM_ENTRY("_dispatch_stub_DepthRangeArrayfvOES")"\n"
"\t"STUB_ASM_CODE("1200")"\n"

".hidden ""_dispatch_stub_DepthRangeIndexedfOES""\n"
STUB_ASM_ENTRY("_dispatch_stub_DepthRangeIndexedfOES")"\n"
"\t"STUB_ASM_CODE("1201")"\n"

".hidden ""_dispatch_stub_ActiveStencilFaceEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_ActiveStencilFaceEXT")"\n"
"\t"STUB_ASM_CODE("1202")"\n"

".hidden ""_dispatch_stub_PrimitiveRestartNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_PrimitiveRestartNV")"\n"
"\t"STUB_ASM_CODE("1203")"\n"

".hidden ""_dispatch_stub_GetTexGenxvOES""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTexGenxvOES")"\n"
"\t"STUB_ASM_CODE("1204")"\n"

".hidden ""_dispatch_stub_TexGenxOES""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexGenxOES")"\n"
"\t"STUB_ASM_CODE("1205")"\n"

".hidden ""_dispatch_stub_TexGenxvOES""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexGenxvOES")"\n"
"\t"STUB_ASM_CODE("1206")"\n"

".hidden ""_dispatch_stub_DepthBoundsEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_DepthBoundsEXT")"\n"
"\t"STUB_ASM_CODE("1207")"\n"

".hidden ""_dispatch_stub_BindFramebufferEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindFramebufferEXT")"\n"
"\t"STUB_ASM_CODE("1208")"\n"

".hidden ""_dispatch_stub_BindRenderbufferEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindRenderbufferEXT")"\n"
"\t"STUB_ASM_CODE("1209")"\n"

".hidden ""_dispatch_stub_StringMarkerGREMEDY""\n"
STUB_ASM_ENTRY("_dispatch_stub_StringMarkerGREMEDY")"\n"
"\t"STUB_ASM_CODE("1210")"\n"

".hidden ""_dispatch_stub_VertexAttribI1iEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribI1iEXT")"\n"
"\t"STUB_ASM_CODE("1211")"\n"

".hidden ""_dispatch_stub_VertexAttribI1uiEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribI1uiEXT")"\n"
"\t"STUB_ASM_CODE("1212")"\n"

".hidden ""_dispatch_stub_VertexAttribI2iEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribI2iEXT")"\n"
"\t"STUB_ASM_CODE("1213")"\n"

".hidden ""_dispatch_stub_VertexAttribI2ivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribI2ivEXT")"\n"
"\t"STUB_ASM_CODE("1214")"\n"

".hidden ""_dispatch_stub_VertexAttribI2uiEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribI2uiEXT")"\n"
"\t"STUB_ASM_CODE("1215")"\n"

".hidden ""_dispatch_stub_VertexAttribI2uivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribI2uivEXT")"\n"
"\t"STUB_ASM_CODE("1216")"\n"

".hidden ""_dispatch_stub_VertexAttribI3iEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribI3iEXT")"\n"
"\t"STUB_ASM_CODE("1217")"\n"

".hidden ""_dispatch_stub_VertexAttribI3ivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribI3ivEXT")"\n"
"\t"STUB_ASM_CODE("1218")"\n"

".hidden ""_dispatch_stub_VertexAttribI3uiEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribI3uiEXT")"\n"
"\t"STUB_ASM_CODE("1219")"\n"

".hidden ""_dispatch_stub_VertexAttribI3uivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribI3uivEXT")"\n"
"\t"STUB_ASM_CODE("1220")"\n"

".hidden ""_dispatch_stub_VertexAttribI4iEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribI4iEXT")"\n"
"\t"STUB_ASM_CODE("1221")"\n"

".hidden ""_dispatch_stub_VertexAttribI4ivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribI4ivEXT")"\n"
"\t"STUB_ASM_CODE("1222")"\n"

".hidden ""_dispatch_stub_VertexAttribI4uiEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribI4uiEXT")"\n"
"\t"STUB_ASM_CODE("1223")"\n"

".hidden ""_dispatch_stub_VertexAttribI4uivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribI4uivEXT")"\n"
"\t"STUB_ASM_CODE("1224")"\n"

".hidden ""_dispatch_stub_ClearColorIiEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClearColorIiEXT")"\n"
"\t"STUB_ASM_CODE("1225")"\n"

".hidden ""_dispatch_stub_ClearColorIuiEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClearColorIuiEXT")"\n"
"\t"STUB_ASM_CODE("1226")"\n"

".hidden ""_dispatch_stub_BindBufferOffsetEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindBufferOffsetEXT")"\n"
"\t"STUB_ASM_CODE("1227")"\n"

".hidden ""_dispatch_stub_BeginPerfMonitorAMD""\n"
STUB_ASM_ENTRY("_dispatch_stub_BeginPerfMonitorAMD")"\n"
"\t"STUB_ASM_CODE("1228")"\n"

".hidden ""_dispatch_stub_DeletePerfMonitorsAMD""\n"
STUB_ASM_ENTRY("_dispatch_stub_DeletePerfMonitorsAMD")"\n"
"\t"STUB_ASM_CODE("1229")"\n"

".hidden ""_dispatch_stub_EndPerfMonitorAMD""\n"
STUB_ASM_ENTRY("_dispatch_stub_EndPerfMonitorAMD")"\n"
"\t"STUB_ASM_CODE("1230")"\n"

".hidden ""_dispatch_stub_GenPerfMonitorsAMD""\n"
STUB_ASM_ENTRY("_dispatch_stub_GenPerfMonitorsAMD")"\n"
"\t"STUB_ASM_CODE("1231")"\n"

".hidden ""_dispatch_stub_GetPerfMonitorCounterDataAMD""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetPerfMonitorCounterDataAMD")"\n"
"\t"STUB_ASM_CODE("1232")"\n"

".hidden ""_dispatch_stub_GetPerfMonitorCounterInfoAMD""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetPerfMonitorCounterInfoAMD")"\n"
"\t"STUB_ASM_CODE("1233")"\n"

".hidden ""_dispatch_stub_GetPerfMonitorCounterStringAMD""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetPerfMonitorCounterStringAMD")"\n"
"\t"STUB_ASM_CODE("1234")"\n"

".hidden ""_dispatch_stub_GetPerfMonitorCountersAMD""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetPerfMonitorCountersAMD")"\n"
"\t"STUB_ASM_CODE("1235")"\n"

".hidden ""_dispatch_stub_GetPerfMonitorGroupStringAMD""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetPerfMonitorGroupStringAMD")"\n"
"\t"STUB_ASM_CODE("1236")"\n"

".hidden ""_dispatch_stub_GetPerfMonitorGroupsAMD""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetPerfMonitorGroupsAMD")"\n"
"\t"STUB_ASM_CODE("1237")"\n"

".hidden ""_dispatch_stub_SelectPerfMonitorCountersAMD""\n"
STUB_ASM_ENTRY("_dispatch_stub_SelectPerfMonitorCountersAMD")"\n"
"\t"STUB_ASM_CODE("1238")"\n"

".hidden ""_dispatch_stub_TextureBarrierNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureBarrierNV")"\n"
"\t"STUB_ASM_CODE("1239")"\n"

".hidden ""_dispatch_stub_VDPAUFiniNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VDPAUFiniNV")"\n"
"\t"STUB_ASM_CODE("1240")"\n"

".hidden ""_dispatch_stub_VDPAUGetSurfaceivNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VDPAUGetSurfaceivNV")"\n"
"\t"STUB_ASM_CODE("1241")"\n"

".hidden ""_dispatch_stub_VDPAUInitNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VDPAUInitNV")"\n"
"\t"STUB_ASM_CODE("1242")"\n"

".hidden ""_dispatch_stub_VDPAUIsSurfaceNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VDPAUIsSurfaceNV")"\n"
"\t"STUB_ASM_CODE("1243")"\n"

".hidden ""_dispatch_stub_VDPAUMapSurfacesNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VDPAUMapSurfacesNV")"\n"
"\t"STUB_ASM_CODE("1244")"\n"

".hidden ""_dispatch_stub_VDPAURegisterOutputSurfaceNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VDPAURegisterOutputSurfaceNV")"\n"
"\t"STUB_ASM_CODE("1245")"\n"

".hidden ""_dispatch_stub_VDPAURegisterVideoSurfaceNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VDPAURegisterVideoSurfaceNV")"\n"
"\t"STUB_ASM_CODE("1246")"\n"

".hidden ""_dispatch_stub_VDPAUSurfaceAccessNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VDPAUSurfaceAccessNV")"\n"
"\t"STUB_ASM_CODE("1247")"\n"

".hidden ""_dispatch_stub_VDPAUUnmapSurfacesNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VDPAUUnmapSurfacesNV")"\n"
"\t"STUB_ASM_CODE("1248")"\n"

".hidden ""_dispatch_stub_VDPAUUnregisterSurfaceNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VDPAUUnregisterSurfaceNV")"\n"
"\t"STUB_ASM_CODE("1249")"\n"

".hidden ""_dispatch_stub_BeginPerfQueryINTEL""\n"
STUB_ASM_ENTRY("_dispatch_stub_BeginPerfQueryINTEL")"\n"
"\t"STUB_ASM_CODE("1250")"\n"

".hidden ""_dispatch_stub_CreatePerfQueryINTEL""\n"
STUB_ASM_ENTRY("_dispatch_stub_CreatePerfQueryINTEL")"\n"
"\t"STUB_ASM_CODE("1251")"\n"

".hidden ""_dispatch_stub_DeletePerfQueryINTEL""\n"
STUB_ASM_ENTRY("_dispatch_stub_DeletePerfQueryINTEL")"\n"
"\t"STUB_ASM_CODE("1252")"\n"

".hidden ""_dispatch_stub_EndPerfQueryINTEL""\n"
STUB_ASM_ENTRY("_dispatch_stub_EndPerfQueryINTEL")"\n"
"\t"STUB_ASM_CODE("1253")"\n"

".hidden ""_dispatch_stub_GetFirstPerfQueryIdINTEL""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetFirstPerfQueryIdINTEL")"\n"
"\t"STUB_ASM_CODE("1254")"\n"

".hidden ""_dispatch_stub_GetNextPerfQueryIdINTEL""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetNextPerfQueryIdINTEL")"\n"
"\t"STUB_ASM_CODE("1255")"\n"

".hidden ""_dispatch_stub_GetPerfCounterInfoINTEL""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetPerfCounterInfoINTEL")"\n"
"\t"STUB_ASM_CODE("1256")"\n"

".hidden ""_dispatch_stub_GetPerfQueryDataINTEL""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetPerfQueryDataINTEL")"\n"
"\t"STUB_ASM_CODE("1257")"\n"

".hidden ""_dispatch_stub_GetPerfQueryIdByNameINTEL""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetPerfQueryIdByNameINTEL")"\n"
"\t"STUB_ASM_CODE("1258")"\n"

".hidden ""_dispatch_stub_GetPerfQueryInfoINTEL""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetPerfQueryInfoINTEL")"\n"
"\t"STUB_ASM_CODE("1259")"\n"

".hidden ""_dispatch_stub_PolygonOffsetClampEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_PolygonOffsetClampEXT")"\n"
"\t"STUB_ASM_CODE("1260")"\n"

".hidden ""_dispatch_stub_SubpixelPrecisionBiasNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_SubpixelPrecisionBiasNV")"\n"
"\t"STUB_ASM_CODE("1261")"\n"

".hidden ""_dispatch_stub_ConservativeRasterParameterfNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_ConservativeRasterParameterfNV")"\n"
"\t"STUB_ASM_CODE("1262")"\n"

".hidden ""_dispatch_stub_ConservativeRasterParameteriNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_ConservativeRasterParameteriNV")"\n"
"\t"STUB_ASM_CODE("1263")"\n"

".hidden ""_dispatch_stub_WindowRectanglesEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_WindowRectanglesEXT")"\n"
"\t"STUB_ASM_CODE("1264")"\n"

".hidden ""_dispatch_stub_BufferStorageMemEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_BufferStorageMemEXT")"\n"
"\t"STUB_ASM_CODE("1265")"\n"

".hidden ""_dispatch_stub_CreateMemoryObjectsEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_CreateMemoryObjectsEXT")"\n"
"\t"STUB_ASM_CODE("1266")"\n"

".hidden ""_dispatch_stub_DeleteMemoryObjectsEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_DeleteMemoryObjectsEXT")"\n"
"\t"STUB_ASM_CODE("1267")"\n"

".hidden ""_dispatch_stub_DeleteSemaphoresEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_DeleteSemaphoresEXT")"\n"
"\t"STUB_ASM_CODE("1268")"\n"

".hidden ""_dispatch_stub_GenSemaphoresEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GenSemaphoresEXT")"\n"
"\t"STUB_ASM_CODE("1269")"\n"

".hidden ""_dispatch_stub_GetMemoryObjectParameterivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetMemoryObjectParameterivEXT")"\n"
"\t"STUB_ASM_CODE("1270")"\n"

".hidden ""_dispatch_stub_GetSemaphoreParameterui64vEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetSemaphoreParameterui64vEXT")"\n"
"\t"STUB_ASM_CODE("1271")"\n"

".hidden ""_dispatch_stub_GetUnsignedBytei_vEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetUnsignedBytei_vEXT")"\n"
"\t"STUB_ASM_CODE("1272")"\n"

".hidden ""_dispatch_stub_GetUnsignedBytevEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetUnsignedBytevEXT")"\n"
"\t"STUB_ASM_CODE("1273")"\n"

".hidden ""_dispatch_stub_IsMemoryObjectEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_IsMemoryObjectEXT")"\n"
"\t"STUB_ASM_CODE("1274")"\n"

".hidden ""_dispatch_stub_IsSemaphoreEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_IsSemaphoreEXT")"\n"
"\t"STUB_ASM_CODE("1275")"\n"

".hidden ""_dispatch_stub_MemoryObjectParameterivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MemoryObjectParameterivEXT")"\n"
"\t"STUB_ASM_CODE("1276")"\n"

".hidden ""_dispatch_stub_NamedBufferStorageMemEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedBufferStorageMemEXT")"\n"
"\t"STUB_ASM_CODE("1277")"\n"

".hidden ""_dispatch_stub_SemaphoreParameterui64vEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_SemaphoreParameterui64vEXT")"\n"
"\t"STUB_ASM_CODE("1278")"\n"

".hidden ""_dispatch_stub_SignalSemaphoreEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_SignalSemaphoreEXT")"\n"
"\t"STUB_ASM_CODE("1279")"\n"

".hidden ""_dispatch_stub_TexStorageMem1DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexStorageMem1DEXT")"\n"
"\t"STUB_ASM_CODE("1280")"\n"

".hidden ""_dispatch_stub_TexStorageMem2DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexStorageMem2DEXT")"\n"
"\t"STUB_ASM_CODE("1281")"\n"

".hidden ""_dispatch_stub_TexStorageMem2DMultisampleEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexStorageMem2DMultisampleEXT")"\n"
"\t"STUB_ASM_CODE("1282")"\n"

".hidden ""_dispatch_stub_TexStorageMem3DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexStorageMem3DEXT")"\n"
"\t"STUB_ASM_CODE("1283")"\n"

".hidden ""_dispatch_stub_TexStorageMem3DMultisampleEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexStorageMem3DMultisampleEXT")"\n"
"\t"STUB_ASM_CODE("1284")"\n"

".hidden ""_dispatch_stub_TextureStorageMem1DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureStorageMem1DEXT")"\n"
"\t"STUB_ASM_CODE("1285")"\n"

".hidden ""_dispatch_stub_TextureStorageMem2DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureStorageMem2DEXT")"\n"
"\t"STUB_ASM_CODE("1286")"\n"

".hidden ""_dispatch_stub_TextureStorageMem2DMultisampleEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureStorageMem2DMultisampleEXT")"\n"
"\t"STUB_ASM_CODE("1287")"\n"

".hidden ""_dispatch_stub_TextureStorageMem3DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureStorageMem3DEXT")"\n"
"\t"STUB_ASM_CODE("1288")"\n"

".hidden ""_dispatch_stub_TextureStorageMem3DMultisampleEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureStorageMem3DMultisampleEXT")"\n"
"\t"STUB_ASM_CODE("1289")"\n"

".hidden ""_dispatch_stub_WaitSemaphoreEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_WaitSemaphoreEXT")"\n"
"\t"STUB_ASM_CODE("1290")"\n"

".hidden ""_dispatch_stub_ImportMemoryFdEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_ImportMemoryFdEXT")"\n"
"\t"STUB_ASM_CODE("1291")"\n"

".hidden ""_dispatch_stub_ImportSemaphoreFdEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_ImportSemaphoreFdEXT")"\n"
"\t"STUB_ASM_CODE("1292")"\n"

".hidden ""_dispatch_stub_FramebufferFetchBarrierEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_FramebufferFetchBarrierEXT")"\n"
"\t"STUB_ASM_CODE("1293")"\n"

".hidden ""_dispatch_stub_NamedRenderbufferStorageMultisampleAdvancedAMD""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedRenderbufferStorageMultisampleAdvancedAMD")"\n"
"\t"STUB_ASM_CODE("1294")"\n"

".hidden ""_dispatch_stub_RenderbufferStorageMultisampleAdvancedAMD""\n"
STUB_ASM_ENTRY("_dispatch_stub_RenderbufferStorageMultisampleAdvancedAMD")"\n"
"\t"STUB_ASM_CODE("1295")"\n"

".hidden ""_dispatch_stub_StencilFuncSeparateATI""\n"
STUB_ASM_ENTRY("_dispatch_stub_StencilFuncSeparateATI")"\n"
"\t"STUB_ASM_CODE("1296")"\n"

".hidden ""_dispatch_stub_ProgramEnvParameters4fvEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramEnvParameters4fvEXT")"\n"
"\t"STUB_ASM_CODE("1297")"\n"

".hidden ""_dispatch_stub_ProgramLocalParameters4fvEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_ProgramLocalParameters4fvEXT")"\n"
"\t"STUB_ASM_CODE("1298")"\n"

".hidden ""_dispatch_stub_EGLImageTargetRenderbufferStorageOES""\n"
STUB_ASM_ENTRY("_dispatch_stub_EGLImageTargetRenderbufferStorageOES")"\n"
"\t"STUB_ASM_CODE("1299")"\n"

".hidden ""_dispatch_stub_EGLImageTargetTexture2DOES""\n"
STUB_ASM_ENTRY("_dispatch_stub_EGLImageTargetTexture2DOES")"\n"
"\t"STUB_ASM_CODE("1300")"\n"

".hidden ""_dispatch_stub_AlphaFuncx""\n"
STUB_ASM_ENTRY("_dispatch_stub_AlphaFuncx")"\n"
"\t"STUB_ASM_CODE("1301")"\n"

".hidden ""_dispatch_stub_ClearColorx""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClearColorx")"\n"
"\t"STUB_ASM_CODE("1302")"\n"

".hidden ""_dispatch_stub_ClearDepthx""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClearDepthx")"\n"
"\t"STUB_ASM_CODE("1303")"\n"

".hidden ""_dispatch_stub_Color4x""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color4x")"\n"
"\t"STUB_ASM_CODE("1304")"\n"

".hidden ""_dispatch_stub_DepthRangex""\n"
STUB_ASM_ENTRY("_dispatch_stub_DepthRangex")"\n"
"\t"STUB_ASM_CODE("1305")"\n"

".hidden ""_dispatch_stub_Fogx""\n"
STUB_ASM_ENTRY("_dispatch_stub_Fogx")"\n"
"\t"STUB_ASM_CODE("1306")"\n"

".hidden ""_dispatch_stub_Fogxv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Fogxv")"\n"
"\t"STUB_ASM_CODE("1307")"\n"

".hidden ""_dispatch_stub_Frustumf""\n"
STUB_ASM_ENTRY("_dispatch_stub_Frustumf")"\n"
"\t"STUB_ASM_CODE("1308")"\n"

".hidden ""_dispatch_stub_Frustumx""\n"
STUB_ASM_ENTRY("_dispatch_stub_Frustumx")"\n"
"\t"STUB_ASM_CODE("1309")"\n"

".hidden ""_dispatch_stub_LightModelx""\n"
STUB_ASM_ENTRY("_dispatch_stub_LightModelx")"\n"
"\t"STUB_ASM_CODE("1310")"\n"

".hidden ""_dispatch_stub_LightModelxv""\n"
STUB_ASM_ENTRY("_dispatch_stub_LightModelxv")"\n"
"\t"STUB_ASM_CODE("1311")"\n"

".hidden ""_dispatch_stub_Lightx""\n"
STUB_ASM_ENTRY("_dispatch_stub_Lightx")"\n"
"\t"STUB_ASM_CODE("1312")"\n"

".hidden ""_dispatch_stub_Lightxv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Lightxv")"\n"
"\t"STUB_ASM_CODE("1313")"\n"

".hidden ""_dispatch_stub_LineWidthx""\n"
STUB_ASM_ENTRY("_dispatch_stub_LineWidthx")"\n"
"\t"STUB_ASM_CODE("1314")"\n"

".hidden ""_dispatch_stub_LoadMatrixx""\n"
STUB_ASM_ENTRY("_dispatch_stub_LoadMatrixx")"\n"
"\t"STUB_ASM_CODE("1315")"\n"

".hidden ""_dispatch_stub_Materialx""\n"
STUB_ASM_ENTRY("_dispatch_stub_Materialx")"\n"
"\t"STUB_ASM_CODE("1316")"\n"

".hidden ""_dispatch_stub_Materialxv""\n"
STUB_ASM_ENTRY("_dispatch_stub_Materialxv")"\n"
"\t"STUB_ASM_CODE("1317")"\n"

".hidden ""_dispatch_stub_MultMatrixx""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultMatrixx")"\n"
"\t"STUB_ASM_CODE("1318")"\n"

".hidden ""_dispatch_stub_MultiTexCoord4x""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord4x")"\n"
"\t"STUB_ASM_CODE("1319")"\n"

".hidden ""_dispatch_stub_Normal3x""\n"
STUB_ASM_ENTRY("_dispatch_stub_Normal3x")"\n"
"\t"STUB_ASM_CODE("1320")"\n"

".hidden ""_dispatch_stub_Orthof""\n"
STUB_ASM_ENTRY("_dispatch_stub_Orthof")"\n"
"\t"STUB_ASM_CODE("1321")"\n"

".hidden ""_dispatch_stub_Orthox""\n"
STUB_ASM_ENTRY("_dispatch_stub_Orthox")"\n"
"\t"STUB_ASM_CODE("1322")"\n"

".hidden ""_dispatch_stub_PointSizex""\n"
STUB_ASM_ENTRY("_dispatch_stub_PointSizex")"\n"
"\t"STUB_ASM_CODE("1323")"\n"

".hidden ""_dispatch_stub_PolygonOffsetx""\n"
STUB_ASM_ENTRY("_dispatch_stub_PolygonOffsetx")"\n"
"\t"STUB_ASM_CODE("1324")"\n"

".hidden ""_dispatch_stub_Rotatex""\n"
STUB_ASM_ENTRY("_dispatch_stub_Rotatex")"\n"
"\t"STUB_ASM_CODE("1325")"\n"

".hidden ""_dispatch_stub_SampleCoveragex""\n"
STUB_ASM_ENTRY("_dispatch_stub_SampleCoveragex")"\n"
"\t"STUB_ASM_CODE("1326")"\n"

".hidden ""_dispatch_stub_Scalex""\n"
STUB_ASM_ENTRY("_dispatch_stub_Scalex")"\n"
"\t"STUB_ASM_CODE("1327")"\n"

".hidden ""_dispatch_stub_TexEnvx""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexEnvx")"\n"
"\t"STUB_ASM_CODE("1328")"\n"

".hidden ""_dispatch_stub_TexEnvxv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexEnvxv")"\n"
"\t"STUB_ASM_CODE("1329")"\n"

".hidden ""_dispatch_stub_TexParameterx""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexParameterx")"\n"
"\t"STUB_ASM_CODE("1330")"\n"

".hidden ""_dispatch_stub_Translatex""\n"
STUB_ASM_ENTRY("_dispatch_stub_Translatex")"\n"
"\t"STUB_ASM_CODE("1331")"\n"

".hidden ""_dispatch_stub_ClipPlanef""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClipPlanef")"\n"
"\t"STUB_ASM_CODE("1332")"\n"

".hidden ""_dispatch_stub_ClipPlanex""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClipPlanex")"\n"
"\t"STUB_ASM_CODE("1333")"\n"

".hidden ""_dispatch_stub_GetClipPlanef""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetClipPlanef")"\n"
"\t"STUB_ASM_CODE("1334")"\n"

".hidden ""_dispatch_stub_GetClipPlanex""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetClipPlanex")"\n"
"\t"STUB_ASM_CODE("1335")"\n"

".hidden ""_dispatch_stub_GetFixedv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetFixedv")"\n"
"\t"STUB_ASM_CODE("1336")"\n"

".hidden ""_dispatch_stub_GetLightxv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetLightxv")"\n"
"\t"STUB_ASM_CODE("1337")"\n"

".hidden ""_dispatch_stub_GetMaterialxv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetMaterialxv")"\n"
"\t"STUB_ASM_CODE("1338")"\n"

".hidden ""_dispatch_stub_GetTexEnvxv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTexEnvxv")"\n"
"\t"STUB_ASM_CODE("1339")"\n"

".hidden ""_dispatch_stub_GetTexParameterxv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTexParameterxv")"\n"
"\t"STUB_ASM_CODE("1340")"\n"

".hidden ""_dispatch_stub_PointParameterx""\n"
STUB_ASM_ENTRY("_dispatch_stub_PointParameterx")"\n"
"\t"STUB_ASM_CODE("1341")"\n"

".hidden ""_dispatch_stub_PointParameterxv""\n"
STUB_ASM_ENTRY("_dispatch_stub_PointParameterxv")"\n"
"\t"STUB_ASM_CODE("1342")"\n"

".hidden ""_dispatch_stub_TexParameterxv""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexParameterxv")"\n"
"\t"STUB_ASM_CODE("1343")"\n"

".hidden ""_dispatch_stub_BlendBarrier""\n"
STUB_ASM_ENTRY("_dispatch_stub_BlendBarrier")"\n"
"\t"STUB_ASM_CODE("1344")"\n"

".hidden ""_dispatch_stub_PrimitiveBoundingBox""\n"
STUB_ASM_ENTRY("_dispatch_stub_PrimitiveBoundingBox")"\n"
"\t"STUB_ASM_CODE("1345")"\n"

".hidden ""_dispatch_stub_MaxShaderCompilerThreadsKHR""\n"
STUB_ASM_ENTRY("_dispatch_stub_MaxShaderCompilerThreadsKHR")"\n"
"\t"STUB_ASM_CODE("1346")"\n"

".hidden ""_dispatch_stub_MatrixLoadfEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MatrixLoadfEXT")"\n"
"\t"STUB_ASM_CODE("1347")"\n"

".hidden ""_dispatch_stub_MatrixLoaddEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MatrixLoaddEXT")"\n"
"\t"STUB_ASM_CODE("1348")"\n"

".hidden ""_dispatch_stub_MatrixMultfEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MatrixMultfEXT")"\n"
"\t"STUB_ASM_CODE("1349")"\n"

".hidden ""_dispatch_stub_MatrixMultdEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MatrixMultdEXT")"\n"
"\t"STUB_ASM_CODE("1350")"\n"

".hidden ""_dispatch_stub_MatrixLoadIdentityEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MatrixLoadIdentityEXT")"\n"
"\t"STUB_ASM_CODE("1351")"\n"

".hidden ""_dispatch_stub_MatrixRotatefEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MatrixRotatefEXT")"\n"
"\t"STUB_ASM_CODE("1352")"\n"

".hidden ""_dispatch_stub_MatrixRotatedEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MatrixRotatedEXT")"\n"
"\t"STUB_ASM_CODE("1353")"\n"

".hidden ""_dispatch_stub_MatrixScalefEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MatrixScalefEXT")"\n"
"\t"STUB_ASM_CODE("1354")"\n"

".hidden ""_dispatch_stub_MatrixScaledEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MatrixScaledEXT")"\n"
"\t"STUB_ASM_CODE("1355")"\n"

".hidden ""_dispatch_stub_MatrixTranslatefEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MatrixTranslatefEXT")"\n"
"\t"STUB_ASM_CODE("1356")"\n"

".hidden ""_dispatch_stub_MatrixTranslatedEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MatrixTranslatedEXT")"\n"
"\t"STUB_ASM_CODE("1357")"\n"

".hidden ""_dispatch_stub_MatrixOrthoEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MatrixOrthoEXT")"\n"
"\t"STUB_ASM_CODE("1358")"\n"

".hidden ""_dispatch_stub_MatrixFrustumEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MatrixFrustumEXT")"\n"
"\t"STUB_ASM_CODE("1359")"\n"

".hidden ""_dispatch_stub_MatrixPushEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MatrixPushEXT")"\n"
"\t"STUB_ASM_CODE("1360")"\n"

".hidden ""_dispatch_stub_MatrixPopEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MatrixPopEXT")"\n"
"\t"STUB_ASM_CODE("1361")"\n"

".hidden ""_dispatch_stub_MatrixLoadTransposefEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MatrixLoadTransposefEXT")"\n"
"\t"STUB_ASM_CODE("1362")"\n"

".hidden ""_dispatch_stub_MatrixLoadTransposedEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MatrixLoadTransposedEXT")"\n"
"\t"STUB_ASM_CODE("1363")"\n"

".hidden ""_dispatch_stub_MatrixMultTransposefEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MatrixMultTransposefEXT")"\n"
"\t"STUB_ASM_CODE("1364")"\n"

".hidden ""_dispatch_stub_MatrixMultTransposedEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MatrixMultTransposedEXT")"\n"
"\t"STUB_ASM_CODE("1365")"\n"

".hidden ""_dispatch_stub_BindMultiTextureEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindMultiTextureEXT")"\n"
"\t"STUB_ASM_CODE("1366")"\n"

".hidden ""_dispatch_stub_NamedBufferDataEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedBufferDataEXT")"\n"
"\t"STUB_ASM_CODE("1367")"\n"

".hidden ""_dispatch_stub_NamedBufferSubDataEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedBufferSubDataEXT")"\n"
"\t"STUB_ASM_CODE("1368")"\n"

".hidden ""_dispatch_stub_NamedBufferStorageEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedBufferStorageEXT")"\n"
"\t"STUB_ASM_CODE("1369")"\n"

".hidden ""_dispatch_stub_MapNamedBufferRangeEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MapNamedBufferRangeEXT")"\n"
"\t"STUB_ASM_CODE("1370")"\n"

".hidden ""_dispatch_stub_TextureImage1DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureImage1DEXT")"\n"
"\t"STUB_ASM_CODE("1371")"\n"

".hidden ""_dispatch_stub_TextureImage2DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureImage2DEXT")"\n"
"\t"STUB_ASM_CODE("1372")"\n"

".hidden ""_dispatch_stub_TextureImage3DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureImage3DEXT")"\n"
"\t"STUB_ASM_CODE("1373")"\n"

".hidden ""_dispatch_stub_TextureSubImage1DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureSubImage1DEXT")"\n"
"\t"STUB_ASM_CODE("1374")"\n"

".hidden ""_dispatch_stub_TextureSubImage2DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureSubImage2DEXT")"\n"
"\t"STUB_ASM_CODE("1375")"\n"

".hidden ""_dispatch_stub_TextureSubImage3DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureSubImage3DEXT")"\n"
"\t"STUB_ASM_CODE("1376")"\n"

".hidden ""_dispatch_stub_CopyTextureImage1DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_CopyTextureImage1DEXT")"\n"
"\t"STUB_ASM_CODE("1377")"\n"

".hidden ""_dispatch_stub_CopyTextureImage2DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_CopyTextureImage2DEXT")"\n"
"\t"STUB_ASM_CODE("1378")"\n"

".hidden ""_dispatch_stub_CopyTextureSubImage1DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_CopyTextureSubImage1DEXT")"\n"
"\t"STUB_ASM_CODE("1379")"\n"

".hidden ""_dispatch_stub_CopyTextureSubImage2DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_CopyTextureSubImage2DEXT")"\n"
"\t"STUB_ASM_CODE("1380")"\n"

".hidden ""_dispatch_stub_CopyTextureSubImage3DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_CopyTextureSubImage3DEXT")"\n"
"\t"STUB_ASM_CODE("1381")"\n"

".hidden ""_dispatch_stub_MapNamedBufferEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MapNamedBufferEXT")"\n"
"\t"STUB_ASM_CODE("1382")"\n"

".hidden ""_dispatch_stub_GetTextureParameterivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTextureParameterivEXT")"\n"
"\t"STUB_ASM_CODE("1383")"\n"

".hidden ""_dispatch_stub_GetTextureParameterfvEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTextureParameterfvEXT")"\n"
"\t"STUB_ASM_CODE("1384")"\n"

".hidden ""_dispatch_stub_TextureParameteriEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureParameteriEXT")"\n"
"\t"STUB_ASM_CODE("1385")"\n"

".hidden ""_dispatch_stub_TextureParameterivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureParameterivEXT")"\n"
"\t"STUB_ASM_CODE("1386")"\n"

".hidden ""_dispatch_stub_TextureParameterfEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureParameterfEXT")"\n"
"\t"STUB_ASM_CODE("1387")"\n"

".hidden ""_dispatch_stub_TextureParameterfvEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureParameterfvEXT")"\n"
"\t"STUB_ASM_CODE("1388")"\n"

".hidden ""_dispatch_stub_GetTextureImageEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTextureImageEXT")"\n"
"\t"STUB_ASM_CODE("1389")"\n"

".hidden ""_dispatch_stub_GetTextureLevelParameterivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTextureLevelParameterivEXT")"\n"
"\t"STUB_ASM_CODE("1390")"\n"

".hidden ""_dispatch_stub_GetTextureLevelParameterfvEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTextureLevelParameterfvEXT")"\n"
"\t"STUB_ASM_CODE("1391")"\n"

".hidden ""_dispatch_stub_GetNamedBufferSubDataEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetNamedBufferSubDataEXT")"\n"
"\t"STUB_ASM_CODE("1392")"\n"

".hidden ""_dispatch_stub_GetNamedBufferPointervEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetNamedBufferPointervEXT")"\n"
"\t"STUB_ASM_CODE("1393")"\n"

".hidden ""_dispatch_stub_GetNamedBufferParameterivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetNamedBufferParameterivEXT")"\n"
"\t"STUB_ASM_CODE("1394")"\n"

".hidden ""_dispatch_stub_FlushMappedNamedBufferRangeEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_FlushMappedNamedBufferRangeEXT")"\n"
"\t"STUB_ASM_CODE("1395")"\n"

".hidden ""_dispatch_stub_FramebufferDrawBufferEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_FramebufferDrawBufferEXT")"\n"
"\t"STUB_ASM_CODE("1396")"\n"

".hidden ""_dispatch_stub_FramebufferDrawBuffersEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_FramebufferDrawBuffersEXT")"\n"
"\t"STUB_ASM_CODE("1397")"\n"

".hidden ""_dispatch_stub_FramebufferReadBufferEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_FramebufferReadBufferEXT")"\n"
"\t"STUB_ASM_CODE("1398")"\n"

".hidden ""_dispatch_stub_GetFramebufferParameterivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetFramebufferParameterivEXT")"\n"
"\t"STUB_ASM_CODE("1399")"\n"

".hidden ""_dispatch_stub_CheckNamedFramebufferStatusEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_CheckNamedFramebufferStatusEXT")"\n"
"\t"STUB_ASM_CODE("1400")"\n"

".hidden ""_dispatch_stub_NamedFramebufferTexture1DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedFramebufferTexture1DEXT")"\n"
"\t"STUB_ASM_CODE("1401")"\n"

".hidden ""_dispatch_stub_NamedFramebufferTexture2DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedFramebufferTexture2DEXT")"\n"
"\t"STUB_ASM_CODE("1402")"\n"

".hidden ""_dispatch_stub_NamedFramebufferTexture3DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedFramebufferTexture3DEXT")"\n"
"\t"STUB_ASM_CODE("1403")"\n"

".hidden ""_dispatch_stub_NamedFramebufferRenderbufferEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedFramebufferRenderbufferEXT")"\n"
"\t"STUB_ASM_CODE("1404")"\n"

".hidden ""_dispatch_stub_GetNamedFramebufferAttachmentParameterivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetNamedFramebufferAttachmentParameterivEXT")"\n"
"\t"STUB_ASM_CODE("1405")"\n"

".hidden ""_dispatch_stub_EnableClientStateiEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_EnableClientStateiEXT")"\n"
"\t"STUB_ASM_CODE("1406")"\n"

".hidden ""_dispatch_stub_DisableClientStateiEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_DisableClientStateiEXT")"\n"
"\t"STUB_ASM_CODE("1407")"\n"

".hidden ""_dispatch_stub_GetPointerIndexedvEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetPointerIndexedvEXT")"\n"
"\t"STUB_ASM_CODE("1408")"\n"

".hidden ""_dispatch_stub_MultiTexEnviEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexEnviEXT")"\n"
"\t"STUB_ASM_CODE("1409")"\n"

".hidden ""_dispatch_stub_MultiTexEnvivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexEnvivEXT")"\n"
"\t"STUB_ASM_CODE("1410")"\n"

".hidden ""_dispatch_stub_MultiTexEnvfEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexEnvfEXT")"\n"
"\t"STUB_ASM_CODE("1411")"\n"

".hidden ""_dispatch_stub_MultiTexEnvfvEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexEnvfvEXT")"\n"
"\t"STUB_ASM_CODE("1412")"\n"

".hidden ""_dispatch_stub_GetMultiTexEnvivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetMultiTexEnvivEXT")"\n"
"\t"STUB_ASM_CODE("1413")"\n"

".hidden ""_dispatch_stub_GetMultiTexEnvfvEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetMultiTexEnvfvEXT")"\n"
"\t"STUB_ASM_CODE("1414")"\n"

".hidden ""_dispatch_stub_MultiTexParameteriEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexParameteriEXT")"\n"
"\t"STUB_ASM_CODE("1415")"\n"

".hidden ""_dispatch_stub_MultiTexParameterivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexParameterivEXT")"\n"
"\t"STUB_ASM_CODE("1416")"\n"

".hidden ""_dispatch_stub_MultiTexParameterfEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexParameterfEXT")"\n"
"\t"STUB_ASM_CODE("1417")"\n"

".hidden ""_dispatch_stub_MultiTexParameterfvEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexParameterfvEXT")"\n"
"\t"STUB_ASM_CODE("1418")"\n"

".hidden ""_dispatch_stub_GetMultiTexImageEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetMultiTexImageEXT")"\n"
"\t"STUB_ASM_CODE("1419")"\n"

".hidden ""_dispatch_stub_MultiTexImage1DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexImage1DEXT")"\n"
"\t"STUB_ASM_CODE("1420")"\n"

".hidden ""_dispatch_stub_MultiTexImage2DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexImage2DEXT")"\n"
"\t"STUB_ASM_CODE("1421")"\n"

".hidden ""_dispatch_stub_MultiTexImage3DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexImage3DEXT")"\n"
"\t"STUB_ASM_CODE("1422")"\n"

".hidden ""_dispatch_stub_MultiTexSubImage1DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexSubImage1DEXT")"\n"
"\t"STUB_ASM_CODE("1423")"\n"

".hidden ""_dispatch_stub_MultiTexSubImage2DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexSubImage2DEXT")"\n"
"\t"STUB_ASM_CODE("1424")"\n"

".hidden ""_dispatch_stub_MultiTexSubImage3DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexSubImage3DEXT")"\n"
"\t"STUB_ASM_CODE("1425")"\n"

".hidden ""_dispatch_stub_GetMultiTexParameterivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetMultiTexParameterivEXT")"\n"
"\t"STUB_ASM_CODE("1426")"\n"

".hidden ""_dispatch_stub_GetMultiTexParameterfvEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetMultiTexParameterfvEXT")"\n"
"\t"STUB_ASM_CODE("1427")"\n"

".hidden ""_dispatch_stub_CopyMultiTexImage1DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_CopyMultiTexImage1DEXT")"\n"
"\t"STUB_ASM_CODE("1428")"\n"

".hidden ""_dispatch_stub_CopyMultiTexImage2DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_CopyMultiTexImage2DEXT")"\n"
"\t"STUB_ASM_CODE("1429")"\n"

".hidden ""_dispatch_stub_CopyMultiTexSubImage1DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_CopyMultiTexSubImage1DEXT")"\n"
"\t"STUB_ASM_CODE("1430")"\n"

".hidden ""_dispatch_stub_CopyMultiTexSubImage2DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_CopyMultiTexSubImage2DEXT")"\n"
"\t"STUB_ASM_CODE("1431")"\n"

".hidden ""_dispatch_stub_CopyMultiTexSubImage3DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_CopyMultiTexSubImage3DEXT")"\n"
"\t"STUB_ASM_CODE("1432")"\n"

".hidden ""_dispatch_stub_MultiTexGendEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexGendEXT")"\n"
"\t"STUB_ASM_CODE("1433")"\n"

".hidden ""_dispatch_stub_MultiTexGendvEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexGendvEXT")"\n"
"\t"STUB_ASM_CODE("1434")"\n"

".hidden ""_dispatch_stub_MultiTexGenfEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexGenfEXT")"\n"
"\t"STUB_ASM_CODE("1435")"\n"

".hidden ""_dispatch_stub_MultiTexGenfvEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexGenfvEXT")"\n"
"\t"STUB_ASM_CODE("1436")"\n"

".hidden ""_dispatch_stub_MultiTexGeniEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexGeniEXT")"\n"
"\t"STUB_ASM_CODE("1437")"\n"

".hidden ""_dispatch_stub_MultiTexGenivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexGenivEXT")"\n"
"\t"STUB_ASM_CODE("1438")"\n"

".hidden ""_dispatch_stub_GetMultiTexGendvEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetMultiTexGendvEXT")"\n"
"\t"STUB_ASM_CODE("1439")"\n"

".hidden ""_dispatch_stub_GetMultiTexGenfvEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetMultiTexGenfvEXT")"\n"
"\t"STUB_ASM_CODE("1440")"\n"

".hidden ""_dispatch_stub_GetMultiTexGenivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetMultiTexGenivEXT")"\n"
"\t"STUB_ASM_CODE("1441")"\n"

".hidden ""_dispatch_stub_MultiTexCoordPointerEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoordPointerEXT")"\n"
"\t"STUB_ASM_CODE("1442")"\n"

".hidden ""_dispatch_stub_BindImageTextureEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_BindImageTextureEXT")"\n"
"\t"STUB_ASM_CODE("1443")"\n"

".hidden ""_dispatch_stub_CompressedTextureImage1DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_CompressedTextureImage1DEXT")"\n"
"\t"STUB_ASM_CODE("1444")"\n"

".hidden ""_dispatch_stub_CompressedTextureImage2DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_CompressedTextureImage2DEXT")"\n"
"\t"STUB_ASM_CODE("1445")"\n"

".hidden ""_dispatch_stub_CompressedTextureImage3DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_CompressedTextureImage3DEXT")"\n"
"\t"STUB_ASM_CODE("1446")"\n"

".hidden ""_dispatch_stub_CompressedTextureSubImage1DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_CompressedTextureSubImage1DEXT")"\n"
"\t"STUB_ASM_CODE("1447")"\n"

".hidden ""_dispatch_stub_CompressedTextureSubImage2DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_CompressedTextureSubImage2DEXT")"\n"
"\t"STUB_ASM_CODE("1448")"\n"

".hidden ""_dispatch_stub_CompressedTextureSubImage3DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_CompressedTextureSubImage3DEXT")"\n"
"\t"STUB_ASM_CODE("1449")"\n"

".hidden ""_dispatch_stub_GetCompressedTextureImageEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetCompressedTextureImageEXT")"\n"
"\t"STUB_ASM_CODE("1450")"\n"

".hidden ""_dispatch_stub_CompressedMultiTexImage1DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_CompressedMultiTexImage1DEXT")"\n"
"\t"STUB_ASM_CODE("1451")"\n"

".hidden ""_dispatch_stub_CompressedMultiTexImage2DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_CompressedMultiTexImage2DEXT")"\n"
"\t"STUB_ASM_CODE("1452")"\n"

".hidden ""_dispatch_stub_CompressedMultiTexImage3DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_CompressedMultiTexImage3DEXT")"\n"
"\t"STUB_ASM_CODE("1453")"\n"

".hidden ""_dispatch_stub_CompressedMultiTexSubImage1DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_CompressedMultiTexSubImage1DEXT")"\n"
"\t"STUB_ASM_CODE("1454")"\n"

".hidden ""_dispatch_stub_CompressedMultiTexSubImage2DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_CompressedMultiTexSubImage2DEXT")"\n"
"\t"STUB_ASM_CODE("1455")"\n"

".hidden ""_dispatch_stub_CompressedMultiTexSubImage3DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_CompressedMultiTexSubImage3DEXT")"\n"
"\t"STUB_ASM_CODE("1456")"\n"

".hidden ""_dispatch_stub_GetCompressedMultiTexImageEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetCompressedMultiTexImageEXT")"\n"
"\t"STUB_ASM_CODE("1457")"\n"

".hidden ""_dispatch_stub_GetMultiTexLevelParameterivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetMultiTexLevelParameterivEXT")"\n"
"\t"STUB_ASM_CODE("1458")"\n"

".hidden ""_dispatch_stub_GetMultiTexLevelParameterfvEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetMultiTexLevelParameterfvEXT")"\n"
"\t"STUB_ASM_CODE("1459")"\n"

".hidden ""_dispatch_stub_FramebufferParameteriMESA""\n"
STUB_ASM_ENTRY("_dispatch_stub_FramebufferParameteriMESA")"\n"
"\t"STUB_ASM_CODE("1460")"\n"

".hidden ""_dispatch_stub_GetFramebufferParameterivMESA""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetFramebufferParameterivMESA")"\n"
"\t"STUB_ASM_CODE("1461")"\n"

".hidden ""_dispatch_stub_NamedRenderbufferStorageEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedRenderbufferStorageEXT")"\n"
"\t"STUB_ASM_CODE("1462")"\n"

".hidden ""_dispatch_stub_GetNamedRenderbufferParameterivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetNamedRenderbufferParameterivEXT")"\n"
"\t"STUB_ASM_CODE("1463")"\n"

".hidden ""_dispatch_stub_ClientAttribDefaultEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClientAttribDefaultEXT")"\n"
"\t"STUB_ASM_CODE("1464")"\n"

".hidden ""_dispatch_stub_PushClientAttribDefaultEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_PushClientAttribDefaultEXT")"\n"
"\t"STUB_ASM_CODE("1465")"\n"

".hidden ""_dispatch_stub_NamedProgramStringEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedProgramStringEXT")"\n"
"\t"STUB_ASM_CODE("1466")"\n"

".hidden ""_dispatch_stub_GetNamedProgramStringEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetNamedProgramStringEXT")"\n"
"\t"STUB_ASM_CODE("1467")"\n"

".hidden ""_dispatch_stub_NamedProgramLocalParameter4fEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedProgramLocalParameter4fEXT")"\n"
"\t"STUB_ASM_CODE("1468")"\n"

".hidden ""_dispatch_stub_NamedProgramLocalParameter4fvEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedProgramLocalParameter4fvEXT")"\n"
"\t"STUB_ASM_CODE("1469")"\n"

".hidden ""_dispatch_stub_GetNamedProgramLocalParameterfvEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetNamedProgramLocalParameterfvEXT")"\n"
"\t"STUB_ASM_CODE("1470")"\n"

".hidden ""_dispatch_stub_NamedProgramLocalParameter4dEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedProgramLocalParameter4dEXT")"\n"
"\t"STUB_ASM_CODE("1471")"\n"

".hidden ""_dispatch_stub_NamedProgramLocalParameter4dvEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedProgramLocalParameter4dvEXT")"\n"
"\t"STUB_ASM_CODE("1472")"\n"

".hidden ""_dispatch_stub_GetNamedProgramLocalParameterdvEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetNamedProgramLocalParameterdvEXT")"\n"
"\t"STUB_ASM_CODE("1473")"\n"

".hidden ""_dispatch_stub_GetNamedProgramivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetNamedProgramivEXT")"\n"
"\t"STUB_ASM_CODE("1474")"\n"

".hidden ""_dispatch_stub_TextureBufferEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureBufferEXT")"\n"
"\t"STUB_ASM_CODE("1475")"\n"

".hidden ""_dispatch_stub_MultiTexBufferEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexBufferEXT")"\n"
"\t"STUB_ASM_CODE("1476")"\n"

".hidden ""_dispatch_stub_TextureParameterIivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureParameterIivEXT")"\n"
"\t"STUB_ASM_CODE("1477")"\n"

".hidden ""_dispatch_stub_TextureParameterIuivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureParameterIuivEXT")"\n"
"\t"STUB_ASM_CODE("1478")"\n"

".hidden ""_dispatch_stub_GetTextureParameterIivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTextureParameterIivEXT")"\n"
"\t"STUB_ASM_CODE("1479")"\n"

".hidden ""_dispatch_stub_GetTextureParameterIuivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetTextureParameterIuivEXT")"\n"
"\t"STUB_ASM_CODE("1480")"\n"

".hidden ""_dispatch_stub_MultiTexParameterIivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexParameterIivEXT")"\n"
"\t"STUB_ASM_CODE("1481")"\n"

".hidden ""_dispatch_stub_MultiTexParameterIuivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexParameterIuivEXT")"\n"
"\t"STUB_ASM_CODE("1482")"\n"

".hidden ""_dispatch_stub_GetMultiTexParameterIivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetMultiTexParameterIivEXT")"\n"
"\t"STUB_ASM_CODE("1483")"\n"

".hidden ""_dispatch_stub_GetMultiTexParameterIuivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetMultiTexParameterIuivEXT")"\n"
"\t"STUB_ASM_CODE("1484")"\n"

".hidden ""_dispatch_stub_NamedProgramLocalParameters4fvEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedProgramLocalParameters4fvEXT")"\n"
"\t"STUB_ASM_CODE("1485")"\n"

".hidden ""_dispatch_stub_GenerateTextureMipmapEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GenerateTextureMipmapEXT")"\n"
"\t"STUB_ASM_CODE("1486")"\n"

".hidden ""_dispatch_stub_GenerateMultiTexMipmapEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GenerateMultiTexMipmapEXT")"\n"
"\t"STUB_ASM_CODE("1487")"\n"

".hidden ""_dispatch_stub_NamedRenderbufferStorageMultisampleEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedRenderbufferStorageMultisampleEXT")"\n"
"\t"STUB_ASM_CODE("1488")"\n"

".hidden ""_dispatch_stub_NamedCopyBufferSubDataEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedCopyBufferSubDataEXT")"\n"
"\t"STUB_ASM_CODE("1489")"\n"

".hidden ""_dispatch_stub_VertexArrayVertexOffsetEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexArrayVertexOffsetEXT")"\n"
"\t"STUB_ASM_CODE("1490")"\n"

".hidden ""_dispatch_stub_VertexArrayColorOffsetEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexArrayColorOffsetEXT")"\n"
"\t"STUB_ASM_CODE("1491")"\n"

".hidden ""_dispatch_stub_VertexArrayEdgeFlagOffsetEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexArrayEdgeFlagOffsetEXT")"\n"
"\t"STUB_ASM_CODE("1492")"\n"

".hidden ""_dispatch_stub_VertexArrayIndexOffsetEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexArrayIndexOffsetEXT")"\n"
"\t"STUB_ASM_CODE("1493")"\n"

".hidden ""_dispatch_stub_VertexArrayNormalOffsetEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexArrayNormalOffsetEXT")"\n"
"\t"STUB_ASM_CODE("1494")"\n"

".hidden ""_dispatch_stub_VertexArrayTexCoordOffsetEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexArrayTexCoordOffsetEXT")"\n"
"\t"STUB_ASM_CODE("1495")"\n"

".hidden ""_dispatch_stub_VertexArrayMultiTexCoordOffsetEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexArrayMultiTexCoordOffsetEXT")"\n"
"\t"STUB_ASM_CODE("1496")"\n"

".hidden ""_dispatch_stub_VertexArrayFogCoordOffsetEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexArrayFogCoordOffsetEXT")"\n"
"\t"STUB_ASM_CODE("1497")"\n"

".hidden ""_dispatch_stub_VertexArraySecondaryColorOffsetEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexArraySecondaryColorOffsetEXT")"\n"
"\t"STUB_ASM_CODE("1498")"\n"

".hidden ""_dispatch_stub_VertexArrayVertexAttribOffsetEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexArrayVertexAttribOffsetEXT")"\n"
"\t"STUB_ASM_CODE("1499")"\n"

".hidden ""_dispatch_stub_VertexArrayVertexAttribIOffsetEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexArrayVertexAttribIOffsetEXT")"\n"
"\t"STUB_ASM_CODE("1500")"\n"

".hidden ""_dispatch_stub_EnableVertexArrayEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_EnableVertexArrayEXT")"\n"
"\t"STUB_ASM_CODE("1501")"\n"

".hidden ""_dispatch_stub_DisableVertexArrayEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_DisableVertexArrayEXT")"\n"
"\t"STUB_ASM_CODE("1502")"\n"

".hidden ""_dispatch_stub_EnableVertexArrayAttribEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_EnableVertexArrayAttribEXT")"\n"
"\t"STUB_ASM_CODE("1503")"\n"

".hidden ""_dispatch_stub_DisableVertexArrayAttribEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_DisableVertexArrayAttribEXT")"\n"
"\t"STUB_ASM_CODE("1504")"\n"

".hidden ""_dispatch_stub_GetVertexArrayIntegervEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetVertexArrayIntegervEXT")"\n"
"\t"STUB_ASM_CODE("1505")"\n"

".hidden ""_dispatch_stub_GetVertexArrayPointervEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetVertexArrayPointervEXT")"\n"
"\t"STUB_ASM_CODE("1506")"\n"

".hidden ""_dispatch_stub_GetVertexArrayIntegeri_vEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetVertexArrayIntegeri_vEXT")"\n"
"\t"STUB_ASM_CODE("1507")"\n"

".hidden ""_dispatch_stub_GetVertexArrayPointeri_vEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetVertexArrayPointeri_vEXT")"\n"
"\t"STUB_ASM_CODE("1508")"\n"

".hidden ""_dispatch_stub_ClearNamedBufferDataEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClearNamedBufferDataEXT")"\n"
"\t"STUB_ASM_CODE("1509")"\n"

".hidden ""_dispatch_stub_ClearNamedBufferSubDataEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_ClearNamedBufferSubDataEXT")"\n"
"\t"STUB_ASM_CODE("1510")"\n"

".hidden ""_dispatch_stub_NamedFramebufferParameteriEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedFramebufferParameteriEXT")"\n"
"\t"STUB_ASM_CODE("1511")"\n"

".hidden ""_dispatch_stub_GetNamedFramebufferParameterivEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetNamedFramebufferParameterivEXT")"\n"
"\t"STUB_ASM_CODE("1512")"\n"

".hidden ""_dispatch_stub_VertexArrayVertexAttribLOffsetEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexArrayVertexAttribLOffsetEXT")"\n"
"\t"STUB_ASM_CODE("1513")"\n"

".hidden ""_dispatch_stub_VertexArrayVertexAttribDivisorEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexArrayVertexAttribDivisorEXT")"\n"
"\t"STUB_ASM_CODE("1514")"\n"

".hidden ""_dispatch_stub_TextureBufferRangeEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureBufferRangeEXT")"\n"
"\t"STUB_ASM_CODE("1515")"\n"

".hidden ""_dispatch_stub_TextureStorage2DMultisampleEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureStorage2DMultisampleEXT")"\n"
"\t"STUB_ASM_CODE("1516")"\n"

".hidden ""_dispatch_stub_TextureStorage3DMultisampleEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TextureStorage3DMultisampleEXT")"\n"
"\t"STUB_ASM_CODE("1517")"\n"

".hidden ""_dispatch_stub_VertexArrayBindVertexBufferEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexArrayBindVertexBufferEXT")"\n"
"\t"STUB_ASM_CODE("1518")"\n"

".hidden ""_dispatch_stub_VertexArrayVertexAttribFormatEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexArrayVertexAttribFormatEXT")"\n"
"\t"STUB_ASM_CODE("1519")"\n"

".hidden ""_dispatch_stub_VertexArrayVertexAttribIFormatEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexArrayVertexAttribIFormatEXT")"\n"
"\t"STUB_ASM_CODE("1520")"\n"

".hidden ""_dispatch_stub_VertexArrayVertexAttribLFormatEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexArrayVertexAttribLFormatEXT")"\n"
"\t"STUB_ASM_CODE("1521")"\n"

".hidden ""_dispatch_stub_VertexArrayVertexAttribBindingEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexArrayVertexAttribBindingEXT")"\n"
"\t"STUB_ASM_CODE("1522")"\n"

".hidden ""_dispatch_stub_VertexArrayVertexBindingDivisorEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexArrayVertexBindingDivisorEXT")"\n"
"\t"STUB_ASM_CODE("1523")"\n"

".hidden ""_dispatch_stub_NamedBufferPageCommitmentEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedBufferPageCommitmentEXT")"\n"
"\t"STUB_ASM_CODE("1524")"\n"

".hidden ""_dispatch_stub_NamedStringARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedStringARB")"\n"
"\t"STUB_ASM_CODE("1525")"\n"

".hidden ""_dispatch_stub_DeleteNamedStringARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_DeleteNamedStringARB")"\n"
"\t"STUB_ASM_CODE("1526")"\n"

".hidden ""_dispatch_stub_CompileShaderIncludeARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_CompileShaderIncludeARB")"\n"
"\t"STUB_ASM_CODE("1527")"\n"

".hidden ""_dispatch_stub_IsNamedStringARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_IsNamedStringARB")"\n"
"\t"STUB_ASM_CODE("1528")"\n"

".hidden ""_dispatch_stub_GetNamedStringARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetNamedStringARB")"\n"
"\t"STUB_ASM_CODE("1529")"\n"

".hidden ""_dispatch_stub_GetNamedStringivARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetNamedStringivARB")"\n"
"\t"STUB_ASM_CODE("1530")"\n"

".hidden ""_dispatch_stub_EGLImageTargetTexStorageEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_EGLImageTargetTexStorageEXT")"\n"
"\t"STUB_ASM_CODE("1531")"\n"

".hidden ""_dispatch_stub_EGLImageTargetTextureStorageEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_EGLImageTargetTextureStorageEXT")"\n"
"\t"STUB_ASM_CODE("1532")"\n"

".hidden ""_dispatch_stub_CopyImageSubDataNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_CopyImageSubDataNV")"\n"
"\t"STUB_ASM_CODE("1533")"\n"

".hidden ""_dispatch_stub_ViewportSwizzleNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_ViewportSwizzleNV")"\n"
"\t"STUB_ASM_CODE("1534")"\n"

".hidden ""_dispatch_stub_AlphaToCoverageDitherControlNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_AlphaToCoverageDitherControlNV")"\n"
"\t"STUB_ASM_CODE("1535")"\n"

".hidden ""_dispatch_stub_InternalBufferSubDataCopyMESA""\n"
STUB_ASM_ENTRY("_dispatch_stub_InternalBufferSubDataCopyMESA")"\n"
"\t"STUB_ASM_CODE("1536")"\n"

".hidden ""_dispatch_stub_Vertex2hNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex2hNV")"\n"
"\t"STUB_ASM_CODE("1537")"\n"

".hidden ""_dispatch_stub_Vertex2hvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex2hvNV")"\n"
"\t"STUB_ASM_CODE("1538")"\n"

".hidden ""_dispatch_stub_Vertex3hNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex3hNV")"\n"
"\t"STUB_ASM_CODE("1539")"\n"

".hidden ""_dispatch_stub_Vertex3hvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex3hvNV")"\n"
"\t"STUB_ASM_CODE("1540")"\n"

".hidden ""_dispatch_stub_Vertex4hNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex4hNV")"\n"
"\t"STUB_ASM_CODE("1541")"\n"

".hidden ""_dispatch_stub_Vertex4hvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_Vertex4hvNV")"\n"
"\t"STUB_ASM_CODE("1542")"\n"

".hidden ""_dispatch_stub_Normal3hNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_Normal3hNV")"\n"
"\t"STUB_ASM_CODE("1543")"\n"

".hidden ""_dispatch_stub_Normal3hvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_Normal3hvNV")"\n"
"\t"STUB_ASM_CODE("1544")"\n"

".hidden ""_dispatch_stub_Color3hNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color3hNV")"\n"
"\t"STUB_ASM_CODE("1545")"\n"

".hidden ""_dispatch_stub_Color3hvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color3hvNV")"\n"
"\t"STUB_ASM_CODE("1546")"\n"

".hidden ""_dispatch_stub_Color4hNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color4hNV")"\n"
"\t"STUB_ASM_CODE("1547")"\n"

".hidden ""_dispatch_stub_Color4hvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_Color4hvNV")"\n"
"\t"STUB_ASM_CODE("1548")"\n"

".hidden ""_dispatch_stub_TexCoord1hNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord1hNV")"\n"
"\t"STUB_ASM_CODE("1549")"\n"

".hidden ""_dispatch_stub_TexCoord1hvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord1hvNV")"\n"
"\t"STUB_ASM_CODE("1550")"\n"

".hidden ""_dispatch_stub_TexCoord2hNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord2hNV")"\n"
"\t"STUB_ASM_CODE("1551")"\n"

".hidden ""_dispatch_stub_TexCoord2hvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord2hvNV")"\n"
"\t"STUB_ASM_CODE("1552")"\n"

".hidden ""_dispatch_stub_TexCoord3hNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord3hNV")"\n"
"\t"STUB_ASM_CODE("1553")"\n"

".hidden ""_dispatch_stub_TexCoord3hvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord3hvNV")"\n"
"\t"STUB_ASM_CODE("1554")"\n"

".hidden ""_dispatch_stub_TexCoord4hNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord4hNV")"\n"
"\t"STUB_ASM_CODE("1555")"\n"

".hidden ""_dispatch_stub_TexCoord4hvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexCoord4hvNV")"\n"
"\t"STUB_ASM_CODE("1556")"\n"

".hidden ""_dispatch_stub_MultiTexCoord1hNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord1hNV")"\n"
"\t"STUB_ASM_CODE("1557")"\n"

".hidden ""_dispatch_stub_MultiTexCoord1hvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord1hvNV")"\n"
"\t"STUB_ASM_CODE("1558")"\n"

".hidden ""_dispatch_stub_MultiTexCoord2hNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord2hNV")"\n"
"\t"STUB_ASM_CODE("1559")"\n"

".hidden ""_dispatch_stub_MultiTexCoord2hvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord2hvNV")"\n"
"\t"STUB_ASM_CODE("1560")"\n"

".hidden ""_dispatch_stub_MultiTexCoord3hNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord3hNV")"\n"
"\t"STUB_ASM_CODE("1561")"\n"

".hidden ""_dispatch_stub_MultiTexCoord3hvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord3hvNV")"\n"
"\t"STUB_ASM_CODE("1562")"\n"

".hidden ""_dispatch_stub_MultiTexCoord4hNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord4hNV")"\n"
"\t"STUB_ASM_CODE("1563")"\n"

".hidden ""_dispatch_stub_MultiTexCoord4hvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiTexCoord4hvNV")"\n"
"\t"STUB_ASM_CODE("1564")"\n"

".hidden ""_dispatch_stub_FogCoordhNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_FogCoordhNV")"\n"
"\t"STUB_ASM_CODE("1565")"\n"

".hidden ""_dispatch_stub_FogCoordhvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_FogCoordhvNV")"\n"
"\t"STUB_ASM_CODE("1566")"\n"

".hidden ""_dispatch_stub_SecondaryColor3hNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_SecondaryColor3hNV")"\n"
"\t"STUB_ASM_CODE("1567")"\n"

".hidden ""_dispatch_stub_SecondaryColor3hvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_SecondaryColor3hvNV")"\n"
"\t"STUB_ASM_CODE("1568")"\n"

".hidden ""_dispatch_stub_InternalSetError""\n"
STUB_ASM_ENTRY("_dispatch_stub_InternalSetError")"\n"
"\t"STUB_ASM_CODE("1569")"\n"

".hidden ""_dispatch_stub_VertexAttrib1hNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib1hNV")"\n"
"\t"STUB_ASM_CODE("1570")"\n"

".hidden ""_dispatch_stub_VertexAttrib1hvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib1hvNV")"\n"
"\t"STUB_ASM_CODE("1571")"\n"

".hidden ""_dispatch_stub_VertexAttrib2hNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib2hNV")"\n"
"\t"STUB_ASM_CODE("1572")"\n"

".hidden ""_dispatch_stub_VertexAttrib2hvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib2hvNV")"\n"
"\t"STUB_ASM_CODE("1573")"\n"

".hidden ""_dispatch_stub_VertexAttrib3hNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib3hNV")"\n"
"\t"STUB_ASM_CODE("1574")"\n"

".hidden ""_dispatch_stub_VertexAttrib3hvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib3hvNV")"\n"
"\t"STUB_ASM_CODE("1575")"\n"

".hidden ""_dispatch_stub_VertexAttrib4hNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib4hNV")"\n"
"\t"STUB_ASM_CODE("1576")"\n"

".hidden ""_dispatch_stub_VertexAttrib4hvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttrib4hvNV")"\n"
"\t"STUB_ASM_CODE("1577")"\n"

".hidden ""_dispatch_stub_VertexAttribs1hvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribs1hvNV")"\n"
"\t"STUB_ASM_CODE("1578")"\n"

".hidden ""_dispatch_stub_VertexAttribs2hvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribs2hvNV")"\n"
"\t"STUB_ASM_CODE("1579")"\n"

".hidden ""_dispatch_stub_VertexAttribs3hvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribs3hvNV")"\n"
"\t"STUB_ASM_CODE("1580")"\n"

".hidden ""_dispatch_stub_VertexAttribs4hvNV""\n"
STUB_ASM_ENTRY("_dispatch_stub_VertexAttribs4hvNV")"\n"
"\t"STUB_ASM_CODE("1581")"\n"

".hidden ""_dispatch_stub_TexPageCommitmentARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexPageCommitmentARB")"\n"
"\t"STUB_ASM_CODE("1582")"\n"

".hidden ""_dispatch_stub_TexturePageCommitmentEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexturePageCommitmentEXT")"\n"
"\t"STUB_ASM_CODE("1583")"\n"

".hidden ""_dispatch_stub_ImportMemoryWin32HandleEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_ImportMemoryWin32HandleEXT")"\n"
"\t"STUB_ASM_CODE("1584")"\n"

".hidden ""_dispatch_stub_ImportSemaphoreWin32HandleEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_ImportSemaphoreWin32HandleEXT")"\n"
"\t"STUB_ASM_CODE("1585")"\n"

".hidden ""_dispatch_stub_ImportMemoryWin32NameEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_ImportMemoryWin32NameEXT")"\n"
"\t"STUB_ASM_CODE("1586")"\n"

".hidden ""_dispatch_stub_ImportSemaphoreWin32NameEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_ImportSemaphoreWin32NameEXT")"\n"
"\t"STUB_ASM_CODE("1587")"\n"

".hidden ""_dispatch_stub_GetObjectLabelEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetObjectLabelEXT")"\n"
"\t"STUB_ASM_CODE("1588")"\n"

".hidden ""_dispatch_stub_LabelObjectEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_LabelObjectEXT")"\n"
"\t"STUB_ASM_CODE("1589")"\n"

".hidden ""_dispatch_stub_DrawArraysUserBuf""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawArraysUserBuf")"\n"
"\t"STUB_ASM_CODE("1590")"\n"

".hidden ""_dispatch_stub_DrawElementsUserBuf""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawElementsUserBuf")"\n"
"\t"STUB_ASM_CODE("1591")"\n"

".hidden ""_dispatch_stub_MultiDrawArraysUserBuf""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiDrawArraysUserBuf")"\n"
"\t"STUB_ASM_CODE("1592")"\n"

".hidden ""_dispatch_stub_MultiDrawElementsUserBuf""\n"
STUB_ASM_ENTRY("_dispatch_stub_MultiDrawElementsUserBuf")"\n"
"\t"STUB_ASM_CODE("1593")"\n"

".hidden ""_dispatch_stub_DrawArraysInstancedBaseInstanceDrawID""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawArraysInstancedBaseInstanceDrawID")"\n"
"\t"STUB_ASM_CODE("1594")"\n"

".hidden ""_dispatch_stub_DrawElementsInstancedBaseVertexBaseInstanceDrawID""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawElementsInstancedBaseVertexBaseInstanceDrawID")"\n"
"\t"STUB_ASM_CODE("1595")"\n"

".hidden ""_dispatch_stub_InternalInvalidateFramebufferAncillaryMESA""\n"
STUB_ASM_ENTRY("_dispatch_stub_InternalInvalidateFramebufferAncillaryMESA")"\n"
"\t"STUB_ASM_CODE("1596")"\n"

".hidden ""_dispatch_stub_DrawElementsPacked""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawElementsPacked")"\n"
"\t"STUB_ASM_CODE("1597")"\n"

".hidden ""_dispatch_stub_DrawElementsUserBufPacked""\n"
STUB_ASM_ENTRY("_dispatch_stub_DrawElementsUserBufPacked")"\n"
"\t"STUB_ASM_CODE("1598")"\n"

".hidden ""_dispatch_stub_TexStorageAttribs2DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexStorageAttribs2DEXT")"\n"
"\t"STUB_ASM_CODE("1599")"\n"

".hidden ""_dispatch_stub_TexStorageAttribs3DEXT""\n"
STUB_ASM_ENTRY("_dispatch_stub_TexStorageAttribs3DEXT")"\n"
"\t"STUB_ASM_CODE("1600")"\n"

".hidden ""_dispatch_stub_FramebufferTextureMultiviewOVR""\n"
STUB_ASM_ENTRY("_dispatch_stub_FramebufferTextureMultiviewOVR")"\n"
"\t"STUB_ASM_CODE("1601")"\n"

".hidden ""_dispatch_stub_NamedFramebufferTextureMultiviewOVR""\n"
STUB_ASM_ENTRY("_dispatch_stub_NamedFramebufferTextureMultiviewOVR")"\n"
"\t"STUB_ASM_CODE("1602")"\n"

".hidden ""_dispatch_stub_FramebufferTextureMultisampleMultiviewOVR""\n"
STUB_ASM_ENTRY("_dispatch_stub_FramebufferTextureMultisampleMultiviewOVR")"\n"
"\t"STUB_ASM_CODE("1603")"\n"

".hidden ""_dispatch_stub_ColorTable""\n"
STUB_ASM_ENTRY("_dispatch_stub_ColorTable")"\n"
"\t"STUB_ASM_CODE("1604")"\n"

".hidden ""_dispatch_stub_ColorTableParameterfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ColorTableParameterfv")"\n"
"\t"STUB_ASM_CODE("1605")"\n"

".hidden ""_dispatch_stub_ColorTableParameteriv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ColorTableParameteriv")"\n"
"\t"STUB_ASM_CODE("1606")"\n"

".hidden ""_dispatch_stub_CopyColorTable""\n"
STUB_ASM_ENTRY("_dispatch_stub_CopyColorTable")"\n"
"\t"STUB_ASM_CODE("1607")"\n"

".hidden ""_dispatch_stub_GetColorTable""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetColorTable")"\n"
"\t"STUB_ASM_CODE("1608")"\n"

".hidden ""_dispatch_stub_GetColorTableParameterfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetColorTableParameterfv")"\n"
"\t"STUB_ASM_CODE("1609")"\n"

".hidden ""_dispatch_stub_GetColorTableParameteriv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetColorTableParameteriv")"\n"
"\t"STUB_ASM_CODE("1610")"\n"

".hidden ""_dispatch_stub_ColorSubTable""\n"
STUB_ASM_ENTRY("_dispatch_stub_ColorSubTable")"\n"
"\t"STUB_ASM_CODE("1611")"\n"

".hidden ""_dispatch_stub_CopyColorSubTable""\n"
STUB_ASM_ENTRY("_dispatch_stub_CopyColorSubTable")"\n"
"\t"STUB_ASM_CODE("1612")"\n"

".hidden ""_dispatch_stub_ConvolutionFilter1D""\n"
STUB_ASM_ENTRY("_dispatch_stub_ConvolutionFilter1D")"\n"
"\t"STUB_ASM_CODE("1613")"\n"

".hidden ""_dispatch_stub_ConvolutionFilter2D""\n"
STUB_ASM_ENTRY("_dispatch_stub_ConvolutionFilter2D")"\n"
"\t"STUB_ASM_CODE("1614")"\n"

".hidden ""_dispatch_stub_ConvolutionParameterf""\n"
STUB_ASM_ENTRY("_dispatch_stub_ConvolutionParameterf")"\n"
"\t"STUB_ASM_CODE("1615")"\n"

".hidden ""_dispatch_stub_ConvolutionParameterfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ConvolutionParameterfv")"\n"
"\t"STUB_ASM_CODE("1616")"\n"

".hidden ""_dispatch_stub_ConvolutionParameteri""\n"
STUB_ASM_ENTRY("_dispatch_stub_ConvolutionParameteri")"\n"
"\t"STUB_ASM_CODE("1617")"\n"

".hidden ""_dispatch_stub_ConvolutionParameteriv""\n"
STUB_ASM_ENTRY("_dispatch_stub_ConvolutionParameteriv")"\n"
"\t"STUB_ASM_CODE("1618")"\n"

".hidden ""_dispatch_stub_CopyConvolutionFilter1D""\n"
STUB_ASM_ENTRY("_dispatch_stub_CopyConvolutionFilter1D")"\n"
"\t"STUB_ASM_CODE("1619")"\n"

".hidden ""_dispatch_stub_CopyConvolutionFilter2D""\n"
STUB_ASM_ENTRY("_dispatch_stub_CopyConvolutionFilter2D")"\n"
"\t"STUB_ASM_CODE("1620")"\n"

".hidden ""_dispatch_stub_GetConvolutionFilter""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetConvolutionFilter")"\n"
"\t"STUB_ASM_CODE("1621")"\n"

".hidden ""_dispatch_stub_GetConvolutionParameterfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetConvolutionParameterfv")"\n"
"\t"STUB_ASM_CODE("1622")"\n"

".hidden ""_dispatch_stub_GetConvolutionParameteriv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetConvolutionParameteriv")"\n"
"\t"STUB_ASM_CODE("1623")"\n"

".hidden ""_dispatch_stub_GetSeparableFilter""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetSeparableFilter")"\n"
"\t"STUB_ASM_CODE("1624")"\n"

".hidden ""_dispatch_stub_SeparableFilter2D""\n"
STUB_ASM_ENTRY("_dispatch_stub_SeparableFilter2D")"\n"
"\t"STUB_ASM_CODE("1625")"\n"

".hidden ""_dispatch_stub_GetHistogram""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetHistogram")"\n"
"\t"STUB_ASM_CODE("1626")"\n"

".hidden ""_dispatch_stub_GetHistogramParameterfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetHistogramParameterfv")"\n"
"\t"STUB_ASM_CODE("1627")"\n"

".hidden ""_dispatch_stub_GetHistogramParameteriv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetHistogramParameteriv")"\n"
"\t"STUB_ASM_CODE("1628")"\n"

".hidden ""_dispatch_stub_GetMinmax""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetMinmax")"\n"
"\t"STUB_ASM_CODE("1629")"\n"

".hidden ""_dispatch_stub_GetMinmaxParameterfv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetMinmaxParameterfv")"\n"
"\t"STUB_ASM_CODE("1630")"\n"

".hidden ""_dispatch_stub_GetMinmaxParameteriv""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetMinmaxParameteriv")"\n"
"\t"STUB_ASM_CODE("1631")"\n"

".hidden ""_dispatch_stub_Histogram""\n"
STUB_ASM_ENTRY("_dispatch_stub_Histogram")"\n"
"\t"STUB_ASM_CODE("1632")"\n"

".hidden ""_dispatch_stub_Minmax""\n"
STUB_ASM_ENTRY("_dispatch_stub_Minmax")"\n"
"\t"STUB_ASM_CODE("1633")"\n"

".hidden ""_dispatch_stub_ResetHistogram""\n"
STUB_ASM_ENTRY("_dispatch_stub_ResetHistogram")"\n"
"\t"STUB_ASM_CODE("1634")"\n"

".hidden ""_dispatch_stub_ResetMinmax""\n"
STUB_ASM_ENTRY("_dispatch_stub_ResetMinmax")"\n"
"\t"STUB_ASM_CODE("1635")"\n"

".hidden ""_dispatch_stub_GetnColorTableARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetnColorTableARB")"\n"
"\t"STUB_ASM_CODE("1636")"\n"

".hidden ""_dispatch_stub_GetnConvolutionFilterARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetnConvolutionFilterARB")"\n"
"\t"STUB_ASM_CODE("1637")"\n"

".hidden ""_dispatch_stub_GetnHistogramARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetnHistogramARB")"\n"
"\t"STUB_ASM_CODE("1638")"\n"

".hidden ""_dispatch_stub_GetnMinmaxARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetnMinmaxARB")"\n"
"\t"STUB_ASM_CODE("1639")"\n"

".hidden ""_dispatch_stub_GetnSeparableFilterARB""\n"
STUB_ASM_ENTRY("_dispatch_stub_GetnSeparableFilterARB")"\n"
"\t"STUB_ASM_CODE("1640")"\n"

);
#undef MAPI_TMP_STUB_ASM_GCC
#endif /* MAPI_TMP_STUB_ASM_GCC */
