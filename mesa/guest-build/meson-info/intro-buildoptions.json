[
  {
    "name": "auto_features",
    "value": "auto",
    "section": "core",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Override value of all 'auto' features"
  },
  {
    "name": "backend",
    "value": "ninja",
    "section": "core",
    "machine": "any",
    "choices": [
      "ninja",
      "vs",
      "vs2010",
      "vs2012",
      "vs2013",
      "vs2015",
      "vs2017",
      "vs2019",
      "vs2022",
      "xcode",
      "none"
    ],
    "type": "combo",
    "description": "Backend to use"
  },
  {
    "name": "genvslite",
    "value": "vs2022",
    "section": "core",
    "machine": "any",
    "choices": [
      "vs2022"
    ],
    "type": "combo",
    "description": "Setup multiple buildtype-suffixed ninja-backend build directories, and a [builddir]_vs containing a Visual Studio meta-backend with multiple configurations that calls into them"
  },
  {
    "name": "buildtype",
    "value": "debugoptimized",
    "section": "core",
    "machine": "any",
    "choices": [
      "plain",
      "debug",
      "debugoptimized",
      "release",
      "minsize",
      "custom"
    ],
    "type": "combo",
    "description": "Build type to use"
  },
  {
    "name": "debug",
    "value": true,
    "section": "core",
    "machine": "any",
    "type": "boolean",
    "description": "Enable debug symbols and other information"
  },
  {
    "name": "default_library",
    "value": "shared",
    "section": "core",
    "machine": "any",
    "choices": [
      "shared",
      "static",
      "both"
    ],
    "type": "combo",
    "description": "Default library type"
  },
  {
    "name": "default_both_libraries",
    "value": "shared",
    "section": "core",
    "machine": "any",
    "choices": [
      "shared",
      "static",
      "auto"
    ],
    "type": "combo",
    "description": "Default library type for both_libraries"
  },
  {
    "name": "install_umask",
    "value": 18,
    "section": "core",
    "machine": "any",
    "type": "integer",
    "description": "Default umask to apply on permissions of installed files"
  },
  {
    "name": "layout",
    "value": "mirror",
    "section": "core",
    "machine": "any",
    "choices": [
      "mirror",
      "flat"
    ],
    "type": "combo",
    "description": "Build directory layout"
  },
  {
    "name": "optimization",
    "value": "2",
    "section": "core",
    "machine": "any",
    "choices": [
      "plain",
      "0",
      "g",
      "1",
      "2",
      "3",
      "s"
    ],
    "type": "combo",
    "description": "Optimization level"
  },
  {
    "name": "prefer_static",
    "value": false,
    "section": "core",
    "machine": "any",
    "type": "boolean",
    "description": "Whether to try static linking before shared linking"
  },
  {
    "name": "strip",
    "value": false,
    "section": "core",
    "machine": "any",
    "type": "boolean",
    "description": "Strip targets on install"
  },
  {
    "name": "unity",
    "value": "off",
    "section": "core",
    "machine": "any",
    "choices": [
      "on",
      "off",
      "subprojects"
    ],
    "type": "combo",
    "description": "Unity build"
  },
  {
    "name": "unity_size",
    "value": 4,
    "section": "core",
    "machine": "any",
    "type": "integer",
    "description": "Unity block size"
  },
  {
    "name": "warning_level",
    "value": "1",
    "section": "core",
    "machine": "any",
    "choices": [
      "0",
      "1",
      "2",
      "3",
      "everything"
    ],
    "type": "combo",
    "description": "Compiler warning level to use"
  },
  {
    "name": "werror",
    "value": false,
    "section": "core",
    "machine": "any",
    "type": "boolean",
    "description": "Treat warnings as errors"
  },
  {
    "name": "wrap_mode",
    "value": "default",
    "section": "core",
    "machine": "any",
    "choices": [
      "default",
      "nofallback",
      "nodownload",
      "forcefallback",
      "nopromote"
    ],
    "type": "combo",
    "description": "Wrap mode"
  },
  {
    "name": "force_fallback_for",
    "value": [],
    "section": "core",
    "machine": "any",
    "type": "array",
    "description": "Force fallback for those subprojects"
  },
  {
    "name": "vsenv",
    "value": false,
    "section": "core",
    "machine": "any",
    "type": "boolean",
    "description": "Activate Visual Studio environment"
  },
  {
    "name": "pkgconfig.relocatable",
    "value": false,
    "section": "core",
    "machine": "any",
    "type": "boolean",
    "description": "Generate pkgconfig files as relocatable"
  },
  {
    "name": "python.bytecompile",
    "value": 0,
    "section": "core",
    "machine": "any",
    "type": "integer",
    "description": "Whether to compile bytecode"
  },
  {
    "name": "python.install_env",
    "value": "prefix",
    "section": "core",
    "machine": "any",
    "choices": [
      "auto",
      "prefix",
      "system",
      "venv"
    ],
    "type": "combo",
    "description": "Which python environment to install to"
  },
  {
    "name": "python.platlibdir",
    "value": "",
    "section": "core",
    "machine": "any",
    "type": "string",
    "description": "Directory for site-specific, platform-specific files."
  },
  {
    "name": "python.purelibdir",
    "value": "",
    "section": "core",
    "machine": "any",
    "type": "string",
    "description": "Directory for site-specific, non-platform-specific files."
  },
  {
    "name": "python.allow_limited_api",
    "value": true,
    "section": "core",
    "machine": "any",
    "type": "boolean",
    "description": "Whether to allow use of the Python Limited API"
  },
  {
    "name": "pkg_config_path",
    "value": [],
    "section": "core",
    "machine": "host",
    "type": "array",
    "description": "List of additional paths for pkg-config to search"
  },
  {
    "name": "cmake_prefix_path",
    "value": [],
    "section": "core",
    "machine": "host",
    "type": "array",
    "description": "List of additional prefixes for cmake to search"
  },
  {
    "name": "backend_max_links",
    "value": 0,
    "section": "backend",
    "machine": "any",
    "type": "integer",
    "description": "Maximum number of linker processes to run or 0 for no limit"
  },
  {
    "name": "b_colorout",
    "value": "always",
    "section": "base",
    "machine": "any",
    "choices": [
      "auto",
      "always",
      "never"
    ],
    "type": "combo",
    "description": "Use colored output"
  },
  {
    "name": "b_pie",
    "value": false,
    "section": "base",
    "machine": "any",
    "type": "boolean",
    "description": "Build executables as position independent"
  },
  {
    "name": "b_pgo",
    "value": "off",
    "section": "base",
    "machine": "any",
    "choices": [
      "off",
      "generate",
      "use"
    ],
    "type": "combo",
    "description": "Use profile guided optimization"
  },
  {
    "name": "b_ndebug",
    "value": "if-release",
    "section": "base",
    "machine": "any",
    "choices": [
      "true",
      "false",
      "if-release"
    ],
    "type": "combo",
    "description": "Disable asserts"
  },
  {
    "name": "b_lundef",
    "value": true,
    "section": "base",
    "machine": "any",
    "type": "boolean",
    "description": "Use -Wl,--no-undefined when linking"
  },
  {
    "name": "b_staticpic",
    "value": true,
    "section": "base",
    "machine": "any",
    "type": "boolean",
    "description": "Build static libraries as position independent"
  },
  {
    "name": "b_lto_threads",
    "value": 0,
    "section": "base",
    "machine": "any",
    "type": "integer",
    "description": "Use multiple threads for Link Time Optimization"
  },
  {
    "name": "b_pch",
    "value": true,
    "section": "base",
    "machine": "any",
    "type": "boolean",
    "description": "Use precompiled headers"
  },
  {
    "name": "b_lto",
    "value": false,
    "section": "base",
    "machine": "any",
    "type": "boolean",
    "description": "Use link time optimization"
  },
  {
    "name": "b_asneeded",
    "value": true,
    "section": "base",
    "machine": "any",
    "type": "boolean",
    "description": "Use -Wl,--as-needed when linking"
  },
  {
    "name": "b_coverage",
    "value": false,
    "section": "base",
    "machine": "any",
    "type": "boolean",
    "description": "Enable coverage tracking."
  },
  {
    "name": "b_sanitize",
    "value": [],
    "section": "base",
    "machine": "any",
    "type": "array",
    "description": "Code sanitizer to use"
  },
  {
    "name": "c_args",
    "value": [],
    "section": "compiler",
    "machine": "host",
    "type": "array",
    "description": "Extra arguments passed to the c compiler"
  },
  {
    "name": "c_link_args",
    "value": [],
    "section": "compiler",
    "machine": "host",
    "type": "array",
    "description": "Extra arguments passed to the c linker"
  },
  {
    "name": "c_std",
    "value": "c11",
    "section": "compiler",
    "machine": "host",
    "choices": [
      "none",
      "c89",
      "c99",
      "c11",
      "c17",
      "c18",
      "c2x",
      "c23",
      "gnu89",
      "gnu99",
      "gnu11",
      "gnu17",
      "gnu18",
      "gnu2x",
      "gnu23"
    ],
    "type": "combo",
    "description": "c language standard to use"
  },
  {
    "name": "cpp_args",
    "value": [],
    "section": "compiler",
    "machine": "host",
    "type": "array",
    "description": "Extra arguments passed to the cpp compiler"
  },
  {
    "name": "cpp_link_args",
    "value": [],
    "section": "compiler",
    "machine": "host",
    "type": "array",
    "description": "Extra arguments passed to the cpp linker"
  },
  {
    "name": "cpp_std",
    "value": "c++17",
    "section": "compiler",
    "machine": "host",
    "choices": [
      "none",
      "c++98",
      "c++03",
      "c++11",
      "c++14",
      "c++17",
      "c++1z",
      "c++2a",
      "c++20",
      "c++23",
      "c++26",
      "gnu++98",
      "gnu++03",
      "gnu++11",
      "gnu++14",
      "gnu++17",
      "gnu++1z",
      "gnu++2a",
      "gnu++20",
      "gnu++23",
      "gnu++26"
    ],
    "type": "combo",
    "description": "cpp language standard to use"
  },
  {
    "name": "cpp_eh",
    "value": "default",
    "section": "compiler",
    "machine": "host",
    "choices": [
      "none",
      "default",
      "a",
      "s",
      "sc"
    ],
    "type": "combo",
    "description": "C++ exception handling type."
  },
  {
    "name": "cpp_rtti",
    "value": true,
    "section": "compiler",
    "machine": "host",
    "type": "boolean",
    "description": "Enable RTTI"
  },
  {
    "name": "cpp_debugstl",
    "value": false,
    "section": "compiler",
    "machine": "host",
    "type": "boolean",
    "description": "STL debug mode"
  },
  {
    "name": "prefix",
    "value": "/usr/local",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Installation prefix"
  },
  {
    "name": "bindir",
    "value": "bin",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Executable directory"
  },
  {
    "name": "datadir",
    "value": "share",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Data file directory"
  },
  {
    "name": "includedir",
    "value": "/usr/include",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Header file directory"
  },
  {
    "name": "infodir",
    "value": "share/info",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Info page directory"
  },
  {
    "name": "libdir",
    "value": "/usr/lib",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Library directory"
  },
  {
    "name": "licensedir",
    "value": "",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Licenses directory"
  },
  {
    "name": "libexecdir",
    "value": "libexec",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Library executable directory"
  },
  {
    "name": "localedir",
    "value": "share/locale",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Locale data directory"
  },
  {
    "name": "localstatedir",
    "value": "/var/local",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Localstate data directory"
  },
  {
    "name": "mandir",
    "value": "share/man",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Manual page directory"
  },
  {
    "name": "sbindir",
    "value": "sbin",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "System executable directory"
  },
  {
    "name": "sharedstatedir",
    "value": "/var/local/lib",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Architecture-independent data directory"
  },
  {
    "name": "sysconfdir",
    "value": "etc",
    "section": "directory",
    "machine": "any",
    "type": "string",
    "description": "Sysconf data directory"
  },
  {
    "name": "split-debug",
    "value": "disabled",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "split debug information (-gsplit-dwarf compile flag) and debug information in the gdb index format (--gdb-index)"
  },
  {
    "name": "platforms",
    "value": [
      "auto"
    ],
    "section": "user",
    "machine": "any",
    "choices": [
      "auto",
      "x11",
      "wayland",
      "haiku",
      "android",
      "windows",
      "macos"
    ],
    "type": "array",
    "description": "window systems to support. If this is set to `auto`, all platforms applicable will be enabled."
  },
  {
    "name": "egl-native-platform",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "auto",
      "x11",
      "wayland",
      "haiku",
      "android",
      "windows",
      "surfaceless",
      "drm"
    ],
    "type": "combo",
    "description": "the window system EGL assumes for EGL_DEFAULT_DISPLAY"
  },
  {
    "name": "android-stub",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Build against android-stub"
  },
  {
    "name": "android-strict",
    "value": true,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Enable strict Android compliance. Disabling may cause CTS failures or other problems, but allows drivers to expose capabilities that are normally hidden. Default: true"
  },
  {
    "name": "android-libbacktrace",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Use Android's libbacktrace"
  },
  {
    "name": "dri-drivers-path",
    "value": "",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "Location to install dri drivers. Default: $libdir/dri."
  },
  {
    "name": "unversion-libgallium",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Do not include mesa version in libgallium DSO filename. Do not enable unless you know what you are doing. Default: false"
  },
  {
    "name": "expat",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Controls the use of expat. Cannot be disabled if xmlconfig is enabled."
  },
  {
    "name": "gallium-drivers",
    "value": [
      "zink"
    ],
    "section": "user",
    "machine": "any",
    "choices": [
      "all",
      "auto",
      "asahi",
      "crocus",
      "d3d12",
      "etnaviv",
      "freedreno",
      "i915",
      "iris",
      "lima",
      "llvmpipe",
      "nouveau",
      "panfrost",
      "r300",
      "r600",
      "radeonsi",
      "softpipe",
      "svga",
      "tegra",
      "v3d",
      "vc4",
      "virgl",
      "zink"
    ],
    "type": "array",
    "description": "List of gallium drivers to build. If this is set to auto all drivers applicable to the target OS/architecture will be built."
  },
  {
    "name": "gallium-extra-hud",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Enable HUD block/NIC I/O HUD status support"
  },
  {
    "name": "gallium-vdpau",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "enable gallium vdpau frontend."
  },
  {
    "name": "vdpau-libs-path",
    "value": "",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "path to put vdpau libraries. defaults to $libdir/vdpau."
  },
  {
    "name": "gallium-va",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "enable gallium va frontend."
  },
  {
    "name": "va-libs-path",
    "value": "",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "path to put va libraries. defaults to $libdir/dri."
  },
  {
    "name": "gallium-xa",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "enable gallium xa frontend."
  },
  {
    "name": "gallium-nine",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "build gallium \"nine\" Direct3D 9.x frontend."
  },
  {
    "name": "gallium-d3d10umd",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "build gallium D3D10 WDDM UMD frontend."
  },
  {
    "name": "gallium-rusticl",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "build gallium \"rusticl\" OpenCL frontend."
  },
  {
    "name": "gallium-rusticl-enable-drivers",
    "value": [
      "auto",
      "asahi",
      "radeonsi"
    ],
    "section": "user",
    "machine": "any",
    "type": "array",
    "description": "List of gallium drivers for which rusticl will be enabled by default"
  },
  {
    "name": "gallium-wgl-dll-name",
    "value": "libgallium_wgl",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "name of gallium wgl target DLL built for Windows. defaults to libgallium_wgl.dll to match DRI"
  },
  {
    "name": "gallium-d3d10-dll-name",
    "value": "libgallium_d3d10",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "name of gallium d3d10 target DLL built for Windows. defaults to libgallium_d3d10.dll to match DRI"
  },
  {
    "name": "static-libclc",
    "value": [],
    "section": "user",
    "machine": "any",
    "choices": [
      "spirv",
      "spirv64",
      "all"
    ],
    "type": "array",
    "description": "Link libclc SPIR-V statically."
  },
  {
    "name": "d3d-drivers-path",
    "value": "",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "Location of D3D drivers. Default: $libdir/d3d"
  },
  {
    "name": "vulkan-drivers",
    "value": [
      "gfxstream"
    ],
    "section": "user",
    "machine": "any",
    "choices": [
      "auto",
      "amd",
      "broadcom",
      "freedreno",
      "intel",
      "intel_hasvk",
      "panfrost",
      "swrast",
      "virtio",
      "imagination-experimental",
      "microsoft-experimental",
      "nouveau",
      "asahi",
      "gfxstream",
      "all"
    ],
    "type": "array",
    "description": "List of vulkan drivers to build. If this is set to auto all drivers applicable to the target OS/architecture will be built"
  },
  {
    "name": "freedreno-kmds",
    "value": [
      "msm"
    ],
    "section": "user",
    "machine": "any",
    "choices": [
      "msm",
      "kgsl",
      "virtio",
      "wsl"
    ],
    "type": "array",
    "description": "List of kernel-mode drivers to enable for freedreno gallium and vulkan driver"
  },
  {
    "name": "amdgpu-virtio",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "use experimental virtio backend for radeonsi/radv"
  },
  {
    "name": "imagination-srv",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Enable Services backend for Imagination Technologies vulkan driver"
  },
  {
    "name": "shader-cache",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Build with on-disk shader cache support."
  },
  {
    "name": "shader-cache-default",
    "value": true,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "If set to false, the feature is only activated when environment variable MESA_SHADER_CACHE_DISABLE is set to false"
  },
  {
    "name": "shader-cache-max-size",
    "value": "",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "Default value for MESA_SHADER_CACHE_MAX_SIZE enviroment variable. If set, determines the maximum size of the on-disk cache of compiled shader programs, can be overriden by enviroment variable if needed. Should be set to a number optionally followed by ``K``, ``M``, or ``G`` to specify a size in kilobytes, megabytes, or gigabytes. By default, gigabytes will be assumed. And if unset, a maximum size of 1GB will be used."
  },
  {
    "name": "vulkan-icd-dir",
    "value": "",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "Location relative to prefix to put vulkan icds on install. Default: $datadir/vulkan/icd.d"
  },
  {
    "name": "moltenvk-dir",
    "value": "",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "Location of the MoltenVk SDK. Default: "
  },
  {
    "name": "vulkan-layers",
    "value": [],
    "section": "user",
    "machine": "any",
    "choices": [
      "device-select",
      "intel-nullhw",
      "overlay",
      "screenshot",
      "vram-report-limit"
    ],
    "type": "array",
    "description": "List of vulkan layers to build"
  },
  {
    "name": "shared-glapi",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Does nothing, left here for a while to avoid build breakages."
  },
  {
    "name": "gles1",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Build support for OpenGL ES 1.x"
  },
  {
    "name": "gles2",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Build support for OpenGL ES 2.x and 3.x"
  },
  {
    "name": "opengl",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Build support for desktop OpenGL"
  },
  {
    "name": "gbm",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Build support for gbm platform"
  },
  {
    "name": "libgbm-external",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Whether to use external libgbm (default: use in-tree copy)"
  },
  {
    "name": "gbm-backends-path",
    "value": "",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "Locations to search for gbm backends, passed as colon separated list. Default: $libdir/gbm."
  },
  {
    "name": "glx",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "auto",
      "disabled",
      "dri",
      "xlib"
    ],
    "type": "combo",
    "description": "Build support for GLX platform"
  },
  {
    "name": "egl",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Build support for EGL platform"
  },
  {
    "name": "glvnd",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Enable GLVND support."
  },
  {
    "name": "microsoft-clc",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Build support for the Microsoft CLC to DXIL compiler"
  },
  {
    "name": "spirv-to-dxil",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Build support for the SPIR-V to DXIL library"
  },
  {
    "name": "glvnd-vendor-name",
    "value": "mesa",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "Vendor name string to use for glvnd libraries"
  },
  {
    "name": "glx-read-only-text",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Disable writable .text section on x86 (decreases performance)"
  },
  {
    "name": "llvm",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Build with LLVM support."
  },
  {
    "name": "shared-llvm",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Whether to link LLVM shared or statically."
  },
  {
    "name": "draw-use-llvm",
    "value": true,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Whether to use LLVM for the Gallium draw module, if LLVM is included."
  },
  {
    "name": "amd-use-llvm",
    "value": true,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Whether to use LLVM for the AMD drivers, if LLVM is included."
  },
  {
    "name": "llvm-orcjit",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Build llvmpipe with LLVM ORCJIT support. Has no effect when building for architectures without LLVM MCJIT support -- ORCJIT is the only choice on such architectures and will always be enabled."
  },
  {
    "name": "valgrind",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Build with valgrind support"
  },
  {
    "name": "libunwind",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Use libunwind for stack-traces"
  },
  {
    "name": "lmsensors",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Enable HUD lmsensors support."
  },
  {
    "name": "build-tests",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Build unit tests. Currently this will build *all* unit tests except the ACO tests, which may build more than expected."
  },
  {
    "name": "enable-glcpp-tests",
    "value": true,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Build glcpp unit tests. These are flaky on CI."
  },
  {
    "name": "build-radv-tests",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Build RADV tests. These do not require an AMD GPU."
  },
  {
    "name": "build-aco-tests",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Build ACO tests. These require RADV and glslang but not an AMD GPU."
  },
  {
    "name": "install-intel-gpu-tests",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Build and install Intel unit tests which require the GPU. This option is for developers and the Intel CI system only."
  },
  {
    "name": "html-docs",
    "value": "disabled",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Build HTML documentation."
  },
  {
    "name": "html-docs-path",
    "value": "",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "Location to install HTML documentation. Default: $datadir/doc/mesa."
  },
  {
    "name": "selinux",
    "value": true,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Does nothing, left here for a while to avoid build breakages."
  },
  {
    "name": "execmem",
    "value": true,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Does nothing, left here for a while to avoid build breakages."
  },
  {
    "name": "osmesa",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Does nothing, left here for a while to avoid build breakages."
  },
  {
    "name": "tools",
    "value": [],
    "section": "user",
    "machine": "any",
    "choices": [
      "drm-shim",
      "etnaviv",
      "freedreno",
      "glsl",
      "intel",
      "intel-ui",
      "nir",
      "nouveau",
      "lima",
      "panfrost",
      "asahi",
      "imagination",
      "all",
      "dlclose-skip"
    ],
    "type": "array",
    "description": "List of tools to build. (Note: `intel-ui` selects `intel`)"
  },
  {
    "name": "power8",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Does nothing, left here for a while to avoid build breakages."
  },
  {
    "name": "xlib-lease",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Enable VK_EXT_acquire_xlib_display."
  },
  {
    "name": "glx-direct",
    "value": true,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Enable direct rendering in GLX and EGL for DRI"
  },
  {
    "name": "egl-lib-suffix",
    "value": "",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "Suffix to append to EGL library name.  Default: none."
  },
  {
    "name": "gles-lib-suffix",
    "value": "",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "Suffix to append to GLES library names.  Default: none."
  },
  {
    "name": "platform-sdk-version",
    "value": 33,
    "section": "user",
    "machine": "any",
    "type": "integer",
    "description": "Android Platform SDK version. Default: Android13 version."
  },
  {
    "name": "allow-kcmp",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Allow using KCMP_FILE to compare file descriptions. auto = allowed everywhere except on Android"
  },
  {
    "name": "zstd",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Use ZSTD instead of ZLIB in some cases."
  },
  {
    "name": "zlib",
    "value": "enabled",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Use ZLIB to build driver. Default: enabled"
  },
  {
    "name": "sse2",
    "value": true,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "use msse2 flag for x86. Uses sse/sse2 instead of x87. Default: true"
  },
  {
    "name": "perfetto",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Enable performance analysis with Perfetto. Default: false"
  },
  {
    "name": "datasources",
    "value": [
      "auto"
    ],
    "section": "user",
    "machine": "any",
    "choices": [
      "auto",
      "panfrost",
      "intel",
      "freedreno"
    ],
    "type": "array",
    "description": "List of Perfetto datasources to build. If this is set to `auto`, datasources that can not be build are skipped. Default: [`auto`]"
  },
  {
    "name": "teflon",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Enable TensorFlow Lite delegate. Default: false"
  },
  {
    "name": "gpuvis",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Enable tracing markers for gpuvis. Default: false"
  },
  {
    "name": "custom-shader-replacement",
    "value": "",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "Enable a custom shader replacement mechanism. Note that enabling this option requires adding/generating a shader_replacement.h file that can be included (see shaderapi.c)."
  },
  {
    "name": "vmware-mks-stats",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Build gallium VMware/svga driver with mksGuestStats instrumentation."
  },
  {
    "name": "vulkan-beta",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Build vulkan drivers with BETA extensions enabled."
  },
  {
    "name": "intel-clc",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "system",
      "auto"
    ],
    "type": "combo",
    "description": "Build the intel-clc compiler or use a system version."
  },
  {
    "name": "intel-bvh-grl",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Build the BVH structure using GRL."
  },
  {
    "name": "install-intel-clc",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Install the intel-clc compiler (if needed for cross builds)."
  },
  {
    "name": "intel-rt",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Build Ray Tracing on supported hardware."
  },
  {
    "name": "intel-elk",
    "value": true,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Build ELK compiler (used for Gfx8 and earlier). This is required for Crocus and Hasvk, and it is optional for Iris and various developer tools."
  },
  {
    "name": "video-codecs",
    "value": [
      "all_free"
    ],
    "section": "user",
    "machine": "any",
    "choices": [
      "all",
      "all_free",
      "vc1dec",
      "h264dec",
      "h264enc",
      "h265dec",
      "h265enc",
      "av1dec",
      "av1enc",
      "vp9dec"
    ],
    "type": "array",
    "description": "List of codecs to build support for. Distros might want to consult their legal department before enabling these. This is used for all video APIs (vaapi, vdpau, vulkan). Non-patent encumbered codecs will be enabled by default with the all_free default value."
  },
  {
    "name": "gallium-d3d12-video",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "build gallium d3d12 with video support."
  },
  {
    "name": "gallium-d3d12-graphics",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "build gallium d3d12 with graphics pipeline support."
  },
  {
    "name": "radv-build-id",
    "value": "",
    "section": "user",
    "machine": "any",
    "type": "string",
    "description": "Override build id for shader cache keys (hex string). Can be extracted with readelf -x .note.gnu.build-id"
  },
  {
    "name": "min-windows-version",
    "value": 8,
    "section": "user",
    "machine": "any",
    "type": "integer",
    "description": "Minimum Windows version to support. Defaults to Windows 8."
  },
  {
    "name": "xmlconfig",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "disabled",
      "auto"
    ],
    "type": "combo",
    "description": "Build custom xmlconfig (driconf) support. If disabled, the default driconf file is hardcoded into Mesa. Requires expat."
  },
  {
    "name": "legacy-x11",
    "value": [
      "none"
    ],
    "section": "user",
    "machine": "any",
    "choices": [
      "none",
      "dri2"
    ],
    "type": "array",
    "description": "Build legacy X11 support features."
  },
  {
    "name": "mesa-clc",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "system",
      "auto"
    ],
    "type": "combo",
    "description": "Build the mesa-clc compiler or use a system version."
  },
  {
    "name": "install-mesa-clc",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Install the mesa-clc compiler (if needed for cross builds)."
  },
  {
    "name": "mesa-clc-bundle-headers",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "auto"
    ],
    "type": "combo",
    "description": "Bundle the OpenCL headers into the mesa-clc binary (default to bundle if static LLVM is used). Note, it might require rebuilding mesa-clc if opencl-c.h or opencl-c-base.h are changed (e.g. on Clang upgrades)."
  },
  {
    "name": "precomp-compiler",
    "value": "auto",
    "section": "user",
    "machine": "any",
    "choices": [
      "enabled",
      "system",
      "auto"
    ],
    "type": "combo",
    "description": "Build drivers internal shader compilers or use a system version"
  },
  {
    "name": "install-precomp-compiler",
    "value": false,
    "section": "user",
    "machine": "any",
    "type": "boolean",
    "description": "Install the drivers internal shader compilers (if needed for cross builds)."
  },
  {
    "name": "errorlogs",
    "value": true,
    "section": "test",
    "machine": "any",
    "type": "boolean",
    "description": "Whether to print the logs from failing tests"
  },
  {
    "name": "stdsplit",
    "value": true,
    "section": "test",
    "machine": "any",
    "type": "boolean",
    "description": "Split stdout and stderr in test logs"
  }
]